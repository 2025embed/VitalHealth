
CAMERA-LCD_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145d8  34180750  34180750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003510  34194d28  34194d28  00014d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .version      0000000c  34198238  34198238  00018238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  34198244  34198244  00019420  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  34198244  34198244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  3419824c  3419824c  00019420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  3419824c  3419824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  34198250  34198250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000198  341c0000  34198254  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .noncacheable 00000000  341c0198  341c0198  00019420  2**0
                  CONTENTS
 11 .gnu.sgstubs  00000020  34198400  34198400  00019400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .bss          00001844  341c0198  341c0198  0001a198  2**3
                  ALLOC
 13 ._user_heap_stack 00000a04  341c19dc  341c19dc  0001a198  2**0
                  ALLOC
 14 .ARM.attributes 0000003a  00000000  00000000  00019420  2**0
                  CONTENTS, READONLY
 15 .debug_info   000339e0  00000000  00000000  0001945a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000044be  00000000  00000000  0004ce3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b98  00000000  00000000  000512f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002189  00000000  00000000  00053e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0005a99a  00000000  00000000  00056019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000291d6  00000000  00000000  000b09b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0023eb85  00000000  00000000  000d9b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000086  00000000  00000000  0031870e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cc88  00000000  00000000  00318794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000004f  00000000  00000000  0032541c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34180750 <__do_global_dtors_aux>:
34180750:	b510      	push	{r4, lr}
34180752:	4c05      	ldr	r4, [pc, #20]	@ (34180768 <__do_global_dtors_aux+0x18>)
34180754:	7823      	ldrb	r3, [r4, #0]
34180756:	b933      	cbnz	r3, 34180766 <__do_global_dtors_aux+0x16>
34180758:	4b04      	ldr	r3, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x1c>)
3418075a:	b113      	cbz	r3, 34180762 <__do_global_dtors_aux+0x12>
3418075c:	4804      	ldr	r0, [pc, #16]	@ (34180770 <__do_global_dtors_aux+0x20>)
3418075e:	f3af 8000 	nop.w
34180762:	2301      	movs	r3, #1
34180764:	7023      	strb	r3, [r4, #0]
34180766:	bd10      	pop	{r4, pc}
34180768:	341c0198 	.word	0x341c0198
3418076c:	00000000 	.word	0x00000000
34180770:	34194d10 	.word	0x34194d10

34180774 <frame_dummy>:
34180774:	b508      	push	{r3, lr}
34180776:	4b03      	ldr	r3, [pc, #12]	@ (34180784 <frame_dummy+0x10>)
34180778:	b11b      	cbz	r3, 34180782 <frame_dummy+0xe>
3418077a:	4903      	ldr	r1, [pc, #12]	@ (34180788 <frame_dummy+0x14>)
3418077c:	4803      	ldr	r0, [pc, #12]	@ (3418078c <frame_dummy+0x18>)
3418077e:	f3af 8000 	nop.w
34180782:	bd08      	pop	{r3, pc}
34180784:	00000000 	.word	0x00000000
34180788:	341c019c 	.word	0x341c019c
3418078c:	34194d10 	.word	0x34194d10

34180790 <evision_api_st_ae_new>:
34180790:	b510      	push	{r4, lr}
34180792:	4604      	mov	r4, r0
34180794:	b090      	sub	sp, #64	@ 0x40
34180796:	b160      	cbz	r0, 341807b2 <evision_api_st_ae_new+0x22>
34180798:	2300      	movs	r3, #0
3418079a:	4c07      	ldr	r4, [pc, #28]	@ (341807b8 <evision_api_st_ae_new+0x28>)
3418079c:	2140      	movs	r1, #64	@ 0x40
3418079e:	7023      	strb	r3, [r4, #0]
341807a0:	65a0      	str	r0, [r4, #88]	@ 0x58
341807a2:	4b06      	ldr	r3, [pc, #24]	@ (341807bc <evision_api_st_ae_new+0x2c>)
341807a4:	4668      	mov	r0, sp
341807a6:	4a06      	ldr	r2, [pc, #24]	@ (341807c0 <evision_api_st_ae_new+0x30>)
341807a8:	f012 fbd4 	bl	34192f54 <sniprintf>
341807ac:	4668      	mov	r0, sp
341807ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
341807b0:	4798      	blx	r3
341807b2:	4620      	mov	r0, r4
341807b4:	b010      	add	sp, #64	@ 0x40
341807b6:	bd10      	pop	{r4, pc}
341807b8:	341c01b8 	.word	0x341c01b8
341807bc:	34198238 	.word	0x34198238
341807c0:	341957a4 	.word	0x341957a4

341807c4 <evision_api_st_ae_delete>:
341807c4:	2800      	cmp	r0, #0
341807c6:	bf14      	ite	ne
341807c8:	2001      	movne	r0, #1
341807ca:	f04f 30ff 	moveq.w	r0, #4294967295
341807ce:	4770      	bx	lr

341807d0 <sTiPARvPaB>:
341807d0:	2238      	movs	r2, #56	@ 0x38
341807d2:	230a      	movs	r3, #10
341807d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
341807d8:	2364      	movs	r3, #100	@ 0x64
341807da:	222d      	movs	r2, #45	@ 0x2d
341807dc:	2178      	movs	r1, #120	@ 0x78
341807de:	e9c0 3206 	strd	r3, r2, [r0, #24]
341807e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
341807e6:	b530      	push	{r4, r5, lr}
341807e8:	e9c0 1208 	strd	r1, r2, [r0, #32]
341807ec:	f241 7470 	movw	r4, #6000	@ 0x1770
341807f0:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
341807f4:	e9c0 420a 	strd	r4, r2, [r0, #40]	@ 0x28
341807f8:	a50b      	add	r5, pc, #44	@ (adr r5, 34180828 <sTiPARvPaB+0x58>)
341807fa:	e9d5 4500 	ldrd	r4, r5, [r5]
341807fe:	2205      	movs	r2, #5
34180800:	f04f 0c00 	mov.w	ip, #0
34180804:	6502      	str	r2, [r0, #80]	@ 0x50
34180806:	f248 02e8 	movw	r2, #33000	@ 0x80e8
3418080a:	e9c0 c210 	strd	ip, r2, [r0, #64]	@ 0x40
3418080e:	2201      	movs	r2, #1
34180810:	e9c0 450c 	strd	r4, r5, [r0, #48]	@ 0x30
34180814:	a506      	add	r5, pc, #24	@ (adr r5, 34180830 <sTiPARvPaB+0x60>)
34180816:	e9d5 4500 	ldrd	r4, r5, [r5]
3418081a:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
3418081e:	e9c0 450e 	strd	r4, r5, [r0, #56]	@ 0x38
34180822:	bd30      	pop	{r4, r5, pc}
34180824:	f3af 8000 	nop.w
34180828:	40000000 	.word	0x40000000
3418082c:	3f947ae1 	.word	0x3f947ae1
34180830:	e0000000 	.word	0xe0000000
34180834:	3f70624d 	.word	0x3f70624d

34180838 <evision_api_st_ae_init>:
34180838:	b510      	push	{r4, lr}
3418083a:	4604      	mov	r4, r0
3418083c:	b120      	cbz	r0, 34180848 <evision_api_st_ae_init+0x10>
3418083e:	f7ff ffc7 	bl	341807d0 <sTiPARvPaB>
34180842:	2001      	movs	r0, #1
34180844:	7020      	strb	r0, [r4, #0]
34180846:	bd10      	pop	{r4, pc}
34180848:	f04f 30ff 	mov.w	r0, #4294967295
3418084c:	e7fb      	b.n	34180846 <evision_api_st_ae_init+0xe>

3418084e <evision_api_st_ae_process>:
3418084e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34180852:	460e      	mov	r6, r1
34180854:	4604      	mov	r4, r0
34180856:	2800      	cmp	r0, #0
34180858:	f000 80e1 	beq.w	34180a1e <evision_api_st_ae_process+0x1d0>
3418085c:	7801      	ldrb	r1, [r0, #0]
3418085e:	2901      	cmp	r1, #1
34180860:	d10b      	bne.n	3418087a <evision_api_st_ae_process+0x2c>
34180862:	2102      	movs	r1, #2
34180864:	7001      	strb	r1, [r0, #0]
34180866:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
34180868:	e9c4 2601 	strd	r2, r6, [r4, #4]
3418086c:	42b5      	cmp	r5, r6
3418086e:	d208      	bcs.n	34180882 <evision_api_st_ae_process+0x34>
34180870:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34180872:	4291      	cmp	r1, r2
34180874:	d905      	bls.n	34180882 <evision_api_st_ae_process+0x34>
34180876:	60a5      	str	r5, [r4, #8]
34180878:	e04c      	b.n	34180914 <evision_api_st_ae_process+0xc6>
3418087a:	2902      	cmp	r1, #2
3418087c:	d0f3      	beq.n	34180866 <evision_api_st_ae_process+0x18>
3418087e:	2000      	movs	r0, #0
34180880:	e049      	b.n	34180916 <evision_api_st_ae_process+0xc8>
34180882:	f8d4 c010 	ldr.w	ip, [r4, #16]
34180886:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3418088a:	ee07 ca90 	vmov	s15, ip
3418088e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34180892:	ee07 3a90 	vmov	s15, r3
34180896:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3418089a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
3418089e:	ee37 7b05 	vadd.f64	d7, d7, d5
341808a2:	ee86 0b07 	vdiv.f64	d0, d6, d7
341808a6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
341808a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
341808ac:	428b      	cmp	r3, r1
341808ae:	d24b      	bcs.n	34180948 <evision_api_st_ae_process+0xfa>
341808b0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
341808b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
341808b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341808bc:	d444      	bmi.n	34180948 <evision_api_st_ae_process+0xfa>
341808be:	6c61      	ldr	r1, [r4, #68]	@ 0x44
341808c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
341808c4:	428a      	cmp	r2, r1
341808c6:	d220      	bcs.n	3418090a <evision_api_st_ae_process+0xbc>
341808c8:	2a01      	cmp	r2, #1
341808ca:	4613      	mov	r3, r2
341808cc:	bf38      	it	cc
341808ce:	2301      	movcc	r3, #1
341808d0:	ee07 3a90 	vmov	s15, r3
341808d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
341808d8:	ee67 7a80 	vmul.f32	s15, s15, s0
341808dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
341808e0:	ee17 3a90 	vmov	r3, s15
341808e4:	428b      	cmp	r3, r1
341808e6:	bfc1      	itttt	gt
341808e8:	ee07 1a90 	vmovgt	s15, r1
341808ec:	eeb8 6ae7 	vcvtgt.f32.s32	s12, s15
341808f0:	ee07 2a90 	vmovgt	s15, r2
341808f4:	eef8 6a67 	vcvtgt.f32.u32	s13, s15
341808f8:	bfc3      	ittte	gt
341808fa:	eec6 7a26 	vdivgt.f32	s15, s12, s13
341808fe:	460b      	movgt	r3, r1
34180900:	ee80 0a27 	vdivgt.f32	s0, s0, s15
34180904:	eeb0 0a47 	vmovle.f32	s0, s14
34180908:	6063      	str	r3, [r4, #4]
3418090a:	eeb4 0ac7 	vcmpe.f32	s0, s14
3418090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180912:	dc02      	bgt.n	3418091a <evision_api_st_ae_process+0xcc>
34180914:	2001      	movs	r0, #1
34180916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3418091a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3418091e:	f013 fb6f 	bl	34194000 <log10>
34180922:	eeb3 7b04 	vmov.f64	d7, #52	@ 0x41a00000  20.0
34180926:	ee20 0b07 	vmul.f64	d0, d0, d7
3418092a:	ed9f 7b3f 	vldr	d7, [pc, #252]	@ 34180a28 <evision_api_st_ae_process+0x1da>
3418092e:	ee20 0b07 	vmul.f64	d0, d0, d7
34180932:	eebd 0bc0 	vcvt.s32.f64	s0, d0
34180936:	ee10 3a10 	vmov	r3, s0
3418093a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
3418093c:	4433      	add	r3, r6
3418093e:	4293      	cmp	r3, r2
34180940:	bfd4      	ite	le
34180942:	60a3      	strle	r3, [r4, #8]
34180944:	60a2      	strgt	r2, [r4, #8]
34180946:	e7e5      	b.n	34180914 <evision_api_st_ae_process+0xc6>
34180948:	ebac 0703 	sub.w	r7, ip, r3
3418094c:	69e1      	ldr	r1, [r4, #28]
3418094e:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
34180952:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
34180956:	4288      	cmp	r0, r1
34180958:	d847      	bhi.n	341809ea <evision_api_st_ae_process+0x19c>
3418095a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
3418095c:	f8d4 e014 	ldr.w	lr, [r4, #20]
34180960:	69a1      	ldr	r1, [r4, #24]
34180962:	eb0e 080c 	add.w	r8, lr, ip
34180966:	4598      	cmp	r8, r3
34180968:	fb07 f101 	mul.w	r1, r7, r1
3418096c:	d243      	bcs.n	341809f6 <evision_api_st_ae_process+0x1a8>
3418096e:	ee07 0a90 	vmov	s15, r0
34180972:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 34180a30 <evision_api_st_ae_process+0x1e2>
34180976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3418097a:	ee67 7a87 	vmul.f32	s15, s15, s14
3418097e:	ee07 1a10 	vmov	s14, r1
34180982:	eef1 6a67 	vneg.f32	s13, s15
34180986:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
3418098a:	eeb4 7ae6 	vcmpe.f32	s14, s13
3418098e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180992:	d504      	bpl.n	3418099e <evision_api_st_ae_process+0x150>
34180994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34180998:	ee17 3a90 	vmov	r3, s15
3418099c:	4259      	negs	r1, r3
3418099e:	2900      	cmp	r1, #0
341809a0:	d0b8      	beq.n	34180914 <evision_api_st_ae_process+0xc6>
341809a2:	42b5      	cmp	r5, r6
341809a4:	d132      	bne.n	34180a0c <evision_api_st_ae_process+0x1be>
341809a6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
341809a8:	4290      	cmp	r0, r2
341809aa:	d801      	bhi.n	341809b0 <evision_api_st_ae_process+0x162>
341809ac:	2900      	cmp	r1, #0
341809ae:	da2d      	bge.n	34180a0c <evision_api_st_ae_process+0x1be>
341809b0:	fb02 7707 	mla	r7, r2, r7, r7
341809b4:	ee07 2a90 	vmov	s15, r2
341809b8:	ee06 7a90 	vmov	s13, r7
341809bc:	2900      	cmp	r1, #0
341809be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
341809c2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
341809c6:	da1e      	bge.n	34180a06 <evision_api_st_ae_process+0x1b8>
341809c8:	ed94 5b0e 	vldr	d5, [r4, #56]	@ 0x38
341809cc:	eea5 7b06 	vfma.f64	d7, d5, d6
341809d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
341809d4:	ee17 2a10 	vmov	r2, s14
341809d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
341809da:	429a      	cmp	r2, r3
341809dc:	bfb8      	it	lt
341809de:	461a      	movlt	r2, r3
341809e0:	4282      	cmp	r2, r0
341809e2:	bfd4      	ite	le
341809e4:	6062      	strle	r2, [r4, #4]
341809e6:	6060      	strgt	r0, [r4, #4]
341809e8:	e794      	b.n	34180914 <evision_api_st_ae_process+0xc6>
341809ea:	6a21      	ldr	r1, [r4, #32]
341809ec:	4288      	cmp	r0, r1
341809ee:	bf2c      	ite	cs
341809f0:	6ae0      	ldrcs	r0, [r4, #44]	@ 0x2c
341809f2:	6aa0      	ldrcc	r0, [r4, #40]	@ 0x28
341809f4:	e7b2      	b.n	3418095c <evision_api_st_ae_process+0x10e>
341809f6:	ebac 0c0e 	sub.w	ip, ip, lr
341809fa:	459c      	cmp	ip, r3
341809fc:	dd8a      	ble.n	34180914 <evision_api_st_ae_process+0xc6>
341809fe:	4281      	cmp	r1, r0
34180a00:	bfa8      	it	ge
34180a02:	4601      	movge	r1, r0
34180a04:	e7cb      	b.n	3418099e <evision_api_st_ae_process+0x150>
34180a06:	ed94 5b0c 	vldr	d5, [r4, #48]	@ 0x30
34180a0a:	e7df      	b.n	341809cc <evision_api_st_ae_process+0x17e>
34180a0c:	440e      	add	r6, r1
34180a0e:	42b5      	cmp	r5, r6
34180a10:	f73f af31 	bgt.w	34180876 <evision_api_st_ae_process+0x28>
34180a14:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
34180a16:	42b5      	cmp	r5, r6
34180a18:	bfa8      	it	ge
34180a1a:	4635      	movge	r5, r6
34180a1c:	e72b      	b.n	34180876 <evision_api_st_ae_process+0x28>
34180a1e:	f04f 30ff 	mov.w	r0, #4294967295
34180a22:	e778      	b.n	34180916 <evision_api_st_ae_process+0xc8>
34180a24:	f3af 8000 	nop.w
34180a28:	00000000 	.word	0x00000000
34180a2c:	408f4000 	.word	0x408f4000
34180a30:	3f59999a 	.word	0x3f59999a
34180a34:	00000000 	.word	0x00000000

34180a38 <eLGgzyBnqV>:
34180a38:	ed90 5aad 	vldr	s10, [r0, #692]	@ 0x2b4
34180a3c:	b530      	push	{r4, r5, lr}
34180a3e:	ed2d 8b10 	vpush	{d8-d15}
34180a42:	ed90 7ba8 	vldr	d7, [r0, #672]	@ 0x2a0
34180a46:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
34180a4a:	b089      	sub	sp, #36	@ 0x24
34180a4c:	ed8d 7b00 	vstr	d7, [sp]
34180a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180a54:	ed90 7ba4 	vldr	d7, [r0, #656]	@ 0x290
34180a58:	4604      	mov	r4, r0
34180a5a:	ed91 4a01 	vldr	s8, [r1, #4]
34180a5e:	ed91 2a00 	vldr	s4, [r1]
34180a62:	ed91 fb02 	vldr	d15, [r1, #8]
34180a66:	ed91 eb04 	vldr	d14, [r1, #16]
34180a6a:	ed90 3b12 	vldr	d3, [r0, #72]	@ 0x48
34180a6e:	ed90 cbaa 	vldr	d12, [r0, #680]	@ 0x2a8
34180a72:	ed90 bb16 	vldr	d11, [r0, #88]	@ 0x58
34180a76:	ed8d 7b04 	vstr	d7, [sp, #16]
34180a7a:	ed90 6ba6 	vldr	d6, [r0, #664]	@ 0x298
34180a7e:	dc09      	bgt.n	34180a94 <eLGgzyBnqV+0x5c>
34180a80:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
34180a84:	48d6      	ldr	r0, [pc, #856]	@ (34180de0 <eLGgzyBnqV+0x3a8>)
34180a86:	4798      	blx	r3
34180a88:	f04f 30ff 	mov.w	r0, #4294967295
34180a8c:	b009      	add	sp, #36	@ 0x24
34180a8e:	ecbd 8b10 	vpop	{d8-d15}
34180a92:	bd30      	pop	{r4, r5, pc}
34180a94:	eeb8 4b44 	vcvt.f64.u32	d4, s8
34180a98:	ed9f 7bc3 	vldr	d7, [pc, #780]	@ 34180da8 <eLGgzyBnqV+0x370>
34180a9c:	eeb8 2b42 	vcvt.f64.u32	d2, s4
34180aa0:	ee24 7b07 	vmul.f64	d7, d4, d7
34180aa4:	eeb4 7bc2 	vcmpe.f64	d7, d2
34180aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180aac:	dd0f      	ble.n	34180ace <eLGgzyBnqV+0x96>
34180aae:	ed90 7b1c 	vldr	d7, [r0, #112]	@ 0x70
34180ab2:	ed9f 1bbf 	vldr	d1, [pc, #764]	@ 34180db0 <eLGgzyBnqV+0x378>
34180ab6:	ee37 1b01 	vadd.f64	d1, d7, d1
34180aba:	ed9f 7bbf 	vldr	d7, [pc, #764]	@ 34180db8 <eLGgzyBnqV+0x380>
34180abe:	eeb4 1bc7 	vcmpe.f64	d1, d7
34180ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ac6:	fe37 7b01 	vselgt.f64	d7, d7, d1
34180aca:	ed80 7b1c 	vstr	d7, [r0, #112]	@ 0x70
34180ace:	ed9f 7bbc 	vldr	d7, [pc, #752]	@ 34180dc0 <eLGgzyBnqV+0x388>
34180ad2:	ee24 4b07 	vmul.f64	d4, d4, d7
34180ad6:	eeb4 4bc2 	vcmpe.f64	d4, d2
34180ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ade:	d510      	bpl.n	34180b02 <eLGgzyBnqV+0xca>
34180ae0:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
34180ae4:	ed9f 4bb2 	vldr	d4, [pc, #712]	@ 34180db0 <eLGgzyBnqV+0x378>
34180ae8:	ee37 7b44 	vsub.f64	d7, d7, d4
34180aec:	ed9f 4bb6 	vldr	d4, [pc, #728]	@ 34180dc8 <eLGgzyBnqV+0x390>
34180af0:	eeb4 7bc4 	vcmpe.f64	d7, d4
34180af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180af8:	bf58      	it	pl
34180afa:	eeb0 4b47 	vmovpl.f64	d4, d7
34180afe:	ed84 4b1c 	vstr	d4, [r4, #112]	@ 0x70
34180b02:	f894 5050 	ldrb.w	r5, [r4, #80]	@ 0x50
34180b06:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34180b0a:	2d01      	cmp	r5, #1
34180b0c:	d164      	bne.n	34180bd8 <eLGgzyBnqV+0x1a0>
34180b0e:	ed9f 7bb0 	vldr	d7, [pc, #704]	@ 34180dd0 <eLGgzyBnqV+0x398>
34180b12:	ee3f 4b4e 	vsub.f64	d4, d15, d14
34180b16:	ee84 db07 	vdiv.f64	d13, d4, d7
34180b1a:	ee3f 4b0e 	vadd.f64	d4, d15, d14
34180b1e:	ee84 ab07 	vdiv.f64	d10, d4, d7
34180b22:	eeb0 7bcd 	vabs.f64	d7, d13
34180b26:	eeb4 5bc7 	vcmpe.f64	d5, d7
34180b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180b2e:	eeb0 4bca 	vabs.f64	d4, d10
34180b32:	db3c      	blt.n	34180bae <eLGgzyBnqV+0x176>
34180b34:	eeb4 5bc4 	vcmpe.f64	d5, d4
34180b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180b3c:	db37      	blt.n	34180bae <eLGgzyBnqV+0x176>
34180b3e:	2300      	movs	r3, #0
34180b40:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
34180b44:	ee83 9b0c 	vdiv.f64	d9, d3, d12
34180b48:	eebc 9bc9 	vcvt.u32.f64	s18, d9
34180b4c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
34180b50:	ee29 9b0c 	vmul.f64	d9, d9, d12
34180b54:	2200      	movs	r2, #0
34180b56:	eefc 5bc9 	vcvt.u32.f64	s11, d9
34180b5a:	eeb0 8b49 	vmov.f64	d8, d9
34180b5e:	edcd 5a03 	vstr	s11, [sp, #12]
34180b62:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
34180b66:	2b00      	cmp	r3, #0
34180b68:	f000 808c 	beq.w	34180c84 <eLGgzyBnqV+0x24c>
34180b6c:	eef7 0bcb 	vcvt.f32.f64	s1, d11
34180b70:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
34180b74:	ed8d 6b06 	vstr	d6, [sp, #24]
34180b78:	f013 fd3a 	bl	341945f0 <powf>
34180b7c:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
34180b80:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34180b84:	eeb0 5bce 	vabs.f64	d5, d14
34180b88:	ee20 0b07 	vmul.f64	d0, d0, d7
34180b8c:	eeb0 7bcf 	vabs.f64	d7, d15
34180b90:	eeb4 7bc5 	vcmpe.f64	d7, d5
34180b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180b98:	ed9d 6b06 	vldr	d6, [sp, #24]
34180b9c:	dd34      	ble.n	34180c08 <eLGgzyBnqV+0x1d0>
34180b9e:	eeb5 fbc0 	vcmpe.f64	d15, #0.0
34180ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ba6:	d534      	bpl.n	34180c12 <eLGgzyBnqV+0x1da>
34180ba8:	ee39 0b40 	vsub.f64	d0, d9, d0
34180bac:	e033      	b.n	34180c16 <eLGgzyBnqV+0x1de>
34180bae:	eeb4 5bc4 	vcmpe.f64	d5, d4
34180bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180bb6:	d525      	bpl.n	34180c04 <eLGgzyBnqV+0x1cc>
34180bb8:	ee8a 4b0d 	vdiv.f64	d4, d10, d13
34180bbc:	ed94 5aae 	vldr	s10, [r4, #696]	@ 0x2b8
34180bc0:	eeb0 4bc4 	vabs.f64	d4, d4
34180bc4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34180bc8:	eeb4 4bc5 	vcmpe.f64	d4, d5
34180bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180bd0:	bfb4      	ite	lt
34180bd2:	2301      	movlt	r3, #1
34180bd4:	2300      	movge	r3, #0
34180bd6:	e7b5      	b.n	34180b44 <eLGgzyBnqV+0x10c>
34180bd8:	eeb0 7bcf 	vabs.f64	d7, d15
34180bdc:	eeb0 4bce 	vabs.f64	d4, d14
34180be0:	eeb4 4b47 	vcmp.f64	d4, d7
34180be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180be8:	fe34 7b07 	vselgt.f64	d7, d4, d7
34180bec:	eeb4 7bc5 	vcmpe.f64	d7, d5
34180bf0:	ed9f ab79 	vldr	d10, [pc, #484]	@ 34180dd8 <eLGgzyBnqV+0x3a0>
34180bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180bf8:	eeb0 db4a 	vmov.f64	d13, d10
34180bfc:	bf8c      	ite	hi
34180bfe:	2301      	movhi	r3, #1
34180c00:	2300      	movls	r3, #0
34180c02:	e79f      	b.n	34180b44 <eLGgzyBnqV+0x10c>
34180c04:	2301      	movs	r3, #1
34180c06:	e79d      	b.n	34180b44 <eLGgzyBnqV+0x10c>
34180c08:	eeb5 ebc0 	vcmpe.f64	d14, #0.0
34180c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180c10:	d5ca      	bpl.n	34180ba8 <eLGgzyBnqV+0x170>
34180c12:	ee39 0b00 	vadd.f64	d0, d9, d0
34180c16:	ed94 7b3c 	vldr	d7, [r4, #240]	@ 0xf0
34180c1a:	eeb4 7bc0 	vcmpe.f64	d7, d0
34180c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180c22:	d503      	bpl.n	34180c2c <eLGgzyBnqV+0x1f4>
34180c24:	eeb0 bb46 	vmov.f64	d11, d6
34180c28:	eeb0 0b47 	vmov.f64	d0, d7
34180c2c:	ed94 7b3a 	vldr	d7, [r4, #232]	@ 0xe8
34180c30:	eeb4 7bc0 	vcmpe.f64	d7, d0
34180c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180c38:	dd03      	ble.n	34180c42 <eLGgzyBnqV+0x20a>
34180c3a:	eeb0 bb46 	vmov.f64	d11, d6
34180c3e:	eeb0 0b47 	vmov.f64	d0, d7
34180c42:	ee80 8b0c 	vdiv.f64	d8, d0, d12
34180c46:	eebc 8bc8 	vcvt.u32.f64	s16, d8
34180c4a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
34180c4e:	2d01      	cmp	r5, #1
34180c50:	ee2c 8b08 	vmul.f64	d8, d12, d8
34180c54:	d116      	bne.n	34180c84 <eLGgzyBnqV+0x24c>
34180c56:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	@ 0xe0
34180c5a:	2b02      	cmp	r3, #2
34180c5c:	d85f      	bhi.n	34180d1e <eLGgzyBnqV+0x2e6>
34180c5e:	eefc 7bc9 	vcvt.u32.f64	s15, d9
34180c62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34180c66:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
34180c6a:	ed82 7b20 	vstr	d7, [r2, #128]	@ 0x80
34180c6e:	ed82 8b26 	vstr	d8, [r2, #152]	@ 0x98
34180c72:	eb04 1203 	add.w	r2, r4, r3, lsl #4
34180c76:	3301      	adds	r3, #1
34180c78:	ed82 db2c 	vstr	d13, [r2, #176]	@ 0xb0
34180c7c:	ed82 ab2e 	vstr	d10, [r2, #184]	@ 0xb8
34180c80:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
34180c84:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
34180c88:	bb4b      	cbnz	r3, 34180cde <eLGgzyBnqV+0x2a6>
34180c8a:	2210      	movs	r2, #16
34180c8c:	f104 0188 	add.w	r1, r4, #136	@ 0x88
34180c90:	f104 0080 	add.w	r0, r4, #128	@ 0x80
34180c94:	ed8d 6b06 	vstr	d6, [sp, #24]
34180c98:	f012 fa6a 	bl	34193170 <memmove>
34180c9c:	2210      	movs	r2, #16
34180c9e:	f104 01a0 	add.w	r1, r4, #160	@ 0xa0
34180ca2:	f104 0098 	add.w	r0, r4, #152	@ 0x98
34180ca6:	f012 fa63 	bl	34193170 <memmove>
34180caa:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	@ 0xc0
34180cae:	ed84 9b24 	vstr	d9, [r4, #144]	@ 0x90
34180cb2:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
34180cb6:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	@ 0xc8
34180cba:	ed84 8b2a 	vstr	d8, [r4, #168]	@ 0xa8
34180cbe:	e9c4 232e 	strd	r2, r3, [r4, #184]	@ 0xb8
34180cc2:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	@ 0xd0
34180cc6:	ed9d 6b06 	vldr	d6, [sp, #24]
34180cca:	e9c4 2330 	strd	r2, r3, [r4, #192]	@ 0xc0
34180cce:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	@ 0xd8
34180cd2:	ed84 db34 	vstr	d13, [r4, #208]	@ 0xd0
34180cd6:	ed84 ab36 	vstr	d10, [r4, #216]	@ 0xd8
34180cda:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
34180cde:	eefc 7bc8 	vcvt.u32.f64	s15, d8
34180ce2:	ee17 3a90 	vmov	r3, s15
34180ce6:	ed94 7b1a 	vldr	d7, [r4, #104]	@ 0x68
34180cea:	9a03      	ldr	r2, [sp, #12]
34180cec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34180cf0:	4293      	cmp	r3, r2
34180cf2:	bf1c      	itt	ne
34180cf4:	2301      	movne	r3, #1
34180cf6:	f884 3060 	strbne.w	r3, [r4, #96]	@ 0x60
34180cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180cfe:	dd71      	ble.n	34180de4 <eLGgzyBnqV+0x3ac>
34180d00:	2301      	movs	r3, #1
34180d02:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34180d06:	ed9d 7b00 	vldr	d7, [sp]
34180d0a:	eeb4 bbc7 	vcmpe.f64	d11, d7
34180d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180d12:	d579      	bpl.n	34180e08 <eLGgzyBnqV+0x3d0>
34180d14:	ed9d 7b04 	vldr	d7, [sp, #16]
34180d18:	ee3b 6b07 	vadd.f64	d6, d11, d7
34180d1c:	e066      	b.n	34180dec <eLGgzyBnqV+0x3b4>
34180d1e:	ed94 7b2a 	vldr	d7, [r4, #168]	@ 0xa8
34180d22:	ed94 5aaf 	vldr	s10, [r4, #700]	@ 0x2bc
34180d26:	ee38 7b47 	vsub.f64	d7, d8, d7
34180d2a:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34180d2e:	eeb0 7bc7 	vabs.f64	d7, d7
34180d32:	eeb4 7bc5 	vcmpe.f64	d7, d5
34180d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180d3a:	db2c      	blt.n	34180d96 <eLGgzyBnqV+0x35e>
34180d3c:	ed94 7b28 	vldr	d7, [r4, #160]	@ 0xa0
34180d40:	ee38 7b47 	vsub.f64	d7, d8, d7
34180d44:	eeb0 7bc7 	vabs.f64	d7, d7
34180d48:	eeb4 5bc7 	vcmpe.f64	d5, d7
34180d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180d50:	dd21      	ble.n	34180d96 <eLGgzyBnqV+0x35e>
34180d52:	ed94 0b32 	vldr	d0, [r4, #200]	@ 0xc8
34180d56:	ed94 7b30 	vldr	d7, [r4, #192]	@ 0xc0
34180d5a:	ee3a 0b40 	vsub.f64	d0, d10, d0
34180d5e:	ee3d 7b47 	vsub.f64	d7, d13, d7
34180d62:	ee20 0b00 	vmul.f64	d0, d0, d0
34180d66:	eea7 0b07 	vfma.f64	d0, d7, d7
34180d6a:	ed8d 6b06 	vstr	d6, [sp, #24]
34180d6e:	f013 f97b 	bl	34194068 <sqrt>
34180d72:	ed94 7ab0 	vldr	s14, [r4, #704]	@ 0x2c0
34180d76:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180d7a:	eeb4 0bc7 	vcmpe.f64	d0, d7
34180d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180d82:	ed9d 6b06 	vldr	d6, [sp, #24]
34180d86:	d506      	bpl.n	34180d96 <eLGgzyBnqV+0x35e>
34180d88:	eefc 7bc9 	vcvt.u32.f64	s15, d9
34180d8c:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
34180d90:	eeb8 8b67 	vcvt.f64.u32	d8, s15
34180d94:	e776      	b.n	34180c84 <eLGgzyBnqV+0x24c>
34180d96:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
34180d9a:	2b01      	cmp	r3, #1
34180d9c:	bf04      	itt	eq
34180d9e:	2300      	moveq	r3, #0
34180da0:	f884 3078 	strbeq.w	r3, [r4, #120]	@ 0x78
34180da4:	e76e      	b.n	34180c84 <eLGgzyBnqV+0x24c>
34180da6:	bf00      	nop
34180da8:	9999999a 	.word	0x9999999a
34180dac:	3fa99999 	.word	0x3fa99999
34180db0:	47ae147b 	.word	0x47ae147b
34180db4:	3f847ae1 	.word	0x3f847ae1
34180db8:	33333334 	.word	0x33333334
34180dbc:	3fc33333 	.word	0x3fc33333
34180dc0:	33333333 	.word	0x33333333
34180dc4:	3fc33333 	.word	0x3fc33333
34180dc8:	11111111 	.word	0x11111111
34180dcc:	3fb11111 	.word	0x3fb11111
34180dd0:	667f3bcd 	.word	0x667f3bcd
34180dd4:	3ff6a09e 	.word	0x3ff6a09e
	...
34180de0:	341957b6 	.word	0x341957b6
34180de4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
34180de8:	2b00      	cmp	r3, #0
34180dea:	d18c      	bne.n	34180d06 <eLGgzyBnqV+0x2ce>
34180dec:	ee88 7b0c 	vdiv.f64	d7, d8, d12
34180df0:	eebc 7bc7 	vcvt.u32.f64	s14, d7
34180df4:	eeb8 7b47 	vcvt.f64.u32	d7, s14
34180df8:	ee27 7b0c 	vmul.f64	d7, d7, d12
34180dfc:	ed84 6b16 	vstr	d6, [r4, #88]	@ 0x58
34180e00:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
34180e04:	2001      	movs	r0, #1
34180e06:	e641      	b.n	34180a8c <eLGgzyBnqV+0x54>
34180e08:	ed9d 6b00 	vldr	d6, [sp]
34180e0c:	e7ee      	b.n	34180dec <eLGgzyBnqV+0x3b4>

34180e0e <FLXvKtIdpl>:
34180e0e:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
34180e12:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34180e16:	ed90 4b12 	vldr	d4, [r0, #72]	@ 0x48
34180e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180e1e:	ed90 5baa 	vldr	d5, [r0, #680]	@ 0x2a8
34180e22:	eeb0 7b46 	vmov.f64	d7, d6
34180e26:	bfdf      	itttt	le
34180e28:	ee84 7b05 	vdivle.f64	d7, d4, d5
34180e2c:	eebc 7bc7 	vcvtle.u32.f64	s14, d7
34180e30:	eeb8 7b47 	vcvtle.f64.u32	d7, s14
34180e34:	ee27 7b05 	vmulle.f64	d7, d7, d5
34180e38:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
34180e3c:	ed90 5b3c 	vldr	d5, [r0, #240]	@ 0xf0
34180e40:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34180e44:	eeb4 4bc5 	vcmpe.f64	d4, d5
34180e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180e4c:	bfc8      	it	gt
34180e4e:	eeb7 7bc5 	vcvtgt.f32.f64	s14, d5
34180e52:	ed90 5b3a 	vldr	d5, [r0, #232]	@ 0xe8
34180e56:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34180e5a:	eeb4 4bc5 	vcmpe.f64	d4, d5
34180e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180e62:	bf48      	it	mi
34180e64:	eeb7 7bc5 	vcvtmi.f32.f64	s14, d5
34180e68:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
34180e6c:	f8d0 3274 	ldr.w	r3, [r0, #628]	@ 0x274
34180e70:	b530      	push	{r4, r5, lr}
34180e72:	ed80 5b12 	vstr	d5, [r0, #72]	@ 0x48
34180e76:	ed93 5a00 	vldr	s10, [r3]
34180e7a:	edd0 7aac 	vldr	s15, [r0, #688]	@ 0x2b0
34180e7e:	eeb4 5ac7 	vcmpe.f32	s10, s14
34180e82:	eef1 5a67 	vneg.f32	s11, s15
34180e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180e8a:	f04f 0100 	mov.w	r1, #0
34180e8e:	f8b0 30f8 	ldrh.w	r3, [r0, #248]	@ 0xf8
34180e92:	fe75 7aa7 	vselgt.f32	s15, s11, s15
34180e96:	3b01      	subs	r3, #1
34180e98:	b28a      	uxth	r2, r1
34180e9a:	4293      	cmp	r3, r2
34180e9c:	d805      	bhi.n	34180eaa <FLXvKtIdpl+0x9c>
34180e9e:	2244      	movs	r2, #68	@ 0x44
34180ea0:	fb02 0303 	mla	r3, r2, r3, r0
34180ea4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
34180ea8:	e011      	b.n	34180ece <FLXvKtIdpl+0xc0>
34180eaa:	eb00 0482 	add.w	r4, r0, r2, lsl #2
34180eae:	edd4 5a44 	vldr	s11, [r4, #272]	@ 0x110
34180eb2:	ee77 5aa5 	vadd.f32	s11, s15, s11
34180eb6:	eef4 5ac7 	vcmpe.f32	s11, s14
34180eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ebe:	f101 0101 	add.w	r1, r1, #1
34180ec2:	dbe9      	blt.n	34180e98 <FLXvKtIdpl+0x8a>
34180ec4:	2344      	movs	r3, #68	@ 0x44
34180ec6:	fb03 0202 	mla	r2, r3, r2, r0
34180eca:	f502 7390 	add.w	r3, r2, #288	@ 0x120
34180ece:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34180ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ed6:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
34180eda:	dc05      	bgt.n	34180ee8 <FLXvKtIdpl+0xda>
34180edc:	ed93 7a00 	vldr	s14, [r3]
34180ee0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180ee4:	ed80 7b12 	vstr	d7, [r0, #72]	@ 0x48
34180ee8:	685a      	ldr	r2, [r3, #4]
34180eea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
34180eee:	6042      	str	r2, [r0, #4]
34180ef0:	689a      	ldr	r2, [r3, #8]
34180ef2:	f103 0424 	add.w	r4, r3, #36	@ 0x24
34180ef6:	6082      	str	r2, [r0, #8]
34180ef8:	68da      	ldr	r2, [r3, #12]
34180efa:	60c2      	str	r2, [r0, #12]
34180efc:	691a      	ldr	r2, [r3, #16]
34180efe:	6102      	str	r2, [r0, #16]
34180f00:	f100 0238 	add.w	r2, r0, #56	@ 0x38
34180f04:	695d      	ldr	r5, [r3, #20]
34180f06:	330c      	adds	r3, #12
34180f08:	6145      	str	r5, [r0, #20]
34180f0a:	68dd      	ldr	r5, [r3, #12]
34180f0c:	300c      	adds	r0, #12
34180f0e:	60c5      	str	r5, [r0, #12]
34180f10:	691d      	ldr	r5, [r3, #16]
34180f12:	42a3      	cmp	r3, r4
34180f14:	6105      	str	r5, [r0, #16]
34180f16:	f851 5b04 	ldr.w	r5, [r1], #4
34180f1a:	f842 5b04 	str.w	r5, [r2], #4
34180f1e:	d1f1      	bne.n	34180f04 <FLXvKtIdpl+0xf6>
34180f20:	2001      	movs	r0, #1
34180f22:	bd30      	pop	{r4, r5, pc}

34180f24 <evision_api_awb_new>:
34180f24:	b510      	push	{r4, lr}
34180f26:	4604      	mov	r4, r0
34180f28:	b090      	sub	sp, #64	@ 0x40
34180f2a:	b170      	cbz	r0, 34180f4a <evision_api_awb_new+0x26>
34180f2c:	2300      	movs	r3, #0
34180f2e:	4c08      	ldr	r4, [pc, #32]	@ (34180f50 <evision_api_awb_new+0x2c>)
34180f30:	2140      	movs	r1, #64	@ 0x40
34180f32:	7023      	strb	r3, [r4, #0]
34180f34:	f8c4 02c8 	str.w	r0, [r4, #712]	@ 0x2c8
34180f38:	4b06      	ldr	r3, [pc, #24]	@ (34180f54 <evision_api_awb_new+0x30>)
34180f3a:	4668      	mov	r0, sp
34180f3c:	4a06      	ldr	r2, [pc, #24]	@ (34180f58 <evision_api_awb_new+0x34>)
34180f3e:	f012 f809 	bl	34192f54 <sniprintf>
34180f42:	4668      	mov	r0, sp
34180f44:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34180f48:	4798      	blx	r3
34180f4a:	4620      	mov	r0, r4
34180f4c:	b010      	add	sp, #64	@ 0x40
34180f4e:	bd10      	pop	{r4, pc}
34180f50:	341c0218 	.word	0x341c0218
34180f54:	3419823e 	.word	0x3419823e
34180f58:	341957f6 	.word	0x341957f6

34180f5c <evision_api_awb_delete>:
34180f5c:	2800      	cmp	r0, #0
34180f5e:	bf14      	ite	ne
34180f60:	2001      	movne	r0, #1
34180f62:	f04f 30ff 	moveq.w	r0, #4294967295
34180f66:	4770      	bx	lr

34180f68 <evision_api_awb_set_profile>:
34180f68:	ed80 0a00 	vstr	s0, [r0]
34180f6c:	b530      	push	{r4, r5, lr}
34180f6e:	680c      	ldr	r4, [r1, #0]
34180f70:	6044      	str	r4, [r0, #4]
34180f72:	684c      	ldr	r4, [r1, #4]
34180f74:	6084      	str	r4, [r0, #8]
34180f76:	688c      	ldr	r4, [r1, #8]
34180f78:	60c4      	str	r4, [r0, #12]
34180f7a:	68c9      	ldr	r1, [r1, #12]
34180f7c:	f102 0424 	add.w	r4, r2, #36	@ 0x24
34180f80:	6101      	str	r1, [r0, #16]
34180f82:	f100 0138 	add.w	r1, r0, #56	@ 0x38
34180f86:	6815      	ldr	r5, [r2, #0]
34180f88:	320c      	adds	r2, #12
34180f8a:	6145      	str	r5, [r0, #20]
34180f8c:	f852 5c08 	ldr.w	r5, [r2, #-8]
34180f90:	300c      	adds	r0, #12
34180f92:	60c5      	str	r5, [r0, #12]
34180f94:	f852 5c04 	ldr.w	r5, [r2, #-4]
34180f98:	42a2      	cmp	r2, r4
34180f9a:	6105      	str	r5, [r0, #16]
34180f9c:	f853 5b04 	ldr.w	r5, [r3], #4
34180fa0:	f841 5b04 	str.w	r5, [r1], #4
34180fa4:	d1ef      	bne.n	34180f86 <evision_api_awb_set_profile+0x1e>
34180fa6:	bd30      	pop	{r4, r5, pc}

34180fa8 <evision_api_awb_init_profiles>:
34180fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34180fac:	ed2d 8b06 	vpush	{d8-d10}
34180fb0:	460e      	mov	r6, r1
34180fb2:	eeb0 9b40 	vmov.f64	d9, d0
34180fb6:	eeb0 8b41 	vmov.f64	d8, d1
34180fba:	461d      	mov	r5, r3
34180fbc:	4604      	mov	r4, r0
34180fbe:	b0c7      	sub	sp, #284	@ 0x11c
34180fc0:	2800      	cmp	r0, #0
34180fc2:	f000 818f 	beq.w	341812e4 <evision_api_awb_init_profiles+0x33c>
34180fc6:	ed9f abcc 	vldr	d10, [pc, #816]	@ 341812f8 <evision_api_awb_init_profiles+0x350>
34180fca:	ed80 ab12 	vstr	d10, [r0, #72]	@ 0x48
34180fce:	2000      	movs	r0, #0
34180fd0:	49cf      	ldr	r1, [pc, #828]	@ (34181310 <evision_api_awb_init_profiles+0x368>)
34180fd2:	f04f 0800 	mov.w	r8, #0
34180fd6:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
34180fda:	e9c4 01a6 	strd	r0, r1, [r4, #664]	@ 0x298
34180fde:	e9c4 01aa 	strd	r0, r1, [r4, #680]	@ 0x2a8
34180fe2:	49cc      	ldr	r1, [pc, #816]	@ (34181314 <evision_api_awb_init_profiles+0x36c>)
34180fe4:	f8df 9360 	ldr.w	r9, [pc, #864]	@ 34181348 <evision_api_awb_init_profiles+0x3a0>
34180fe8:	f8c4 12b0 	str.w	r1, [r4, #688]	@ 0x2b0
34180fec:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
34180ff0:	f8c4 12b4 	str.w	r1, [r4, #692]	@ 0x2b4
34180ff4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
34180ff8:	e9c4 891a 	strd	r8, r9, [r4, #104]	@ 0x68
34180ffc:	f20f 3900 	addw	r9, pc, #768	@ 0x300
34181000:	e9d9 8900 	ldrd	r8, r9, [r9]
34181004:	e9c4 891c 	strd	r8, r9, [r4, #112]	@ 0x70
34181008:	e9c4 89a4 	strd	r8, r9, [r4, #656]	@ 0x290
3418100c:	f04f 0800 	mov.w	r8, #0
34181010:	f8c4 12b8 	str.w	r1, [r4, #696]	@ 0x2b8
34181014:	49c0      	ldr	r1, [pc, #768]	@ (34181318 <evision_api_awb_init_profiles+0x370>)
34181016:	f8df 9334 	ldr.w	r9, [pc, #820]	@ 3418134c <evision_api_awb_init_profiles+0x3a4>
3418101a:	f8c4 12bc 	str.w	r1, [r4, #700]	@ 0x2bc
3418101e:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
34181022:	2300      	movs	r3, #0
34181024:	e9c4 89a8 	strd	r8, r9, [r4, #672]	@ 0x2a0
34181028:	2701      	movs	r7, #1
3418102a:	f04f 0800 	mov.w	r8, #0
3418102e:	f8c4 12c0 	str.w	r1, [r4, #704]	@ 0x2c0
34181032:	1e71      	subs	r1, r6, #1
34181034:	f8df 9318 	ldr.w	r9, [pc, #792]	@ 34181350 <evision_api_awb_init_profiles+0x3a8>
34181038:	b288      	uxth	r0, r1
3418103a:	2804      	cmp	r0, #4
3418103c:	e9c4 89a0 	strd	r8, r9, [r4, #640]	@ 0x280
34181040:	f20f 29c4 	addw	r9, pc, #708	@ 0x2c4
34181044:	e9d9 8900 	ldrd	r8, r9, [r9]
34181048:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
3418104c:	e9c4 89a2 	strd	r8, r9, [r4, #648]	@ 0x288
34181050:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
34181054:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
34181058:	f8a4 7278 	strh.w	r7, [r4, #632]	@ 0x278
3418105c:	d914      	bls.n	34181088 <evision_api_awb_init_profiles+0xe0>
3418105e:	2305      	movs	r3, #5
34181060:	f44f 7180 	mov.w	r1, #256	@ 0x100
34181064:	4aad      	ldr	r2, [pc, #692]	@ (3418131c <evision_api_awb_init_profiles+0x374>)
34181066:	a806      	add	r0, sp, #24
34181068:	f011 ff74 	bl	34192f54 <sniprintf>
3418106c:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34181070:	a806      	add	r0, sp, #24
34181072:	4798      	blx	r3
34181074:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
34181078:	4620      	mov	r0, r4
3418107a:	b047      	add	sp, #284	@ 0x11c
3418107c:	ecbd 8b06 	vpop	{d8-d10}
34181080:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34181084:	f7ff bec3 	b.w	34180e0e <FLXvKtIdpl>
34181088:	ed95 7a00 	vldr	s14, [r5]
3418108c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34181090:	eeb4 0bc7 	vcmpe.f64	d0, d7
34181094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181098:	dd12      	ble.n	341810c0 <evision_api_awb_init_profiles+0x118>
3418109a:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
3418109e:	48a0      	ldr	r0, [pc, #640]	@ (34181320 <evision_api_awb_init_profiles+0x378>)
341810a0:	4798      	blx	r3
341810a2:	ed95 7a00 	vldr	s14, [r5]
341810a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
341810aa:	ed8d 9b00 	vstr	d9, [sp]
341810ae:	ed8d 7b02 	vstr	d7, [sp, #8]
341810b2:	4a9c      	ldr	r2, [pc, #624]	@ (34181324 <evision_api_awb_init_profiles+0x37c>)
341810b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
341810b8:	a806      	add	r0, sp, #24
341810ba:	f011 ff4b 	bl	34192f54 <sniprintf>
341810be:	e7d5      	b.n	3418106c <evision_api_awb_init_profiles+0xc4>
341810c0:	f04f 0c44 	mov.w	ip, #68	@ 0x44
341810c4:	fb0c 5806 	mla	r8, ip, r6, r5
341810c8:	ed18 7a11 	vldr	s14, [r8, #-68]	@ 0xffffffbc
341810cc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
341810d0:	eeb4 1bc7 	vcmpe.f64	d1, d7
341810d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341810d8:	d541      	bpl.n	3418115e <evision_api_awb_init_profiles+0x1b6>
341810da:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
341810de:	4892      	ldr	r0, [pc, #584]	@ (34181328 <evision_api_awb_init_profiles+0x380>)
341810e0:	4798      	blx	r3
341810e2:	ed98 7a00 	vldr	s14, [r8]
341810e6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
341810ea:	ed8d 8b00 	vstr	d8, [sp]
341810ee:	ed8d 7b02 	vstr	d7, [sp, #8]
341810f2:	4a8e      	ldr	r2, [pc, #568]	@ (3418132c <evision_api_awb_init_profiles+0x384>)
341810f4:	e7de      	b.n	341810b4 <evision_api_awb_init_profiles+0x10c>
341810f6:	fb0c f708 	mul.w	r7, ip, r8
341810fa:	eb05 0907 	add.w	r9, r5, r7
341810fe:	3744      	adds	r7, #68	@ 0x44
34181100:	442f      	add	r7, r5
34181102:	ed99 7a00 	vldr	s14, [r9]
34181106:	edd7 7a00 	vldr	s15, [r7]
3418110a:	eeb4 7ae7 	vcmpe.f32	s14, s15
3418110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181112:	f108 0a01 	add.w	sl, r8, #1
34181116:	f100 0001 	add.w	r0, r0, #1
3418111a:	db21      	blt.n	34181160 <evision_api_awb_init_profiles+0x1b8>
3418111c:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34181120:	4883      	ldr	r0, [pc, #524]	@ (34181330 <evision_api_awb_init_profiles+0x388>)
34181122:	4798      	blx	r3
34181124:	ed97 7a00 	vldr	s14, [r7]
34181128:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3418112c:	ed8d 7b04 	vstr	d7, [sp, #16]
34181130:	f8cd a008 	str.w	sl, [sp, #8]
34181134:	ed99 7a00 	vldr	s14, [r9]
34181138:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3418113c:	4643      	mov	r3, r8
3418113e:	ed8d 7b00 	vstr	d7, [sp]
34181142:	4a7c      	ldr	r2, [pc, #496]	@ (34181334 <evision_api_awb_init_profiles+0x38c>)
34181144:	f44f 7180 	mov.w	r1, #256	@ 0x100
34181148:	a806      	add	r0, sp, #24
3418114a:	f011 ff03 	bl	34192f54 <sniprintf>
3418114e:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34181152:	a806      	add	r0, sp, #24
34181154:	4798      	blx	r3
34181156:	2301      	movs	r3, #1
34181158:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
3418115c:	e78c      	b.n	34181078 <evision_api_awb_init_profiles+0xd0>
3418115e:	4618      	mov	r0, r3
34181160:	fa1f f880 	uxth.w	r8, r0
34181164:	4541      	cmp	r1, r8
34181166:	d8c6      	bhi.n	341810f6 <evision_api_awb_init_profiles+0x14e>
34181168:	2300      	movs	r3, #0
3418116a:	f04f 0c44 	mov.w	ip, #68	@ 0x44
3418116e:	1eb0      	subs	r0, r6, #2
34181170:	b29f      	uxth	r7, r3
34181172:	42b9      	cmp	r1, r7
34181174:	d839      	bhi.n	341811ea <evision_api_awb_init_profiles+0x242>
34181176:	ed84 9b3a 	vstr	d9, [r4, #232]	@ 0xe8
3418117a:	ed84 8b3c 	vstr	d8, [r4, #240]	@ 0xf0
3418117e:	2000      	movs	r0, #0
34181180:	f8a4 60f8 	strh.w	r6, [r4, #248]	@ 0xf8
34181184:	b283      	uxth	r3, r0
34181186:	4299      	cmp	r1, r3
34181188:	f100 0001 	add.w	r0, r0, #1
3418118c:	f200 808b 	bhi.w	341812a6 <evision_api_awb_init_profiles+0x2fe>
34181190:	2700      	movs	r7, #0
34181192:	46b8      	mov	r8, r7
34181194:	f104 0afc 	add.w	sl, r4, #252	@ 0xfc
34181198:	f504 7990 	add.w	r9, r4, #288	@ 0x120
3418119c:	eb05 0b07 	add.w	fp, r5, r7
341811a0:	eb09 0007 	add.w	r0, r9, r7
341811a4:	2244      	movs	r2, #68	@ 0x44
341811a6:	4659      	mov	r1, fp
341811a8:	f012 f877 	bl	3419329a <memcpy>
341811ac:	f8db 3000 	ldr.w	r3, [fp]
341811b0:	f108 0801 	add.w	r8, r8, #1
341811b4:	f84a 3b04 	str.w	r3, [sl], #4
341811b8:	fa1f f388 	uxth.w	r3, r8
341811bc:	429e      	cmp	r6, r3
341811be:	f107 0744 	add.w	r7, r7, #68	@ 0x44
341811c2:	d8eb      	bhi.n	3418119c <evision_api_awb_init_profiles+0x1f4>
341811c4:	1e73      	subs	r3, r6, #1
341811c6:	b29b      	uxth	r3, r3
341811c8:	2e00      	cmp	r6, #0
341811ca:	f103 0301 	add.w	r3, r3, #1
341811ce:	bf14      	ite	ne
341811d0:	461a      	movne	r2, r3
341811d2:	2201      	moveq	r2, #1
341811d4:	f8c4 9274 	str.w	r9, [r4, #628]	@ 0x274
341811d8:	f504 71b2 	add.w	r1, r4, #356	@ 0x164
341811dc:	3a01      	subs	r2, #1
341811de:	d16a      	bne.n	341812b6 <evision_api_awb_init_profiles+0x30e>
341811e0:	2301      	movs	r3, #1
341811e2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
341811e6:	7023      	strb	r3, [r4, #0]
341811e8:	e746      	b.n	34181078 <evision_api_awb_init_profiles+0xd0>
341811ea:	eb02 0987 	add.w	r9, r2, r7, lsl #2
341811ee:	42b8      	cmp	r0, r7
341811f0:	edd9 7a00 	vldr	s15, [r9]
341811f4:	ea4f 0887 	mov.w	r8, r7, lsl #2
341811f8:	f107 0a01 	add.w	sl, r7, #1
341811fc:	d91e      	bls.n	3418123c <evision_api_awb_init_profiles+0x294>
341811fe:	f108 0804 	add.w	r8, r8, #4
34181202:	4490      	add	r8, r2
34181204:	ed98 7a00 	vldr	s14, [r8]
34181208:	eeb4 7ae7 	vcmpe.f32	s14, s15
3418120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181210:	d814      	bhi.n	3418123c <evision_api_awb_init_profiles+0x294>
34181212:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34181216:	4848      	ldr	r0, [pc, #288]	@ (34181338 <evision_api_awb_init_profiles+0x390>)
34181218:	4798      	blx	r3
3418121a:	ed98 7a00 	vldr	s14, [r8]
3418121e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34181222:	ed8d 7b04 	vstr	d7, [sp, #16]
34181226:	f8cd a008 	str.w	sl, [sp, #8]
3418122a:	ed99 7a00 	vldr	s14, [r9]
3418122e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34181232:	463b      	mov	r3, r7
34181234:	ed8d 7b00 	vstr	d7, [sp]
34181238:	4a40      	ldr	r2, [pc, #256]	@ (3418133c <evision_api_awb_init_profiles+0x394>)
3418123a:	e783      	b.n	34181144 <evision_api_awb_init_profiles+0x19c>
3418123c:	fb0c f807 	mul.w	r8, ip, r7
34181240:	eb05 0a08 	add.w	sl, r5, r8
34181244:	ed9a 7a00 	vldr	s14, [sl]
34181248:	eeb4 7ae7 	vcmpe.f32	s14, s15
3418124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181250:	f108 0844 	add.w	r8, r8, #68	@ 0x44
34181254:	44a8      	add	r8, r5
34181256:	da08      	bge.n	3418126a <evision_api_awb_init_profiles+0x2c2>
34181258:	ed98 7a00 	vldr	s14, [r8]
3418125c:	eeb4 7ae7 	vcmpe.f32	s14, s15
34181260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181264:	f103 0301 	add.w	r3, r3, #1
34181268:	d882      	bhi.n	34181170 <evision_api_awb_init_profiles+0x1c8>
3418126a:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
3418126e:	4834      	ldr	r0, [pc, #208]	@ (34181340 <evision_api_awb_init_profiles+0x398>)
34181270:	4798      	blx	r3
34181272:	ed98 7a00 	vldr	s14, [r8]
34181276:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3418127a:	ed8d 7b04 	vstr	d7, [sp, #16]
3418127e:	ed9a 7a00 	vldr	s14, [sl]
34181282:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34181286:	ed8d 7b02 	vstr	d7, [sp, #8]
3418128a:	ed99 7a00 	vldr	s14, [r9]
3418128e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34181292:	463b      	mov	r3, r7
34181294:	ed8d 7b00 	vstr	d7, [sp]
34181298:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418129c:	4a29      	ldr	r2, [pc, #164]	@ (34181344 <evision_api_awb_init_profiles+0x39c>)
3418129e:	a806      	add	r0, sp, #24
341812a0:	f011 fe58 	bl	34192f54 <sniprintf>
341812a4:	e753      	b.n	3418114e <evision_api_awb_init_profiles+0x1a6>
341812a6:	eb02 0783 	add.w	r7, r2, r3, lsl #2
341812aa:	683f      	ldr	r7, [r7, #0]
341812ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
341812b0:	f8c3 7110 	str.w	r7, [r3, #272]	@ 0x110
341812b4:	e766      	b.n	34181184 <evision_api_awb_init_profiles+0x1dc>
341812b6:	f8d4 3274 	ldr.w	r3, [r4, #628]	@ 0x274
341812ba:	ed91 6a00 	vldr	s12, [r1]
341812be:	ed93 7a00 	vldr	s14, [r3]
341812c2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
341812c6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
341812ca:	ee36 6b4a 	vsub.f64	d6, d6, d10
341812ce:	ee37 7b4a 	vsub.f64	d7, d7, d10
341812d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
341812d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341812da:	bf48      	it	mi
341812dc:	f8c4 1274 	strmi.w	r1, [r4, #628]	@ 0x274
341812e0:	3144      	adds	r1, #68	@ 0x44
341812e2:	e77b      	b.n	341811dc <evision_api_awb_init_profiles+0x234>
341812e4:	f04f 30ff 	mov.w	r0, #4294967295
341812e8:	b047      	add	sp, #284	@ 0x11c
341812ea:	ecbd 8b06 	vpop	{d8-d10}
341812ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
341812f2:	bf00      	nop
341812f4:	f3af 8000 	nop.w
341812f8:	00000000 	.word	0x00000000
341812fc:	40b38800 	.word	0x40b38800
34181300:	9999999a 	.word	0x9999999a
34181304:	3fb99999 	.word	0x3fb99999
34181308:	00000000 	.word	0x00000000
3418130c:	406ea000 	.word	0x406ea000
34181310:	3ff00000 	.word	0x3ff00000
34181314:	42480000 	.word	0x42480000
34181318:	432f0000 	.word	0x432f0000
3418131c:	34195806 	.word	0x34195806
34181320:	3419584a 	.word	0x3419584a
34181324:	341958d1 	.word	0x341958d1
34181328:	3419592f 	.word	0x3419592f
3418132c:	341959b7 	.word	0x341959b7
34181330:	34195a14 	.word	0x34195a14
34181334:	34195a78 	.word	0x34195a78
34181338:	34195ad0 	.word	0x34195ad0
3418133c:	34195b3f 	.word	0x34195b3f
34181340:	34195ba9 	.word	0x34195ba9
34181344:	34195c00 	.word	0x34195c00
34181348:	bff00000 	.word	0xbff00000
3418134c:	40080000 	.word	0x40080000
34181350:	40240000 	.word	0x40240000

34181354 <evision_api_awb_run_average>:
34181354:	b530      	push	{r4, r5, lr}
34181356:	4605      	mov	r5, r0
34181358:	4614      	mov	r4, r2
3418135a:	b08d      	sub	sp, #52	@ 0x34
3418135c:	b952      	cbnz	r2, 34181374 <evision_api_awb_run_average+0x20>
3418135e:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
34181362:	481d      	ldr	r0, [pc, #116]	@ (341813d8 <evision_api_awb_run_average+0x84>)
34181364:	4798      	blx	r3
34181366:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
3418136a:	481c      	ldr	r0, [pc, #112]	@ (341813dc <evision_api_awb_run_average+0x88>)
3418136c:	4798      	blx	r3
3418136e:	4620      	mov	r0, r4
34181370:	b00d      	add	sp, #52	@ 0x34
34181372:	bd30      	pop	{r4, r5, pc}
34181374:	ed93 2b04 	vldr	d2, [r3, #16]
34181378:	ed93 1b02 	vldr	d1, [r3, #8]
3418137c:	ed93 0b00 	vldr	d0, [r3]
34181380:	aa0a      	add	r2, sp, #40	@ 0x28
34181382:	a908      	add	r1, sp, #32
34181384:	a806      	add	r0, sp, #24
34181386:	f000 f82f 	bl	341813e8 <fzFshUNXje>
3418138a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
3418138e:	e9cd 2302 	strd	r2, r3, [sp, #8]
34181392:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
34181396:	e9cd 2304 	strd	r2, r3, [sp, #16]
3418139a:	2301      	movs	r3, #1
3418139c:	4298      	cmp	r0, r3
3418139e:	4604      	mov	r4, r0
341813a0:	e9cd 3300 	strd	r3, r3, [sp]
341813a4:	d1df      	bne.n	34181366 <evision_api_awb_run_average+0x12>
341813a6:	4669      	mov	r1, sp
341813a8:	4628      	mov	r0, r5
341813aa:	f7ff fb45 	bl	34180a38 <eLGgzyBnqV>
341813ae:	2801      	cmp	r0, #1
341813b0:	4604      	mov	r4, r0
341813b2:	d003      	beq.n	341813bc <evision_api_awb_run_average+0x68>
341813b4:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
341813b8:	4809      	ldr	r0, [pc, #36]	@ (341813e0 <evision_api_awb_run_average+0x8c>)
341813ba:	e7d7      	b.n	3418136c <evision_api_awb_run_average+0x18>
341813bc:	f895 3060 	ldrb.w	r3, [r5, #96]	@ 0x60
341813c0:	2b01      	cmp	r3, #1
341813c2:	d1d4      	bne.n	3418136e <evision_api_awb_run_average+0x1a>
341813c4:	4628      	mov	r0, r5
341813c6:	f7ff fd22 	bl	34180e0e <FLXvKtIdpl>
341813ca:	2801      	cmp	r0, #1
341813cc:	4604      	mov	r4, r0
341813ce:	d0ce      	beq.n	3418136e <evision_api_awb_run_average+0x1a>
341813d0:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
341813d4:	4803      	ldr	r0, [pc, #12]	@ (341813e4 <evision_api_awb_run_average+0x90>)
341813d6:	e7c9      	b.n	3418136c <evision_api_awb_run_average+0x18>
341813d8:	34195c86 	.word	0x34195c86
341813dc:	34195ce7 	.word	0x34195ce7
341813e0:	34195d10 	.word	0x34195d10
341813e4:	34195d44 	.word	0x34195d44

341813e8 <fzFshUNXje>:
341813e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
341813ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341813f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
341813f2:	d409      	bmi.n	34181408 <fzFshUNXje+0x20>
341813f4:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
341813f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341813fc:	d404      	bmi.n	34181408 <fzFshUNXje+0x20>
341813fe:	eeb5 2bc0 	vcmpe.f64	d2, #0.0
34181402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181406:	d50d      	bpl.n	34181424 <fzFshUNXje+0x3c>
34181408:	ed8d 2b02 	vstr	d2, [sp, #8]
3418140c:	ed8d 1b00 	vstr	d1, [sp]
34181410:	ec53 2b10 	vmov	r2, r3, d0
34181414:	4844      	ldr	r0, [pc, #272]	@ (34181528 <fzFshUNXje+0x140>)
34181416:	f011 fd2d 	bl	34192e74 <iprintf>
3418141a:	f04f 30ff 	mov.w	r0, #4294967295
3418141e:	b005      	add	sp, #20
34181420:	f85d fb04 	ldr.w	pc, [sp], #4
34181424:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 341814f0 <fzFshUNXje+0x108>
34181428:	eeb4 0bc7 	vcmpe.f64	d0, d7
3418142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181430:	dc09      	bgt.n	34181446 <fzFshUNXje+0x5e>
34181432:	eeb4 1bc7 	vcmpe.f64	d1, d7
34181436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418143a:	dc04      	bgt.n	34181446 <fzFshUNXje+0x5e>
3418143c:	eeb4 2bc7 	vcmpe.f64	d2, d7
34181440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181444:	dd07      	ble.n	34181456 <fzFshUNXje+0x6e>
34181446:	ed8d 2b02 	vstr	d2, [sp, #8]
3418144a:	ed8d 1b00 	vstr	d1, [sp]
3418144e:	ec53 2b10 	vmov	r2, r3, d0
34181452:	4836      	ldr	r0, [pc, #216]	@ (3418152c <fzFshUNXje+0x144>)
34181454:	e7df      	b.n	34181416 <fzFshUNXje+0x2e>
34181456:	b128      	cbz	r0, 34181464 <fzFshUNXje+0x7c>
34181458:	b189      	cbz	r1, 3418147e <fzFshUNXje+0x96>
3418145a:	b9b2      	cbnz	r2, 3418148a <fzFshUNXje+0xa2>
3418145c:	4934      	ldr	r1, [pc, #208]	@ (34181530 <fzFshUNXje+0x148>)
3418145e:	4b35      	ldr	r3, [pc, #212]	@ (34181534 <fzFshUNXje+0x14c>)
34181460:	4608      	mov	r0, r1
34181462:	e007      	b.n	34181474 <fzFshUNXje+0x8c>
34181464:	b171      	cbz	r1, 34181484 <fzFshUNXje+0x9c>
34181466:	4933      	ldr	r1, [pc, #204]	@ (34181534 <fzFshUNXje+0x14c>)
34181468:	4831      	ldr	r0, [pc, #196]	@ (34181530 <fzFshUNXje+0x148>)
3418146a:	2a00      	cmp	r2, #0
3418146c:	4a30      	ldr	r2, [pc, #192]	@ (34181530 <fzFshUNXje+0x148>)
3418146e:	4b31      	ldr	r3, [pc, #196]	@ (34181534 <fzFshUNXje+0x14c>)
34181470:	bf18      	it	ne
34181472:	4613      	movne	r3, r2
34181474:	4602      	mov	r2, r0
34181476:	4830      	ldr	r0, [pc, #192]	@ (34181538 <fzFshUNXje+0x150>)
34181478:	f011 fcfc 	bl	34192e74 <iprintf>
3418147c:	e7cd      	b.n	3418141a <fzFshUNXje+0x32>
3418147e:	492c      	ldr	r1, [pc, #176]	@ (34181530 <fzFshUNXje+0x148>)
34181480:	482c      	ldr	r0, [pc, #176]	@ (34181534 <fzFshUNXje+0x14c>)
34181482:	e7f2      	b.n	3418146a <fzFshUNXje+0x82>
34181484:	492b      	ldr	r1, [pc, #172]	@ (34181534 <fzFshUNXje+0x14c>)
34181486:	4608      	mov	r0, r1
34181488:	e7ef      	b.n	3418146a <fzFshUNXje+0x82>
3418148a:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 341814f8 <fzFshUNXje+0x110>
3418148e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 34181500 <fzFshUNXje+0x118>
34181492:	ee21 7b07 	vmul.f64	d7, d1, d7
34181496:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
3418149a:	eea0 7b06 	vfma.f64	d7, d0, d6
3418149e:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 34181508 <fzFshUNXje+0x120>
341814a2:	eea2 7b05 	vfma.f64	d7, d2, d5
341814a6:	eea7 5b06 	vfma.f64	d5, d7, d6
341814aa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 34181510 <fzFshUNXje+0x128>
341814ae:	ed80 5b00 	vstr	d5, [r0]
341814b2:	ee27 7b41 	vnmul.f64	d7, d7, d1
341814b6:	eebb 5b0a 	vmov.f64	d5, #186	@ 0xc1d00000 -26.0
341814ba:	eea0 7b05 	vfma.f64	d7, d0, d5
341814be:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 34181518 <fzFshUNXje+0x130>
341814c2:	eea2 7b05 	vfma.f64	d7, d2, d5
341814c6:	ee27 7b06 	vmul.f64	d7, d7, d6
341814ca:	ed81 7b00 	vstr	d7, [r1]
341814ce:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 34181520 <fzFshUNXje+0x138>
341814d2:	ee27 1b41 	vnmul.f64	d1, d7, d1
341814d6:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
341814da:	eea0 1b05 	vfma.f64	d1, d0, d5
341814de:	eea2 1b47 	vfms.f64	d1, d2, d7
341814e2:	ee21 1b06 	vmul.f64	d1, d1, d6
341814e6:	2001      	movs	r0, #1
341814e8:	ed82 1b00 	vstr	d1, [r2]
341814ec:	e797      	b.n	3418141e <fzFshUNXje+0x36>
341814ee:	bf00      	nop
341814f0:	00000000 	.word	0x00000000
341814f4:	406fe000 	.word	0x406fe000
341814f8:	00000000 	.word	0x00000000
341814fc:	4063a000 	.word	0x4063a000
34181500:	00000000 	.word	0x00000000
34181504:	40478000 	.word	0x40478000
34181508:	00000000 	.word	0x00000000
3418150c:	3f700000 	.word	0x3f700000
34181510:	00000000 	.word	0x00000000
34181514:	40558000 	.word	0x40558000
34181518:	00000000 	.word	0x00000000
3418151c:	405c0000 	.word	0x405c0000
34181520:	00000000 	.word	0x00000000
34181524:	40598000 	.word	0x40598000
34181528:	34195d81 	.word	0x34195d81
3418152c:	34195dbf 	.word	0x34195dbf
34181530:	34195d7b 	.word	0x34195d7b
34181534:	34195d79 	.word	0x34195d79
34181538:	34195dff 	.word	0x34195dff

3418153c <__aeabi_ldivmod>:
3418153c:	b97b      	cbnz	r3, 3418155e <__aeabi_ldivmod+0x22>
3418153e:	b972      	cbnz	r2, 3418155e <__aeabi_ldivmod+0x22>
34181540:	2900      	cmp	r1, #0
34181542:	bfbe      	ittt	lt
34181544:	2000      	movlt	r0, #0
34181546:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
3418154a:	e006      	blt.n	3418155a <__aeabi_ldivmod+0x1e>
3418154c:	bf08      	it	eq
3418154e:	2800      	cmpeq	r0, #0
34181550:	bf1c      	itt	ne
34181552:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
34181556:	f04f 30ff 	movne.w	r0, #4294967295
3418155a:	f000 b9fb 	b.w	34181954 <__aeabi_idiv0>
3418155e:	f1ad 0c08 	sub.w	ip, sp, #8
34181562:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34181566:	2900      	cmp	r1, #0
34181568:	db09      	blt.n	3418157e <__aeabi_ldivmod+0x42>
3418156a:	2b00      	cmp	r3, #0
3418156c:	db1a      	blt.n	341815a4 <__aeabi_ldivmod+0x68>
3418156e:	f000 f84d 	bl	3418160c <__udivmoddi4>
34181572:	f8dd e004 	ldr.w	lr, [sp, #4]
34181576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
3418157a:	b004      	add	sp, #16
3418157c:	4770      	bx	lr
3418157e:	4240      	negs	r0, r0
34181580:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34181584:	2b00      	cmp	r3, #0
34181586:	db1b      	blt.n	341815c0 <__aeabi_ldivmod+0x84>
34181588:	f000 f840 	bl	3418160c <__udivmoddi4>
3418158c:	f8dd e004 	ldr.w	lr, [sp, #4]
34181590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34181594:	b004      	add	sp, #16
34181596:	4240      	negs	r0, r0
34181598:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
3418159c:	4252      	negs	r2, r2
3418159e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341815a2:	4770      	bx	lr
341815a4:	4252      	negs	r2, r2
341815a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341815aa:	f000 f82f 	bl	3418160c <__udivmoddi4>
341815ae:	f8dd e004 	ldr.w	lr, [sp, #4]
341815b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341815b6:	b004      	add	sp, #16
341815b8:	4240      	negs	r0, r0
341815ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
341815be:	4770      	bx	lr
341815c0:	4252      	negs	r2, r2
341815c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341815c6:	f000 f821 	bl	3418160c <__udivmoddi4>
341815ca:	f8dd e004 	ldr.w	lr, [sp, #4]
341815ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341815d2:	b004      	add	sp, #16
341815d4:	4252      	negs	r2, r2
341815d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341815da:	4770      	bx	lr

341815dc <__aeabi_uldivmod>:
341815dc:	b953      	cbnz	r3, 341815f4 <__aeabi_uldivmod+0x18>
341815de:	b94a      	cbnz	r2, 341815f4 <__aeabi_uldivmod+0x18>
341815e0:	2900      	cmp	r1, #0
341815e2:	bf08      	it	eq
341815e4:	2800      	cmpeq	r0, #0
341815e6:	bf1c      	itt	ne
341815e8:	f04f 31ff 	movne.w	r1, #4294967295
341815ec:	f04f 30ff 	movne.w	r0, #4294967295
341815f0:	f000 b9b0 	b.w	34181954 <__aeabi_idiv0>
341815f4:	f1ad 0c08 	sub.w	ip, sp, #8
341815f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
341815fc:	f000 f806 	bl	3418160c <__udivmoddi4>
34181600:	f8dd e004 	ldr.w	lr, [sp, #4]
34181604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34181608:	b004      	add	sp, #16
3418160a:	4770      	bx	lr

3418160c <__udivmoddi4>:
3418160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34181610:	9d09      	ldr	r5, [sp, #36]	@ 0x24
34181612:	4688      	mov	r8, r1
34181614:	4604      	mov	r4, r0
34181616:	468e      	mov	lr, r1
34181618:	2b00      	cmp	r3, #0
3418161a:	d14a      	bne.n	341816b2 <__udivmoddi4+0xa6>
3418161c:	428a      	cmp	r2, r1
3418161e:	4617      	mov	r7, r2
34181620:	d95f      	bls.n	341816e2 <__udivmoddi4+0xd6>
34181622:	fab2 f682 	clz	r6, r2
34181626:	b14e      	cbz	r6, 3418163c <__udivmoddi4+0x30>
34181628:	f1c6 0320 	rsb	r3, r6, #32
3418162c:	fa01 fe06 	lsl.w	lr, r1, r6
34181630:	40b7      	lsls	r7, r6
34181632:	40b4      	lsls	r4, r6
34181634:	fa20 f303 	lsr.w	r3, r0, r3
34181638:	ea43 0e0e 	orr.w	lr, r3, lr
3418163c:	ea4f 4817 	mov.w	r8, r7, lsr #16
34181640:	fa1f fc87 	uxth.w	ip, r7
34181644:	0c23      	lsrs	r3, r4, #16
34181646:	fbbe f1f8 	udiv	r1, lr, r8
3418164a:	fb08 ee11 	mls	lr, r8, r1, lr
3418164e:	fb01 f20c 	mul.w	r2, r1, ip
34181652:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34181656:	429a      	cmp	r2, r3
34181658:	d907      	bls.n	3418166a <__udivmoddi4+0x5e>
3418165a:	18fb      	adds	r3, r7, r3
3418165c:	f101 30ff 	add.w	r0, r1, #4294967295
34181660:	d202      	bcs.n	34181668 <__udivmoddi4+0x5c>
34181662:	429a      	cmp	r2, r3
34181664:	f200 8154 	bhi.w	34181910 <__udivmoddi4+0x304>
34181668:	4601      	mov	r1, r0
3418166a:	1a9b      	subs	r3, r3, r2
3418166c:	b2a2      	uxth	r2, r4
3418166e:	fbb3 f0f8 	udiv	r0, r3, r8
34181672:	fb08 3310 	mls	r3, r8, r0, r3
34181676:	fb00 fc0c 	mul.w	ip, r0, ip
3418167a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3418167e:	4594      	cmp	ip, r2
34181680:	d90b      	bls.n	3418169a <__udivmoddi4+0x8e>
34181682:	18ba      	adds	r2, r7, r2
34181684:	f100 33ff 	add.w	r3, r0, #4294967295
34181688:	bf2c      	ite	cs
3418168a:	2401      	movcs	r4, #1
3418168c:	2400      	movcc	r4, #0
3418168e:	4594      	cmp	ip, r2
34181690:	d902      	bls.n	34181698 <__udivmoddi4+0x8c>
34181692:	2c00      	cmp	r4, #0
34181694:	f000 813f 	beq.w	34181916 <__udivmoddi4+0x30a>
34181698:	4618      	mov	r0, r3
3418169a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
3418169e:	eba2 020c 	sub.w	r2, r2, ip
341816a2:	2100      	movs	r1, #0
341816a4:	b11d      	cbz	r5, 341816ae <__udivmoddi4+0xa2>
341816a6:	40f2      	lsrs	r2, r6
341816a8:	2300      	movs	r3, #0
341816aa:	e9c5 2300 	strd	r2, r3, [r5]
341816ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
341816b2:	428b      	cmp	r3, r1
341816b4:	d905      	bls.n	341816c2 <__udivmoddi4+0xb6>
341816b6:	b10d      	cbz	r5, 341816bc <__udivmoddi4+0xb0>
341816b8:	e9c5 0100 	strd	r0, r1, [r5]
341816bc:	2100      	movs	r1, #0
341816be:	4608      	mov	r0, r1
341816c0:	e7f5      	b.n	341816ae <__udivmoddi4+0xa2>
341816c2:	fab3 f183 	clz	r1, r3
341816c6:	2900      	cmp	r1, #0
341816c8:	d14e      	bne.n	34181768 <__udivmoddi4+0x15c>
341816ca:	4543      	cmp	r3, r8
341816cc:	f0c0 8112 	bcc.w	341818f4 <__udivmoddi4+0x2e8>
341816d0:	4282      	cmp	r2, r0
341816d2:	f240 810f 	bls.w	341818f4 <__udivmoddi4+0x2e8>
341816d6:	4608      	mov	r0, r1
341816d8:	2d00      	cmp	r5, #0
341816da:	d0e8      	beq.n	341816ae <__udivmoddi4+0xa2>
341816dc:	e9c5 4e00 	strd	r4, lr, [r5]
341816e0:	e7e5      	b.n	341816ae <__udivmoddi4+0xa2>
341816e2:	2a00      	cmp	r2, #0
341816e4:	f000 80ac 	beq.w	34181840 <__udivmoddi4+0x234>
341816e8:	fab2 f682 	clz	r6, r2
341816ec:	2e00      	cmp	r6, #0
341816ee:	f040 80bb 	bne.w	34181868 <__udivmoddi4+0x25c>
341816f2:	1a8b      	subs	r3, r1, r2
341816f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
341816f8:	b2bc      	uxth	r4, r7
341816fa:	2101      	movs	r1, #1
341816fc:	0c02      	lsrs	r2, r0, #16
341816fe:	b280      	uxth	r0, r0
34181700:	fbb3 fcfe 	udiv	ip, r3, lr
34181704:	fb0e 331c 	mls	r3, lr, ip, r3
34181708:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
3418170c:	fb04 f20c 	mul.w	r2, r4, ip
34181710:	429a      	cmp	r2, r3
34181712:	d90e      	bls.n	34181732 <__udivmoddi4+0x126>
34181714:	18fb      	adds	r3, r7, r3
34181716:	f10c 38ff 	add.w	r8, ip, #4294967295
3418171a:	bf2c      	ite	cs
3418171c:	f04f 0901 	movcs.w	r9, #1
34181720:	f04f 0900 	movcc.w	r9, #0
34181724:	429a      	cmp	r2, r3
34181726:	d903      	bls.n	34181730 <__udivmoddi4+0x124>
34181728:	f1b9 0f00 	cmp.w	r9, #0
3418172c:	f000 80ec 	beq.w	34181908 <__udivmoddi4+0x2fc>
34181730:	46c4      	mov	ip, r8
34181732:	1a9b      	subs	r3, r3, r2
34181734:	fbb3 f8fe 	udiv	r8, r3, lr
34181738:	fb0e 3318 	mls	r3, lr, r8, r3
3418173c:	fb04 f408 	mul.w	r4, r4, r8
34181740:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34181744:	4294      	cmp	r4, r2
34181746:	d90b      	bls.n	34181760 <__udivmoddi4+0x154>
34181748:	18ba      	adds	r2, r7, r2
3418174a:	f108 33ff 	add.w	r3, r8, #4294967295
3418174e:	bf2c      	ite	cs
34181750:	2001      	movcs	r0, #1
34181752:	2000      	movcc	r0, #0
34181754:	4294      	cmp	r4, r2
34181756:	d902      	bls.n	3418175e <__udivmoddi4+0x152>
34181758:	2800      	cmp	r0, #0
3418175a:	f000 80d1 	beq.w	34181900 <__udivmoddi4+0x2f4>
3418175e:	4698      	mov	r8, r3
34181760:	1b12      	subs	r2, r2, r4
34181762:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
34181766:	e79d      	b.n	341816a4 <__udivmoddi4+0x98>
34181768:	f1c1 0620 	rsb	r6, r1, #32
3418176c:	408b      	lsls	r3, r1
3418176e:	fa08 f401 	lsl.w	r4, r8, r1
34181772:	fa00 f901 	lsl.w	r9, r0, r1
34181776:	fa22 f706 	lsr.w	r7, r2, r6
3418177a:	fa28 f806 	lsr.w	r8, r8, r6
3418177e:	408a      	lsls	r2, r1
34181780:	431f      	orrs	r7, r3
34181782:	fa20 f306 	lsr.w	r3, r0, r6
34181786:	0c38      	lsrs	r0, r7, #16
34181788:	4323      	orrs	r3, r4
3418178a:	fa1f fc87 	uxth.w	ip, r7
3418178e:	0c1c      	lsrs	r4, r3, #16
34181790:	fbb8 fef0 	udiv	lr, r8, r0
34181794:	fb00 881e 	mls	r8, r0, lr, r8
34181798:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
3418179c:	fb0e f80c 	mul.w	r8, lr, ip
341817a0:	45a0      	cmp	r8, r4
341817a2:	d90e      	bls.n	341817c2 <__udivmoddi4+0x1b6>
341817a4:	193c      	adds	r4, r7, r4
341817a6:	f10e 3aff 	add.w	sl, lr, #4294967295
341817aa:	bf2c      	ite	cs
341817ac:	f04f 0b01 	movcs.w	fp, #1
341817b0:	f04f 0b00 	movcc.w	fp, #0
341817b4:	45a0      	cmp	r8, r4
341817b6:	d903      	bls.n	341817c0 <__udivmoddi4+0x1b4>
341817b8:	f1bb 0f00 	cmp.w	fp, #0
341817bc:	f000 80b8 	beq.w	34181930 <__udivmoddi4+0x324>
341817c0:	46d6      	mov	lr, sl
341817c2:	eba4 0408 	sub.w	r4, r4, r8
341817c6:	fa1f f883 	uxth.w	r8, r3
341817ca:	fbb4 f3f0 	udiv	r3, r4, r0
341817ce:	fb00 4413 	mls	r4, r0, r3, r4
341817d2:	fb03 fc0c 	mul.w	ip, r3, ip
341817d6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
341817da:	45a4      	cmp	ip, r4
341817dc:	d90e      	bls.n	341817fc <__udivmoddi4+0x1f0>
341817de:	193c      	adds	r4, r7, r4
341817e0:	f103 30ff 	add.w	r0, r3, #4294967295
341817e4:	bf2c      	ite	cs
341817e6:	f04f 0801 	movcs.w	r8, #1
341817ea:	f04f 0800 	movcc.w	r8, #0
341817ee:	45a4      	cmp	ip, r4
341817f0:	d903      	bls.n	341817fa <__udivmoddi4+0x1ee>
341817f2:	f1b8 0f00 	cmp.w	r8, #0
341817f6:	f000 809f 	beq.w	34181938 <__udivmoddi4+0x32c>
341817fa:	4603      	mov	r3, r0
341817fc:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
34181800:	eba4 040c 	sub.w	r4, r4, ip
34181804:	fba0 ec02 	umull	lr, ip, r0, r2
34181808:	4564      	cmp	r4, ip
3418180a:	4673      	mov	r3, lr
3418180c:	46e0      	mov	r8, ip
3418180e:	d302      	bcc.n	34181816 <__udivmoddi4+0x20a>
34181810:	d107      	bne.n	34181822 <__udivmoddi4+0x216>
34181812:	45f1      	cmp	r9, lr
34181814:	d205      	bcs.n	34181822 <__udivmoddi4+0x216>
34181816:	ebbe 0302 	subs.w	r3, lr, r2
3418181a:	eb6c 0c07 	sbc.w	ip, ip, r7
3418181e:	3801      	subs	r0, #1
34181820:	46e0      	mov	r8, ip
34181822:	b15d      	cbz	r5, 3418183c <__udivmoddi4+0x230>
34181824:	ebb9 0203 	subs.w	r2, r9, r3
34181828:	eb64 0408 	sbc.w	r4, r4, r8
3418182c:	fa04 f606 	lsl.w	r6, r4, r6
34181830:	fa22 f301 	lsr.w	r3, r2, r1
34181834:	40cc      	lsrs	r4, r1
34181836:	431e      	orrs	r6, r3
34181838:	e9c5 6400 	strd	r6, r4, [r5]
3418183c:	2100      	movs	r1, #0
3418183e:	e736      	b.n	341816ae <__udivmoddi4+0xa2>
34181840:	fbb1 fcf2 	udiv	ip, r1, r2
34181844:	0c01      	lsrs	r1, r0, #16
34181846:	4614      	mov	r4, r2
34181848:	b280      	uxth	r0, r0
3418184a:	4696      	mov	lr, r2
3418184c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34181850:	2620      	movs	r6, #32
34181852:	4690      	mov	r8, r2
34181854:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34181858:	4610      	mov	r0, r2
3418185a:	fbb1 f1f2 	udiv	r1, r1, r2
3418185e:	eba3 0308 	sub.w	r3, r3, r8
34181862:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34181866:	e74b      	b.n	34181700 <__udivmoddi4+0xf4>
34181868:	40b7      	lsls	r7, r6
3418186a:	f1c6 0320 	rsb	r3, r6, #32
3418186e:	fa01 f206 	lsl.w	r2, r1, r6
34181872:	fa21 f803 	lsr.w	r8, r1, r3
34181876:	ea4f 4e17 	mov.w	lr, r7, lsr #16
3418187a:	fa20 f303 	lsr.w	r3, r0, r3
3418187e:	b2bc      	uxth	r4, r7
34181880:	40b0      	lsls	r0, r6
34181882:	4313      	orrs	r3, r2
34181884:	0c02      	lsrs	r2, r0, #16
34181886:	0c19      	lsrs	r1, r3, #16
34181888:	b280      	uxth	r0, r0
3418188a:	fbb8 f9fe 	udiv	r9, r8, lr
3418188e:	fb0e 8819 	mls	r8, lr, r9, r8
34181892:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34181896:	fb09 f804 	mul.w	r8, r9, r4
3418189a:	4588      	cmp	r8, r1
3418189c:	d951      	bls.n	34181942 <__udivmoddi4+0x336>
3418189e:	1879      	adds	r1, r7, r1
341818a0:	f109 3cff 	add.w	ip, r9, #4294967295
341818a4:	bf2c      	ite	cs
341818a6:	f04f 0a01 	movcs.w	sl, #1
341818aa:	f04f 0a00 	movcc.w	sl, #0
341818ae:	4588      	cmp	r8, r1
341818b0:	d902      	bls.n	341818b8 <__udivmoddi4+0x2ac>
341818b2:	f1ba 0f00 	cmp.w	sl, #0
341818b6:	d031      	beq.n	3418191c <__udivmoddi4+0x310>
341818b8:	eba1 0108 	sub.w	r1, r1, r8
341818bc:	fbb1 f9fe 	udiv	r9, r1, lr
341818c0:	fb09 f804 	mul.w	r8, r9, r4
341818c4:	fb0e 1119 	mls	r1, lr, r9, r1
341818c8:	b29b      	uxth	r3, r3
341818ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341818ce:	4543      	cmp	r3, r8
341818d0:	d235      	bcs.n	3418193e <__udivmoddi4+0x332>
341818d2:	18fb      	adds	r3, r7, r3
341818d4:	f109 31ff 	add.w	r1, r9, #4294967295
341818d8:	bf2c      	ite	cs
341818da:	f04f 0a01 	movcs.w	sl, #1
341818de:	f04f 0a00 	movcc.w	sl, #0
341818e2:	4543      	cmp	r3, r8
341818e4:	d2bb      	bcs.n	3418185e <__udivmoddi4+0x252>
341818e6:	f1ba 0f00 	cmp.w	sl, #0
341818ea:	d1b8      	bne.n	3418185e <__udivmoddi4+0x252>
341818ec:	f1a9 0102 	sub.w	r1, r9, #2
341818f0:	443b      	add	r3, r7
341818f2:	e7b4      	b.n	3418185e <__udivmoddi4+0x252>
341818f4:	1a84      	subs	r4, r0, r2
341818f6:	eb68 0203 	sbc.w	r2, r8, r3
341818fa:	2001      	movs	r0, #1
341818fc:	4696      	mov	lr, r2
341818fe:	e6eb      	b.n	341816d8 <__udivmoddi4+0xcc>
34181900:	443a      	add	r2, r7
34181902:	f1a8 0802 	sub.w	r8, r8, #2
34181906:	e72b      	b.n	34181760 <__udivmoddi4+0x154>
34181908:	f1ac 0c02 	sub.w	ip, ip, #2
3418190c:	443b      	add	r3, r7
3418190e:	e710      	b.n	34181732 <__udivmoddi4+0x126>
34181910:	3902      	subs	r1, #2
34181912:	443b      	add	r3, r7
34181914:	e6a9      	b.n	3418166a <__udivmoddi4+0x5e>
34181916:	443a      	add	r2, r7
34181918:	3802      	subs	r0, #2
3418191a:	e6be      	b.n	3418169a <__udivmoddi4+0x8e>
3418191c:	eba7 0808 	sub.w	r8, r7, r8
34181920:	f1a9 0c02 	sub.w	ip, r9, #2
34181924:	4441      	add	r1, r8
34181926:	fbb1 f9fe 	udiv	r9, r1, lr
3418192a:	fb09 f804 	mul.w	r8, r9, r4
3418192e:	e7c9      	b.n	341818c4 <__udivmoddi4+0x2b8>
34181930:	f1ae 0e02 	sub.w	lr, lr, #2
34181934:	443c      	add	r4, r7
34181936:	e744      	b.n	341817c2 <__udivmoddi4+0x1b6>
34181938:	3b02      	subs	r3, #2
3418193a:	443c      	add	r4, r7
3418193c:	e75e      	b.n	341817fc <__udivmoddi4+0x1f0>
3418193e:	4649      	mov	r1, r9
34181940:	e78d      	b.n	3418185e <__udivmoddi4+0x252>
34181942:	eba1 0108 	sub.w	r1, r1, r8
34181946:	46cc      	mov	ip, r9
34181948:	fbb1 f9fe 	udiv	r9, r1, lr
3418194c:	fb09 f804 	mul.w	r8, r9, r4
34181950:	e7b8      	b.n	341818c4 <__udivmoddi4+0x2b8>
34181952:	bf00      	nop

34181954 <__aeabi_idiv0>:
34181954:	4770      	bx	lr
34181956:	bf00      	nop

34181958 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
34181958:	b480      	push	{r7}
3418195a:	b085      	sub	sp, #20
3418195c:	af00      	add	r7, sp, #0
3418195e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181960:	4a07      	ldr	r2, [pc, #28]	@ (34181980 <LL_AHB4_GRP1_EnableClock+0x28>)
34181962:	687b      	ldr	r3, [r7, #4]
34181964:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34181968:	4b05      	ldr	r3, [pc, #20]	@ (34181980 <LL_AHB4_GRP1_EnableClock+0x28>)
3418196a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3418196e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181970:	68fb      	ldr	r3, [r7, #12]
}
34181972:	bf00      	nop
34181974:	3714      	adds	r7, #20
34181976:	46bd      	mov	sp, r7
34181978:	f85d 7b04 	ldr.w	r7, [sp], #4
3418197c:	4770      	bx	lr
3418197e:	bf00      	nop
34181980:	56028000 	.word	0x56028000

34181984 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
34181984:	b580      	push	{r7, lr}
34181986:	b088      	sub	sp, #32
34181988:	af00      	add	r7, sp, #0
3418198a:	4603      	mov	r3, r0
3418198c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
3418198e:	2300      	movs	r3, #0
34181990:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  switch(Led)
34181992:	79fb      	ldrb	r3, [r7, #7]
34181994:	2b00      	cmp	r3, #0
34181996:	d002      	beq.n	3418199e <BSP_LED_Init+0x1a>
34181998:	2b01      	cmp	r3, #1
3418199a:	d007      	beq.n	341819ac <BSP_LED_Init+0x28>
3418199c:	e00a      	b.n	341819b4 <BSP_LED_Init+0x30>
  {
    case LED1:
      HAL_PWREx_EnableVddIO2();
3418199e:	f008 faad 	bl	34189efc <HAL_PWREx_EnableVddIO2>
      LED1_GPIO_CLK_ENABLE();
341819a2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
341819a6:	f7ff ffd7 	bl	34181958 <LL_AHB4_GRP1_EnableClock>
      break;
341819aa:	e007      	b.n	341819bc <BSP_LED_Init+0x38>

    case LED2:

      LED2_GPIO_CLK_ENABLE();
341819ac:	2040      	movs	r0, #64	@ 0x40
341819ae:	f7ff ffd3 	bl	34181958 <LL_AHB4_GRP1_EnableClock>
      break;
341819b2:	e003      	b.n	341819bc <BSP_LED_Init+0x38>

    default:
      ret = BSP_ERROR_WRONG_PARAM;
341819b4:	f06f 0301 	mvn.w	r3, #1
341819b8:	61fb      	str	r3, [r7, #28]
      break;
341819ba:	bf00      	nop
  }

  if (ret == BSP_ERROR_NONE)
341819bc:	69fb      	ldr	r3, [r7, #28]
341819be:	2b00      	cmp	r3, #0
341819c0:	d118      	bne.n	341819f4 <BSP_LED_Init+0x70>
  {
    /* configure the GPIO_LED pin */
    gpio_init_structure.Pin = LED_PIN [Led];
341819c2:	79fb      	ldrb	r3, [r7, #7]
341819c4:	4a0e      	ldr	r2, [pc, #56]	@ (34181a00 <BSP_LED_Init+0x7c>)
341819c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
341819ca:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
341819cc:	2301      	movs	r3, #1
341819ce:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
341819d0:	2300      	movs	r3, #0
341819d2:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
341819d4:	2303      	movs	r3, #3
341819d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
341819d8:	79fb      	ldrb	r3, [r7, #7]
341819da:	4a0a      	ldr	r2, [pc, #40]	@ (34181a04 <BSP_LED_Init+0x80>)
341819dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
341819e0:	f107 0208 	add.w	r2, r7, #8
341819e4:	4611      	mov	r1, r2
341819e6:	4618      	mov	r0, r3
341819e8:	f005 ff84 	bl	341878f4 <HAL_GPIO_Init>

    /* By default, turn off LED */
    BSP_LED_Off(Led);
341819ec:	79fb      	ldrb	r3, [r7, #7]
341819ee:	4618      	mov	r0, r3
341819f0:	f000 f80a 	bl	34181a08 <BSP_LED_Off>
  }

  return ret;
341819f4:	69fb      	ldr	r3, [r7, #28]
}
341819f6:	4618      	mov	r0, r3
341819f8:	3720      	adds	r7, #32
341819fa:	46bd      	mov	sp, r7
341819fc:	bd80      	pop	{r7, pc}
341819fe:	bf00      	nop
34181a00:	34195158 	.word	0x34195158
34181a04:	341c0000 	.word	0x341c0000

34181a08 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
34181a08:	b580      	push	{r7, lr}
34181a0a:	b082      	sub	sp, #8
34181a0c:	af00      	add	r7, sp, #0
34181a0e:	4603      	mov	r3, r0
34181a10:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
34181a12:	79fb      	ldrb	r3, [r7, #7]
34181a14:	2b00      	cmp	r3, #0
34181a16:	d10d      	bne.n	34181a34 <BSP_LED_Off+0x2c>
  {
    /* LED1 High active */
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
34181a18:	79fb      	ldrb	r3, [r7, #7]
34181a1a:	4a0f      	ldr	r2, [pc, #60]	@ (34181a58 <BSP_LED_Off+0x50>)
34181a1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
34181a20:	79fb      	ldrb	r3, [r7, #7]
34181a22:	4a0e      	ldr	r2, [pc, #56]	@ (34181a5c <BSP_LED_Off+0x54>)
34181a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34181a28:	b29b      	uxth	r3, r3
34181a2a:	2200      	movs	r2, #0
34181a2c:	4619      	mov	r1, r3
34181a2e:	f006 fa53 	bl	34187ed8 <HAL_GPIO_WritePin>
  }else
  {
    /* LED2 Low active */
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
  }
}
34181a32:	e00c      	b.n	34181a4e <BSP_LED_Off+0x46>
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
34181a34:	79fb      	ldrb	r3, [r7, #7]
34181a36:	4a08      	ldr	r2, [pc, #32]	@ (34181a58 <BSP_LED_Off+0x50>)
34181a38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
34181a3c:	79fb      	ldrb	r3, [r7, #7]
34181a3e:	4a07      	ldr	r2, [pc, #28]	@ (34181a5c <BSP_LED_Off+0x54>)
34181a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34181a44:	b29b      	uxth	r3, r3
34181a46:	2201      	movs	r2, #1
34181a48:	4619      	mov	r1, r3
34181a4a:	f006 fa45 	bl	34187ed8 <HAL_GPIO_WritePin>
}
34181a4e:	bf00      	nop
34181a50:	3708      	adds	r7, #8
34181a52:	46bd      	mov	sp, r7
34181a54:	bd80      	pop	{r7, pc}
34181a56:	bf00      	nop
34181a58:	341c0000 	.word	0x341c0000
34181a5c:	34195158 	.word	0x34195158

34181a60 <LL_AHB4_GRP1_EnableClock>:
{
34181a60:	b480      	push	{r7}
34181a62:	b085      	sub	sp, #20
34181a64:	af00      	add	r7, sp, #0
34181a66:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181a68:	4a07      	ldr	r2, [pc, #28]	@ (34181a88 <LL_AHB4_GRP1_EnableClock+0x28>)
34181a6a:	687b      	ldr	r3, [r7, #4]
34181a6c:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34181a70:	4b05      	ldr	r3, [pc, #20]	@ (34181a88 <LL_AHB4_GRP1_EnableClock+0x28>)
34181a72:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34181a76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181a78:	68fb      	ldr	r3, [r7, #12]
}
34181a7a:	bf00      	nop
34181a7c:	3714      	adds	r7, #20
34181a7e:	46bd      	mov	sp, r7
34181a80:	f85d 7b04 	ldr.w	r7, [sp], #4
34181a84:	4770      	bx	lr
34181a86:	bf00      	nop
34181a88:	56028000 	.word	0x56028000

34181a8c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART8
  *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
34181a8c:	b480      	push	{r7}
34181a8e:	b085      	sub	sp, #20
34181a90:	af00      	add	r7, sp, #0
34181a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB1ENSR1, Periphs);
34181a94:	4a07      	ldr	r2, [pc, #28]	@ (34181ab4 <LL_APB1_GRP1_EnableClock+0x28>)
34181a96:	687b      	ldr	r3, [r7, #4]
34181a98:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB1ENR1);
34181a9c:	4b05      	ldr	r3, [pc, #20]	@ (34181ab4 <LL_APB1_GRP1_EnableClock+0x28>)
34181a9e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
34181aa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181aa4:	68fb      	ldr	r3, [r7, #12]
}
34181aa6:	bf00      	nop
34181aa8:	3714      	adds	r7, #20
34181aaa:	46bd      	mov	sp, r7
34181aac:	f85d 7b04 	ldr.w	r7, [sp], #4
34181ab0:	4770      	bx	lr
34181ab2:	bf00      	nop
34181ab4:	56028000 	.word	0x56028000

34181ab8 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART7
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART8
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
34181ab8:	b480      	push	{r7}
34181aba:	b083      	sub	sp, #12
34181abc:	af00      	add	r7, sp, #0
34181abe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1ENCR1, Periphs);
34181ac0:	4b06      	ldr	r3, [pc, #24]	@ (34181adc <LL_APB1_GRP1_DisableClock+0x24>)
34181ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181ac6:	461a      	mov	r2, r3
34181ac8:	687b      	ldr	r3, [r7, #4]
34181aca:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264
}
34181ace:	bf00      	nop
34181ad0:	370c      	adds	r7, #12
34181ad2:	46bd      	mov	sp, r7
34181ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
34181ad8:	4770      	bx	lr
34181ada:	bf00      	nop
34181adc:	56028000 	.word	0x56028000

34181ae0 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART7
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART8
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
34181ae0:	b480      	push	{r7}
34181ae2:	b083      	sub	sp, #12
34181ae4:	af00      	add	r7, sp, #0
34181ae6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1RSTSR1, Periphs);
34181ae8:	4a04      	ldr	r2, [pc, #16]	@ (34181afc <LL_APB1_GRP1_ForceReset+0x1c>)
34181aea:	687b      	ldr	r3, [r7, #4]
34181aec:	f8c2 3a24 	str.w	r3, [r2, #2596]	@ 0xa24
}
34181af0:	bf00      	nop
34181af2:	370c      	adds	r7, #12
34181af4:	46bd      	mov	sp, r7
34181af6:	f85d 7b04 	ldr.w	r7, [sp], #4
34181afa:	4770      	bx	lr
34181afc:	56028000 	.word	0x56028000

34181b00 <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART7
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART8
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
34181b00:	b480      	push	{r7}
34181b02:	b083      	sub	sp, #12
34181b04:	af00      	add	r7, sp, #0
34181b06:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1RSTCR1, Periphs);
34181b08:	4b06      	ldr	r3, [pc, #24]	@ (34181b24 <LL_APB1_GRP1_ReleaseReset+0x24>)
34181b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181b0e:	461a      	mov	r2, r3
34181b10:	687b      	ldr	r3, [r7, #4]
34181b12:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
}
34181b16:	bf00      	nop
34181b18:	370c      	adds	r7, #12
34181b1a:	46bd      	mov	sp, r7
34181b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b20:	4770      	bx	lr
34181b22:	bf00      	nop
34181b24:	56028000 	.word	0x56028000

34181b28 <BSP_I2C1_Init>:
/**
  * @brief  Initializes I2C1 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
34181b28:	b580      	push	{r7, lr}
34181b2a:	b082      	sub	sp, #8
34181b2c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
34181b2e:	2300      	movs	r3, #0
34181b30:	607b      	str	r3, [r7, #4]

  hbus_i2c1.Instance = BUS_I2C1;
34181b32:	4b16      	ldr	r3, [pc, #88]	@ (34181b8c <BSP_I2C1_Init+0x64>)
34181b34:	4a16      	ldr	r2, [pc, #88]	@ (34181b90 <BSP_I2C1_Init+0x68>)
34181b36:	601a      	str	r2, [r3, #0]

  if (I2c1InitCounter == 0U)
34181b38:	4b16      	ldr	r3, [pc, #88]	@ (34181b94 <BSP_I2C1_Init+0x6c>)
34181b3a:	681b      	ldr	r3, [r3, #0]
34181b3c:	2b00      	cmp	r3, #0
34181b3e:	d11f      	bne.n	34181b80 <BSP_I2C1_Init+0x58>
  {
    I2c1InitCounter++;
34181b40:	4b14      	ldr	r3, [pc, #80]	@ (34181b94 <BSP_I2C1_Init+0x6c>)
34181b42:	681b      	ldr	r3, [r3, #0]
34181b44:	3301      	adds	r3, #1
34181b46:	4a13      	ldr	r2, [pc, #76]	@ (34181b94 <BSP_I2C1_Init+0x6c>)
34181b48:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
34181b4a:	4810      	ldr	r0, [pc, #64]	@ (34181b8c <BSP_I2C1_Init+0x64>)
34181b4c:	f006 fce8 	bl	34188520 <HAL_I2C_GetState>
34181b50:	4603      	mov	r3, r0
34181b52:	2b00      	cmp	r3, #0
34181b54:	d114      	bne.n	34181b80 <BSP_I2C1_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C1_MspInit(&hbus_i2c1);
34181b56:	480d      	ldr	r0, [pc, #52]	@ (34181b8c <BSP_I2C1_Init+0x64>)
34181b58:	f000 f8e2 	bl	34181d20 <I2C1_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
34181b5c:	f009 fb76 	bl	3418b24c <HAL_RCC_GetPCLK1Freq>
34181b60:	4603      	mov	r3, r0
34181b62:	490d      	ldr	r1, [pc, #52]	@ (34181b98 <BSP_I2C1_Init+0x70>)
34181b64:	4618      	mov	r0, r3
34181b66:	f000 f991 	bl	34181e8c <I2C_GetTiming>
34181b6a:	4603      	mov	r3, r0
34181b6c:	4619      	mov	r1, r3
34181b6e:	4807      	ldr	r0, [pc, #28]	@ (34181b8c <BSP_I2C1_Init+0x64>)
34181b70:	f000 f838 	bl	34181be4 <MX_I2C1_Init>
34181b74:	4603      	mov	r3, r0
34181b76:	2b00      	cmp	r3, #0
34181b78:	d002      	beq.n	34181b80 <BSP_I2C1_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
34181b7a:	f06f 0307 	mvn.w	r3, #7
34181b7e:	607b      	str	r3, [r7, #4]
      }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 1) */
    }
  }

  return ret;
34181b80:	687b      	ldr	r3, [r7, #4]
}
34181b82:	4618      	mov	r0, r3
34181b84:	3708      	adds	r7, #8
34181b86:	46bd      	mov	sp, r7
34181b88:	bd80      	pop	{r7, pc}
34181b8a:	bf00      	nop
34181b8c:	341c0ef0 	.word	0x341c0ef0
34181b90:	50005400 	.word	0x50005400
34181b94:	341c04e8 	.word	0x341c04e8
34181b98:	000186a0 	.word	0x000186a0

34181b9c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitializes I2C1 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
34181b9c:	b580      	push	{r7, lr}
34181b9e:	b082      	sub	sp, #8
34181ba0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
34181ba2:	2300      	movs	r3, #0
34181ba4:	607b      	str	r3, [r7, #4]

  I2c1InitCounter--;
34181ba6:	4b0d      	ldr	r3, [pc, #52]	@ (34181bdc <BSP_I2C1_DeInit+0x40>)
34181ba8:	681b      	ldr	r3, [r3, #0]
34181baa:	3b01      	subs	r3, #1
34181bac:	4a0b      	ldr	r2, [pc, #44]	@ (34181bdc <BSP_I2C1_DeInit+0x40>)
34181bae:	6013      	str	r3, [r2, #0]

  if (I2c1InitCounter == 0U)
34181bb0:	4b0a      	ldr	r3, [pc, #40]	@ (34181bdc <BSP_I2C1_DeInit+0x40>)
34181bb2:	681b      	ldr	r3, [r3, #0]
34181bb4:	2b00      	cmp	r3, #0
34181bb6:	d10b      	bne.n	34181bd0 <BSP_I2C1_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C1_MspDeInit(&hbus_i2c1);
34181bb8:	4809      	ldr	r0, [pc, #36]	@ (34181be0 <BSP_I2C1_DeInit+0x44>)
34181bba:	f000 f8f3 	bl	34181da4 <I2C1_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
34181bbe:	4808      	ldr	r0, [pc, #32]	@ (34181be0 <BSP_I2C1_DeInit+0x44>)
34181bc0:	f006 fa3d 	bl	3418803e <HAL_I2C_DeInit>
34181bc4:	4603      	mov	r3, r0
34181bc6:	2b00      	cmp	r3, #0
34181bc8:	d002      	beq.n	34181bd0 <BSP_I2C1_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
34181bca:	f06f 0307 	mvn.w	r3, #7
34181bce:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
34181bd0:	687b      	ldr	r3, [r7, #4]
}
34181bd2:	4618      	mov	r0, r3
34181bd4:	3708      	adds	r7, #8
34181bd6:	46bd      	mov	sp, r7
34181bd8:	bd80      	pop	{r7, pc}
34181bda:	bf00      	nop
34181bdc:	341c04e8 	.word	0x341c04e8
34181be0:	341c0ef0 	.word	0x341c0ef0

34181be4 <MX_I2C1_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
34181be4:	b580      	push	{r7, lr}
34181be6:	b084      	sub	sp, #16
34181be8:	af00      	add	r7, sp, #0
34181bea:	6078      	str	r0, [r7, #4]
34181bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
34181bee:	2300      	movs	r3, #0
34181bf0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
34181bf2:	687b      	ldr	r3, [r7, #4]
34181bf4:	683a      	ldr	r2, [r7, #0]
34181bf6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
34181bf8:	687b      	ldr	r3, [r7, #4]
34181bfa:	2200      	movs	r2, #0
34181bfc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
34181bfe:	687b      	ldr	r3, [r7, #4]
34181c00:	2201      	movs	r2, #1
34181c02:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
34181c04:	687b      	ldr	r3, [r7, #4]
34181c06:	2200      	movs	r2, #0
34181c08:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
34181c0a:	687b      	ldr	r3, [r7, #4]
34181c0c:	2200      	movs	r2, #0
34181c0e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
34181c10:	687b      	ldr	r3, [r7, #4]
34181c12:	2200      	movs	r2, #0
34181c14:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
34181c16:	687b      	ldr	r3, [r7, #4]
34181c18:	2200      	movs	r2, #0
34181c1a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
34181c1c:	687b      	ldr	r3, [r7, #4]
34181c1e:	2200      	movs	r2, #0
34181c20:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
34181c22:	6878      	ldr	r0, [r7, #4]
34181c24:	f006 f970 	bl	34187f08 <HAL_I2C_Init>
34181c28:	4603      	mov	r3, r0
34181c2a:	2b00      	cmp	r3, #0
34181c2c:	d002      	beq.n	34181c34 <MX_I2C1_Init+0x50>
  {
    status = HAL_ERROR;
34181c2e:	2301      	movs	r3, #1
34181c30:	73fb      	strb	r3, [r7, #15]
34181c32:	e014      	b.n	34181c5e <MX_I2C1_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
34181c34:	2300      	movs	r3, #0
34181c36:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
34181c38:	68b9      	ldr	r1, [r7, #8]
34181c3a:	6878      	ldr	r0, [r7, #4]
34181c3c:	f006 ff4c 	bl	34188ad8 <HAL_I2CEx_ConfigAnalogFilter>
34181c40:	4603      	mov	r3, r0
34181c42:	2b00      	cmp	r3, #0
34181c44:	d002      	beq.n	34181c4c <MX_I2C1_Init+0x68>
    {
      status = HAL_ERROR;
34181c46:	2301      	movs	r3, #1
34181c48:	73fb      	strb	r3, [r7, #15]
34181c4a:	e008      	b.n	34181c5e <MX_I2C1_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
34181c4c:	2100      	movs	r1, #0
34181c4e:	6878      	ldr	r0, [r7, #4]
34181c50:	f006 ff8d 	bl	34188b6e <HAL_I2CEx_ConfigDigitalFilter>
34181c54:	4603      	mov	r3, r0
34181c56:	2b00      	cmp	r3, #0
34181c58:	d001      	beq.n	34181c5e <MX_I2C1_Init+0x7a>
      {
        status = HAL_ERROR;
34181c5a:	2301      	movs	r3, #1
34181c5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
34181c5e:	7bfb      	ldrb	r3, [r7, #15]
}
34181c60:	4618      	mov	r0, r3
34181c62:	3710      	adds	r7, #16
34181c64:	46bd      	mov	sp, r7
34181c66:	bd80      	pop	{r7, pc}

34181c68 <BSP_I2C1_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
34181c68:	b580      	push	{r7, lr}
34181c6a:	b088      	sub	sp, #32
34181c6c:	af02      	add	r7, sp, #8
34181c6e:	60ba      	str	r2, [r7, #8]
34181c70:	461a      	mov	r2, r3
34181c72:	4603      	mov	r3, r0
34181c74:	81fb      	strh	r3, [r7, #14]
34181c76:	460b      	mov	r3, r1
34181c78:	81bb      	strh	r3, [r7, #12]
34181c7a:	4613      	mov	r3, r2
34181c7c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
34181c7e:	89b9      	ldrh	r1, [r7, #12]
34181c80:	89f8      	ldrh	r0, [r7, #14]
34181c82:	88fb      	ldrh	r3, [r7, #6]
34181c84:	9300      	str	r3, [sp, #0]
34181c86:	68bb      	ldr	r3, [r7, #8]
34181c88:	2202      	movs	r2, #2
34181c8a:	f000 f8ab 	bl	34181de4 <I2C1_WriteReg>
34181c8e:	4603      	mov	r3, r0
34181c90:	2b00      	cmp	r3, #0
34181c92:	d102      	bne.n	34181c9a <BSP_I2C1_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
34181c94:	2300      	movs	r3, #0
34181c96:	617b      	str	r3, [r7, #20]
34181c98:	e00c      	b.n	34181cb4 <BSP_I2C1_WriteReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
34181c9a:	4809      	ldr	r0, [pc, #36]	@ (34181cc0 <BSP_I2C1_WriteReg16+0x58>)
34181c9c:	f006 fc4e 	bl	3418853c <HAL_I2C_GetError>
34181ca0:	4603      	mov	r3, r0
34181ca2:	2b04      	cmp	r3, #4
34181ca4:	d103      	bne.n	34181cae <BSP_I2C1_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
34181ca6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
34181caa:	617b      	str	r3, [r7, #20]
34181cac:	e002      	b.n	34181cb4 <BSP_I2C1_WriteReg16+0x4c>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
34181cae:	f06f 0303 	mvn.w	r3, #3
34181cb2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */
  return ret;
34181cb4:	697b      	ldr	r3, [r7, #20]
}
34181cb6:	4618      	mov	r0, r3
34181cb8:	3718      	adds	r7, #24
34181cba:	46bd      	mov	sp, r7
34181cbc:	bd80      	pop	{r7, pc}
34181cbe:	bf00      	nop
34181cc0:	341c0ef0 	.word	0x341c0ef0

34181cc4 <BSP_I2C1_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
34181cc4:	b580      	push	{r7, lr}
34181cc6:	b088      	sub	sp, #32
34181cc8:	af02      	add	r7, sp, #8
34181cca:	60ba      	str	r2, [r7, #8]
34181ccc:	461a      	mov	r2, r3
34181cce:	4603      	mov	r3, r0
34181cd0:	81fb      	strh	r3, [r7, #14]
34181cd2:	460b      	mov	r3, r1
34181cd4:	81bb      	strh	r3, [r7, #12]
34181cd6:	4613      	mov	r3, r2
34181cd8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
34181cda:	89b9      	ldrh	r1, [r7, #12]
34181cdc:	89f8      	ldrh	r0, [r7, #14]
34181cde:	88fb      	ldrh	r3, [r7, #6]
34181ce0:	9300      	str	r3, [sp, #0]
34181ce2:	68bb      	ldr	r3, [r7, #8]
34181ce4:	2202      	movs	r2, #2
34181ce6:	f000 f8a3 	bl	34181e30 <I2C1_ReadReg>
34181cea:	4603      	mov	r3, r0
34181cec:	2b00      	cmp	r3, #0
34181cee:	d102      	bne.n	34181cf6 <BSP_I2C1_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
34181cf0:	2300      	movs	r3, #0
34181cf2:	617b      	str	r3, [r7, #20]
34181cf4:	e00c      	b.n	34181d10 <BSP_I2C1_ReadReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
34181cf6:	4809      	ldr	r0, [pc, #36]	@ (34181d1c <BSP_I2C1_ReadReg16+0x58>)
34181cf8:	f006 fc20 	bl	3418853c <HAL_I2C_GetError>
34181cfc:	4603      	mov	r3, r0
34181cfe:	2b04      	cmp	r3, #4
34181d00:	d103      	bne.n	34181d0a <BSP_I2C1_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
34181d02:	f06f 0365 	mvn.w	r3, #101	@ 0x65
34181d06:	617b      	str	r3, [r7, #20]
34181d08:	e002      	b.n	34181d10 <BSP_I2C1_ReadReg16+0x4c>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
34181d0a:	f06f 0303 	mvn.w	r3, #3
34181d0e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */
  return ret;
34181d10:	697b      	ldr	r3, [r7, #20]
}
34181d12:	4618      	mov	r0, r3
34181d14:	3718      	adds	r7, #24
34181d16:	46bd      	mov	sp, r7
34181d18:	bd80      	pop	{r7, pc}
34181d1a:	bf00      	nop
34181d1c:	341c0ef0 	.word	0x341c0ef0

34181d20 <I2C1_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *phi2c)
{
34181d20:	b580      	push	{r7, lr}
34181d22:	b088      	sub	sp, #32
34181d24:	af00      	add	r7, sp, #0
34181d26:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Enable PWR for I2C1 pins */
  HAL_PWREx_EnableVddIO4();
34181d28:	f008 f8f8 	bl	34189f1c <HAL_PWREx_EnableVddIO4>

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
34181d2c:	2080      	movs	r0, #128	@ 0x80
34181d2e:	f7ff fe97 	bl	34181a60 <LL_AHB4_GRP1_EnableClock>
  /* Enable SDA GPIO clock */
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
34181d32:	2004      	movs	r0, #4
34181d34:	f7ff fe94 	bl	34181a60 <LL_AHB4_GRP1_EnableClock>

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_PIN;
34181d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
34181d3c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
34181d3e:	2312      	movs	r3, #18
34181d40:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
34181d42:	2300      	movs	r3, #0
34181d44:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
34181d46:	2302      	movs	r3, #2
34181d48:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
34181d4a:	2304      	movs	r3, #4
34181d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
34181d4e:	f107 030c 	add.w	r3, r7, #12
34181d52:	4619      	mov	r1, r3
34181d54:	4811      	ldr	r0, [pc, #68]	@ (34181d9c <I2C1_MspInit+0x7c>)
34181d56:	f005 fdcd 	bl	341878f4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SDA_PIN;
34181d5a:	2302      	movs	r3, #2
34181d5c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
34181d5e:	2312      	movs	r3, #18
34181d60:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
34181d62:	2300      	movs	r3, #0
34181d64:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
34181d66:	2302      	movs	r3, #2
34181d68:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
34181d6a:	2304      	movs	r3, #4
34181d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
34181d6e:	f107 030c 	add.w	r3, r7, #12
34181d72:	4619      	mov	r1, r3
34181d74:	480a      	ldr	r0, [pc, #40]	@ (34181da0 <I2C1_MspInit+0x80>)
34181d76:	f005 fdbd 	bl	341878f4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
34181d7a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181d7e:	f7ff fe85 	bl	34181a8c <LL_APB1_GRP1_EnableClock>

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
34181d82:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181d86:	f7ff feab 	bl	34181ae0 <LL_APB1_GRP1_ForceReset>

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
34181d8a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181d8e:	f7ff feb7 	bl	34181b00 <LL_APB1_GRP1_ReleaseReset>
}
34181d92:	bf00      	nop
34181d94:	3720      	adds	r7, #32
34181d96:	46bd      	mov	sp, r7
34181d98:	bd80      	pop	{r7, pc}
34181d9a:	bf00      	nop
34181d9c:	56021c00 	.word	0x56021c00
34181da0:	56020800 	.word	0x56020800

34181da4 <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *phi2c)
{
34181da4:	b580      	push	{r7, lr}
34181da6:	b088      	sub	sp, #32
34181da8:	af00      	add	r7, sp, #0
34181daa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
34181dac:	f44f 7300 	mov.w	r3, #512	@ 0x200
34181db0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
34181db2:	68fb      	ldr	r3, [r7, #12]
34181db4:	4619      	mov	r1, r3
34181db6:	4809      	ldr	r0, [pc, #36]	@ (34181ddc <I2C1_MspDeInit+0x38>)
34181db8:	f005 ff4e 	bl	34187c58 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
34181dbc:	2302      	movs	r3, #2
34181dbe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
34181dc0:	68fb      	ldr	r3, [r7, #12]
34181dc2:	4619      	mov	r1, r3
34181dc4:	4806      	ldr	r0, [pc, #24]	@ (34181de0 <I2C1_MspDeInit+0x3c>)
34181dc6:	f005 ff47 	bl	34187c58 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
34181dca:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181dce:	f7ff fe73 	bl	34181ab8 <LL_APB1_GRP1_DisableClock>
}
34181dd2:	bf00      	nop
34181dd4:	3720      	adds	r7, #32
34181dd6:	46bd      	mov	sp, r7
34181dd8:	bd80      	pop	{r7, pc}
34181dda:	bf00      	nop
34181ddc:	56021c00 	.word	0x56021c00
34181de0:	56020800 	.word	0x56020800

34181de4 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
34181de4:	b580      	push	{r7, lr}
34181de6:	b088      	sub	sp, #32
34181de8:	af04      	add	r7, sp, #16
34181dea:	607b      	str	r3, [r7, #4]
34181dec:	4603      	mov	r3, r0
34181dee:	81fb      	strh	r3, [r7, #14]
34181df0:	460b      	mov	r3, r1
34181df2:	81bb      	strh	r3, [r7, #12]
34181df4:	4613      	mov	r3, r2
34181df6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
34181df8:	8978      	ldrh	r0, [r7, #10]
34181dfa:	89ba      	ldrh	r2, [r7, #12]
34181dfc:	89f9      	ldrh	r1, [r7, #14]
34181dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34181e02:	9302      	str	r3, [sp, #8]
34181e04:	8b3b      	ldrh	r3, [r7, #24]
34181e06:	9301      	str	r3, [sp, #4]
34181e08:	687b      	ldr	r3, [r7, #4]
34181e0a:	9300      	str	r3, [sp, #0]
34181e0c:	4603      	mov	r3, r0
34181e0e:	4807      	ldr	r0, [pc, #28]	@ (34181e2c <I2C1_WriteReg+0x48>)
34181e10:	f006 f958 	bl	341880c4 <HAL_I2C_Mem_Write>
34181e14:	4603      	mov	r3, r0
34181e16:	2b00      	cmp	r3, #0
34181e18:	d101      	bne.n	34181e1e <I2C1_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
34181e1a:	2300      	movs	r3, #0
34181e1c:	e001      	b.n	34181e22 <I2C1_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
34181e1e:	f06f 0307 	mvn.w	r3, #7
}
34181e22:	4618      	mov	r0, r3
34181e24:	3710      	adds	r7, #16
34181e26:	46bd      	mov	sp, r7
34181e28:	bd80      	pop	{r7, pc}
34181e2a:	bf00      	nop
34181e2c:	341c0ef0 	.word	0x341c0ef0

34181e30 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
34181e30:	b580      	push	{r7, lr}
34181e32:	b088      	sub	sp, #32
34181e34:	af04      	add	r7, sp, #16
34181e36:	607b      	str	r3, [r7, #4]
34181e38:	4603      	mov	r3, r0
34181e3a:	81fb      	strh	r3, [r7, #14]
34181e3c:	460b      	mov	r3, r1
34181e3e:	81bb      	strh	r3, [r7, #12]
34181e40:	4613      	mov	r3, r2
34181e42:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
34181e44:	8978      	ldrh	r0, [r7, #10]
34181e46:	89ba      	ldrh	r2, [r7, #12]
34181e48:	89f9      	ldrh	r1, [r7, #14]
34181e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34181e4e:	9302      	str	r3, [sp, #8]
34181e50:	8b3b      	ldrh	r3, [r7, #24]
34181e52:	9301      	str	r3, [sp, #4]
34181e54:	687b      	ldr	r3, [r7, #4]
34181e56:	9300      	str	r3, [sp, #0]
34181e58:	4603      	mov	r3, r0
34181e5a:	4807      	ldr	r0, [pc, #28]	@ (34181e78 <I2C1_ReadReg+0x48>)
34181e5c:	f006 fa46 	bl	341882ec <HAL_I2C_Mem_Read>
34181e60:	4603      	mov	r3, r0
34181e62:	2b00      	cmp	r3, #0
34181e64:	d101      	bne.n	34181e6a <I2C1_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
34181e66:	2300      	movs	r3, #0
34181e68:	e001      	b.n	34181e6e <I2C1_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
34181e6a:	f06f 0307 	mvn.w	r3, #7
}
34181e6e:	4618      	mov	r0, r3
34181e70:	3710      	adds	r7, #16
34181e72:	46bd      	mov	sp, r7
34181e74:	bd80      	pop	{r7, pc}
34181e76:	bf00      	nop
34181e78:	341c0ef0 	.word	0x341c0ef0

34181e7c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
34181e7c:	b580      	push	{r7, lr}
34181e7e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
34181e80:	f002 fb14 	bl	341844ac <HAL_GetTick>
34181e84:	4603      	mov	r3, r0
}
34181e86:	4618      	mov	r0, r3
34181e88:	bd80      	pop	{r7, pc}
	...

34181e8c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
34181e8c:	b580      	push	{r7, lr}
34181e8e:	b086      	sub	sp, #24
34181e90:	af00      	add	r7, sp, #0
34181e92:	6078      	str	r0, [r7, #4]
34181e94:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
34181e96:	2300      	movs	r3, #0
34181e98:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
34181e9a:	687b      	ldr	r3, [r7, #4]
34181e9c:	2b00      	cmp	r3, #0
34181e9e:	d06b      	beq.n	34181f78 <I2C_GetTiming+0xec>
34181ea0:	683b      	ldr	r3, [r7, #0]
34181ea2:	2b00      	cmp	r3, #0
34181ea4:	d068      	beq.n	34181f78 <I2C_GetTiming+0xec>
  {
    for (speed = 0; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS; speed++)
34181ea6:	2300      	movs	r3, #0
34181ea8:	613b      	str	r3, [r7, #16]
34181eaa:	e060      	b.n	34181f6e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
34181eac:	4a35      	ldr	r2, [pc, #212]	@ (34181f84 <I2C_GetTiming+0xf8>)
34181eae:	693b      	ldr	r3, [r7, #16]
34181eb0:	212c      	movs	r1, #44	@ 0x2c
34181eb2:	fb01 f303 	mul.w	r3, r1, r3
34181eb6:	4413      	add	r3, r2
34181eb8:	3304      	adds	r3, #4
34181eba:	681b      	ldr	r3, [r3, #0]
34181ebc:	683a      	ldr	r2, [r7, #0]
34181ebe:	429a      	cmp	r2, r3
34181ec0:	d352      	bcc.n	34181f68 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
34181ec2:	4a30      	ldr	r2, [pc, #192]	@ (34181f84 <I2C_GetTiming+0xf8>)
34181ec4:	693b      	ldr	r3, [r7, #16]
34181ec6:	212c      	movs	r1, #44	@ 0x2c
34181ec8:	fb01 f303 	mul.w	r3, r1, r3
34181ecc:	4413      	add	r3, r2
34181ece:	3308      	adds	r3, #8
34181ed0:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
34181ed2:	683a      	ldr	r2, [r7, #0]
34181ed4:	429a      	cmp	r2, r3
34181ed6:	d847      	bhi.n	34181f68 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
34181ed8:	6939      	ldr	r1, [r7, #16]
34181eda:	6878      	ldr	r0, [r7, #4]
34181edc:	f000 f856 	bl	34181f8c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
34181ee0:	6939      	ldr	r1, [r7, #16]
34181ee2:	6878      	ldr	r0, [r7, #4]
34181ee4:	f000 f940 	bl	34182168 <I2C_Compute_SCLL_SCLH>
34181ee8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
34181eea:	68fb      	ldr	r3, [r7, #12]
34181eec:	2b7f      	cmp	r3, #127	@ 0x7f
34181eee:	d842      	bhi.n	34181f76 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
34181ef0:	4925      	ldr	r1, [pc, #148]	@ (34181f88 <I2C_GetTiming+0xfc>)
34181ef2:	68fa      	ldr	r2, [r7, #12]
34181ef4:	4613      	mov	r3, r2
34181ef6:	009b      	lsls	r3, r3, #2
34181ef8:	4413      	add	r3, r2
34181efa:	009b      	lsls	r3, r3, #2
34181efc:	440b      	add	r3, r1
34181efe:	681b      	ldr	r3, [r3, #0]
34181f00:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
34181f02:	4821      	ldr	r0, [pc, #132]	@ (34181f88 <I2C_GetTiming+0xfc>)
34181f04:	68fa      	ldr	r2, [r7, #12]
34181f06:	4613      	mov	r3, r2
34181f08:	009b      	lsls	r3, r3, #2
34181f0a:	4413      	add	r3, r2
34181f0c:	009b      	lsls	r3, r3, #2
34181f0e:	4403      	add	r3, r0
34181f10:	3304      	adds	r3, #4
34181f12:	681b      	ldr	r3, [r3, #0]
34181f14:	051b      	lsls	r3, r3, #20
34181f16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
34181f1a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
34181f1c:	481a      	ldr	r0, [pc, #104]	@ (34181f88 <I2C_GetTiming+0xfc>)
34181f1e:	68fa      	ldr	r2, [r7, #12]
34181f20:	4613      	mov	r3, r2
34181f22:	009b      	lsls	r3, r3, #2
34181f24:	4413      	add	r3, r2
34181f26:	009b      	lsls	r3, r3, #2
34181f28:	4403      	add	r3, r0
34181f2a:	3308      	adds	r3, #8
34181f2c:	681b      	ldr	r3, [r3, #0]
34181f2e:	041b      	lsls	r3, r3, #16
34181f30:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
34181f34:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
34181f36:	4814      	ldr	r0, [pc, #80]	@ (34181f88 <I2C_GetTiming+0xfc>)
34181f38:	68fa      	ldr	r2, [r7, #12]
34181f3a:	4613      	mov	r3, r2
34181f3c:	009b      	lsls	r3, r3, #2
34181f3e:	4413      	add	r3, r2
34181f40:	009b      	lsls	r3, r3, #2
34181f42:	4403      	add	r3, r0
34181f44:	330c      	adds	r3, #12
34181f46:	681b      	ldr	r3, [r3, #0]
34181f48:	021b      	lsls	r3, r3, #8
34181f4a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
34181f4c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
34181f4e:	480e      	ldr	r0, [pc, #56]	@ (34181f88 <I2C_GetTiming+0xfc>)
34181f50:	68fa      	ldr	r2, [r7, #12]
34181f52:	4613      	mov	r3, r2
34181f54:	009b      	lsls	r3, r3, #2
34181f56:	4413      	add	r3, r2
34181f58:	009b      	lsls	r3, r3, #2
34181f5a:	4403      	add	r3, r0
34181f5c:	3310      	adds	r3, #16
34181f5e:	681b      	ldr	r3, [r3, #0]
34181f60:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
34181f62:	430b      	orrs	r3, r1
34181f64:	617b      	str	r3, [r7, #20]
        }
        break;
34181f66:	e006      	b.n	34181f76 <I2C_GetTiming+0xea>
    for (speed = 0; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS; speed++)
34181f68:	693b      	ldr	r3, [r7, #16]
34181f6a:	3301      	adds	r3, #1
34181f6c:	613b      	str	r3, [r7, #16]
34181f6e:	693b      	ldr	r3, [r7, #16]
34181f70:	2b02      	cmp	r3, #2
34181f72:	d99b      	bls.n	34181eac <I2C_GetTiming+0x20>
34181f74:	e000      	b.n	34181f78 <I2C_GetTiming+0xec>
        break;
34181f76:	bf00      	nop
      }
    }
  }

  return ret;
34181f78:	697b      	ldr	r3, [r7, #20]
}
34181f7a:	4618      	mov	r0, r3
34181f7c:	3718      	adds	r7, #24
34181f7e:	46bd      	mov	sp, r7
34181f80:	bd80      	pop	{r7, pc}
34181f82:	bf00      	nop
34181f84:	34195160 	.word	0x34195160
34181f88:	341c04ec 	.word	0x341c04ec

34181f8c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
34181f8c:	b480      	push	{r7}
34181f8e:	b08f      	sub	sp, #60	@ 0x3c
34181f90:	af00      	add	r7, sp, #0
34181f92:	6078      	str	r0, [r7, #4]
34181f94:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
34181f96:	2310      	movs	r3, #16
34181f98:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
34181f9a:	687b      	ldr	r3, [r7, #4]
34181f9c:	085a      	lsrs	r2, r3, #1
34181f9e:	4b6e      	ldr	r3, [pc, #440]	@ (34182158 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
34181fa0:	4413      	add	r3, r2
34181fa2:	687a      	ldr	r2, [r7, #4]
34181fa4:	fbb3 f3f2 	udiv	r3, r3, r2
34181fa8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
34181faa:	2332      	movs	r3, #50	@ 0x32
34181fac:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
34181fae:	f44f 7382 	mov.w	r3, #260	@ 0x104
34181fb2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / tPRESC
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
34181fb4:	4a69      	ldr	r2, [pc, #420]	@ (3418215c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34181fb6:	683b      	ldr	r3, [r7, #0]
34181fb8:	212c      	movs	r1, #44	@ 0x2c
34181fba:	fb01 f303 	mul.w	r3, r1, r3
34181fbe:	4413      	add	r3, r2
34181fc0:	3324      	adds	r3, #36	@ 0x24
34181fc2:	681b      	ldr	r3, [r3, #0]
34181fc4:	4618      	mov	r0, r3
34181fc6:	4a65      	ldr	r2, [pc, #404]	@ (3418215c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34181fc8:	683b      	ldr	r3, [r7, #0]
34181fca:	212c      	movs	r1, #44	@ 0x2c
34181fcc:	fb01 f303 	mul.w	r3, r1, r3
34181fd0:	4413      	add	r3, r2
34181fd2:	330c      	adds	r3, #12
34181fd4:	681b      	ldr	r3, [r3, #0]
34181fd6:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
34181fd8:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
34181fda:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
34181fdc:	495f      	ldr	r1, [pc, #380]	@ (3418215c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34181fde:	683b      	ldr	r3, [r7, #0]
34181fe0:	202c      	movs	r0, #44	@ 0x2c
34181fe2:	fb00 f303 	mul.w	r3, r0, r3
34181fe6:	440b      	add	r3, r1
34181fe8:	3328      	adds	r3, #40	@ 0x28
34181fea:	681b      	ldr	r3, [r3, #0]
34181fec:	3303      	adds	r3, #3
34181fee:	69f9      	ldr	r1, [r7, #28]
34181ff0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
34181ff4:	1ad3      	subs	r3, r2, r3
34181ff6:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
34181ff8:	4a58      	ldr	r2, [pc, #352]	@ (3418215c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34181ffa:	683b      	ldr	r3, [r7, #0]
34181ffc:	212c      	movs	r1, #44	@ 0x2c
34181ffe:	fb01 f303 	mul.w	r3, r1, r3
34182002:	4413      	add	r3, r2
34182004:	3310      	adds	r3, #16
34182006:	681b      	ldr	r3, [r3, #0]
34182008:	4618      	mov	r0, r3
3418200a:	4a54      	ldr	r2, [pc, #336]	@ (3418215c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
3418200c:	683b      	ldr	r3, [r7, #0]
3418200e:	212c      	movs	r1, #44	@ 0x2c
34182010:	fb01 f303 	mul.w	r3, r1, r3
34182014:	4413      	add	r3, r2
34182016:	3320      	adds	r3, #32
34182018:	681b      	ldr	r3, [r3, #0]
3418201a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
3418201c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
3418201e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
34182020:	494e      	ldr	r1, [pc, #312]	@ (3418215c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34182022:	683b      	ldr	r3, [r7, #0]
34182024:	202c      	movs	r0, #44	@ 0x2c
34182026:	fb00 f303 	mul.w	r3, r0, r3
3418202a:	440b      	add	r3, r1
3418202c:	3328      	adds	r3, #40	@ 0x28
3418202e:	681b      	ldr	r3, [r3, #0]
34182030:	3304      	adds	r3, #4
34182032:	69f9      	ldr	r1, [r7, #28]
34182034:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
34182038:	1ad3      	subs	r3, r2, r3
3418203a:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
3418203c:	4a47      	ldr	r2, [pc, #284]	@ (3418215c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
3418203e:	683b      	ldr	r3, [r7, #0]
34182040:	212c      	movs	r1, #44	@ 0x2c
34182042:	fb01 f303 	mul.w	r3, r1, r3
34182046:	4413      	add	r3, r2
34182048:	3320      	adds	r3, #32
3418204a:	681b      	ldr	r3, [r3, #0]
3418204c:	4618      	mov	r0, r3
3418204e:	4a43      	ldr	r2, [pc, #268]	@ (3418215c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34182050:	683b      	ldr	r3, [r7, #0]
34182052:	212c      	movs	r1, #44	@ 0x2c
34182054:	fb01 f303 	mul.w	r3, r1, r3
34182058:	4413      	add	r3, r2
3418205a:	3314      	adds	r3, #20
3418205c:	681b      	ldr	r3, [r3, #0]
3418205e:	4403      	add	r3, r0
34182060:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
34182062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34182064:	2b00      	cmp	r3, #0
34182066:	dc01      	bgt.n	3418206c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
34182068:	2300      	movs	r3, #0
3418206a:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
3418206c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418206e:	2b00      	cmp	r3, #0
34182070:	dc01      	bgt.n	34182076 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
34182072:	2300      	movs	r3, #0
34182074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
34182076:	2300      	movs	r3, #0
34182078:	62bb      	str	r3, [r7, #40]	@ 0x28
3418207a:	e062      	b.n	34182142 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
3418207c:	2300      	movs	r3, #0
3418207e:	627b      	str	r3, [r7, #36]	@ 0x24
34182080:	e059      	b.n	34182136 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
34182082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34182084:	3301      	adds	r3, #1
34182086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34182088:	3201      	adds	r2, #1
3418208a:	fb03 f202 	mul.w	r2, r3, r2
3418208e:	69fb      	ldr	r3, [r7, #28]
34182090:	fb02 f303 	mul.w	r3, r2, r3
34182094:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
34182096:	693b      	ldr	r3, [r7, #16]
34182098:	68fa      	ldr	r2, [r7, #12]
3418209a:	429a      	cmp	r2, r3
3418209c:	d348      	bcc.n	34182130 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
3418209e:	2300      	movs	r3, #0
341820a0:	623b      	str	r3, [r7, #32]
341820a2:	e042      	b.n	3418212a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
341820a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341820a6:	3301      	adds	r3, #1
341820a8:	6a3a      	ldr	r2, [r7, #32]
341820aa:	fb03 f202 	mul.w	r2, r3, r2
341820ae:	69fb      	ldr	r3, [r7, #28]
341820b0:	fb02 f303 	mul.w	r3, r2, r3
341820b4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
341820b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341820b8:	68ba      	ldr	r2, [r7, #8]
341820ba:	429a      	cmp	r2, r3
341820bc:	d332      	bcc.n	34182124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
341820be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341820c0:	68ba      	ldr	r2, [r7, #8]
341820c2:	429a      	cmp	r2, r3
341820c4:	d82e      	bhi.n	34182124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
341820c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341820c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
341820ca:	429a      	cmp	r2, r3
341820cc:	d02a      	beq.n	34182124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
341820ce:	4b24      	ldr	r3, [pc, #144]	@ (34182160 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
341820d0:	681a      	ldr	r2, [r3, #0]
341820d2:	4924      	ldr	r1, [pc, #144]	@ (34182164 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
341820d4:	4613      	mov	r3, r2
341820d6:	009b      	lsls	r3, r3, #2
341820d8:	4413      	add	r3, r2
341820da:	009b      	lsls	r3, r3, #2
341820dc:	440b      	add	r3, r1
341820de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341820e0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
341820e2:	4b1f      	ldr	r3, [pc, #124]	@ (34182160 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
341820e4:	681a      	ldr	r2, [r3, #0]
341820e6:	491f      	ldr	r1, [pc, #124]	@ (34182164 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
341820e8:	4613      	mov	r3, r2
341820ea:	009b      	lsls	r3, r3, #2
341820ec:	4413      	add	r3, r2
341820ee:	009b      	lsls	r3, r3, #2
341820f0:	440b      	add	r3, r1
341820f2:	3304      	adds	r3, #4
341820f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
341820f6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
341820f8:	4b19      	ldr	r3, [pc, #100]	@ (34182160 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
341820fa:	681a      	ldr	r2, [r3, #0]
341820fc:	4919      	ldr	r1, [pc, #100]	@ (34182164 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
341820fe:	4613      	mov	r3, r2
34182100:	009b      	lsls	r3, r3, #2
34182102:	4413      	add	r3, r2
34182104:	009b      	lsls	r3, r3, #2
34182106:	440b      	add	r3, r1
34182108:	3308      	adds	r3, #8
3418210a:	6a3a      	ldr	r2, [r7, #32]
3418210c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
3418210e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34182110:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
34182112:	4b13      	ldr	r3, [pc, #76]	@ (34182160 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34182114:	681b      	ldr	r3, [r3, #0]
34182116:	3301      	adds	r3, #1
34182118:	4a11      	ldr	r2, [pc, #68]	@ (34182160 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
3418211a:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
3418211c:	4b10      	ldr	r3, [pc, #64]	@ (34182160 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
3418211e:	681b      	ldr	r3, [r3, #0]
34182120:	2b7f      	cmp	r3, #127	@ 0x7f
34182122:	d812      	bhi.n	3418214a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
34182124:	6a3b      	ldr	r3, [r7, #32]
34182126:	3301      	adds	r3, #1
34182128:	623b      	str	r3, [r7, #32]
3418212a:	6a3b      	ldr	r3, [r7, #32]
3418212c:	2b0f      	cmp	r3, #15
3418212e:	d9b9      	bls.n	341820a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
34182130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34182132:	3301      	adds	r3, #1
34182134:	627b      	str	r3, [r7, #36]	@ 0x24
34182136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34182138:	2b0f      	cmp	r3, #15
3418213a:	d9a2      	bls.n	34182082 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
3418213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418213e:	3301      	adds	r3, #1
34182140:	62bb      	str	r3, [r7, #40]	@ 0x28
34182142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34182144:	2b0f      	cmp	r3, #15
34182146:	d999      	bls.n	3418207c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
34182148:	e000      	b.n	3418214c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
3418214a:	bf00      	nop
          }
        }
      }
    }
  }
}
3418214c:	373c      	adds	r7, #60	@ 0x3c
3418214e:	46bd      	mov	sp, r7
34182150:	f85d 7b04 	ldr.w	r7, [sp], #4
34182154:	4770      	bx	lr
34182156:	bf00      	nop
34182158:	3b9aca00 	.word	0x3b9aca00
3418215c:	34195160 	.word	0x34195160
34182160:	341c0eec 	.word	0x341c0eec
34182164:	341c04ec 	.word	0x341c04ec

34182168 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
34182168:	b480      	push	{r7}
3418216a:	b093      	sub	sp, #76	@ 0x4c
3418216c:	af00      	add	r7, sp, #0
3418216e:	6078      	str	r0, [r7, #4]
34182170:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
34182172:	f04f 33ff 	mov.w	r3, #4294967295
34182176:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
34182178:	687b      	ldr	r3, [r7, #4]
3418217a:	085a      	lsrs	r2, r3, #1
3418217c:	4b7a      	ldr	r3, [pc, #488]	@ (34182368 <I2C_Compute_SCLL_SCLH+0x200>)
3418217e:	4413      	add	r3, r2
34182180:	687a      	ldr	r2, [r7, #4]
34182182:	fbb3 f3f2 	udiv	r3, r3, r2
34182186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
34182188:	4a78      	ldr	r2, [pc, #480]	@ (3418236c <I2C_Compute_SCLL_SCLH+0x204>)
3418218a:	683b      	ldr	r3, [r7, #0]
3418218c:	212c      	movs	r1, #44	@ 0x2c
3418218e:	fb01 f303 	mul.w	r3, r1, r3
34182192:	4413      	add	r3, r2
34182194:	681b      	ldr	r3, [r3, #0]
34182196:	085a      	lsrs	r2, r3, #1
34182198:	4b73      	ldr	r3, [pc, #460]	@ (34182368 <I2C_Compute_SCLL_SCLH+0x200>)
3418219a:	4413      	add	r3, r2
3418219c:	4973      	ldr	r1, [pc, #460]	@ (3418236c <I2C_Compute_SCLL_SCLH+0x204>)
3418219e:	683a      	ldr	r2, [r7, #0]
341821a0:	202c      	movs	r0, #44	@ 0x2c
341821a2:	fb00 f202 	mul.w	r2, r0, r2
341821a6:	440a      	add	r2, r1
341821a8:	6812      	ldr	r2, [r2, #0]
341821aa:	fbb3 f3f2 	udiv	r3, r3, r2
341821ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
341821b0:	2332      	movs	r3, #50	@ 0x32
341821b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
341821b4:	4a6d      	ldr	r2, [pc, #436]	@ (3418236c <I2C_Compute_SCLL_SCLH+0x204>)
341821b6:	683b      	ldr	r3, [r7, #0]
341821b8:	212c      	movs	r1, #44	@ 0x2c
341821ba:	fb01 f303 	mul.w	r3, r1, r3
341821be:	4413      	add	r3, r2
341821c0:	3328      	adds	r3, #40	@ 0x28
341821c2:	681a      	ldr	r2, [r3, #0]
341821c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341821c6:	fb02 f303 	mul.w	r3, r2, r3
341821ca:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
341821cc:	4a67      	ldr	r2, [pc, #412]	@ (3418236c <I2C_Compute_SCLL_SCLH+0x204>)
341821ce:	683b      	ldr	r3, [r7, #0]
341821d0:	212c      	movs	r1, #44	@ 0x2c
341821d2:	fb01 f303 	mul.w	r3, r1, r3
341821d6:	4413      	add	r3, r2
341821d8:	3304      	adds	r3, #4
341821da:	681b      	ldr	r3, [r3, #0]
341821dc:	4a62      	ldr	r2, [pc, #392]	@ (34182368 <I2C_Compute_SCLL_SCLH+0x200>)
341821de:	fbb2 f3f3 	udiv	r3, r2, r3
341821e2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
341821e4:	4a61      	ldr	r2, [pc, #388]	@ (3418236c <I2C_Compute_SCLL_SCLH+0x204>)
341821e6:	683b      	ldr	r3, [r7, #0]
341821e8:	212c      	movs	r1, #44	@ 0x2c
341821ea:	fb01 f303 	mul.w	r3, r1, r3
341821ee:	4413      	add	r3, r2
341821f0:	3308      	adds	r3, #8
341821f2:	681b      	ldr	r3, [r3, #0]
341821f4:	4a5c      	ldr	r2, [pc, #368]	@ (34182368 <I2C_Compute_SCLL_SCLH+0x200>)
341821f6:	fbb2 f3f3 	udiv	r3, r2, r3
341821fa:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
341821fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341821fe:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
34182200:	2300      	movs	r3, #0
34182202:	637b      	str	r3, [r7, #52]	@ 0x34
34182204:	e0a3      	b.n	3418234e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
34182206:	495a      	ldr	r1, [pc, #360]	@ (34182370 <I2C_Compute_SCLL_SCLH+0x208>)
34182208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
3418220a:	4613      	mov	r3, r2
3418220c:	009b      	lsls	r3, r3, #2
3418220e:	4413      	add	r3, r2
34182210:	009b      	lsls	r3, r3, #2
34182212:	440b      	add	r3, r1
34182214:	681b      	ldr	r3, [r3, #0]
34182216:	1c5a      	adds	r2, r3, #1
34182218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418221a:	fb02 f303 	mul.w	r3, r2, r3
3418221e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
34182220:	2300      	movs	r3, #0
34182222:	63fb      	str	r3, [r7, #60]	@ 0x3c
34182224:	e08c      	b.n	34182340 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
34182226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34182228:	6a3b      	ldr	r3, [r7, #32]
3418222a:	441a      	add	r2, r3
3418222c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418222e:	3301      	adds	r3, #1
34182230:	6979      	ldr	r1, [r7, #20]
34182232:	fb03 f101 	mul.w	r1, r3, r1
34182236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34182238:	005b      	lsls	r3, r3, #1
3418223a:	440b      	add	r3, r1
3418223c:	4413      	add	r3, r2
3418223e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
34182240:	4a4a      	ldr	r2, [pc, #296]	@ (3418236c <I2C_Compute_SCLL_SCLH+0x204>)
34182242:	683b      	ldr	r3, [r7, #0]
34182244:	212c      	movs	r1, #44	@ 0x2c
34182246:	fb01 f303 	mul.w	r3, r1, r3
3418224a:	4413      	add	r3, r2
3418224c:	3318      	adds	r3, #24
3418224e:	681b      	ldr	r3, [r3, #0]
34182250:	693a      	ldr	r2, [r7, #16]
34182252:	429a      	cmp	r2, r3
34182254:	d971      	bls.n	3418233a <I2C_Compute_SCLL_SCLH+0x1d2>
34182256:	693a      	ldr	r2, [r7, #16]
34182258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418225a:	1ad2      	subs	r2, r2, r3
3418225c:	6a3b      	ldr	r3, [r7, #32]
3418225e:	1ad3      	subs	r3, r2, r3
34182260:	089b      	lsrs	r3, r3, #2
34182262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34182264:	429a      	cmp	r2, r3
34182266:	d268      	bcs.n	3418233a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
34182268:	2300      	movs	r3, #0
3418226a:	63bb      	str	r3, [r7, #56]	@ 0x38
3418226c:	e062      	b.n	34182334 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
3418226e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34182270:	6a3b      	ldr	r3, [r7, #32]
34182272:	441a      	add	r2, r3
34182274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34182276:	3301      	adds	r3, #1
34182278:	6979      	ldr	r1, [r7, #20]
3418227a:	fb03 f101 	mul.w	r1, r3, r1
3418227e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34182280:	005b      	lsls	r3, r3, #1
34182282:	440b      	add	r3, r1
34182284:	4413      	add	r3, r2
34182286:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
34182288:	693a      	ldr	r2, [r7, #16]
3418228a:	68fb      	ldr	r3, [r7, #12]
3418228c:	441a      	add	r2, r3
3418228e:	4937      	ldr	r1, [pc, #220]	@ (3418236c <I2C_Compute_SCLL_SCLH+0x204>)
34182290:	683b      	ldr	r3, [r7, #0]
34182292:	202c      	movs	r0, #44	@ 0x2c
34182294:	fb00 f303 	mul.w	r3, r0, r3
34182298:	440b      	add	r3, r1
3418229a:	3320      	adds	r3, #32
3418229c:	681b      	ldr	r3, [r3, #0]
3418229e:	441a      	add	r2, r3
341822a0:	4932      	ldr	r1, [pc, #200]	@ (3418236c <I2C_Compute_SCLL_SCLH+0x204>)
341822a2:	683b      	ldr	r3, [r7, #0]
341822a4:	202c      	movs	r0, #44	@ 0x2c
341822a6:	fb00 f303 	mul.w	r3, r0, r3
341822aa:	440b      	add	r3, r1
341822ac:	3324      	adds	r3, #36	@ 0x24
341822ae:	681b      	ldr	r3, [r3, #0]
341822b0:	4413      	add	r3, r2
341822b2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
341822b4:	68ba      	ldr	r2, [r7, #8]
341822b6:	69bb      	ldr	r3, [r7, #24]
341822b8:	429a      	cmp	r2, r3
341822ba:	d338      	bcc.n	3418232e <I2C_Compute_SCLL_SCLH+0x1c6>
341822bc:	68ba      	ldr	r2, [r7, #8]
341822be:	69fb      	ldr	r3, [r7, #28]
341822c0:	429a      	cmp	r2, r3
341822c2:	d834      	bhi.n	3418232e <I2C_Compute_SCLL_SCLH+0x1c6>
341822c4:	4a29      	ldr	r2, [pc, #164]	@ (3418236c <I2C_Compute_SCLL_SCLH+0x204>)
341822c6:	683b      	ldr	r3, [r7, #0]
341822c8:	212c      	movs	r1, #44	@ 0x2c
341822ca:	fb01 f303 	mul.w	r3, r1, r3
341822ce:	4413      	add	r3, r2
341822d0:	331c      	adds	r3, #28
341822d2:	681b      	ldr	r3, [r3, #0]
341822d4:	68fa      	ldr	r2, [r7, #12]
341822d6:	429a      	cmp	r2, r3
341822d8:	d329      	bcc.n	3418232e <I2C_Compute_SCLL_SCLH+0x1c6>
341822da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
341822dc:	68fb      	ldr	r3, [r7, #12]
341822de:	429a      	cmp	r2, r3
341822e0:	d225      	bcs.n	3418232e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
341822e2:	68ba      	ldr	r2, [r7, #8]
341822e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341822e6:	1ad3      	subs	r3, r2, r3
341822e8:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
341822ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341822ec:	2b00      	cmp	r3, #0
341822ee:	da02      	bge.n	341822f6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
341822f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341822f2:	425b      	negs	r3, r3
341822f4:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
341822f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341822f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
341822fa:	429a      	cmp	r2, r3
341822fc:	d917      	bls.n	3418232e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
341822fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34182300:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
34182302:	491b      	ldr	r1, [pc, #108]	@ (34182370 <I2C_Compute_SCLL_SCLH+0x208>)
34182304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
34182306:	4613      	mov	r3, r2
34182308:	009b      	lsls	r3, r3, #2
3418230a:	4413      	add	r3, r2
3418230c:	009b      	lsls	r3, r3, #2
3418230e:	440b      	add	r3, r1
34182310:	3310      	adds	r3, #16
34182312:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
34182314:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
34182316:	4916      	ldr	r1, [pc, #88]	@ (34182370 <I2C_Compute_SCLL_SCLH+0x208>)
34182318:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
3418231a:	4613      	mov	r3, r2
3418231c:	009b      	lsls	r3, r3, #2
3418231e:	4413      	add	r3, r2
34182320:	009b      	lsls	r3, r3, #2
34182322:	440b      	add	r3, r1
34182324:	330c      	adds	r3, #12
34182326:	6bba      	ldr	r2, [r7, #56]	@ 0x38
34182328:	601a      	str	r2, [r3, #0]
              ret = count;
3418232a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418232c:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
3418232e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34182330:	3301      	adds	r3, #1
34182332:	63bb      	str	r3, [r7, #56]	@ 0x38
34182334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34182336:	2bff      	cmp	r3, #255	@ 0xff
34182338:	d999      	bls.n	3418226e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3418233a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418233c:	3301      	adds	r3, #1
3418233e:	63fb      	str	r3, [r7, #60]	@ 0x3c
34182340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34182342:	2bff      	cmp	r3, #255	@ 0xff
34182344:	f67f af6f 	bls.w	34182226 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
34182348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418234a:	3301      	adds	r3, #1
3418234c:	637b      	str	r3, [r7, #52]	@ 0x34
3418234e:	4b09      	ldr	r3, [pc, #36]	@ (34182374 <I2C_Compute_SCLL_SCLH+0x20c>)
34182350:	681b      	ldr	r3, [r3, #0]
34182352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
34182354:	429a      	cmp	r2, r3
34182356:	f4ff af56 	bcc.w	34182206 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
3418235a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
3418235c:	4618      	mov	r0, r3
3418235e:	374c      	adds	r7, #76	@ 0x4c
34182360:	46bd      	mov	sp, r7
34182362:	f85d 7b04 	ldr.w	r7, [sp], #4
34182366:	4770      	bx	lr
34182368:	3b9aca00 	.word	0x3b9aca00
3418236c:	34195160 	.word	0x34195160
34182370:	341c04ec 	.word	0x341c04ec
34182374:	341c0eec 	.word	0x341c0eec

34182378 <LL_MEM_EnableClock>:
{
34182378:	b480      	push	{r7}
3418237a:	b085      	sub	sp, #20
3418237c:	af00      	add	r7, sp, #0
3418237e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->MEMENSR, Memories);
34182380:	4a07      	ldr	r2, [pc, #28]	@ (341823a0 <LL_MEM_EnableClock+0x28>)
34182382:	687b      	ldr	r3, [r7, #4]
34182384:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
  tmpreg = READ_REG(RCC->MEMENR);
34182388:	4b05      	ldr	r3, [pc, #20]	@ (341823a0 <LL_MEM_EnableClock+0x28>)
3418238a:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
3418238e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34182390:	68fb      	ldr	r3, [r7, #12]
}
34182392:	bf00      	nop
34182394:	3714      	adds	r7, #20
34182396:	46bd      	mov	sp, r7
34182398:	f85d 7b04 	ldr.w	r7, [sp], #4
3418239c:	4770      	bx	lr
3418239e:	bf00      	nop
341823a0:	56028000 	.word	0x56028000

341823a4 <LL_AHB3_GRP1_EnableClock>:
{
341823a4:	b480      	push	{r7}
341823a6:	b085      	sub	sp, #20
341823a8:	af00      	add	r7, sp, #0
341823aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3ENSR, Periphs);
341823ac:	4a07      	ldr	r2, [pc, #28]	@ (341823cc <LL_AHB3_GRP1_EnableClock+0x28>)
341823ae:	687b      	ldr	r3, [r7, #4]
341823b0:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
341823b4:	4b05      	ldr	r3, [pc, #20]	@ (341823cc <LL_AHB3_GRP1_EnableClock+0x28>)
341823b6:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
341823ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341823bc:	68fb      	ldr	r3, [r7, #12]
}
341823be:	bf00      	nop
341823c0:	3714      	adds	r7, #20
341823c2:	46bd      	mov	sp, r7
341823c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341823c8:	4770      	bx	lr
341823ca:	bf00      	nop
341823cc:	56028000 	.word	0x56028000

341823d0 <LL_AHB4_GRP1_EnableClock>:
{
341823d0:	b480      	push	{r7}
341823d2:	b085      	sub	sp, #20
341823d4:	af00      	add	r7, sp, #0
341823d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
341823d8:	4a07      	ldr	r2, [pc, #28]	@ (341823f8 <LL_AHB4_GRP1_EnableClock+0x28>)
341823da:	687b      	ldr	r3, [r7, #4]
341823dc:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
341823e0:	4b05      	ldr	r3, [pc, #20]	@ (341823f8 <LL_AHB4_GRP1_EnableClock+0x28>)
341823e2:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
341823e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341823e8:	68fb      	ldr	r3, [r7, #12]
}
341823ea:	bf00      	nop
341823ec:	3714      	adds	r7, #20
341823ee:	46bd      	mov	sp, r7
341823f0:	f85d 7b04 	ldr.w	r7, [sp], #4
341823f4:	4770      	bx	lr
341823f6:	bf00      	nop
341823f8:	56028000 	.word	0x56028000

341823fc <LL_APB5_GRP1_EnableClock>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClock(uint32_t Periphs)
{
341823fc:	b480      	push	{r7}
341823fe:	b085      	sub	sp, #20
34182400:	af00      	add	r7, sp, #0
34182402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5ENSR, Periphs);
34182404:	4a07      	ldr	r2, [pc, #28]	@ (34182424 <LL_APB5_GRP1_EnableClock+0x28>)
34182406:	687b      	ldr	r3, [r7, #4]
34182408:	f8c2 3a7c 	str.w	r3, [r2, #2684]	@ 0xa7c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5ENR);
3418240c:	4b05      	ldr	r3, [pc, #20]	@ (34182424 <LL_APB5_GRP1_EnableClock+0x28>)
3418240e:	f8d3 327c 	ldr.w	r3, [r3, #636]	@ 0x27c
34182412:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34182414:	68fb      	ldr	r3, [r7, #12]
}
34182416:	bf00      	nop
34182418:	3714      	adds	r7, #20
3418241a:	46bd      	mov	sp, r7
3418241c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182420:	4770      	bx	lr
34182422:	bf00      	nop
34182424:	56028000 	.word	0x56028000

34182428 <LL_APB5_GRP1_ForceReset>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_ForceReset(uint32_t Periphs)
{
34182428:	b480      	push	{r7}
3418242a:	b083      	sub	sp, #12
3418242c:	af00      	add	r7, sp, #0
3418242e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5RSTSR, Periphs);
34182430:	4a04      	ldr	r2, [pc, #16]	@ (34182444 <LL_APB5_GRP1_ForceReset+0x1c>)
34182432:	687b      	ldr	r3, [r7, #4]
34182434:	f8c2 3a3c 	str.w	r3, [r2, #2620]	@ 0xa3c
}
34182438:	bf00      	nop
3418243a:	370c      	adds	r7, #12
3418243c:	46bd      	mov	sp, r7
3418243e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182442:	4770      	bx	lr
34182444:	56028000 	.word	0x56028000

34182448 <LL_APB5_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_ReleaseReset(uint32_t Periphs)
{
34182448:	b480      	push	{r7}
3418244a:	b083      	sub	sp, #12
3418244c:	af00      	add	r7, sp, #0
3418244e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34182450:	4b06      	ldr	r3, [pc, #24]	@ (3418246c <LL_APB5_GRP1_ReleaseReset+0x24>)
34182452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182456:	461a      	mov	r2, r3
34182458:	687b      	ldr	r3, [r7, #4]
3418245a:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
}
3418245e:	bf00      	nop
34182460:	370c      	adds	r7, #12
34182462:	46bd      	mov	sp, r7
34182464:	f85d 7b04 	ldr.w	r7, [sp], #4
34182468:	4770      	bx	lr
3418246a:	bf00      	nop
3418246c:	56028000 	.word	0x56028000

34182470 <LL_APB5_GRP1_DisableClockLowPower>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_DisableClockLowPower(uint32_t Periphs)
{
34182470:	b480      	push	{r7}
34182472:	b083      	sub	sp, #12
34182474:	af00      	add	r7, sp, #0
34182476:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5LPENCR, Periphs);
34182478:	4b06      	ldr	r3, [pc, #24]	@ (34182494 <LL_APB5_GRP1_DisableClockLowPower+0x24>)
3418247a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418247e:	461a      	mov	r2, r3
34182480:	687b      	ldr	r3, [r7, #4]
34182482:	f8c2 32bc 	str.w	r3, [r2, #700]	@ 0x2bc
}
34182486:	bf00      	nop
34182488:	370c      	adds	r7, #12
3418248a:	46bd      	mov	sp, r7
3418248c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182490:	4770      	bx	lr
34182492:	bf00      	nop
34182494:	56028000 	.word	0x56028000

34182498 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
34182498:	b580      	push	{r7, lr}
3418249a:	b096      	sub	sp, #88	@ 0x58
3418249c:	af02      	add	r7, sp, #8
3418249e:	60f8      	str	r0, [r7, #12]
341824a0:	60b9      	str	r1, [r7, #8]
341824a2:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
341824a4:	2300      	movs	r3, #0
341824a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  ISP_AppliHelpersTypeDef appliHelpers = {0};
341824a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
341824ac:	2224      	movs	r2, #36	@ 0x24
341824ae:	2100      	movs	r1, #0
341824b0:	4618      	mov	r0, r3
341824b2:	f010 fe77 	bl	341931a4 <memset>
  static const ISP_IQParamTypeDef* ISP_IQParamCacheInit[] = {
    &ISP_IQParamCacheInit_IMX335
   };
  if (Instance >= CAMERA_INSTANCES_NBR)
341824b6:	68fb      	ldr	r3, [r7, #12]
341824b8:	2b00      	cmp	r3, #0
341824ba:	d003      	beq.n	341824c4 <BSP_CAMERA_Init+0x2c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
341824bc:	f06f 0301 	mvn.w	r3, #1
341824c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
341824c2:	e06b      	b.n	3418259c <BSP_CAMERA_Init+0x104>
  }
  else
  {
    if ((PixelFormat != CAMERA_PF_RAW_RGGB10) || (Resolution != CAMERA_R2592x1944))
341824c4:	687b      	ldr	r3, [r7, #4]
341824c6:	2b0a      	cmp	r3, #10
341824c8:	d102      	bne.n	341824d0 <BSP_CAMERA_Init+0x38>
341824ca:	68bb      	ldr	r3, [r7, #8]
341824cc:	2b06      	cmp	r3, #6
341824ce:	d003      	beq.n	341824d8 <BSP_CAMERA_Init+0x40>
    {
      ret = BSP_ERROR_WRONG_PARAM;
341824d0:	f06f 0301 	mvn.w	r3, #1
341824d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
341824d6:	e061      	b.n	3418259c <BSP_CAMERA_Init+0x104>
    }

    else
    {
      /* Check if another instance was Initialized */
      Camera_Ctx[Instance].Resolution = Resolution;
341824d8:	4950      	ldr	r1, [pc, #320]	@ (3418261c <BSP_CAMERA_Init+0x184>)
341824da:	68fa      	ldr	r2, [r7, #12]
341824dc:	4613      	mov	r3, r2
341824de:	005b      	lsls	r3, r3, #1
341824e0:	4413      	add	r3, r2
341824e2:	011b      	lsls	r3, r3, #4
341824e4:	440b      	add	r3, r1
341824e6:	68ba      	ldr	r2, [r7, #8]
341824e8:	601a      	str	r2, [r3, #0]
      Camera_Ctx[Instance].PixelFormat = PixelFormat;
341824ea:	494c      	ldr	r1, [pc, #304]	@ (3418261c <BSP_CAMERA_Init+0x184>)
341824ec:	68fa      	ldr	r2, [r7, #12]
341824ee:	4613      	mov	r3, r2
341824f0:	005b      	lsls	r3, r3, #1
341824f2:	4413      	add	r3, r2
341824f4:	011b      	lsls	r3, r3, #4
341824f6:	440b      	add	r3, r1
341824f8:	3304      	adds	r3, #4
341824fa:	687a      	ldr	r2, [r7, #4]
341824fc:	601a      	str	r2, [r3, #0]

      /* Set DCMIPP instance */
      hcamera_dcmipp.Instance = DCMIPP;
341824fe:	4b48      	ldr	r3, [pc, #288]	@ (34182620 <BSP_CAMERA_Init+0x188>)
34182500:	4a48      	ldr	r2, [pc, #288]	@ (34182624 <BSP_CAMERA_Init+0x18c>)
34182502:	601a      	str	r2, [r3, #0]
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#else
      /* DCMIPP Initialization */
      DCMIPP_MspInit(&hcamera_dcmipp);
34182504:	4846      	ldr	r0, [pc, #280]	@ (34182620 <BSP_CAMERA_Init+0x188>)
34182506:	f000 fa82 	bl	34182a0e <DCMIPP_MspInit>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
      if(MX_DCMIPP_ClockConfig(&hcamera_dcmipp) != HAL_OK)
3418250a:	4845      	ldr	r0, [pc, #276]	@ (34182620 <BSP_CAMERA_Init+0x188>)
3418250c:	f000 f935 	bl	3418277a <MX_DCMIPP_ClockConfig>
34182510:	4603      	mov	r3, r0
34182512:	2b00      	cmp	r3, #0
34182514:	d003      	beq.n	3418251e <BSP_CAMERA_Init+0x86>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
34182516:	f06f 0303 	mvn.w	r3, #3
3418251a:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418251c:	e008      	b.n	34182530 <BSP_CAMERA_Init+0x98>
      }
      else if (BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
3418251e:	2000      	movs	r0, #0
34182520:	f000 f9c0 	bl	341828a4 <BSP_CAMERA_HwReset>
34182524:	4603      	mov	r3, r0
34182526:	2b00      	cmp	r3, #0
34182528:	d002      	beq.n	34182530 <BSP_CAMERA_Init+0x98>
      {
        ret = BSP_ERROR_BUS_FAILURE;
3418252a:	f06f 0307 	mvn.w	r3, #7
3418252e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      else
      {
        /* No action */
      }

      if(ret == BSP_ERROR_NONE)
34182530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34182532:	2b00      	cmp	r3, #0
34182534:	d132      	bne.n	3418259c <BSP_CAMERA_Init+0x104>
      {
        if (MX_DCMIPP_Init(&hcamera_dcmipp) != HAL_OK)
34182536:	483a      	ldr	r0, [pc, #232]	@ (34182620 <BSP_CAMERA_Init+0x188>)
34182538:	f000 f88c 	bl	34182654 <MX_DCMIPP_Init>
3418253c:	4603      	mov	r3, r0
3418253e:	2b00      	cmp	r3, #0
34182540:	d003      	beq.n	3418254a <BSP_CAMERA_Init+0xb2>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
34182542:	f06f 0303 	mvn.w	r3, #3
34182546:	64fb      	str	r3, [r7, #76]	@ 0x4c
34182548:	e028      	b.n	3418259c <BSP_CAMERA_Init+0x104>
        }
        else
        {
          if (IMX335_Probe(Resolution, PixelFormat) != BSP_ERROR_NONE)
3418254a:	6879      	ldr	r1, [r7, #4]
3418254c:	68b8      	ldr	r0, [r7, #8]
3418254e:	f000 faf3 	bl	34182b38 <IMX335_Probe>
34182552:	4603      	mov	r3, r0
34182554:	2b00      	cmp	r3, #0
34182556:	d003      	beq.n	34182560 <BSP_CAMERA_Init+0xc8>
          {
            ret = BSP_ERROR_UNKNOWN_COMPONENT;
34182558:	f06f 0306 	mvn.w	r3, #6
3418255c:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418255e:	e01d      	b.n	3418259c <BSP_CAMERA_Init+0x104>
            }
            else
            {
#endif /* (USE_HAL_DCMIPP_REGISTER_CALLBACKS > 0) */
              /* Fill init struct with Camera driver helpers */
              appliHelpers.GetSensorInfo = BSP_GetSensorInfoHelper;
34182560:	4b31      	ldr	r3, [pc, #196]	@ (34182628 <BSP_CAMERA_Init+0x190>)
34182562:	637b      	str	r3, [r7, #52]	@ 0x34
              appliHelpers.SetSensorGain = BSP_SetSensorGainHelper;
34182564:	4b31      	ldr	r3, [pc, #196]	@ (3418262c <BSP_CAMERA_Init+0x194>)
34182566:	63bb      	str	r3, [r7, #56]	@ 0x38
              appliHelpers.GetSensorGain = BSP_GetSensorGainHelper;
34182568:	4b31      	ldr	r3, [pc, #196]	@ (34182630 <BSP_CAMERA_Init+0x198>)
3418256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              appliHelpers.SetSensorExposure = BSP_SetSensorExposureHelper;
3418256c:	4b31      	ldr	r3, [pc, #196]	@ (34182634 <BSP_CAMERA_Init+0x19c>)
3418256e:	643b      	str	r3, [r7, #64]	@ 0x40
              appliHelpers.GetSensorExposure = BSP_GetSensorExposureHelper;
34182570:	4b31      	ldr	r3, [pc, #196]	@ (34182638 <BSP_CAMERA_Init+0x1a0>)
34182572:	647b      	str	r3, [r7, #68]	@ 0x44

              /* Initialize the Image Signal Processing middleware */
              if(ISP_Init(&hcamera_isp, &hcamera_dcmipp, 0, &appliHelpers, ISP_IQParamCacheInit[0]) != ISP_OK)
34182574:	4b31      	ldr	r3, [pc, #196]	@ (3418263c <BSP_CAMERA_Init+0x1a4>)
34182576:	681b      	ldr	r3, [r3, #0]
34182578:	f107 0228 	add.w	r2, r7, #40	@ 0x28
3418257c:	9300      	str	r3, [sp, #0]
3418257e:	4613      	mov	r3, r2
34182580:	2200      	movs	r2, #0
34182582:	4927      	ldr	r1, [pc, #156]	@ (34182620 <BSP_CAMERA_Init+0x188>)
34182584:	482e      	ldr	r0, [pc, #184]	@ (34182640 <BSP_CAMERA_Init+0x1a8>)
34182586:	f00d fec9 	bl	3419031c <ISP_Init>
3418258a:	4603      	mov	r3, r0
3418258c:	2b00      	cmp	r3, #0
3418258e:	d003      	beq.n	34182598 <BSP_CAMERA_Init+0x100>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
34182590:	f06f 0303 	mvn.w	r3, #3
34182594:	64fb      	str	r3, [r7, #76]	@ 0x4c
34182596:	e001      	b.n	3418259c <BSP_CAMERA_Init+0x104>
              }
              else
              {
                ret = BSP_ERROR_NONE;
34182598:	2300      	movs	r3, #0
3418259a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  //by zyf
  /* SRAM3 and SRAM4 memories clock enable */
  RAMCFG_HandleTypeDef hramcfg  = {0};
3418259c:	f107 031c 	add.w	r3, r7, #28
341825a0:	2200      	movs	r2, #0
341825a2:	601a      	str	r2, [r3, #0]
341825a4:	605a      	str	r2, [r3, #4]
341825a6:	609a      	str	r2, [r3, #8]
  LL_MEM_EnableClock(LL_MEM_AXISRAM3);
341825a8:	2001      	movs	r0, #1
341825aa:	f7ff fee5 	bl	34182378 <LL_MEM_EnableClock>
  LL_MEM_EnableClock(LL_MEM_AXISRAM4);
341825ae:	2002      	movs	r0, #2
341825b0:	f7ff fee2 	bl	34182378 <LL_MEM_EnableClock>

  /* Power On AXSRAM3 and AXISRAM4 */
  hramcfg.Instance = RAMCFG_SRAM3_AXI;
341825b4:	4b23      	ldr	r3, [pc, #140]	@ (34182644 <BSP_CAMERA_Init+0x1ac>)
341825b6:	61fb      	str	r3, [r7, #28]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
341825b8:	f107 031c 	add.w	r3, r7, #28
341825bc:	4618      	mov	r0, r3
341825be:	f007 fcbd 	bl	34189f3c <HAL_RAMCFG_EnableAXISRAM>

  hramcfg.Instance = RAMCFG_SRAM4_AXI;
341825c2:	4b21      	ldr	r3, [pc, #132]	@ (34182648 <BSP_CAMERA_Init+0x1b0>)
341825c4:	61fb      	str	r3, [r7, #28]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
341825c6:	f107 031c 	add.w	r3, r7, #28
341825ca:	4618      	mov	r0, r3
341825cc:	f007 fcb6 	bl	34189f3c <HAL_RAMCFG_EnableAXISRAM>

  __HAL_RCC_RIFSC_CLK_ENABLE();
341825d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
341825d4:	f7ff fee6 	bl	341823a4 <LL_AHB3_GRP1_EnableClock>

  RIMC_MasterConfig_t RIMC_master = {0};
341825d8:	f107 0314 	add.w	r3, r7, #20
341825dc:	2200      	movs	r2, #0
341825de:	601a      	str	r2, [r3, #0]
341825e0:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
341825e2:	2302      	movs	r3, #2
341825e4:	617b      	str	r3, [r7, #20]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
341825e6:	2303      	movs	r3, #3
341825e8:	61bb      	str	r3, [r7, #24]

  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
341825ea:	f107 0314 	add.w	r3, r7, #20
341825ee:	4619      	mov	r1, r3
341825f0:	2009      	movs	r0, #9
341825f2:	f00c fc15 	bl	3418ee20 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_VENC  , &RIMC_master);
341825f6:	f107 0314 	add.w	r3, r7, #20
341825fa:	4619      	mov	r1, r3
341825fc:	200c      	movs	r0, #12
341825fe:	f00c fc0f 	bl	3418ee20 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34182602:	2103      	movs	r1, #3
34182604:	4811      	ldr	r0, [pc, #68]	@ (3418264c <BSP_CAMERA_Init+0x1b4>)
34182606:	f00c fc47 	bl	3418ee98 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3418260a:	2103      	movs	r1, #3
3418260c:	4810      	ldr	r0, [pc, #64]	@ (34182650 <BSP_CAMERA_Init+0x1b8>)
3418260e:	f00c fc43 	bl	3418ee98 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  /* BSP status */
  return ret;
34182612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
34182614:	4618      	mov	r0, r3
34182616:	3750      	adds	r7, #80	@ 0x50
34182618:	46bd      	mov	sp, r7
3418261a:	bd80      	pop	{r7, pc}
3418261c:	341c0f54 	.word	0x341c0f54
34182620:	341c0f48 	.word	0x341c0f48
34182624:	58002000 	.word	0x58002000
34182628:	34182a69 	.word	0x34182a69
3418262c:	34182a91 	.word	0x34182a91
34182630:	34182ac1 	.word	0x34182ac1
34182634:	34182ae5 	.word	0x34182ae5
34182638:	34182b15 	.word	0x34182b15
3418263c:	341c0008 	.word	0x341c0008
34182640:	341c0f84 	.word	0x341c0f84
34182644:	52023100 	.word	0x52023100
34182648:	52023180 	.word	0x52023180
3418264c:	2000001d 	.word	0x2000001d
34182650:	2000001c 	.word	0x2000001c

34182654 <MX_DCMIPP_Init>:
  * @param  hdcmipp  DCMIPP handle
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DCMIPP_Init(DCMIPP_HandleTypeDef *hdcmipp)
{
34182654:	b580      	push	{r7, lr}
34182656:	b092      	sub	sp, #72	@ 0x48
34182658:	af00      	add	r7, sp, #0
3418265a:	6078      	str	r0, [r7, #4]
  DCMIPP_PipeConfTypeDef pPipeConf = {0};
3418265c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
34182660:	2200      	movs	r2, #0
34182662:	601a      	str	r2, [r3, #0]
34182664:	605a      	str	r2, [r3, #4]
34182666:	609a      	str	r2, [r3, #8]
  DCMIPP_CSI_PIPE_ConfTypeDef pCSIPipeConf = {0};
34182668:	f107 0330 	add.w	r3, r7, #48	@ 0x30
3418266c:	2200      	movs	r2, #0
3418266e:	601a      	str	r2, [r3, #0]
34182670:	605a      	str	r2, [r3, #4]
34182672:	609a      	str	r2, [r3, #8]
  DCMIPP_CSI_ConfTypeDef csiconf = {0};
34182674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
34182678:	2200      	movs	r2, #0
3418267a:	601a      	str	r2, [r3, #0]
3418267c:	605a      	str	r2, [r3, #4]
3418267e:	609a      	str	r2, [r3, #8]
  DCMIPP_DownsizeTypeDef DonwsizeConf ={0};
34182680:	f107 030c 	add.w	r3, r7, #12
34182684:	2200      	movs	r2, #0
34182686:	601a      	str	r2, [r3, #0]
34182688:	605a      	str	r2, [r3, #4]
3418268a:	609a      	str	r2, [r3, #8]
3418268c:	60da      	str	r2, [r3, #12]
3418268e:	611a      	str	r2, [r3, #16]
34182690:	615a      	str	r2, [r3, #20]

  if (HAL_DCMIPP_Init(hdcmipp) != HAL_OK)
34182692:	6878      	ldr	r0, [r7, #4]
34182694:	f002 f84c 	bl	34184730 <HAL_DCMIPP_Init>
34182698:	4603      	mov	r3, r0
3418269a:	2b00      	cmp	r3, #0
3418269c:	d001      	beq.n	341826a2 <MX_DCMIPP_Init+0x4e>
  {
    return HAL_ERROR;
3418269e:	2301      	movs	r3, #1
341826a0:	e067      	b.n	34182772 <MX_DCMIPP_Init+0x11e>
  }

  /* Configure the CSI */
  csiconf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
341826a2:	2301      	movs	r3, #1
341826a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  csiconf.NumberOfLanes   = DCMIPP_CSI_TWO_DATA_LANES;
341826a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
341826aa:	627b      	str	r3, [r7, #36]	@ 0x24
  csiconf.PHYBitrate      = DCMIPP_CSI_PHY_BT_1600;
341826ac:	232c      	movs	r3, #44	@ 0x2c
341826ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(HAL_DCMIPP_CSI_SetConfig(hdcmipp, &csiconf) != HAL_OK)
341826b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
341826b4:	4619      	mov	r1, r3
341826b6:	6878      	ldr	r0, [r7, #4]
341826b8:	f002 f872 	bl	341847a0 <HAL_DCMIPP_CSI_SetConfig>
341826bc:	4603      	mov	r3, r0
341826be:	2b00      	cmp	r3, #0
341826c0:	d001      	beq.n	341826c6 <MX_DCMIPP_Init+0x72>
  {
    return HAL_ERROR;
341826c2:	2301      	movs	r3, #1
341826c4:	e055      	b.n	34182772 <MX_DCMIPP_Init+0x11e>
  }
  /* Configure the Virtual Channel 0 */
  /* Set Virtual Channel config */
  if(HAL_DCMIPP_CSI_SetVCConfig(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP10) != HAL_OK)
341826c6:	2203      	movs	r2, #3
341826c8:	2100      	movs	r1, #0
341826ca:	6878      	ldr	r0, [r7, #4]
341826cc:	f002 fa6c 	bl	34184ba8 <HAL_DCMIPP_CSI_SetVCConfig>
341826d0:	4603      	mov	r3, r0
341826d2:	2b00      	cmp	r3, #0
341826d4:	d001      	beq.n	341826da <MX_DCMIPP_Init+0x86>
  {
    return HAL_ERROR;
341826d6:	2301      	movs	r3, #1
341826d8:	e04b      	b.n	34182772 <MX_DCMIPP_Init+0x11e>
  }

  /* Configure the serial Pipe */
  pCSIPipeConf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
341826da:	2300      	movs	r3, #0
341826dc:	633b      	str	r3, [r7, #48]	@ 0x30
  pCSIPipeConf.DataTypeIDA  = DCMIPP_DT_RAW10;
341826de:	232b      	movs	r3, #43	@ 0x2b
341826e0:	637b      	str	r3, [r7, #52]	@ 0x34
  pCSIPipeConf.DataTypeIDB  = DCMIPP_DT_RAW10; /* Don't Care */
341826e2:	232b      	movs	r3, #43	@ 0x2b
341826e4:	63bb      	str	r3, [r7, #56]	@ 0x38


  if (HAL_DCMIPP_CSI_PIPE_SetConfig(hdcmipp, DCMIPP_PIPE1, &pCSIPipeConf) != HAL_OK)
341826e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
341826ea:	461a      	mov	r2, r3
341826ec:	2101      	movs	r1, #1
341826ee:	6878      	ldr	r0, [r7, #4]
341826f0:	f002 f9ba 	bl	34184a68 <HAL_DCMIPP_CSI_PIPE_SetConfig>
341826f4:	4603      	mov	r3, r0
341826f6:	2b00      	cmp	r3, #0
341826f8:	d001      	beq.n	341826fe <MX_DCMIPP_Init+0xaa>
  {
    return HAL_ERROR;
341826fa:	2301      	movs	r3, #1
341826fc:	e039      	b.n	34182772 <MX_DCMIPP_Init+0x11e>
  }

  pPipeConf.FrameRate  = DCMIPP_FRAME_RATE_ALL;
341826fe:	2300      	movs	r3, #0
34182700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pPipeConf.PixelPackerFormat = DCMIPP_PIXEL_PACKER_FORMAT_RGB565_1;
34182702:	2301      	movs	r3, #1
34182704:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Set Pitch for Main and Ancillary Pipes */
  pPipeConf.PixelPipePitch  = 1600 ; /* Number of bytes */
34182706:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
3418270a:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Configure Pipe */
  if (HAL_DCMIPP_PIPE_SetConfig(hdcmipp, DCMIPP_PIPE1, &pPipeConf) != HAL_OK)
3418270c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
34182710:	461a      	mov	r2, r3
34182712:	2101      	movs	r1, #1
34182714:	6878      	ldr	r0, [r7, #4]
34182716:	f002 fa89 	bl	34184c2c <HAL_DCMIPP_PIPE_SetConfig>
3418271a:	4603      	mov	r3, r0
3418271c:	2b00      	cmp	r3, #0
3418271e:	d001      	beq.n	34182724 <MX_DCMIPP_Init+0xd0>
  {
    return HAL_ERROR;
34182720:	2301      	movs	r3, #1
34182722:	e026      	b.n	34182772 <MX_DCMIPP_Init+0x11e>
  }

  /* Configure the downsize */
  DonwsizeConf.HRatio      = 25656;
34182724:	f246 4338 	movw	r3, #25656	@ 0x6438
34182728:	61bb      	str	r3, [r7, #24]
  DonwsizeConf.VRatio      = 33161;
3418272a:	f248 1389 	movw	r3, #33161	@ 0x8189
3418272e:	617b      	str	r3, [r7, #20]
  DonwsizeConf.HSize       = 800;
34182730:	f44f 7348 	mov.w	r3, #800	@ 0x320
34182734:	613b      	str	r3, [r7, #16]
  DonwsizeConf.VSize       = 480;
34182736:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
3418273a:	60fb      	str	r3, [r7, #12]
  DonwsizeConf.HDivFactor  = 316;
3418273c:	f44f 739e 	mov.w	r3, #316	@ 0x13c
34182740:	623b      	str	r3, [r7, #32]
  DonwsizeConf.VDivFactor  = 253;
34182742:	23fd      	movs	r3, #253	@ 0xfd
34182744:	61fb      	str	r3, [r7, #28]

  if(HAL_DCMIPP_PIPE_SetDownsizeConfig(hdcmipp, DCMIPP_PIPE1, &DonwsizeConf) != HAL_OK)
34182746:	f107 030c 	add.w	r3, r7, #12
3418274a:	461a      	mov	r2, r3
3418274c:	2101      	movs	r1, #1
3418274e:	6878      	ldr	r0, [r7, #4]
34182750:	f003 fa21 	bl	34185b96 <HAL_DCMIPP_PIPE_SetDownsizeConfig>
34182754:	4603      	mov	r3, r0
34182756:	2b00      	cmp	r3, #0
34182758:	d001      	beq.n	3418275e <MX_DCMIPP_Init+0x10a>
  {
    return HAL_ERROR;
3418275a:	2301      	movs	r3, #1
3418275c:	e009      	b.n	34182772 <MX_DCMIPP_Init+0x11e>
  }
  if(HAL_DCMIPP_PIPE_EnableDownsize(hdcmipp, DCMIPP_PIPE1) != HAL_OK)
3418275e:	2101      	movs	r1, #1
34182760:	6878      	ldr	r0, [r7, #4]
34182762:	f003 fa96 	bl	34185c92 <HAL_DCMIPP_PIPE_EnableDownsize>
34182766:	4603      	mov	r3, r0
34182768:	2b00      	cmp	r3, #0
3418276a:	d001      	beq.n	34182770 <MX_DCMIPP_Init+0x11c>
  {
    return HAL_ERROR;
3418276c:	2301      	movs	r3, #1
3418276e:	e000      	b.n	34182772 <MX_DCMIPP_Init+0x11e>
  }

  return HAL_OK;
34182770:	2300      	movs	r3, #0
}
34182772:	4618      	mov	r0, r3
34182774:	3748      	adds	r7, #72	@ 0x48
34182776:	46bd      	mov	sp, r7
34182778:	bd80      	pop	{r7, pc}

3418277a <MX_DCMIPP_ClockConfig>:
  * @param  hdcmipp  DCMIPP Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DCMIPP_ClockConfig(DCMIPP_HandleTypeDef *hdcmipp)
{
3418277a:	b580      	push	{r7, lr}
3418277c:	b0e6      	sub	sp, #408	@ 0x198
3418277e:	af00      	add	r7, sp, #0
34182780:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
34182784:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
34182788:	6018      	str	r0, [r3, #0]
  UNUSED(hdcmipp);
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
3418278a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
3418278e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34182792:	4618      	mov	r0, r3
34182794:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34182798:	461a      	mov	r2, r3
3418279a:	2100      	movs	r1, #0
3418279c:	f010 fd02 	bl	341931a4 <memset>
  /* Configure DCMIPP clock to IC17 with PLL1  */
  /* PLL1_VCO Input = HSI_VALUE/PLLM = 64 Mhz / 4 = 16 */
  /* PLL1_VCO Output = PLL3_VCO Input * PLLN = 16 Mhz * 75 = 1200 */
  /* PLLLCDCLK = PLL3_VCO Output/(PLLP1 * PLLP2) = 1200/4 = 300Mhz */
  /* DCMIPP clock frequency = PLLLCDCLK = 300 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DCMIPP;
341827a0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
341827a4:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
341827a8:	f04f 0210 	mov.w	r2, #16
341827ac:	f04f 0300 	mov.w	r3, #0
341827b0:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_IC17;
341827b4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
341827b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
341827bc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
341827c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  PeriphClkInitStruct.ICSelection[RCC_IC17].ClockSelection = RCC_ICCLKSOURCE_PLL1;
341827c4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
341827c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
341827cc:	2200      	movs	r2, #0
341827ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  PeriphClkInitStruct.ICSelection[RCC_IC17].ClockDivider = 4;
341827d2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
341827d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
341827da:	2204      	movs	r2, #4
341827dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
341827e0:	f107 0308 	add.w	r3, r7, #8
341827e4:	4618      	mov	r0, r3
341827e6:	f009 fe75 	bl	3418c4d4 <HAL_RCCEx_PeriphCLKConfig>
341827ea:	4603      	mov	r3, r0
341827ec:	2b00      	cmp	r3, #0
341827ee:	d001      	beq.n	341827f4 <MX_DCMIPP_ClockConfig+0x7a>
  {
    return HAL_ERROR;
341827f0:	2301      	movs	r3, #1
341827f2:	e022      	b.n	3418283a <MX_DCMIPP_ClockConfig+0xc0>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CSI;
341827f4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
341827f8:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
341827fc:	f04f 0208 	mov.w	r2, #8
34182800:	f04f 0300 	mov.w	r3, #0
34182804:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.ICSelection[RCC_IC18].ClockSelection = RCC_ICCLKSOURCE_PLL1;
34182808:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
3418280c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34182810:	2200      	movs	r2, #0
34182812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  PeriphClkInitStruct.ICSelection[RCC_IC18].ClockDivider = 60;
34182816:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
3418281a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
3418281e:	223c      	movs	r2, #60	@ 0x3c
34182820:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34182824:	f107 0308 	add.w	r3, r7, #8
34182828:	4618      	mov	r0, r3
3418282a:	f009 fe53 	bl	3418c4d4 <HAL_RCCEx_PeriphCLKConfig>
3418282e:	4603      	mov	r3, r0
34182830:	2b00      	cmp	r3, #0
34182832:	d001      	beq.n	34182838 <MX_DCMIPP_ClockConfig+0xbe>
  {
    return HAL_ERROR;
34182834:	2301      	movs	r3, #1
34182836:	e000      	b.n	3418283a <MX_DCMIPP_ClockConfig+0xc0>
  }

  return HAL_OK;
34182838:	2300      	movs	r3, #0
}
3418283a:	4618      	mov	r0, r3
3418283c:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
34182840:	46bd      	mov	sp, r7
34182842:	bd80      	pop	{r7, pc}

34182844 <BSP_CAMERA_Start>:
  * @param  pbuff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pbuff, uint32_t Mode)
{
34182844:	b580      	push	{r7, lr}
34182846:	b088      	sub	sp, #32
34182848:	af02      	add	r7, sp, #8
3418284a:	60f8      	str	r0, [r7, #12]
3418284c:	60b9      	str	r1, [r7, #8]
3418284e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34182850:	2300      	movs	r3, #0
34182852:	617b      	str	r3, [r7, #20]

  if (Instance >= CAMERA_INSTANCES_NBR)
34182854:	68fb      	ldr	r3, [r7, #12]
34182856:	2b00      	cmp	r3, #0
34182858:	d003      	beq.n	34182862 <BSP_CAMERA_Start+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
3418285a:	f06f 0301 	mvn.w	r3, #1
3418285e:	617b      	str	r3, [r7, #20]
34182860:	e00e      	b.n	34182880 <BSP_CAMERA_Start+0x3c>
  }
  else if (HAL_DCMIPP_CSI_PIPE_Start(&hcamera_dcmipp, DCMIPP_PIPE1, DCMIPP_VIRTUAL_CHANNEL0 , (uint32_t)pbuff, Mode) != HAL_OK)
34182862:	68ba      	ldr	r2, [r7, #8]
34182864:	687b      	ldr	r3, [r7, #4]
34182866:	9300      	str	r3, [sp, #0]
34182868:	4613      	mov	r3, r2
3418286a:	2200      	movs	r2, #0
3418286c:	2101      	movs	r1, #1
3418286e:	480b      	ldr	r0, [pc, #44]	@ (3418289c <BSP_CAMERA_Start+0x58>)
34182870:	f002 fa1e 	bl	34184cb0 <HAL_DCMIPP_CSI_PIPE_Start>
34182874:	4603      	mov	r3, r0
34182876:	2b00      	cmp	r3, #0
34182878:	d002      	beq.n	34182880 <BSP_CAMERA_Start+0x3c>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
3418287a:	f06f 0303 	mvn.w	r3, #3
3418287e:	617b      	str	r3, [r7, #20]
  else
  {
    /* No action */
  }
  /* Start the Image Signal Processing */
  if (ISP_Start(&hcamera_isp) != ISP_OK)
34182880:	4807      	ldr	r0, [pc, #28]	@ (341828a0 <BSP_CAMERA_Start+0x5c>)
34182882:	f00d fe11 	bl	341904a8 <ISP_Start>
34182886:	4603      	mov	r3, r0
34182888:	2b00      	cmp	r3, #0
3418288a:	d002      	beq.n	34182892 <BSP_CAMERA_Start+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3418288c:	f06f 0304 	mvn.w	r3, #4
34182890:	617b      	str	r3, [r7, #20]
  }
  /* Return BSP status */
  return ret;
34182892:	697b      	ldr	r3, [r7, #20]
}
34182894:	4618      	mov	r0, r3
34182896:	3718      	adds	r7, #24
34182898:	46bd      	mov	sp, r7
3418289a:	bd80      	pop	{r7, pc}
3418289c:	341c0f48 	.word	0x341c0f48
341828a0:	341c0f84 	.word	0x341c0f84

341828a4 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
341828a4:	b580      	push	{r7, lr}
341828a6:	b088      	sub	sp, #32
341828a8:	af00      	add	r7, sp, #0
341828aa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
341828ac:	2300      	movs	r3, #0
341828ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef gpio_init_structure = {0};
341828b0:	f107 0308 	add.w	r3, r7, #8
341828b4:	2200      	movs	r2, #0
341828b6:	601a      	str	r2, [r3, #0]
341828b8:	605a      	str	r2, [r3, #4]
341828ba:	609a      	str	r2, [r3, #8]
341828bc:	60da      	str	r2, [r3, #12]
341828be:	611a      	str	r2, [r3, #16]

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOO_CLK_ENABLE(); // EN Cam
341828c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
341828c4:	f7ff fd84 	bl	341823d0 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE(); // NRST Cam
341828c8:	2008      	movs	r0, #8
341828ca:	f7ff fd81 	bl	341823d0 <LL_AHB4_GRP1_EnableClock>

  if (Instance >= CAMERA_INSTANCES_NBR)
341828ce:	687b      	ldr	r3, [r7, #4]
341828d0:	2b00      	cmp	r3, #0
341828d2:	d003      	beq.n	341828dc <BSP_CAMERA_HwReset+0x38>
  {
    ret = BSP_ERROR_WRONG_PARAM;
341828d4:	f06f 0301 	mvn.w	r3, #1
341828d8:	61fb      	str	r3, [r7, #28]
341828da:	e03e      	b.n	3418295a <BSP_CAMERA_HwReset+0xb6>
  }
  else
  {
    gpio_init_structure.Pin       = EN_CAM_PIN;
341828dc:	2304      	movs	r3, #4
341828de:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull      = GPIO_NOPULL;
341828e0:	2300      	movs	r3, #0
341828e2:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
341828e4:	2301      	movs	r3, #1
341828e6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
341828e8:	2303      	movs	r3, #3
341828ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(EN_CAM_PORT, &gpio_init_structure);
341828ec:	f107 0308 	add.w	r3, r7, #8
341828f0:	4619      	mov	r1, r3
341828f2:	481c      	ldr	r0, [pc, #112]	@ (34182964 <BSP_CAMERA_HwReset+0xc0>)
341828f4:	f004 fffe 	bl	341878f4 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = NRST_CAM_PIN;
341828f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
341828fc:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull      = GPIO_NOPULL;
341828fe:	2300      	movs	r3, #0
34182900:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34182902:	2301      	movs	r3, #1
34182904:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34182906:	2303      	movs	r3, #3
34182908:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(NRST_CAM_PORT, &gpio_init_structure);
3418290a:	f107 0308 	add.w	r3, r7, #8
3418290e:	4619      	mov	r1, r3
34182910:	4815      	ldr	r0, [pc, #84]	@ (34182968 <BSP_CAMERA_HwReset+0xc4>)
34182912:	f004 ffef 	bl	341878f4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // Disable MB1723 2V8 signal
34182916:	2200      	movs	r2, #0
34182918:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418291c:	4812      	ldr	r0, [pc, #72]	@ (34182968 <BSP_CAMERA_HwReset+0xc4>)
3418291e:	f005 fadb 	bl	34187ed8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
34182922:	2064      	movs	r0, #100	@ 0x64
34182924:	f001 fdce 	bl	341844c4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); /* RESET low (reset active low) */
34182928:	2200      	movs	r2, #0
3418292a:	2104      	movs	r1, #4
3418292c:	480d      	ldr	r0, [pc, #52]	@ (34182964 <BSP_CAMERA_HwReset+0xc0>)
3418292e:	f005 fad3 	bl	34187ed8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
34182932:	2064      	movs	r0, #100	@ 0x64
34182934:	f001 fdc6 	bl	341844c4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // ENABLE MB1723 2V8 signal
34182938:	2201      	movs	r2, #1
3418293a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418293e:	480a      	ldr	r0, [pc, #40]	@ (34182968 <BSP_CAMERA_HwReset+0xc4>)
34182940:	f005 faca 	bl	34187ed8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
34182944:	2064      	movs	r0, #100	@ 0x64
34182946:	f001 fdbd 	bl	341844c4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); /* RESET high (release reset) */
3418294a:	2201      	movs	r2, #1
3418294c:	2104      	movs	r1, #4
3418294e:	4805      	ldr	r0, [pc, #20]	@ (34182964 <BSP_CAMERA_HwReset+0xc0>)
34182950:	f005 fac2 	bl	34187ed8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
34182954:	2064      	movs	r0, #100	@ 0x64
34182956:	f001 fdb5 	bl	341844c4 <HAL_Delay>
  }
  return ret;
3418295a:	69fb      	ldr	r3, [r7, #28]
}
3418295c:	4618      	mov	r0, r3
3418295e:	3720      	adds	r7, #32
34182960:	46bd      	mov	sp, r7
34182962:	bd80      	pop	{r7, pc}
34182964:	56020c00 	.word	0x56020c00
34182968:	56020800 	.word	0x56020800

3418296c <BSP_CAMERA_BackgroundProcess>:
/**
  * @brief  This function handles the Background process required for the ISP Middleware.
  * @retval BSP status
  */
int32_t BSP_CAMERA_BackgroundProcess(void)
{
3418296c:	b580      	push	{r7, lr}
3418296e:	af00      	add	r7, sp, #0
  if (ISP_BackgroundProcess(&hcamera_isp) != ISP_OK)
34182970:	4805      	ldr	r0, [pc, #20]	@ (34182988 <BSP_CAMERA_BackgroundProcess+0x1c>)
34182972:	f00d fea1 	bl	341906b8 <ISP_BackgroundProcess>
34182976:	4603      	mov	r3, r0
34182978:	2b00      	cmp	r3, #0
3418297a:	d002      	beq.n	34182982 <BSP_CAMERA_BackgroundProcess+0x16>
  {
    return BSP_ERROR_PERIPH_FAILURE;
3418297c:	f06f 0303 	mvn.w	r3, #3
34182980:	e000      	b.n	34182984 <BSP_CAMERA_BackgroundProcess+0x18>
  }
  return BSP_ERROR_NONE;
34182982:	2300      	movs	r3, #0
}
34182984:	4618      	mov	r0, r3
34182986:	bd80      	pop	{r7, pc}
34182988:	341c0f84 	.word	0x341c0f84

3418298c <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
3418298c:	b480      	push	{r7}
3418298e:	b083      	sub	sp, #12
34182990:	af00      	add	r7, sp, #0
34182992:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_PIPE_LineEventCallback could be implemented in the user file
   */
}
34182994:	bf00      	nop
34182996:	370c      	adds	r7, #12
34182998:	46bd      	mov	sp, r7
3418299a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418299e:	4770      	bx	lr

341829a0 <BSP_CAMERA_PipeErrorCallback>:
  * @brief  Pipe Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_PipeErrorCallback(uint32_t Instance)
{
341829a0:	b480      	push	{r7}
341829a2:	b083      	sub	sp, #12
341829a4:	af00      	add	r7, sp, #0
341829a6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_PIPE_ErrorCallback could be implemented in the user file
   */
}
341829a8:	bf00      	nop
341829aa:	370c      	adds	r7, #12
341829ac:	46bd      	mov	sp, r7
341829ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341829b2:	4770      	bx	lr

341829b4 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
341829b4:	b480      	push	{r7}
341829b6:	b083      	sub	sp, #12
341829b8:	af00      	add	r7, sp, #0
341829ba:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_ErrorCallback could be implemented in the user file
   */
}
341829bc:	bf00      	nop
341829be:	370c      	adds	r7, #12
341829c0:	46bd      	mov	sp, r7
341829c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341829c6:	4770      	bx	lr

341829c8 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @param  hdcmipp  pointer to the DCMIPP handle
  * @param  Pipe  pipe value
  * @retval None
  */
void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341829c8:	b580      	push	{r7, lr}
341829ca:	b082      	sub	sp, #8
341829cc:	af00      	add	r7, sp, #0
341829ce:	6078      	str	r0, [r7, #4]
341829d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);
  UNUSED(Pipe);

  BSP_CAMERA_LineEventCallback(0);
341829d2:	2000      	movs	r0, #0
341829d4:	f7ff ffda 	bl	3418298c <BSP_CAMERA_LineEventCallback>
}
341829d8:	bf00      	nop
341829da:	3708      	adds	r7, #8
341829dc:	46bd      	mov	sp, r7
341829de:	bd80      	pop	{r7, pc}

341829e0 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @param  hdcmipp pointer to the DCMIPP handle
  * @param  Pipe  pipe value
  * @retval None
  */
void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341829e0:	b580      	push	{r7, lr}
341829e2:	b082      	sub	sp, #8
341829e4:	af00      	add	r7, sp, #0
341829e6:	6078      	str	r0, [r7, #4]
341829e8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);
  UNUSED(Pipe);

  BSP_CAMERA_PipeErrorCallback(0);
341829ea:	2000      	movs	r0, #0
341829ec:	f7ff ffd8 	bl	341829a0 <BSP_CAMERA_PipeErrorCallback>
}
341829f0:	bf00      	nop
341829f2:	3708      	adds	r7, #8
341829f4:	46bd      	mov	sp, r7
341829f6:	bd80      	pop	{r7, pc}

341829f8 <HAL_DCMIPP_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmipp pointer to the DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
341829f8:	b580      	push	{r7, lr}
341829fa:	b082      	sub	sp, #8
341829fc:	af00      	add	r7, sp, #0
341829fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);

  BSP_CAMERA_ErrorCallback(0);
34182a00:	2000      	movs	r0, #0
34182a02:	f7ff ffd7 	bl	341829b4 <BSP_CAMERA_ErrorCallback>
}
34182a06:	bf00      	nop
34182a08:	3708      	adds	r7, #8
34182a0a:	46bd      	mov	sp, r7
34182a0c:	bd80      	pop	{r7, pc}

34182a0e <DCMIPP_MspInit>:
  * @brief  Initializes the DCMIPP MSP.
  * @param  hdcmipp  DCMIPP handle
  * @retval None
  */
static void DCMIPP_MspInit(const DCMIPP_HandleTypeDef *hdcmipp)
{
34182a0e:	b580      	push	{r7, lr}
34182a10:	b082      	sub	sp, #8
34182a12:	af00      	add	r7, sp, #0
34182a14:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmipp);

  /*** Enable peripheral clock ***/
  /* Enable DCMIPP clock */
  __HAL_RCC_DCMIPP_CLK_ENABLE();
34182a16:	2004      	movs	r0, #4
34182a18:	f7ff fcf0 	bl	341823fc <LL_APB5_GRP1_EnableClock>

  __HAL_RCC_DCMIPP_FORCE_RESET();
34182a1c:	2004      	movs	r0, #4
34182a1e:	f7ff fd03 	bl	34182428 <LL_APB5_GRP1_ForceReset>
  __HAL_RCC_DCMIPP_RELEASE_RESET();
34182a22:	2004      	movs	r0, #4
34182a24:	f7ff fd10 	bl	34182448 <LL_APB5_GRP1_ReleaseReset>

  /*** Configure the NVIC for DCMIPP ***/
  /* NVIC configuration for DCMIPP transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMIPP_IRQn, 0x07, 0);
34182a28:	2200      	movs	r2, #0
34182a2a:	2107      	movs	r1, #7
34182a2c:	2030      	movs	r0, #48	@ 0x30
34182a2e:	f001 fe48 	bl	341846c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMIPP_IRQn);
34182a32:	2030      	movs	r0, #48	@ 0x30
34182a34:	f001 fe62 	bl	341846fc <HAL_NVIC_EnableIRQ>

  /*** Enable peripheral clock ***/
  /* Enable CSI clock */
  __HAL_RCC_CSI_CLK_ENABLE();
34182a38:	2040      	movs	r0, #64	@ 0x40
34182a3a:	f7ff fcdf 	bl	341823fc <LL_APB5_GRP1_EnableClock>
  __HAL_RCC_CSI_CLK_SLEEP_DISABLE();
34182a3e:	2040      	movs	r0, #64	@ 0x40
34182a40:	f7ff fd16 	bl	34182470 <LL_APB5_GRP1_DisableClockLowPower>
  __HAL_RCC_CSI_FORCE_RESET();
34182a44:	2040      	movs	r0, #64	@ 0x40
34182a46:	f7ff fcef 	bl	34182428 <LL_APB5_GRP1_ForceReset>
  __HAL_RCC_CSI_RELEASE_RESET();
34182a4a:	2040      	movs	r0, #64	@ 0x40
34182a4c:	f7ff fcfc 	bl	34182448 <LL_APB5_GRP1_ReleaseReset>

  /*** Configure the NVIC for CSI ***/
  /* NVIC configuration for CSI transfer complete interrupt */
  HAL_NVIC_SetPriority(CSI_IRQn, 0x07, 0);
34182a50:	2200      	movs	r2, #0
34182a52:	2107      	movs	r1, #7
34182a54:	202f      	movs	r0, #47	@ 0x2f
34182a56:	f001 fe34 	bl	341846c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CSI_IRQn);
34182a5a:	202f      	movs	r0, #47	@ 0x2f
34182a5c:	f001 fe4e 	bl	341846fc <HAL_NVIC_EnableIRQ>
}
34182a60:	bf00      	nop
34182a62:	3708      	adds	r7, #8
34182a64:	46bd      	mov	sp, r7
34182a66:	bd80      	pop	{r7, pc}

34182a68 <BSP_GetSensorInfoHelper>:
/**
  * @brief  ISP Middleware helper. Camera sensor info getter
  * @retval ISP Status
  */
static ISP_StatusTypeDef BSP_GetSensorInfoHelper(uint32_t Instance, ISP_SensorInfoTypeDef *SensorInfo)
{
34182a68:	b580      	push	{r7, lr}
34182a6a:	b082      	sub	sp, #8
34182a6c:	af00      	add	r7, sp, #0
34182a6e:	6078      	str	r0, [r7, #4]
34182a70:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  return (ISP_StatusTypeDef) IMX335_GetSensorInfo(Camera_CompObj, (IMX335_SensorInfo_t *) SensorInfo);
34182a72:	4b06      	ldr	r3, [pc, #24]	@ (34182a8c <BSP_GetSensorInfoHelper+0x24>)
34182a74:	681b      	ldr	r3, [r3, #0]
34182a76:	6839      	ldr	r1, [r7, #0]
34182a78:	4618      	mov	r0, r3
34182a7a:	f001 faa9 	bl	34183fd0 <IMX335_GetSensorInfo>
34182a7e:	4603      	mov	r3, r0
34182a80:	b2db      	uxtb	r3, r3
}
34182a82:	4618      	mov	r0, r3
34182a84:	3708      	adds	r7, #8
34182a86:	46bd      	mov	sp, r7
34182a88:	bd80      	pop	{r7, pc}
34182a8a:	bf00      	nop
34182a8c:	341c0f44 	.word	0x341c0f44

34182a90 <BSP_SetSensorGainHelper>:
/**
  * @brief  ISP Middleware helper. Camera gain setter
  * @retval ISP Status
  */
static ISP_StatusTypeDef BSP_SetSensorGainHelper(uint32_t Instance, int32_t Gain)
{
34182a90:	b580      	push	{r7, lr}
34182a92:	b082      	sub	sp, #8
34182a94:	af00      	add	r7, sp, #0
34182a96:	6078      	str	r0, [r7, #4]
34182a98:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  isp_gain = Gain;
34182a9a:	4a07      	ldr	r2, [pc, #28]	@ (34182ab8 <BSP_SetSensorGainHelper+0x28>)
34182a9c:	683b      	ldr	r3, [r7, #0]
34182a9e:	6013      	str	r3, [r2, #0]
  return (ISP_StatusTypeDef) IMX335_SetGain(Camera_CompObj, Gain);
34182aa0:	4b06      	ldr	r3, [pc, #24]	@ (34182abc <BSP_SetSensorGainHelper+0x2c>)
34182aa2:	681b      	ldr	r3, [r3, #0]
34182aa4:	6839      	ldr	r1, [r7, #0]
34182aa6:	4618      	mov	r0, r3
34182aa8:	f001 fad0 	bl	3418404c <IMX335_SetGain>
34182aac:	4603      	mov	r3, r0
34182aae:	b2db      	uxtb	r3, r3
}
34182ab0:	4618      	mov	r0, r3
34182ab2:	3708      	adds	r7, #8
34182ab4:	46bd      	mov	sp, r7
34182ab6:	bd80      	pop	{r7, pc}
34182ab8:	341c1050 	.word	0x341c1050
34182abc:	341c0f44 	.word	0x341c0f44

34182ac0 <BSP_GetSensorGainHelper>:
/**
  * @brief  ISP Middleware helper. Camera gain getter
  * @retval ISP Status
  */
static ISP_StatusTypeDef BSP_GetSensorGainHelper(uint32_t Instance, int32_t *Gain)
{
34182ac0:	b480      	push	{r7}
34182ac2:	b083      	sub	sp, #12
34182ac4:	af00      	add	r7, sp, #0
34182ac6:	6078      	str	r0, [r7, #4]
34182ac8:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  *Gain = isp_gain;
34182aca:	4b05      	ldr	r3, [pc, #20]	@ (34182ae0 <BSP_GetSensorGainHelper+0x20>)
34182acc:	681a      	ldr	r2, [r3, #0]
34182ace:	683b      	ldr	r3, [r7, #0]
34182ad0:	601a      	str	r2, [r3, #0]
  return ISP_OK;
34182ad2:	2300      	movs	r3, #0
}
34182ad4:	4618      	mov	r0, r3
34182ad6:	370c      	adds	r7, #12
34182ad8:	46bd      	mov	sp, r7
34182ada:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ade:	4770      	bx	lr
34182ae0:	341c1050 	.word	0x341c1050

34182ae4 <BSP_SetSensorExposureHelper>:
/**
  * @brief  ISP Middleware helper. Camera exposure setter
  * @retval ISP Status
  */
static ISP_StatusTypeDef BSP_SetSensorExposureHelper(uint32_t Instance, int32_t Exposure)
{
34182ae4:	b580      	push	{r7, lr}
34182ae6:	b082      	sub	sp, #8
34182ae8:	af00      	add	r7, sp, #0
34182aea:	6078      	str	r0, [r7, #4]
34182aec:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  isp_exposure = Exposure;
34182aee:	4a07      	ldr	r2, [pc, #28]	@ (34182b0c <BSP_SetSensorExposureHelper+0x28>)
34182af0:	683b      	ldr	r3, [r7, #0]
34182af2:	6013      	str	r3, [r2, #0]
  return (ISP_StatusTypeDef) IMX335_SetExposure(Camera_CompObj, Exposure);
34182af4:	4b06      	ldr	r3, [pc, #24]	@ (34182b10 <BSP_SetSensorExposureHelper+0x2c>)
34182af6:	681b      	ldr	r3, [r3, #0]
34182af8:	6839      	ldr	r1, [r7, #0]
34182afa:	4618      	mov	r0, r3
34182afc:	f001 fafe 	bl	341840fc <IMX335_SetExposure>
34182b00:	4603      	mov	r3, r0
34182b02:	b2db      	uxtb	r3, r3
}
34182b04:	4618      	mov	r0, r3
34182b06:	3708      	adds	r7, #8
34182b08:	46bd      	mov	sp, r7
34182b0a:	bd80      	pop	{r7, pc}
34182b0c:	341c1054 	.word	0x341c1054
34182b10:	341c0f44 	.word	0x341c0f44

34182b14 <BSP_GetSensorExposureHelper>:
/**
  * @brief  ISP Middleware helper. Camera exposure getter
  * @retval ISP Status
  */
static ISP_StatusTypeDef BSP_GetSensorExposureHelper(uint32_t Instance, int32_t *Exposure)
{
34182b14:	b480      	push	{r7}
34182b16:	b083      	sub	sp, #12
34182b18:	af00      	add	r7, sp, #0
34182b1a:	6078      	str	r0, [r7, #4]
34182b1c:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  *Exposure = isp_exposure;
34182b1e:	4b05      	ldr	r3, [pc, #20]	@ (34182b34 <BSP_GetSensorExposureHelper+0x20>)
34182b20:	681a      	ldr	r2, [r3, #0]
34182b22:	683b      	ldr	r3, [r7, #0]
34182b24:	601a      	str	r2, [r3, #0]
  return ISP_OK;
34182b26:	2300      	movs	r3, #0
}
34182b28:	4618      	mov	r0, r3
34182b2a:	370c      	adds	r7, #12
34182b2c:	46bd      	mov	sp, r7
34182b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b32:	4770      	bx	lr
34182b34:	341c1054 	.word	0x341c1054

34182b38 <IMX335_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t IMX335_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
34182b38:	b580      	push	{r7, lr}
34182b3a:	b08a      	sub	sp, #40	@ 0x28
34182b3c:	af00      	add	r7, sp, #0
34182b3e:	6078      	str	r0, [r7, #4]
34182b40:	6039      	str	r1, [r7, #0]
  IMX335_IO_t              IOCtx;
  uint32_t                 id;
  static IMX335_Object_t   IMX335Obj;

  /* Configure the camera driver */
  IOCtx.Address     = CAMERA_IMX335_ADDRESS;
34182b42:	2334      	movs	r3, #52	@ 0x34
34182b44:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C1_Init;
34182b46:	4b32      	ldr	r3, [pc, #200]	@ (34182c10 <IMX335_Probe+0xd8>)
34182b48:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
34182b4a:	4b32      	ldr	r3, [pc, #200]	@ (34182c14 <IMX335_Probe+0xdc>)
34182b4c:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg16;
34182b4e:	4b32      	ldr	r3, [pc, #200]	@ (34182c18 <IMX335_Probe+0xe0>)
34182b50:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg16;
34182b52:	4b32      	ldr	r3, [pc, #200]	@ (34182c1c <IMX335_Probe+0xe4>)
34182b54:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
34182b56:	4b32      	ldr	r3, [pc, #200]	@ (34182c20 <IMX335_Probe+0xe8>)
34182b58:	623b      	str	r3, [r7, #32]

  if (IMX335_RegisterBusIO(&IMX335Obj, &IOCtx) != IMX335_OK)
34182b5a:	f107 030c 	add.w	r3, r7, #12
34182b5e:	4619      	mov	r1, r3
34182b60:	4830      	ldr	r0, [pc, #192]	@ (34182c24 <IMX335_Probe+0xec>)
34182b62:	f001 f925 	bl	34183db0 <IMX335_RegisterBusIO>
34182b66:	4603      	mov	r3, r0
34182b68:	2b00      	cmp	r3, #0
34182b6a:	d003      	beq.n	34182b74 <IMX335_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34182b6c:	f06f 0304 	mvn.w	r3, #4
34182b70:	627b      	str	r3, [r7, #36]	@ 0x24
34182b72:	e048      	b.n	34182c06 <IMX335_Probe+0xce>
  }
  else if (IMX335_ReadID(&IMX335Obj, &id) != IMX335_OK)
34182b74:	f107 0308 	add.w	r3, r7, #8
34182b78:	4619      	mov	r1, r3
34182b7a:	482a      	ldr	r0, [pc, #168]	@ (34182c24 <IMX335_Probe+0xec>)
34182b7c:	f001 f9c2 	bl	34183f04 <IMX335_ReadID>
34182b80:	4603      	mov	r3, r0
34182b82:	2b00      	cmp	r3, #0
34182b84:	d003      	beq.n	34182b8e <IMX335_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34182b86:	f06f 0304 	mvn.w	r3, #4
34182b8a:	627b      	str	r3, [r7, #36]	@ 0x24
34182b8c:	e03b      	b.n	34182c06 <IMX335_Probe+0xce>
  }
  else
  {
    if (id != (uint32_t) IMX335_CHIP_ID)
34182b8e:	68bb      	ldr	r3, [r7, #8]
34182b90:	2b00      	cmp	r3, #0
34182b92:	d003      	beq.n	34182b9c <IMX335_Probe+0x64>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
34182b94:	f06f 0306 	mvn.w	r3, #6
34182b98:	627b      	str	r3, [r7, #36]	@ 0x24
34182b9a:	e034      	b.n	34182c06 <IMX335_Probe+0xce>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &IMX335_CAMERA_Driver;
34182b9c:	4b22      	ldr	r3, [pc, #136]	@ (34182c28 <IMX335_Probe+0xf0>)
34182b9e:	4a23      	ldr	r2, [pc, #140]	@ (34182c2c <IMX335_Probe+0xf4>)
34182ba0:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &IMX335Obj;
34182ba2:	4b23      	ldr	r3, [pc, #140]	@ (34182c30 <IMX335_Probe+0xf8>)
34182ba4:	4a1f      	ldr	r2, [pc, #124]	@ (34182c24 <IMX335_Probe+0xec>)
34182ba6:	601a      	str	r2, [r3, #0]
      if (Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != IMX335_OK)
34182ba8:	4b1f      	ldr	r3, [pc, #124]	@ (34182c28 <IMX335_Probe+0xf0>)
34182baa:	681b      	ldr	r3, [r3, #0]
34182bac:	681b      	ldr	r3, [r3, #0]
34182bae:	4a20      	ldr	r2, [pc, #128]	@ (34182c30 <IMX335_Probe+0xf8>)
34182bb0:	6810      	ldr	r0, [r2, #0]
34182bb2:	683a      	ldr	r2, [r7, #0]
34182bb4:	6879      	ldr	r1, [r7, #4]
34182bb6:	4798      	blx	r3
34182bb8:	4603      	mov	r3, r0
34182bba:	2b00      	cmp	r3, #0
34182bbc:	d003      	beq.n	34182bc6 <IMX335_Probe+0x8e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34182bbe:	f06f 0304 	mvn.w	r3, #4
34182bc2:	627b      	str	r3, [r7, #36]	@ 0x24
34182bc4:	e01f      	b.n	34182c06 <IMX335_Probe+0xce>
      }
      else if(Camera_Drv->SetFrequency(Camera_CompObj, IMX335_INCK_24MHZ)!= IMX335_OK)
34182bc6:	4b18      	ldr	r3, [pc, #96]	@ (34182c28 <IMX335_Probe+0xf0>)
34182bc8:	681b      	ldr	r3, [r3, #0]
34182bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182bcc:	4a18      	ldr	r2, [pc, #96]	@ (34182c30 <IMX335_Probe+0xf8>)
34182bce:	6812      	ldr	r2, [r2, #0]
34182bd0:	2102      	movs	r1, #2
34182bd2:	4610      	mov	r0, r2
34182bd4:	4798      	blx	r3
34182bd6:	4603      	mov	r3, r0
34182bd8:	2b00      	cmp	r3, #0
34182bda:	d003      	beq.n	34182be4 <IMX335_Probe+0xac>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34182bdc:	f06f 0304 	mvn.w	r3, #4
34182be0:	627b      	str	r3, [r7, #36]	@ 0x24
34182be2:	e010      	b.n	34182c06 <IMX335_Probe+0xce>
      }
      else if (Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != IMX335_OK)
34182be4:	4b10      	ldr	r3, [pc, #64]	@ (34182c28 <IMX335_Probe+0xf0>)
34182be6:	681b      	ldr	r3, [r3, #0]
34182be8:	68db      	ldr	r3, [r3, #12]
34182bea:	4a11      	ldr	r2, [pc, #68]	@ (34182c30 <IMX335_Probe+0xf8>)
34182bec:	6812      	ldr	r2, [r2, #0]
34182bee:	4911      	ldr	r1, [pc, #68]	@ (34182c34 <IMX335_Probe+0xfc>)
34182bf0:	4610      	mov	r0, r2
34182bf2:	4798      	blx	r3
34182bf4:	4603      	mov	r3, r0
34182bf6:	2b00      	cmp	r3, #0
34182bf8:	d003      	beq.n	34182c02 <IMX335_Probe+0xca>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34182bfa:	f06f 0304 	mvn.w	r3, #4
34182bfe:	627b      	str	r3, [r7, #36]	@ 0x24
34182c00:	e001      	b.n	34182c06 <IMX335_Probe+0xce>
      }
      else
      {
        ret = BSP_ERROR_NONE;
34182c02:	2300      	movs	r3, #0
34182c04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ret;
34182c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
34182c08:	4618      	mov	r0, r3
34182c0a:	3728      	adds	r7, #40	@ 0x28
34182c0c:	46bd      	mov	sp, r7
34182c0e:	bd80      	pop	{r7, pc}
34182c10:	34181b29 	.word	0x34181b29
34182c14:	34181b9d 	.word	0x34181b9d
34182c18:	34181cc5 	.word	0x34181cc5
34182c1c:	34181c69 	.word	0x34181c69
34182c20:	34181e7d 	.word	0x34181e7d
34182c24:	341c1058 	.word	0x341c1058
34182c28:	341c100c 	.word	0x341c100c
34182c2c:	341c000c 	.word	0x341c000c
34182c30:	341c0f44 	.word	0x341c0f44
34182c34:	341c1010 	.word	0x341c1010

34182c38 <LL_AHB4_GRP1_EnableClock>:
{
34182c38:	b480      	push	{r7}
34182c3a:	b085      	sub	sp, #20
34182c3c:	af00      	add	r7, sp, #0
34182c3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34182c40:	4a07      	ldr	r2, [pc, #28]	@ (34182c60 <LL_AHB4_GRP1_EnableClock+0x28>)
34182c42:	687b      	ldr	r3, [r7, #4]
34182c44:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34182c48:	4b05      	ldr	r3, [pc, #20]	@ (34182c60 <LL_AHB4_GRP1_EnableClock+0x28>)
34182c4a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34182c4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34182c50:	68fb      	ldr	r3, [r7, #12]
}
34182c52:	bf00      	nop
34182c54:	3714      	adds	r7, #20
34182c56:	46bd      	mov	sp, r7
34182c58:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c5c:	4770      	bx	lr
34182c5e:	bf00      	nop
34182c60:	56028000 	.word	0x56028000

34182c64 <LL_AHB5_GRP1_EnableClock>:
{
34182c64:	b480      	push	{r7}
34182c66:	b085      	sub	sp, #20
34182c68:	af00      	add	r7, sp, #0
34182c6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34182c6c:	4a07      	ldr	r2, [pc, #28]	@ (34182c8c <LL_AHB5_GRP1_EnableClock+0x28>)
34182c6e:	687b      	ldr	r3, [r7, #4]
34182c70:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34182c74:	4b05      	ldr	r3, [pc, #20]	@ (34182c8c <LL_AHB5_GRP1_EnableClock+0x28>)
34182c76:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34182c7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34182c7c:	68fb      	ldr	r3, [r7, #12]
}
34182c7e:	bf00      	nop
34182c80:	3714      	adds	r7, #20
34182c82:	46bd      	mov	sp, r7
34182c84:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c88:	4770      	bx	lr
34182c8a:	bf00      	nop
34182c8c:	56028000 	.word	0x56028000

34182c90 <LL_AHB5_GRP1_ForceReset>:
{
34182c90:	b480      	push	{r7}
34182c92:	b083      	sub	sp, #12
34182c94:	af00      	add	r7, sp, #0
34182c96:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34182c98:	4a04      	ldr	r2, [pc, #16]	@ (34182cac <LL_AHB5_GRP1_ForceReset+0x1c>)
34182c9a:	687b      	ldr	r3, [r7, #4]
34182c9c:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
34182ca0:	bf00      	nop
34182ca2:	370c      	adds	r7, #12
34182ca4:	46bd      	mov	sp, r7
34182ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
34182caa:	4770      	bx	lr
34182cac:	56028000 	.word	0x56028000

34182cb0 <LL_AHB5_GRP1_ReleaseReset>:
{
34182cb0:	b480      	push	{r7}
34182cb2:	b083      	sub	sp, #12
34182cb4:	af00      	add	r7, sp, #0
34182cb6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34182cb8:	4b06      	ldr	r3, [pc, #24]	@ (34182cd4 <LL_AHB5_GRP1_ReleaseReset+0x24>)
34182cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182cbe:	461a      	mov	r2, r3
34182cc0:	687b      	ldr	r3, [r7, #4]
34182cc2:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
34182cc6:	bf00      	nop
34182cc8:	370c      	adds	r7, #12
34182cca:	46bd      	mov	sp, r7
34182ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
34182cd0:	4770      	bx	lr
34182cd2:	bf00      	nop
34182cd4:	56028000 	.word	0x56028000

34182cd8 <LL_APB5_GRP1_EnableClock>:
{
34182cd8:	b480      	push	{r7}
34182cda:	b085      	sub	sp, #20
34182cdc:	af00      	add	r7, sp, #0
34182cde:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5ENSR, Periphs);
34182ce0:	4a07      	ldr	r2, [pc, #28]	@ (34182d00 <LL_APB5_GRP1_EnableClock+0x28>)
34182ce2:	687b      	ldr	r3, [r7, #4]
34182ce4:	f8c2 3a7c 	str.w	r3, [r2, #2684]	@ 0xa7c
  tmpreg = READ_REG(RCC->APB5ENR);
34182ce8:	4b05      	ldr	r3, [pc, #20]	@ (34182d00 <LL_APB5_GRP1_EnableClock+0x28>)
34182cea:	f8d3 327c 	ldr.w	r3, [r3, #636]	@ 0x27c
34182cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34182cf0:	68fb      	ldr	r3, [r7, #12]
}
34182cf2:	bf00      	nop
34182cf4:	3714      	adds	r7, #20
34182cf6:	46bd      	mov	sp, r7
34182cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
34182cfc:	4770      	bx	lr
34182cfe:	bf00      	nop
34182d00:	56028000 	.word	0x56028000

34182d04 <LL_APB5_GRP1_ForceReset>:
{
34182d04:	b480      	push	{r7}
34182d06:	b083      	sub	sp, #12
34182d08:	af00      	add	r7, sp, #0
34182d0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5RSTSR, Periphs);
34182d0c:	4a04      	ldr	r2, [pc, #16]	@ (34182d20 <LL_APB5_GRP1_ForceReset+0x1c>)
34182d0e:	687b      	ldr	r3, [r7, #4]
34182d10:	f8c2 3a3c 	str.w	r3, [r2, #2620]	@ 0xa3c
}
34182d14:	bf00      	nop
34182d16:	370c      	adds	r7, #12
34182d18:	46bd      	mov	sp, r7
34182d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d1e:	4770      	bx	lr
34182d20:	56028000 	.word	0x56028000

34182d24 <LL_APB5_GRP1_ReleaseReset>:
{
34182d24:	b480      	push	{r7}
34182d26:	b083      	sub	sp, #12
34182d28:	af00      	add	r7, sp, #0
34182d2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34182d2c:	4b06      	ldr	r3, [pc, #24]	@ (34182d48 <LL_APB5_GRP1_ReleaseReset+0x24>)
34182d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182d32:	461a      	mov	r2, r3
34182d34:	687b      	ldr	r3, [r7, #4]
34182d36:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
}
34182d3a:	bf00      	nop
34182d3c:	370c      	adds	r7, #12
34182d3e:	46bd      	mov	sp, r7
34182d40:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d44:	4770      	bx	lr
34182d46:	bf00      	nop
34182d48:	56028000 	.word	0x56028000

34182d4c <BSP_LCD_Init>:
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */

int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
34182d4c:	b580      	push	{r7, lr}
34182d4e:	b084      	sub	sp, #16
34182d50:	af02      	add	r7, sp, #8
34182d52:	6078      	str	r0, [r7, #4]
34182d54:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB565, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
34182d56:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
34182d5a:	9300      	str	r3, [sp, #0]
34182d5c:	f44f 7348 	mov.w	r3, #800	@ 0x320
34182d60:	2202      	movs	r2, #2
34182d62:	6839      	ldr	r1, [r7, #0]
34182d64:	6878      	ldr	r0, [r7, #4]
34182d66:	f000 f805 	bl	34182d74 <BSP_LCD_InitEx>
34182d6a:	4603      	mov	r3, r0
}
34182d6c:	4618      	mov	r0, r3
34182d6e:	3708      	adds	r7, #8
34182d70:	46bd      	mov	sp, r7
34182d72:	bd80      	pop	{r7, pc}

34182d74 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
34182d74:	b580      	push	{r7, lr}
34182d76:	b08e      	sub	sp, #56	@ 0x38
34182d78:	af00      	add	r7, sp, #0
34182d7a:	60f8      	str	r0, [r7, #12]
34182d7c:	60b9      	str	r1, [r7, #8]
34182d7e:	607a      	str	r2, [r7, #4]
34182d80:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
34182d82:	2300      	movs	r3, #0
34182d84:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t ltdc_pixel_format;
  MX_LTDC_LayerConfig_t config = {0};
34182d86:	f107 0318 	add.w	r3, r7, #24
34182d8a:	2200      	movs	r2, #0
34182d8c:	601a      	str	r2, [r3, #0]
34182d8e:	605a      	str	r2, [r3, #4]
34182d90:	609a      	str	r2, [r3, #8]
34182d92:	60da      	str	r2, [r3, #12]
34182d94:	611a      	str	r2, [r3, #16]
34182d96:	615a      	str	r2, [r3, #20]

  if ((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
34182d98:	68bb      	ldr	r3, [r7, #8]
34182d9a:	2b01      	cmp	r3, #1
34182d9c:	d80e      	bhi.n	34182dbc <BSP_LCD_InitEx+0x48>
34182d9e:	68fb      	ldr	r3, [r7, #12]
34182da0:	2b00      	cmp	r3, #0
34182da2:	d10b      	bne.n	34182dbc <BSP_LCD_InitEx+0x48>
34182da4:	687b      	ldr	r3, [r7, #4]
34182da6:	2b02      	cmp	r3, #2
34182da8:	d00c      	beq.n	34182dc4 <BSP_LCD_InitEx+0x50>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LCD_PIXEL_FORMAT_RGB888) && \
34182daa:	687b      	ldr	r3, [r7, #4]
34182dac:	2b01      	cmp	r3, #1
34182dae:	d009      	beq.n	34182dc4 <BSP_LCD_InitEx+0x50>
34182db0:	687b      	ldr	r3, [r7, #4]
34182db2:	2b00      	cmp	r3, #0
34182db4:	d006      	beq.n	34182dc4 <BSP_LCD_InitEx+0x50>
      (PixelFormat != LCD_PIXEL_FORMAT_ARGB8888) &&  (PixelFormat != LCD_PIXEL_FORMAT_ARGB4444)))
34182db6:	687b      	ldr	r3, [r7, #4]
34182db8:	2b04      	cmp	r3, #4
34182dba:	d003      	beq.n	34182dc4 <BSP_LCD_InitEx+0x50>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34182dbc:	f06f 0301 	mvn.w	r3, #1
34182dc0:	637b      	str	r3, [r7, #52]	@ 0x34
34182dc2:	e088      	b.n	34182ed6 <BSP_LCD_InitEx+0x162>
  }
  else
  {
    if (PixelFormat == LCD_PIXEL_FORMAT_RGB565)
34182dc4:	687b      	ldr	r3, [r7, #4]
34182dc6:	2b02      	cmp	r3, #2
34182dc8:	d109      	bne.n	34182dde <BSP_LCD_InitEx+0x6a>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
34182dca:	2304      	movs	r3, #4
34182dcc:	633b      	str	r3, [r7, #48]	@ 0x30
      Lcd_Ctx[Instance].BppFactor = 2U;
34182dce:	4a5a      	ldr	r2, [pc, #360]	@ (34182f38 <BSP_LCD_InitEx+0x1c4>)
34182dd0:	68fb      	ldr	r3, [r7, #12]
34182dd2:	015b      	lsls	r3, r3, #5
34182dd4:	4413      	add	r3, r2
34182dd6:	3310      	adds	r3, #16
34182dd8:	2202      	movs	r2, #2
34182dda:	601a      	str	r2, [r3, #0]
34182ddc:	e022      	b.n	34182e24 <BSP_LCD_InitEx+0xb0>
    }
    else if  (PixelFormat == LCD_PIXEL_FORMAT_RGB888)
34182dde:	687b      	ldr	r3, [r7, #4]
34182de0:	2b01      	cmp	r3, #1
34182de2:	d109      	bne.n	34182df8 <BSP_LCD_InitEx+0x84>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB888;
34182de4:	2306      	movs	r3, #6
34182de6:	633b      	str	r3, [r7, #48]	@ 0x30
      Lcd_Ctx[Instance].BppFactor = 3U;
34182de8:	4a53      	ldr	r2, [pc, #332]	@ (34182f38 <BSP_LCD_InitEx+0x1c4>)
34182dea:	68fb      	ldr	r3, [r7, #12]
34182dec:	015b      	lsls	r3, r3, #5
34182dee:	4413      	add	r3, r2
34182df0:	3310      	adds	r3, #16
34182df2:	2203      	movs	r2, #3
34182df4:	601a      	str	r2, [r3, #0]
34182df6:	e015      	b.n	34182e24 <BSP_LCD_InitEx+0xb0>
    }
    else if  (PixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
34182df8:	687b      	ldr	r3, [r7, #4]
34182dfa:	2b04      	cmp	r3, #4
34182dfc:	d109      	bne.n	34182e12 <BSP_LCD_InitEx+0x9e>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB4444;
34182dfe:	2308      	movs	r3, #8
34182e00:	633b      	str	r3, [r7, #48]	@ 0x30
      Lcd_Ctx[Instance].BppFactor = 2U;
34182e02:	4a4d      	ldr	r2, [pc, #308]	@ (34182f38 <BSP_LCD_InitEx+0x1c4>)
34182e04:	68fb      	ldr	r3, [r7, #12]
34182e06:	015b      	lsls	r3, r3, #5
34182e08:	4413      	add	r3, r2
34182e0a:	3310      	adds	r3, #16
34182e0c:	2202      	movs	r2, #2
34182e0e:	601a      	str	r2, [r3, #0]
34182e10:	e008      	b.n	34182e24 <BSP_LCD_InitEx+0xb0>
    }
    else /* LCD_PIXEL_FORMAT_ARGB8888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
34182e12:	2300      	movs	r3, #0
34182e14:	633b      	str	r3, [r7, #48]	@ 0x30
      Lcd_Ctx[Instance].BppFactor = 4U;
34182e16:	4a48      	ldr	r2, [pc, #288]	@ (34182f38 <BSP_LCD_InitEx+0x1c4>)
34182e18:	68fb      	ldr	r3, [r7, #12]
34182e1a:	015b      	lsls	r3, r3, #5
34182e1c:	4413      	add	r3, r2
34182e1e:	3310      	adds	r3, #16
34182e20:	2204      	movs	r2, #4
34182e22:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
34182e24:	4a44      	ldr	r2, [pc, #272]	@ (34182f38 <BSP_LCD_InitEx+0x1c4>)
34182e26:	68fb      	ldr	r3, [r7, #12]
34182e28:	015b      	lsls	r3, r3, #5
34182e2a:	4413      	add	r3, r2
34182e2c:	330c      	adds	r3, #12
34182e2e:	687a      	ldr	r2, [r7, #4]
34182e30:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
34182e32:	4a41      	ldr	r2, [pc, #260]	@ (34182f38 <BSP_LCD_InitEx+0x1c4>)
34182e34:	68fb      	ldr	r3, [r7, #12]
34182e36:	015b      	lsls	r3, r3, #5
34182e38:	4413      	add	r3, r2
34182e3a:	683a      	ldr	r2, [r7, #0]
34182e3c:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
34182e3e:	4a3e      	ldr	r2, [pc, #248]	@ (34182f38 <BSP_LCD_InitEx+0x1c4>)
34182e40:	68fb      	ldr	r3, [r7, #12]
34182e42:	015b      	lsls	r3, r3, #5
34182e44:	4413      	add	r3, r2
34182e46:	3304      	adds	r3, #4
34182e48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
34182e4a:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
34182e4c:	4b3b      	ldr	r3, [pc, #236]	@ (34182f3c <BSP_LCD_InitEx+0x1c8>)
34182e4e:	4a3c      	ldr	r2, [pc, #240]	@ (34182f40 <BSP_LCD_InitEx+0x1cc>)
34182e50:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
34182e52:	4b3c      	ldr	r3, [pc, #240]	@ (34182f44 <BSP_LCD_InitEx+0x1d0>)
34182e54:	4a3c      	ldr	r2, [pc, #240]	@ (34182f48 <BSP_LCD_InitEx+0x1d4>)
34182e56:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
34182e58:	4838      	ldr	r0, [pc, #224]	@ (34182f3c <BSP_LCD_InitEx+0x1c8>)
34182e5a:	f000 fe57 	bl	34183b0c <LTDC_MspInit>
#endif /* (USE_HAL_LTDC_REGISTER_CALLBACKS == 1) */

    DMA2D_MspInit(&hlcd_dma2d);
34182e5e:	4839      	ldr	r0, [pc, #228]	@ (34182f44 <BSP_LCD_InitEx+0x1d0>)
34182e60:	f000 ff10 	bl	34183c84 <DMA2D_MspInit>

    if (MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
34182e64:	4835      	ldr	r0, [pc, #212]	@ (34182f3c <BSP_LCD_InitEx+0x1c8>)
34182e66:	f000 f90c 	bl	34183082 <MX_LTDC_ClockConfig>
34182e6a:	4603      	mov	r3, r0
34182e6c:	2b00      	cmp	r3, #0
34182e6e:	d003      	beq.n	34182e78 <BSP_LCD_InitEx+0x104>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
34182e70:	f06f 0303 	mvn.w	r3, #3
34182e74:	637b      	str	r3, [r7, #52]	@ 0x34
34182e76:	e00a      	b.n	34182e8e <BSP_LCD_InitEx+0x11a>
    }
    else
    {
      if (MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
34182e78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
34182e7a:	6839      	ldr	r1, [r7, #0]
34182e7c:	482f      	ldr	r0, [pc, #188]	@ (34182f3c <BSP_LCD_InitEx+0x1c8>)
34182e7e:	f000 f86d 	bl	34182f5c <MX_LTDC_Init>
34182e82:	4603      	mov	r3, r0
34182e84:	2b00      	cmp	r3, #0
34182e86:	d002      	beq.n	34182e8e <BSP_LCD_InitEx+0x11a>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
34182e88:	f06f 0303 	mvn.w	r3, #3
34182e8c:	637b      	str	r3, [r7, #52]	@ 0x34
      }
    }

    if (ret == BSP_ERROR_NONE)
34182e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34182e90:	2b00      	cmp	r3, #0
34182e92:	d120      	bne.n	34182ed6 <BSP_LCD_InitEx+0x162>
      else
      {
#endif /* DATA_IN_ExtRAM */
        /* Configure default LTDC Layer 0. This configuration can be override by calling
        BSP_LCD_ConfigLayer() at application level */
        config.X0          = 0;
34182e94:	2300      	movs	r3, #0
34182e96:	61bb      	str	r3, [r7, #24]
        config.X1          = Width;
34182e98:	683b      	ldr	r3, [r7, #0]
34182e9a:	61fb      	str	r3, [r7, #28]
        config.Y0          = 0;
34182e9c:	2300      	movs	r3, #0
34182e9e:	623b      	str	r3, [r7, #32]
        config.Y1          = Height;
34182ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34182ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        config.PixelFormat = ltdc_pixel_format;
34182ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34182ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
        config.Address     = LCD_LAYER_0_ADDRESS;
34182ea8:	f04f 5350 	mov.w	r3, #872415232	@ 0x34000000
34182eac:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
34182eae:	f107 0318 	add.w	r3, r7, #24
34182eb2:	461a      	mov	r2, r3
34182eb4:	2100      	movs	r1, #0
34182eb6:	4821      	ldr	r0, [pc, #132]	@ (34182f3c <BSP_LCD_InitEx+0x1c8>)
34182eb8:	f000 f89a 	bl	34182ff0 <MX_LTDC_ConfigLayer>
34182ebc:	4603      	mov	r3, r0
34182ebe:	2b00      	cmp	r3, #0
34182ec0:	d002      	beq.n	34182ec8 <BSP_LCD_InitEx+0x154>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
34182ec2:	f06f 0303 	mvn.w	r3, #3
34182ec6:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* By default the reload is activated and executed immediately */
        Lcd_Ctx[Instance].ReloadEnable = 1U;
34182ec8:	4a1b      	ldr	r2, [pc, #108]	@ (34182f38 <BSP_LCD_InitEx+0x1c4>)
34182eca:	68fb      	ldr	r3, [r7, #12]
34182ecc:	015b      	lsls	r3, r3, #5
34182ece:	4413      	add	r3, r2
34182ed0:	3318      	adds	r3, #24
34182ed2:	2201      	movs	r2, #1
34182ed4:	601a      	str	r2, [r3, #0]
      }
#endif /* DATA_IN_ExtRAM */
    }
  }

  RIMC_MasterConfig_t RIMC_master = {0};
34182ed6:	f107 0310 	add.w	r3, r7, #16
34182eda:	2200      	movs	r2, #0
34182edc:	601a      	str	r2, [r3, #0]
34182ede:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
34182ee0:	2302      	movs	r3, #2
34182ee2:	613b      	str	r3, [r7, #16]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34182ee4:	2303      	movs	r3, #3
34182ee6:	617b      	str	r3, [r7, #20]

  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
34182ee8:	f107 0310 	add.w	r3, r7, #16
34182eec:	4619      	mov	r1, r3
34182eee:	200a      	movs	r0, #10
34182ef0:	f00b ff96 	bl	3418ee20 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
34182ef4:	f107 0310 	add.w	r3, r7, #16
34182ef8:	4619      	mov	r1, r3
34182efa:	200b      	movs	r0, #11
34182efc:	f00b ff90 	bl	3418ee20 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
34182f00:	f107 0310 	add.w	r3, r7, #16
34182f04:	4619      	mov	r1, r3
34182f06:	2008      	movs	r0, #8
34182f08:	f00b ff8a 	bl	3418ee20 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34182f0c:	2103      	movs	r1, #3
34182f0e:	480f      	ldr	r0, [pc, #60]	@ (34182f4c <BSP_LCD_InitEx+0x1d8>)
34182f10:	f00b ffc2 	bl	3418ee98 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34182f14:	2103      	movs	r1, #3
34182f16:	480e      	ldr	r0, [pc, #56]	@ (34182f50 <BSP_LCD_InitEx+0x1dc>)
34182f18:	f00b ffbe 	bl	3418ee98 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D  , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34182f1c:	2103      	movs	r1, #3
34182f1e:	480d      	ldr	r0, [pc, #52]	@ (34182f54 <BSP_LCD_InitEx+0x1e0>)
34182f20:	f00b ffba 	bl	3418ee98 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34182f24:	2103      	movs	r1, #3
34182f26:	480c      	ldr	r0, [pc, #48]	@ (34182f58 <BSP_LCD_InitEx+0x1e4>)
34182f28:	f00b ffb6 	bl	3418ee98 <HAL_RIF_RISC_SetSlaveSecureAttributes>


  return ret;
34182f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
34182f2e:	4618      	mov	r0, r3
34182f30:	3738      	adds	r7, #56	@ 0x38
34182f32:	46bd      	mov	sp, r7
34182f34:	bd80      	pop	{r7, pc}
34182f36:	bf00      	nop
34182f38:	341c1190 	.word	0x341c1190
34182f3c:	341c10e8 	.word	0x341c10e8
34182f40:	58001000 	.word	0x58001000
34182f44:	341c1080 	.word	0x341c1080
34182f48:	58021000 	.word	0x58021000
34182f4c:	30000007 	.word	0x30000007
34182f50:	30000008 	.word	0x30000008
34182f54:	30000005 	.word	0x30000005
34182f58:	30000006 	.word	0x30000006

34182f5c <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
34182f5c:	b580      	push	{r7, lr}
34182f5e:	b084      	sub	sp, #16
34182f60:	af00      	add	r7, sp, #0
34182f62:	60f8      	str	r0, [r7, #12]
34182f64:	60b9      	str	r1, [r7, #8]
34182f66:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
34182f68:	68fb      	ldr	r3, [r7, #12]
34182f6a:	4a20      	ldr	r2, [pc, #128]	@ (34182fec <MX_LTDC_Init+0x90>)
34182f6c:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
34182f6e:	68fb      	ldr	r3, [r7, #12]
34182f70:	2200      	movs	r2, #0
34182f72:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
34182f74:	68fb      	ldr	r3, [r7, #12]
34182f76:	2200      	movs	r2, #0
34182f78:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
34182f7a:	68fb      	ldr	r3, [r7, #12]
34182f7c:	2200      	movs	r2, #0
34182f7e:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
34182f80:	68fb      	ldr	r3, [r7, #12]
34182f82:	2200      	movs	r2, #0
34182f84:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = (uint32_t)RK050HR18_HSYNC - 1U;
34182f86:	68fb      	ldr	r3, [r7, #12]
34182f88:	2203      	movs	r2, #3
34182f8a:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (uint32_t)RK050HR18_HSYNC + (uint32_t)RK050HR18_HBP - 1U;
34182f8c:	68fb      	ldr	r3, [r7, #12]
34182f8e:	2207      	movs	r2, #7
34182f90:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP -1U;
34182f92:	68bb      	ldr	r3, [r7, #8]
34182f94:	1dda      	adds	r2, r3, #7
34182f96:	68fb      	ldr	r3, [r7, #12]
34182f98:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP + RK050HR18_HFP - 1U;
34182f9a:	68bb      	ldr	r3, [r7, #8]
34182f9c:	f103 020b 	add.w	r2, r3, #11
34182fa0:	68fb      	ldr	r3, [r7, #12]
34182fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = (uint32_t)RK050HR18_VSYNC - 1U;
34182fa4:	68fb      	ldr	r3, [r7, #12]
34182fa6:	2203      	movs	r2, #3
34182fa8:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = (uint32_t)RK050HR18_VSYNC + (uint32_t)RK050HR18_VBP - 1U;
34182faa:	68fb      	ldr	r3, [r7, #12]
34182fac:	2207      	movs	r2, #7
34182fae:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP -1U;
34182fb0:	687b      	ldr	r3, [r7, #4]
34182fb2:	1dda      	adds	r2, r3, #7
34182fb4:	68fb      	ldr	r3, [r7, #12]
34182fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP + RK050HR18_VFP - 1U;
34182fb8:	687b      	ldr	r3, [r7, #4]
34182fba:	f103 020b 	add.w	r2, r3, #11
34182fbe:	68fb      	ldr	r3, [r7, #12]
34182fc0:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0x0;
34182fc2:	68fb      	ldr	r3, [r7, #12]
34182fc4:	2200      	movs	r2, #0
34182fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0x0;
34182fca:	68fb      	ldr	r3, [r7, #12]
34182fcc:	2200      	movs	r2, #0
34182fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0x0;
34182fd2:	68fb      	ldr	r3, [r7, #12]
34182fd4:	2200      	movs	r2, #0
34182fd6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
34182fda:	68f8      	ldr	r0, [r7, #12]
34182fdc:	f005 fe13 	bl	34188c06 <HAL_LTDC_Init>
34182fe0:	4603      	mov	r3, r0
}
34182fe2:	4618      	mov	r0, r3
34182fe4:	3710      	adds	r7, #16
34182fe6:	46bd      	mov	sp, r7
34182fe8:	bd80      	pop	{r7, pc}
34182fea:	bf00      	nop
34182fec:	58001000 	.word	0x58001000

34182ff0 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
34182ff0:	b580      	push	{r7, lr}
34182ff2:	b092      	sub	sp, #72	@ 0x48
34182ff4:	af00      	add	r7, sp, #0
34182ff6:	60f8      	str	r0, [r7, #12]
34182ff8:	60b9      	str	r1, [r7, #8]
34182ffa:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg ={0};
34182ffc:	f107 0314 	add.w	r3, r7, #20
34183000:	2234      	movs	r2, #52	@ 0x34
34183002:	2100      	movs	r1, #0
34183004:	4618      	mov	r0, r3
34183006:	f010 f8cd 	bl	341931a4 <memset>

  pLayerCfg.WindowX0 = Config->X0;
3418300a:	687b      	ldr	r3, [r7, #4]
3418300c:	681b      	ldr	r3, [r3, #0]
3418300e:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
34183010:	687b      	ldr	r3, [r7, #4]
34183012:	685b      	ldr	r3, [r3, #4]
34183014:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
34183016:	687b      	ldr	r3, [r7, #4]
34183018:	689b      	ldr	r3, [r3, #8]
3418301a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
3418301c:	687b      	ldr	r3, [r7, #4]
3418301e:	68db      	ldr	r3, [r3, #12]
34183020:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
34183022:	687b      	ldr	r3, [r7, #4]
34183024:	691b      	ldr	r3, [r3, #16]
34183026:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = LTDC_LxCACR_CONSTA;
34183028:	23ff      	movs	r3, #255	@ 0xff
3418302a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
3418302c:	2300      	movs	r3, #0
3418302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
34183030:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
34183034:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
34183036:	2307      	movs	r3, #7
34183038:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
3418303a:	687b      	ldr	r3, [r7, #4]
3418303c:	695b      	ldr	r3, [r3, #20]
3418303e:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
34183040:	687b      	ldr	r3, [r7, #4]
34183042:	685a      	ldr	r2, [r3, #4]
34183044:	687b      	ldr	r3, [r7, #4]
34183046:	681b      	ldr	r3, [r3, #0]
34183048:	1ad3      	subs	r3, r2, r3
3418304a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
3418304c:	687b      	ldr	r3, [r7, #4]
3418304e:	68da      	ldr	r2, [r3, #12]
34183050:	687b      	ldr	r3, [r7, #4]
34183052:	689b      	ldr	r3, [r3, #8]
34183054:	1ad3      	subs	r3, r2, r3
34183056:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
34183058:	2300      	movs	r3, #0
3418305a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
3418305e:	2300      	movs	r3, #0
34183060:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
34183064:	2300      	movs	r3, #0
34183066:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3418306a:	f107 0314 	add.w	r3, r7, #20
3418306e:	68ba      	ldr	r2, [r7, #8]
34183070:	4619      	mov	r1, r3
34183072:	68f8      	ldr	r0, [r7, #12]
34183074:	f005 fe7c 	bl	34188d70 <HAL_LTDC_ConfigLayer>
34183078:	4603      	mov	r3, r0
}
3418307a:	4618      	mov	r0, r3
3418307c:	3748      	adds	r7, #72	@ 0x48
3418307e:	46bd      	mov	sp, r7
34183080:	bd80      	pop	{r7, pc}

34183082 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
34183082:	b580      	push	{r7, lr}
34183084:	b0e8      	sub	sp, #416	@ 0x1a0
34183086:	af00      	add	r7, sp, #0
34183088:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
3418308c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
34183090:	6018      	str	r0, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hltdc);

  HAL_StatusTypeDef   status =  HAL_OK;
34183092:	2300      	movs	r3, #0
34183094:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34183098:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
3418309c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
341830a0:	4618      	mov	r0, r3
341830a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
341830a6:	461a      	mov	r2, r3
341830a8:	2100      	movs	r1, #0
341830aa:	f010 f87b 	bl	341931a4 <memset>
  /* PLL3_VCO Input = HSE_VALUE/PLLM = 48 Mhz / 192 = 0.25 */
  /* PLL3_VCO Output = PLL3_VCO Input * PLLN = 0.25 Mhz * 100 = 25 */
  /* PLLLCDCLK = PLL3_VCO Output/(PLLP1 * PLLP2) = 25/1 = 25Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 25 Mhz */

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
341830ae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
341830b2:	f5a3 71cc 	sub.w	r1, r3, #408	@ 0x198
341830b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
341830ba:	f04f 0300 	mov.w	r3, #0
341830be:	e9c1 2300 	strd	r2, r3, [r1]
  RCC_PeriphCLKInitStruct.LtdcClockSelection = RCC_LTDCCLKSOURCE_IC16;
341830c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
341830c6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
341830ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
341830ce:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockSelection = RCC_ICCLKSOURCE_PLL1;
341830d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
341830d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
341830da:	2200      	movs	r2, #0
341830dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 48;
341830e0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
341830e4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
341830e8:	2230      	movs	r2, #48	@ 0x30
341830ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
341830ee:	f107 0308 	add.w	r3, r7, #8
341830f2:	4618      	mov	r0, r3
341830f4:	f009 f9ee 	bl	3418c4d4 <HAL_RCCEx_PeriphCLKConfig>
341830f8:	4603      	mov	r3, r0
341830fa:	2b00      	cmp	r3, #0
341830fc:	d002      	beq.n	34183104 <MX_LTDC_ClockConfig+0x82>
  {
    status = HAL_ERROR;
341830fe:	2301      	movs	r3, #1
34183100:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
  }

  return status;
34183104:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
}
34183108:	4618      	mov	r0, r3
3418310a:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
3418310e:	46bd      	mov	sp, r7
34183110:	bd80      	pop	{r7, pc}
	...

34183114 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
34183114:	b480      	push	{r7}
34183116:	b085      	sub	sp, #20
34183118:	af00      	add	r7, sp, #0
3418311a:	6078      	str	r0, [r7, #4]
3418311c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
3418311e:	2300      	movs	r3, #0
34183120:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
34183122:	687b      	ldr	r3, [r7, #4]
34183124:	2b00      	cmp	r3, #0
34183126:	d003      	beq.n	34183130 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34183128:	f06f 0301 	mvn.w	r3, #1
3418312c:	60fb      	str	r3, [r7, #12]
3418312e:	e007      	b.n	34183140 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat =  Lcd_Ctx[Instance].PixelFormat;
34183130:	4a07      	ldr	r2, [pc, #28]	@ (34183150 <BSP_LCD_GetPixelFormat+0x3c>)
34183132:	687b      	ldr	r3, [r7, #4]
34183134:	015b      	lsls	r3, r3, #5
34183136:	4413      	add	r3, r2
34183138:	330c      	adds	r3, #12
3418313a:	681a      	ldr	r2, [r3, #0]
3418313c:	683b      	ldr	r3, [r7, #0]
3418313e:	601a      	str	r2, [r3, #0]
  }

  return ret;
34183140:	68fb      	ldr	r3, [r7, #12]
}
34183142:	4618      	mov	r0, r3
34183144:	3714      	adds	r7, #20
34183146:	46bd      	mov	sp, r7
34183148:	f85d 7b04 	ldr.w	r7, [sp], #4
3418314c:	4770      	bx	lr
3418314e:	bf00      	nop
34183150:	341c1190 	.word	0x341c1190

34183154 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
34183154:	b480      	push	{r7}
34183156:	b085      	sub	sp, #20
34183158:	af00      	add	r7, sp, #0
3418315a:	6078      	str	r0, [r7, #4]
3418315c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
3418315e:	2300      	movs	r3, #0
34183160:	60fb      	str	r3, [r7, #12]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  if(Instance >= LCD_INSTANCES_NBR)
34183162:	687b      	ldr	r3, [r7, #4]
34183164:	2b00      	cmp	r3, #0
34183166:	d003      	beq.n	34183170 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34183168:	f06f 0301 	mvn.w	r3, #1
3418316c:	60fb      	str	r3, [r7, #12]
3418316e:	e064      	b.n	3418323a <BSP_LCD_SetActiveLayer+0xe6>
  }
  else
  {
    pLayerCfg = &hlcd_ltdc.LayerCfg[LayerIndex];
34183170:	683b      	ldr	r3, [r7, #0]
34183172:	2234      	movs	r2, #52	@ 0x34
34183174:	fb02 f303 	mul.w	r3, r2, r3
34183178:	3338      	adds	r3, #56	@ 0x38
3418317a:	4a33      	ldr	r2, [pc, #204]	@ (34183248 <BSP_LCD_SetActiveLayer+0xf4>)
3418317c:	4413      	add	r3, r2
3418317e:	60bb      	str	r3, [r7, #8]

    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
34183180:	4a32      	ldr	r2, [pc, #200]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
34183182:	687b      	ldr	r3, [r7, #4]
34183184:	015b      	lsls	r3, r3, #5
34183186:	4413      	add	r3, r2
34183188:	3308      	adds	r3, #8
3418318a:	683a      	ldr	r2, [r7, #0]
3418318c:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3418318e:	68bb      	ldr	r3, [r7, #8]
34183190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34183192:	492e      	ldr	r1, [pc, #184]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
34183194:	687b      	ldr	r3, [r7, #4]
34183196:	015b      	lsls	r3, r3, #5
34183198:	440b      	add	r3, r1
3418319a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize = pLayerCfg->ImageHeight;
3418319c:	68bb      	ldr	r3, [r7, #8]
3418319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
341831a0:	492a      	ldr	r1, [pc, #168]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
341831a2:	687b      	ldr	r3, [r7, #4]
341831a4:	015b      	lsls	r3, r3, #5
341831a6:	440b      	add	r3, r1
341831a8:	3304      	adds	r3, #4
341831aa:	601a      	str	r2, [r3, #0]

    if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_RGB565)
341831ac:	68bb      	ldr	r3, [r7, #8]
341831ae:	691b      	ldr	r3, [r3, #16]
341831b0:	2b04      	cmp	r3, #4
341831b2:	d10e      	bne.n	341831d2 <BSP_LCD_SetActiveLayer+0x7e>
    {
      Lcd_Ctx[Instance].BppFactor = 2;
341831b4:	4a25      	ldr	r2, [pc, #148]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
341831b6:	687b      	ldr	r3, [r7, #4]
341831b8:	015b      	lsls	r3, r3, #5
341831ba:	4413      	add	r3, r2
341831bc:	3310      	adds	r3, #16
341831be:	2202      	movs	r2, #2
341831c0:	601a      	str	r2, [r3, #0]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB565;
341831c2:	4a22      	ldr	r2, [pc, #136]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
341831c4:	687b      	ldr	r3, [r7, #4]
341831c6:	015b      	lsls	r3, r3, #5
341831c8:	4413      	add	r3, r2
341831ca:	330c      	adds	r3, #12
341831cc:	2202      	movs	r2, #2
341831ce:	601a      	str	r2, [r3, #0]
341831d0:	e033      	b.n	3418323a <BSP_LCD_SetActiveLayer+0xe6>
    }
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_ARGB4444)
341831d2:	68bb      	ldr	r3, [r7, #8]
341831d4:	691b      	ldr	r3, [r3, #16]
341831d6:	2b08      	cmp	r3, #8
341831d8:	d10e      	bne.n	341831f8 <BSP_LCD_SetActiveLayer+0xa4>
    {
      Lcd_Ctx[Instance].BppFactor = 2;
341831da:	4a1c      	ldr	r2, [pc, #112]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
341831dc:	687b      	ldr	r3, [r7, #4]
341831de:	015b      	lsls	r3, r3, #5
341831e0:	4413      	add	r3, r2
341831e2:	3310      	adds	r3, #16
341831e4:	2202      	movs	r2, #2
341831e6:	601a      	str	r2, [r3, #0]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB4444;
341831e8:	4a18      	ldr	r2, [pc, #96]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
341831ea:	687b      	ldr	r3, [r7, #4]
341831ec:	015b      	lsls	r3, r3, #5
341831ee:	4413      	add	r3, r2
341831f0:	330c      	adds	r3, #12
341831f2:	2204      	movs	r2, #4
341831f4:	601a      	str	r2, [r3, #0]
341831f6:	e020      	b.n	3418323a <BSP_LCD_SetActiveLayer+0xe6>
    }
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_RGB888)
341831f8:	68bb      	ldr	r3, [r7, #8]
341831fa:	691b      	ldr	r3, [r3, #16]
341831fc:	2b06      	cmp	r3, #6
341831fe:	d10e      	bne.n	3418321e <BSP_LCD_SetActiveLayer+0xca>
    {
      Lcd_Ctx[Instance].BppFactor = 3;
34183200:	4a12      	ldr	r2, [pc, #72]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
34183202:	687b      	ldr	r3, [r7, #4]
34183204:	015b      	lsls	r3, r3, #5
34183206:	4413      	add	r3, r2
34183208:	3310      	adds	r3, #16
3418320a:	2203      	movs	r2, #3
3418320c:	601a      	str	r2, [r3, #0]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3418320e:	4a0f      	ldr	r2, [pc, #60]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
34183210:	687b      	ldr	r3, [r7, #4]
34183212:	015b      	lsls	r3, r3, #5
34183214:	4413      	add	r3, r2
34183216:	330c      	adds	r3, #12
34183218:	2201      	movs	r2, #1
3418321a:	601a      	str	r2, [r3, #0]
3418321c:	e00d      	b.n	3418323a <BSP_LCD_SetActiveLayer+0xe6>
    }
    else
    {
      Lcd_Ctx[Instance].BppFactor = 4;
3418321e:	4a0b      	ldr	r2, [pc, #44]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
34183220:	687b      	ldr	r3, [r7, #4]
34183222:	015b      	lsls	r3, r3, #5
34183224:	4413      	add	r3, r2
34183226:	3310      	adds	r3, #16
34183228:	2204      	movs	r2, #4
3418322a:	601a      	str	r2, [r3, #0]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB8888;
3418322c:	4a07      	ldr	r2, [pc, #28]	@ (3418324c <BSP_LCD_SetActiveLayer+0xf8>)
3418322e:	687b      	ldr	r3, [r7, #4]
34183230:	015b      	lsls	r3, r3, #5
34183232:	4413      	add	r3, r2
34183234:	330c      	adds	r3, #12
34183236:	2200      	movs	r2, #0
34183238:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
3418323a:	68fb      	ldr	r3, [r7, #12]
}
3418323c:	4618      	mov	r0, r3
3418323e:	3714      	adds	r7, #20
34183240:	46bd      	mov	sp, r7
34183242:	f85d 7b04 	ldr.w	r7, [sp], #4
34183246:	4770      	bx	lr
34183248:	341c10e8 	.word	0x341c10e8
3418324c:	341c1190 	.word	0x341c1190

34183250 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
34183250:	b480      	push	{r7}
34183252:	b085      	sub	sp, #20
34183254:	af00      	add	r7, sp, #0
34183256:	6078      	str	r0, [r7, #4]
34183258:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
3418325a:	2300      	movs	r3, #0
3418325c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
3418325e:	687b      	ldr	r3, [r7, #4]
34183260:	2b00      	cmp	r3, #0
34183262:	d003      	beq.n	3418326c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34183264:	f06f 0301 	mvn.w	r3, #1
34183268:	60fb      	str	r3, [r7, #12]
3418326a:	e006      	b.n	3418327a <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
3418326c:	4a06      	ldr	r2, [pc, #24]	@ (34183288 <BSP_LCD_GetXSize+0x38>)
3418326e:	687b      	ldr	r3, [r7, #4]
34183270:	015b      	lsls	r3, r3, #5
34183272:	4413      	add	r3, r2
34183274:	681a      	ldr	r2, [r3, #0]
34183276:	683b      	ldr	r3, [r7, #0]
34183278:	601a      	str	r2, [r3, #0]
  }

  return ret;
3418327a:	68fb      	ldr	r3, [r7, #12]
}
3418327c:	4618      	mov	r0, r3
3418327e:	3714      	adds	r7, #20
34183280:	46bd      	mov	sp, r7
34183282:	f85d 7b04 	ldr.w	r7, [sp], #4
34183286:	4770      	bx	lr
34183288:	341c1190 	.word	0x341c1190

3418328c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
3418328c:	b480      	push	{r7}
3418328e:	b085      	sub	sp, #20
34183290:	af00      	add	r7, sp, #0
34183292:	6078      	str	r0, [r7, #4]
34183294:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
34183296:	2300      	movs	r3, #0
34183298:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
3418329a:	687b      	ldr	r3, [r7, #4]
3418329c:	2b00      	cmp	r3, #0
3418329e:	d003      	beq.n	341832a8 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
341832a0:	f06f 0301 	mvn.w	r3, #1
341832a4:	60fb      	str	r3, [r7, #12]
341832a6:	e007      	b.n	341832b8 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
341832a8:	4a07      	ldr	r2, [pc, #28]	@ (341832c8 <BSP_LCD_GetYSize+0x3c>)
341832aa:	687b      	ldr	r3, [r7, #4]
341832ac:	015b      	lsls	r3, r3, #5
341832ae:	4413      	add	r3, r2
341832b0:	3304      	adds	r3, #4
341832b2:	681a      	ldr	r2, [r3, #0]
341832b4:	683b      	ldr	r3, [r7, #0]
341832b6:	601a      	str	r2, [r3, #0]
  }

  return ret;
341832b8:	68fb      	ldr	r3, [r7, #12]
}
341832ba:	4618      	mov	r0, r3
341832bc:	3714      	adds	r7, #20
341832be:	46bd      	mov	sp, r7
341832c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341832c4:	4770      	bx	lr
341832c6:	bf00      	nop
341832c8:	341c1190 	.word	0x341c1190

341832cc <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
341832cc:	b580      	push	{r7, lr}
341832ce:	b08e      	sub	sp, #56	@ 0x38
341832d0:	af02      	add	r7, sp, #8
341832d2:	60f8      	str	r0, [r7, #12]
341832d4:	60b9      	str	r1, [r7, #8]
341832d6:	607a      	str	r2, [r7, #4]
341832d8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
341832da:	2300      	movs	r3, #0
341832dc:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
341832de:	683b      	ldr	r3, [r7, #0]
341832e0:	330a      	adds	r3, #10
341832e2:	781b      	ldrb	r3, [r3, #0]
341832e4:	461a      	mov	r2, r3
341832e6:	683b      	ldr	r3, [r7, #0]
341832e8:	330b      	adds	r3, #11
341832ea:	781b      	ldrb	r3, [r3, #0]
341832ec:	021b      	lsls	r3, r3, #8
341832ee:	441a      	add	r2, r3
341832f0:	683b      	ldr	r3, [r7, #0]
341832f2:	330c      	adds	r3, #12
341832f4:	781b      	ldrb	r3, [r3, #0]
341832f6:	041b      	lsls	r3, r3, #16
341832f8:	441a      	add	r2, r3
341832fa:	683b      	ldr	r3, [r7, #0]
341832fc:	330d      	adds	r3, #13
341832fe:	781b      	ldrb	r3, [r3, #0]
34183300:	061b      	lsls	r3, r3, #24
34183302:	4413      	add	r3, r2
34183304:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
34183306:	683b      	ldr	r3, [r7, #0]
34183308:	3312      	adds	r3, #18
3418330a:	781b      	ldrb	r3, [r3, #0]
3418330c:	461a      	mov	r2, r3
3418330e:	683b      	ldr	r3, [r7, #0]
34183310:	3313      	adds	r3, #19
34183312:	781b      	ldrb	r3, [r3, #0]
34183314:	021b      	lsls	r3, r3, #8
34183316:	441a      	add	r2, r3
34183318:	683b      	ldr	r3, [r7, #0]
3418331a:	3314      	adds	r3, #20
3418331c:	781b      	ldrb	r3, [r3, #0]
3418331e:	041b      	lsls	r3, r3, #16
34183320:	441a      	add	r2, r3
34183322:	683b      	ldr	r3, [r7, #0]
34183324:	3315      	adds	r3, #21
34183326:	781b      	ldrb	r3, [r3, #0]
34183328:	061b      	lsls	r3, r3, #24
3418332a:	4413      	add	r3, r2
3418332c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
3418332e:	683b      	ldr	r3, [r7, #0]
34183330:	3316      	adds	r3, #22
34183332:	781b      	ldrb	r3, [r3, #0]
34183334:	461a      	mov	r2, r3
34183336:	683b      	ldr	r3, [r7, #0]
34183338:	3317      	adds	r3, #23
3418333a:	781b      	ldrb	r3, [r3, #0]
3418333c:	021b      	lsls	r3, r3, #8
3418333e:	441a      	add	r2, r3
34183340:	683b      	ldr	r3, [r7, #0]
34183342:	3318      	adds	r3, #24
34183344:	781b      	ldrb	r3, [r3, #0]
34183346:	041b      	lsls	r3, r3, #16
34183348:	441a      	add	r2, r3
3418334a:	683b      	ldr	r3, [r7, #0]
3418334c:	3319      	adds	r3, #25
3418334e:	781b      	ldrb	r3, [r3, #0]
34183350:	061b      	lsls	r3, r3, #24
34183352:	4413      	add	r3, r2
34183354:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
34183356:	683b      	ldr	r3, [r7, #0]
34183358:	331c      	adds	r3, #28
3418335a:	781b      	ldrb	r3, [r3, #0]
3418335c:	461a      	mov	r2, r3
3418335e:	683b      	ldr	r3, [r7, #0]
34183360:	331d      	adds	r3, #29
34183362:	781b      	ldrb	r3, [r3, #0]
34183364:	021b      	lsls	r3, r3, #8
34183366:	4413      	add	r3, r2
34183368:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3418336a:	4a37      	ldr	r2, [pc, #220]	@ (34183448 <BSP_LCD_DrawBitmap+0x17c>)
3418336c:	68fb      	ldr	r3, [r7, #12]
3418336e:	015b      	lsls	r3, r3, #5
34183370:	4413      	add	r3, r2
34183372:	3308      	adds	r3, #8
34183374:	681b      	ldr	r3, [r3, #0]
34183376:	4a35      	ldr	r2, [pc, #212]	@ (3418344c <BSP_LCD_DrawBitmap+0x180>)
34183378:	2134      	movs	r1, #52	@ 0x34
3418337a:	fb01 f303 	mul.w	r3, r1, r3
3418337e:	4413      	add	r3, r2
34183380:	335c      	adds	r3, #92	@ 0x5c
34183382:	681a      	ldr	r2, [r3, #0]
34183384:	4930      	ldr	r1, [pc, #192]	@ (34183448 <BSP_LCD_DrawBitmap+0x17c>)
34183386:	68fb      	ldr	r3, [r7, #12]
34183388:	015b      	lsls	r3, r3, #5
3418338a:	440b      	add	r3, r1
3418338c:	681b      	ldr	r3, [r3, #0]
3418338e:	6879      	ldr	r1, [r7, #4]
34183390:	fb03 f101 	mul.w	r1, r3, r1
34183394:	68bb      	ldr	r3, [r7, #8]
34183396:	440b      	add	r3, r1
34183398:	482b      	ldr	r0, [pc, #172]	@ (34183448 <BSP_LCD_DrawBitmap+0x17c>)
3418339a:	68f9      	ldr	r1, [r7, #12]
3418339c:	0149      	lsls	r1, r1, #5
3418339e:	4401      	add	r1, r0
341833a0:	3110      	adds	r1, #16
341833a2:	6809      	ldr	r1, [r1, #0]
341833a4:	fb01 f303 	mul.w	r3, r1, r3
341833a8:	4413      	add	r3, r2
341833aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
341833ac:	693b      	ldr	r3, [r7, #16]
341833ae:	3b20      	subs	r3, #32
341833b0:	2b07      	cmp	r3, #7
341833b2:	d802      	bhi.n	341833ba <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
341833b4:	2300      	movs	r3, #0
341833b6:	627b      	str	r3, [r7, #36]	@ 0x24
341833b8:	e008      	b.n	341833cc <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
341833ba:	693b      	ldr	r3, [r7, #16]
341833bc:	3b10      	subs	r3, #16
341833be:	2b07      	cmp	r3, #7
341833c0:	d802      	bhi.n	341833c8 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
341833c2:	2302      	movs	r3, #2
341833c4:	627b      	str	r3, [r7, #36]	@ 0x24
341833c6:	e001      	b.n	341833cc <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
341833c8:	2301      	movs	r3, #1
341833ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
341833cc:	697b      	ldr	r3, [r7, #20]
341833ce:	3b01      	subs	r3, #1
341833d0:	69ba      	ldr	r2, [r7, #24]
341833d2:	fb02 f303 	mul.w	r3, r2, r3
341833d6:	693a      	ldr	r2, [r7, #16]
341833d8:	08d2      	lsrs	r2, r2, #3
341833da:	fb03 f202 	mul.w	r2, r3, r2
341833de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341833e0:	4413      	add	r3, r2
341833e2:	683a      	ldr	r2, [r7, #0]
341833e4:	4413      	add	r3, r2
341833e6:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
341833e8:	2300      	movs	r3, #0
341833ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
341833ec:	e023      	b.n	34183436 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
341833ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341833f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341833f2:	9300      	str	r3, [sp, #0]
341833f4:	69bb      	ldr	r3, [r7, #24]
341833f6:	6a39      	ldr	r1, [r7, #32]
341833f8:	68f8      	ldr	r0, [r7, #12]
341833fa:	f000 fb27 	bl	34183a4c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
341833fe:	4a12      	ldr	r2, [pc, #72]	@ (34183448 <BSP_LCD_DrawBitmap+0x17c>)
34183400:	68fb      	ldr	r3, [r7, #12]
34183402:	015b      	lsls	r3, r3, #5
34183404:	4413      	add	r3, r2
34183406:	681b      	ldr	r3, [r3, #0]
34183408:	490f      	ldr	r1, [pc, #60]	@ (34183448 <BSP_LCD_DrawBitmap+0x17c>)
3418340a:	68fa      	ldr	r2, [r7, #12]
3418340c:	0152      	lsls	r2, r2, #5
3418340e:	440a      	add	r2, r1
34183410:	3210      	adds	r2, #16
34183412:	6812      	ldr	r2, [r2, #0]
34183414:	fb02 f303 	mul.w	r3, r2, r3
34183418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418341a:	4413      	add	r3, r2
3418341c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
3418341e:	693b      	ldr	r3, [r7, #16]
34183420:	08db      	lsrs	r3, r3, #3
34183422:	69ba      	ldr	r2, [r7, #24]
34183424:	fb02 f303 	mul.w	r3, r2, r3
34183428:	425b      	negs	r3, r3
3418342a:	6a3a      	ldr	r2, [r7, #32]
3418342c:	4413      	add	r3, r2
3418342e:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
34183430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34183432:	3301      	adds	r3, #1
34183434:	62fb      	str	r3, [r7, #44]	@ 0x2c
34183436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34183438:	697b      	ldr	r3, [r7, #20]
3418343a:	429a      	cmp	r2, r3
3418343c:	d3d7      	bcc.n	341833ee <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
3418343e:	69fb      	ldr	r3, [r7, #28]
}
34183440:	4618      	mov	r0, r3
34183442:	3730      	adds	r7, #48	@ 0x30
34183444:	46bd      	mov	sp, r7
34183446:	bd80      	pop	{r7, pc}
34183448:	341c1190 	.word	0x341c1190
3418344c:	341c10e8 	.word	0x341c10e8

34183450 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
34183450:	b580      	push	{r7, lr}
34183452:	b088      	sub	sp, #32
34183454:	af00      	add	r7, sp, #0
34183456:	60f8      	str	r0, [r7, #12]
34183458:	60b9      	str	r1, [r7, #8]
3418345a:	607a      	str	r2, [r7, #4]
3418345c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
3418345e:	683b      	ldr	r3, [r7, #0]
34183460:	61bb      	str	r3, [r7, #24]
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color;
  uint32_t j;
  for(i = 0; i < Height; i++)
34183462:	2300      	movs	r3, #0
34183464:	61fb      	str	r3, [r7, #28]
34183466:	e032      	b.n	341834ce <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
34183468:	2300      	movs	r3, #0
3418346a:	617b      	str	r3, [r7, #20]
3418346c:	e028      	b.n	341834c0 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
3418346e:	69bb      	ldr	r3, [r7, #24]
34183470:	781b      	ldrb	r3, [r3, #0]
34183472:	461a      	mov	r2, r3
34183474:	69bb      	ldr	r3, [r7, #24]
34183476:	3301      	adds	r3, #1
34183478:	781b      	ldrb	r3, [r3, #0]
3418347a:	021b      	lsls	r3, r3, #8
3418347c:	431a      	orrs	r2, r3
3418347e:	69bb      	ldr	r3, [r7, #24]
34183480:	3302      	adds	r3, #2
34183482:	781b      	ldrb	r3, [r3, #0]
34183484:	041b      	lsls	r3, r3, #16
34183486:	431a      	orrs	r2, r3
34183488:	69bb      	ldr	r3, [r7, #24]
3418348a:	3303      	adds	r3, #3
3418348c:	781b      	ldrb	r3, [r3, #0]
3418348e:	061b      	lsls	r3, r3, #24
34183490:	4313      	orrs	r3, r2
34183492:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
34183494:	68ba      	ldr	r2, [r7, #8]
34183496:	697b      	ldr	r3, [r7, #20]
34183498:	18d1      	adds	r1, r2, r3
3418349a:	687a      	ldr	r2, [r7, #4]
3418349c:	69fb      	ldr	r3, [r7, #28]
3418349e:	441a      	add	r2, r3
341834a0:	693b      	ldr	r3, [r7, #16]
341834a2:	68f8      	ldr	r0, [r7, #12]
341834a4:	f000 f96c 	bl	34183780 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
341834a8:	4a0d      	ldr	r2, [pc, #52]	@ (341834e0 <BSP_LCD_FillRGBRect+0x90>)
341834aa:	68fb      	ldr	r3, [r7, #12]
341834ac:	015b      	lsls	r3, r3, #5
341834ae:	4413      	add	r3, r2
341834b0:	3310      	adds	r3, #16
341834b2:	681b      	ldr	r3, [r3, #0]
341834b4:	69ba      	ldr	r2, [r7, #24]
341834b6:	4413      	add	r3, r2
341834b8:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
341834ba:	697b      	ldr	r3, [r7, #20]
341834bc:	3301      	adds	r3, #1
341834be:	617b      	str	r3, [r7, #20]
341834c0:	697a      	ldr	r2, [r7, #20]
341834c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341834c4:	429a      	cmp	r2, r3
341834c6:	d3d2      	bcc.n	3418346e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
341834c8:	69fb      	ldr	r3, [r7, #28]
341834ca:	3301      	adds	r3, #1
341834cc:	61fb      	str	r3, [r7, #28]
341834ce:	69fa      	ldr	r2, [r7, #28]
341834d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341834d2:	429a      	cmp	r2, r3
341834d4:	d3c8      	bcc.n	34183468 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif /* (USE_DMA2D_TO_FILL_RGB_RECT == 1) */

  return BSP_ERROR_NONE;
341834d6:	2300      	movs	r3, #0
}
341834d8:	4618      	mov	r0, r3
341834da:	3720      	adds	r7, #32
341834dc:	46bd      	mov	sp, r7
341834de:	bd80      	pop	{r7, pc}
341834e0:	341c1190 	.word	0x341c1190

341834e4 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
341834e4:	b580      	push	{r7, lr}
341834e6:	b088      	sub	sp, #32
341834e8:	af02      	add	r7, sp, #8
341834ea:	60f8      	str	r0, [r7, #12]
341834ec:	60b9      	str	r1, [r7, #8]
341834ee:	607a      	str	r2, [r7, #4]
341834f0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
341834f2:	4a18      	ldr	r2, [pc, #96]	@ (34183554 <BSP_LCD_DrawHLine+0x70>)
341834f4:	68fb      	ldr	r3, [r7, #12]
341834f6:	015b      	lsls	r3, r3, #5
341834f8:	4413      	add	r3, r2
341834fa:	3308      	adds	r3, #8
341834fc:	681b      	ldr	r3, [r3, #0]
341834fe:	4a16      	ldr	r2, [pc, #88]	@ (34183558 <BSP_LCD_DrawHLine+0x74>)
34183500:	2134      	movs	r1, #52	@ 0x34
34183502:	fb01 f303 	mul.w	r3, r1, r3
34183506:	4413      	add	r3, r2
34183508:	335c      	adds	r3, #92	@ 0x5c
3418350a:	681a      	ldr	r2, [r3, #0]
3418350c:	4911      	ldr	r1, [pc, #68]	@ (34183554 <BSP_LCD_DrawHLine+0x70>)
3418350e:	68fb      	ldr	r3, [r7, #12]
34183510:	015b      	lsls	r3, r3, #5
34183512:	440b      	add	r3, r1
34183514:	3310      	adds	r3, #16
34183516:	681b      	ldr	r3, [r3, #0]
34183518:	480e      	ldr	r0, [pc, #56]	@ (34183554 <BSP_LCD_DrawHLine+0x70>)
3418351a:	68f9      	ldr	r1, [r7, #12]
3418351c:	0149      	lsls	r1, r1, #5
3418351e:	4401      	add	r1, r0
34183520:	6809      	ldr	r1, [r1, #0]
34183522:	6878      	ldr	r0, [r7, #4]
34183524:	fb01 f000 	mul.w	r0, r1, r0
34183528:	68b9      	ldr	r1, [r7, #8]
3418352a:	4401      	add	r1, r0
3418352c:	fb01 f303 	mul.w	r3, r1, r3
34183530:	4413      	add	r3, r2
34183532:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
34183534:	6979      	ldr	r1, [r7, #20]
34183536:	6a3b      	ldr	r3, [r7, #32]
34183538:	9301      	str	r3, [sp, #4]
3418353a:	2300      	movs	r3, #0
3418353c:	9300      	str	r3, [sp, #0]
3418353e:	2301      	movs	r3, #1
34183540:	683a      	ldr	r2, [r7, #0]
34183542:	68f8      	ldr	r0, [r7, #12]
34183544:	f000 f9e6 	bl	34183914 <LL_FillBuffer>

  return BSP_ERROR_NONE;
34183548:	2300      	movs	r3, #0
}
3418354a:	4618      	mov	r0, r3
3418354c:	3718      	adds	r7, #24
3418354e:	46bd      	mov	sp, r7
34183550:	bd80      	pop	{r7, pc}
34183552:	bf00      	nop
34183554:	341c1190 	.word	0x341c1190
34183558:	341c10e8 	.word	0x341c10e8

3418355c <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
3418355c:	b580      	push	{r7, lr}
3418355e:	b088      	sub	sp, #32
34183560:	af02      	add	r7, sp, #8
34183562:	60f8      	str	r0, [r7, #12]
34183564:	60b9      	str	r1, [r7, #8]
34183566:	607a      	str	r2, [r7, #4]
34183568:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3418356a:	4a1a      	ldr	r2, [pc, #104]	@ (341835d4 <BSP_LCD_DrawVLine+0x78>)
3418356c:	68fb      	ldr	r3, [r7, #12]
3418356e:	015b      	lsls	r3, r3, #5
34183570:	4413      	add	r3, r2
34183572:	3308      	adds	r3, #8
34183574:	681b      	ldr	r3, [r3, #0]
34183576:	4a18      	ldr	r2, [pc, #96]	@ (341835d8 <BSP_LCD_DrawVLine+0x7c>)
34183578:	2134      	movs	r1, #52	@ 0x34
3418357a:	fb01 f303 	mul.w	r3, r1, r3
3418357e:	4413      	add	r3, r2
34183580:	335c      	adds	r3, #92	@ 0x5c
34183582:	681a      	ldr	r2, [r3, #0]
34183584:	4913      	ldr	r1, [pc, #76]	@ (341835d4 <BSP_LCD_DrawVLine+0x78>)
34183586:	68fb      	ldr	r3, [r7, #12]
34183588:	015b      	lsls	r3, r3, #5
3418358a:	440b      	add	r3, r1
3418358c:	3310      	adds	r3, #16
3418358e:	681b      	ldr	r3, [r3, #0]
34183590:	4810      	ldr	r0, [pc, #64]	@ (341835d4 <BSP_LCD_DrawVLine+0x78>)
34183592:	68f9      	ldr	r1, [r7, #12]
34183594:	0149      	lsls	r1, r1, #5
34183596:	4401      	add	r1, r0
34183598:	6809      	ldr	r1, [r1, #0]
3418359a:	6878      	ldr	r0, [r7, #4]
3418359c:	fb01 f000 	mul.w	r0, r1, r0
341835a0:	68b9      	ldr	r1, [r7, #8]
341835a2:	4401      	add	r1, r0
341835a4:	fb01 f303 	mul.w	r3, r1, r3
341835a8:	4413      	add	r3, r2
341835aa:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
341835ac:	6979      	ldr	r1, [r7, #20]
341835ae:	4a09      	ldr	r2, [pc, #36]	@ (341835d4 <BSP_LCD_DrawVLine+0x78>)
341835b0:	68fb      	ldr	r3, [r7, #12]
341835b2:	015b      	lsls	r3, r3, #5
341835b4:	4413      	add	r3, r2
341835b6:	681b      	ldr	r3, [r3, #0]
341835b8:	3b01      	subs	r3, #1
341835ba:	6a3a      	ldr	r2, [r7, #32]
341835bc:	9201      	str	r2, [sp, #4]
341835be:	9300      	str	r3, [sp, #0]
341835c0:	683b      	ldr	r3, [r7, #0]
341835c2:	2201      	movs	r2, #1
341835c4:	68f8      	ldr	r0, [r7, #12]
341835c6:	f000 f9a5 	bl	34183914 <LL_FillBuffer>

  return BSP_ERROR_NONE;
341835ca:	2300      	movs	r3, #0
}
341835cc:	4618      	mov	r0, r3
341835ce:	3718      	adds	r7, #24
341835d0:	46bd      	mov	sp, r7
341835d2:	bd80      	pop	{r7, pc}
341835d4:	341c1190 	.word	0x341c1190
341835d8:	341c10e8 	.word	0x341c10e8

341835dc <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
341835dc:	b580      	push	{r7, lr}
341835de:	b088      	sub	sp, #32
341835e0:	af02      	add	r7, sp, #8
341835e2:	60f8      	str	r0, [r7, #12]
341835e4:	60b9      	str	r1, [r7, #8]
341835e6:	607a      	str	r2, [r7, #4]
341835e8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
341835ea:	4a1b      	ldr	r2, [pc, #108]	@ (34183658 <BSP_LCD_FillRect+0x7c>)
341835ec:	68fb      	ldr	r3, [r7, #12]
341835ee:	015b      	lsls	r3, r3, #5
341835f0:	4413      	add	r3, r2
341835f2:	3308      	adds	r3, #8
341835f4:	681b      	ldr	r3, [r3, #0]
341835f6:	4a19      	ldr	r2, [pc, #100]	@ (3418365c <BSP_LCD_FillRect+0x80>)
341835f8:	2134      	movs	r1, #52	@ 0x34
341835fa:	fb01 f303 	mul.w	r3, r1, r3
341835fe:	4413      	add	r3, r2
34183600:	335c      	adds	r3, #92	@ 0x5c
34183602:	681a      	ldr	r2, [r3, #0]
34183604:	4914      	ldr	r1, [pc, #80]	@ (34183658 <BSP_LCD_FillRect+0x7c>)
34183606:	68fb      	ldr	r3, [r7, #12]
34183608:	015b      	lsls	r3, r3, #5
3418360a:	440b      	add	r3, r1
3418360c:	3310      	adds	r3, #16
3418360e:	681b      	ldr	r3, [r3, #0]
34183610:	4811      	ldr	r0, [pc, #68]	@ (34183658 <BSP_LCD_FillRect+0x7c>)
34183612:	68f9      	ldr	r1, [r7, #12]
34183614:	0149      	lsls	r1, r1, #5
34183616:	4401      	add	r1, r0
34183618:	6809      	ldr	r1, [r1, #0]
3418361a:	6878      	ldr	r0, [r7, #4]
3418361c:	fb01 f000 	mul.w	r0, r1, r0
34183620:	68b9      	ldr	r1, [r7, #8]
34183622:	4401      	add	r1, r0
34183624:	fb01 f303 	mul.w	r3, r1, r3
34183628:	4413      	add	r3, r2
3418362a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
3418362c:	6979      	ldr	r1, [r7, #20]
3418362e:	4a0a      	ldr	r2, [pc, #40]	@ (34183658 <BSP_LCD_FillRect+0x7c>)
34183630:	68fb      	ldr	r3, [r7, #12]
34183632:	015b      	lsls	r3, r3, #5
34183634:	4413      	add	r3, r2
34183636:	681a      	ldr	r2, [r3, #0]
34183638:	683b      	ldr	r3, [r7, #0]
3418363a:	1ad3      	subs	r3, r2, r3
3418363c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418363e:	9201      	str	r2, [sp, #4]
34183640:	9300      	str	r3, [sp, #0]
34183642:	6a3b      	ldr	r3, [r7, #32]
34183644:	683a      	ldr	r2, [r7, #0]
34183646:	68f8      	ldr	r0, [r7, #12]
34183648:	f000 f964 	bl	34183914 <LL_FillBuffer>

  return BSP_ERROR_NONE;
3418364c:	2300      	movs	r3, #0
}
3418364e:	4618      	mov	r0, r3
34183650:	3718      	adds	r7, #24
34183652:	46bd      	mov	sp, r7
34183654:	bd80      	pop	{r7, pc}
34183656:	bf00      	nop
34183658:	341c1190 	.word	0x341c1190
3418365c:	341c10e8 	.word	0x341c10e8

34183660 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
34183660:	b480      	push	{r7}
34183662:	b085      	sub	sp, #20
34183664:	af00      	add	r7, sp, #0
34183666:	60f8      	str	r0, [r7, #12]
34183668:	60b9      	str	r1, [r7, #8]
3418366a:	607a      	str	r2, [r7, #4]
3418366c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3418366e:	4a42      	ldr	r2, [pc, #264]	@ (34183778 <BSP_LCD_ReadPixel+0x118>)
34183670:	68fb      	ldr	r3, [r7, #12]
34183672:	015b      	lsls	r3, r3, #5
34183674:	4413      	add	r3, r2
34183676:	3308      	adds	r3, #8
34183678:	681b      	ldr	r3, [r3, #0]
3418367a:	4a40      	ldr	r2, [pc, #256]	@ (3418377c <BSP_LCD_ReadPixel+0x11c>)
3418367c:	2134      	movs	r1, #52	@ 0x34
3418367e:	fb01 f303 	mul.w	r3, r1, r3
34183682:	4413      	add	r3, r2
34183684:	3348      	adds	r3, #72	@ 0x48
34183686:	681b      	ldr	r3, [r3, #0]
34183688:	2b00      	cmp	r3, #0
3418368a:	d11c      	bne.n	341836c6 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from RAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3418368c:	4a3a      	ldr	r2, [pc, #232]	@ (34183778 <BSP_LCD_ReadPixel+0x118>)
3418368e:	68fb      	ldr	r3, [r7, #12]
34183690:	015b      	lsls	r3, r3, #5
34183692:	4413      	add	r3, r2
34183694:	3308      	adds	r3, #8
34183696:	681b      	ldr	r3, [r3, #0]
34183698:	4a38      	ldr	r2, [pc, #224]	@ (3418377c <BSP_LCD_ReadPixel+0x11c>)
3418369a:	2134      	movs	r1, #52	@ 0x34
3418369c:	fb01 f303 	mul.w	r3, r1, r3
341836a0:	4413      	add	r3, r2
341836a2:	335c      	adds	r3, #92	@ 0x5c
341836a4:	681a      	ldr	r2, [r3, #0]
341836a6:	4934      	ldr	r1, [pc, #208]	@ (34183778 <BSP_LCD_ReadPixel+0x118>)
341836a8:	68fb      	ldr	r3, [r7, #12]
341836aa:	015b      	lsls	r3, r3, #5
341836ac:	440b      	add	r3, r1
341836ae:	681b      	ldr	r3, [r3, #0]
341836b0:	6879      	ldr	r1, [r7, #4]
341836b2:	fb03 f101 	mul.w	r1, r3, r1
341836b6:	68bb      	ldr	r3, [r7, #8]
341836b8:	440b      	add	r3, r1
341836ba:	009b      	lsls	r3, r3, #2
341836bc:	4413      	add	r3, r2
341836be:	681a      	ldr	r2, [r3, #0]
341836c0:	683b      	ldr	r3, [r7, #0]
341836c2:	601a      	str	r2, [r3, #0]
341836c4:	e051      	b.n	3418376a <BSP_LCD_ReadPixel+0x10a>
  }
  else if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
341836c6:	4a2c      	ldr	r2, [pc, #176]	@ (34183778 <BSP_LCD_ReadPixel+0x118>)
341836c8:	68fb      	ldr	r3, [r7, #12]
341836ca:	015b      	lsls	r3, r3, #5
341836cc:	4413      	add	r3, r2
341836ce:	3308      	adds	r3, #8
341836d0:	681b      	ldr	r3, [r3, #0]
341836d2:	4a2a      	ldr	r2, [pc, #168]	@ (3418377c <BSP_LCD_ReadPixel+0x11c>)
341836d4:	2134      	movs	r1, #52	@ 0x34
341836d6:	fb01 f303 	mul.w	r3, r1, r3
341836da:	4413      	add	r3, r2
341836dc:	3348      	adds	r3, #72	@ 0x48
341836de:	681b      	ldr	r3, [r3, #0]
341836e0:	2b06      	cmp	r3, #6
341836e2:	d124      	bne.n	3418372e <BSP_LCD_ReadPixel+0xce>
  {
    /* Read data value from RAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
341836e4:	4a24      	ldr	r2, [pc, #144]	@ (34183778 <BSP_LCD_ReadPixel+0x118>)
341836e6:	68fb      	ldr	r3, [r7, #12]
341836e8:	015b      	lsls	r3, r3, #5
341836ea:	4413      	add	r3, r2
341836ec:	3308      	adds	r3, #8
341836ee:	681b      	ldr	r3, [r3, #0]
341836f0:	4a22      	ldr	r2, [pc, #136]	@ (3418377c <BSP_LCD_ReadPixel+0x11c>)
341836f2:	2134      	movs	r1, #52	@ 0x34
341836f4:	fb01 f303 	mul.w	r3, r1, r3
341836f8:	4413      	add	r3, r2
341836fa:	335c      	adds	r3, #92	@ 0x5c
341836fc:	6819      	ldr	r1, [r3, #0]
341836fe:	4a1e      	ldr	r2, [pc, #120]	@ (34183778 <BSP_LCD_ReadPixel+0x118>)
34183700:	68fb      	ldr	r3, [r7, #12]
34183702:	015b      	lsls	r3, r3, #5
34183704:	4413      	add	r3, r2
34183706:	681b      	ldr	r3, [r3, #0]
34183708:	687a      	ldr	r2, [r7, #4]
3418370a:	fb03 f202 	mul.w	r2, r3, r2
3418370e:	68bb      	ldr	r3, [r7, #8]
34183710:	441a      	add	r2, r3
34183712:	4613      	mov	r3, r2
34183714:	005b      	lsls	r3, r3, #1
34183716:	4413      	add	r3, r2
34183718:	440b      	add	r3, r1
3418371a:	681a      	ldr	r2, [r3, #0]
3418371c:	683b      	ldr	r3, [r7, #0]
3418371e:	601a      	str	r2, [r3, #0]
    *Color = CONVERTARGB88882RGB888(*Color);
34183720:	683b      	ldr	r3, [r7, #0]
34183722:	681b      	ldr	r3, [r3, #0]
34183724:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34183728:	683b      	ldr	r3, [r7, #0]
3418372a:	601a      	str	r2, [r3, #0]
3418372c:	e01d      	b.n	3418376a <BSP_LCD_ReadPixel+0x10a>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from RAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3418372e:	4a12      	ldr	r2, [pc, #72]	@ (34183778 <BSP_LCD_ReadPixel+0x118>)
34183730:	68fb      	ldr	r3, [r7, #12]
34183732:	015b      	lsls	r3, r3, #5
34183734:	4413      	add	r3, r2
34183736:	3308      	adds	r3, #8
34183738:	681b      	ldr	r3, [r3, #0]
3418373a:	4a10      	ldr	r2, [pc, #64]	@ (3418377c <BSP_LCD_ReadPixel+0x11c>)
3418373c:	2134      	movs	r1, #52	@ 0x34
3418373e:	fb01 f303 	mul.w	r3, r1, r3
34183742:	4413      	add	r3, r2
34183744:	335c      	adds	r3, #92	@ 0x5c
34183746:	681a      	ldr	r2, [r3, #0]
34183748:	490b      	ldr	r1, [pc, #44]	@ (34183778 <BSP_LCD_ReadPixel+0x118>)
3418374a:	68fb      	ldr	r3, [r7, #12]
3418374c:	015b      	lsls	r3, r3, #5
3418374e:	440b      	add	r3, r1
34183750:	681b      	ldr	r3, [r3, #0]
34183752:	6879      	ldr	r1, [r7, #4]
34183754:	fb03 f101 	mul.w	r1, r3, r1
34183758:	68bb      	ldr	r3, [r7, #8]
3418375a:	440b      	add	r3, r1
3418375c:	005b      	lsls	r3, r3, #1
3418375e:	4413      	add	r3, r2
34183760:	881b      	ldrh	r3, [r3, #0]
34183762:	b29b      	uxth	r3, r3
34183764:	461a      	mov	r2, r3
34183766:	683b      	ldr	r3, [r7, #0]
34183768:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
3418376a:	2300      	movs	r3, #0
}
3418376c:	4618      	mov	r0, r3
3418376e:	3714      	adds	r7, #20
34183770:	46bd      	mov	sp, r7
34183772:	f85d 7b04 	ldr.w	r7, [sp], #4
34183776:	4770      	bx	lr
34183778:	341c1190 	.word	0x341c1190
3418377c:	341c10e8 	.word	0x341c10e8

34183780 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
34183780:	b480      	push	{r7}
34183782:	b085      	sub	sp, #20
34183784:	af00      	add	r7, sp, #0
34183786:	60f8      	str	r0, [r7, #12]
34183788:	60b9      	str	r1, [r7, #8]
3418378a:	607a      	str	r2, [r7, #4]
3418378c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3418378e:	4a5f      	ldr	r2, [pc, #380]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
34183790:	68fb      	ldr	r3, [r7, #12]
34183792:	015b      	lsls	r3, r3, #5
34183794:	4413      	add	r3, r2
34183796:	3308      	adds	r3, #8
34183798:	681b      	ldr	r3, [r3, #0]
3418379a:	4a5d      	ldr	r2, [pc, #372]	@ (34183910 <BSP_LCD_WritePixel+0x190>)
3418379c:	2134      	movs	r1, #52	@ 0x34
3418379e:	fb01 f303 	mul.w	r3, r1, r3
341837a2:	4413      	add	r3, r2
341837a4:	3348      	adds	r3, #72	@ 0x48
341837a6:	681b      	ldr	r3, [r3, #0]
341837a8:	2b00      	cmp	r3, #0
341837aa:	d11c      	bne.n	341837e6 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to RAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
341837ac:	4a57      	ldr	r2, [pc, #348]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
341837ae:	68fb      	ldr	r3, [r7, #12]
341837b0:	015b      	lsls	r3, r3, #5
341837b2:	4413      	add	r3, r2
341837b4:	3308      	adds	r3, #8
341837b6:	681b      	ldr	r3, [r3, #0]
341837b8:	4a55      	ldr	r2, [pc, #340]	@ (34183910 <BSP_LCD_WritePixel+0x190>)
341837ba:	2134      	movs	r1, #52	@ 0x34
341837bc:	fb01 f303 	mul.w	r3, r1, r3
341837c0:	4413      	add	r3, r2
341837c2:	335c      	adds	r3, #92	@ 0x5c
341837c4:	681a      	ldr	r2, [r3, #0]
341837c6:	4951      	ldr	r1, [pc, #324]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
341837c8:	68fb      	ldr	r3, [r7, #12]
341837ca:	015b      	lsls	r3, r3, #5
341837cc:	440b      	add	r3, r1
341837ce:	681b      	ldr	r3, [r3, #0]
341837d0:	6879      	ldr	r1, [r7, #4]
341837d2:	fb03 f101 	mul.w	r1, r3, r1
341837d6:	68bb      	ldr	r3, [r7, #8]
341837d8:	440b      	add	r3, r1
341837da:	009b      	lsls	r3, r3, #2
341837dc:	4413      	add	r3, r2
341837de:	461a      	mov	r2, r3
341837e0:	683b      	ldr	r3, [r7, #0]
341837e2:	6013      	str	r3, [r2, #0]
341837e4:	e08a      	b.n	341838fc <BSP_LCD_WritePixel+0x17c>
  }
  else if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
341837e6:	4a49      	ldr	r2, [pc, #292]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
341837e8:	68fb      	ldr	r3, [r7, #12]
341837ea:	015b      	lsls	r3, r3, #5
341837ec:	4413      	add	r3, r2
341837ee:	3308      	adds	r3, #8
341837f0:	681b      	ldr	r3, [r3, #0]
341837f2:	4a47      	ldr	r2, [pc, #284]	@ (34183910 <BSP_LCD_WritePixel+0x190>)
341837f4:	2134      	movs	r1, #52	@ 0x34
341837f6:	fb01 f303 	mul.w	r3, r1, r3
341837fa:	4413      	add	r3, r2
341837fc:	3348      	adds	r3, #72	@ 0x48
341837fe:	681b      	ldr	r3, [r3, #0]
34183800:	2b06      	cmp	r3, #6
34183802:	d15f      	bne.n	341838c4 <BSP_LCD_WritePixel+0x144>
  {
    /* Write data value to RAM memory */
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-3U)) = (uint8_t) (Color);
34183804:	4a41      	ldr	r2, [pc, #260]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
34183806:	68fb      	ldr	r3, [r7, #12]
34183808:	015b      	lsls	r3, r3, #5
3418380a:	4413      	add	r3, r2
3418380c:	3308      	adds	r3, #8
3418380e:	681b      	ldr	r3, [r3, #0]
34183810:	4a3f      	ldr	r2, [pc, #252]	@ (34183910 <BSP_LCD_WritePixel+0x190>)
34183812:	2134      	movs	r1, #52	@ 0x34
34183814:	fb01 f303 	mul.w	r3, r1, r3
34183818:	4413      	add	r3, r2
3418381a:	335c      	adds	r3, #92	@ 0x5c
3418381c:	6819      	ldr	r1, [r3, #0]
3418381e:	4a3b      	ldr	r2, [pc, #236]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
34183820:	68fb      	ldr	r3, [r7, #12]
34183822:	015b      	lsls	r3, r3, #5
34183824:	4413      	add	r3, r2
34183826:	681b      	ldr	r3, [r3, #0]
34183828:	687a      	ldr	r2, [r7, #4]
3418382a:	fb03 f202 	mul.w	r2, r3, r2
3418382e:	68bb      	ldr	r3, [r7, #8]
34183830:	441a      	add	r2, r3
34183832:	4613      	mov	r3, r2
34183834:	005b      	lsls	r3, r3, #1
34183836:	4413      	add	r3, r2
34183838:	440b      	add	r3, r1
3418383a:	3b03      	subs	r3, #3
3418383c:	683a      	ldr	r2, [r7, #0]
3418383e:	b2d2      	uxtb	r2, r2
34183840:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-2U)) = (uint8_t) (Color>>8U);
34183842:	683b      	ldr	r3, [r7, #0]
34183844:	0a18      	lsrs	r0, r3, #8
34183846:	4a31      	ldr	r2, [pc, #196]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
34183848:	68fb      	ldr	r3, [r7, #12]
3418384a:	015b      	lsls	r3, r3, #5
3418384c:	4413      	add	r3, r2
3418384e:	3308      	adds	r3, #8
34183850:	681b      	ldr	r3, [r3, #0]
34183852:	4a2f      	ldr	r2, [pc, #188]	@ (34183910 <BSP_LCD_WritePixel+0x190>)
34183854:	2134      	movs	r1, #52	@ 0x34
34183856:	fb01 f303 	mul.w	r3, r1, r3
3418385a:	4413      	add	r3, r2
3418385c:	335c      	adds	r3, #92	@ 0x5c
3418385e:	6819      	ldr	r1, [r3, #0]
34183860:	4a2a      	ldr	r2, [pc, #168]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
34183862:	68fb      	ldr	r3, [r7, #12]
34183864:	015b      	lsls	r3, r3, #5
34183866:	4413      	add	r3, r2
34183868:	681b      	ldr	r3, [r3, #0]
3418386a:	687a      	ldr	r2, [r7, #4]
3418386c:	fb03 f202 	mul.w	r2, r3, r2
34183870:	68bb      	ldr	r3, [r7, #8]
34183872:	441a      	add	r2, r3
34183874:	4613      	mov	r3, r2
34183876:	005b      	lsls	r3, r3, #1
34183878:	4413      	add	r3, r2
3418387a:	440b      	add	r3, r1
3418387c:	3b02      	subs	r3, #2
3418387e:	b2c2      	uxtb	r2, r0
34183880:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-1U)) = (uint8_t) (Color>>16U);
34183882:	683b      	ldr	r3, [r7, #0]
34183884:	0c18      	lsrs	r0, r3, #16
34183886:	4a21      	ldr	r2, [pc, #132]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
34183888:	68fb      	ldr	r3, [r7, #12]
3418388a:	015b      	lsls	r3, r3, #5
3418388c:	4413      	add	r3, r2
3418388e:	3308      	adds	r3, #8
34183890:	681b      	ldr	r3, [r3, #0]
34183892:	4a1f      	ldr	r2, [pc, #124]	@ (34183910 <BSP_LCD_WritePixel+0x190>)
34183894:	2134      	movs	r1, #52	@ 0x34
34183896:	fb01 f303 	mul.w	r3, r1, r3
3418389a:	4413      	add	r3, r2
3418389c:	335c      	adds	r3, #92	@ 0x5c
3418389e:	6819      	ldr	r1, [r3, #0]
341838a0:	4a1a      	ldr	r2, [pc, #104]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
341838a2:	68fb      	ldr	r3, [r7, #12]
341838a4:	015b      	lsls	r3, r3, #5
341838a6:	4413      	add	r3, r2
341838a8:	681b      	ldr	r3, [r3, #0]
341838aa:	687a      	ldr	r2, [r7, #4]
341838ac:	fb03 f202 	mul.w	r2, r3, r2
341838b0:	68bb      	ldr	r3, [r7, #8]
341838b2:	441a      	add	r2, r3
341838b4:	4613      	mov	r3, r2
341838b6:	005b      	lsls	r3, r3, #1
341838b8:	4413      	add	r3, r2
341838ba:	440b      	add	r3, r1
341838bc:	3b01      	subs	r3, #1
341838be:	b2c2      	uxtb	r2, r0
341838c0:	701a      	strb	r2, [r3, #0]
341838c2:	e01b      	b.n	341838fc <BSP_LCD_WritePixel+0x17c>
  }
  else
  {
    /* Write data value to RAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
341838c4:	4a11      	ldr	r2, [pc, #68]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
341838c6:	68fb      	ldr	r3, [r7, #12]
341838c8:	015b      	lsls	r3, r3, #5
341838ca:	4413      	add	r3, r2
341838cc:	3308      	adds	r3, #8
341838ce:	681b      	ldr	r3, [r3, #0]
341838d0:	4a0f      	ldr	r2, [pc, #60]	@ (34183910 <BSP_LCD_WritePixel+0x190>)
341838d2:	2134      	movs	r1, #52	@ 0x34
341838d4:	fb01 f303 	mul.w	r3, r1, r3
341838d8:	4413      	add	r3, r2
341838da:	335c      	adds	r3, #92	@ 0x5c
341838dc:	681a      	ldr	r2, [r3, #0]
341838de:	490b      	ldr	r1, [pc, #44]	@ (3418390c <BSP_LCD_WritePixel+0x18c>)
341838e0:	68fb      	ldr	r3, [r7, #12]
341838e2:	015b      	lsls	r3, r3, #5
341838e4:	440b      	add	r3, r1
341838e6:	681b      	ldr	r3, [r3, #0]
341838e8:	6879      	ldr	r1, [r7, #4]
341838ea:	fb03 f101 	mul.w	r1, r3, r1
341838ee:	68bb      	ldr	r3, [r7, #8]
341838f0:	440b      	add	r3, r1
341838f2:	005b      	lsls	r3, r3, #1
341838f4:	4413      	add	r3, r2
341838f6:	683a      	ldr	r2, [r7, #0]
341838f8:	b292      	uxth	r2, r2
341838fa:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
341838fc:	2300      	movs	r3, #0
}
341838fe:	4618      	mov	r0, r3
34183900:	3714      	adds	r7, #20
34183902:	46bd      	mov	sp, r7
34183904:	f85d 7b04 	ldr.w	r7, [sp], #4
34183908:	4770      	bx	lr
3418390a:	bf00      	nop
3418390c:	341c1190 	.word	0x341c1190
34183910:	341c10e8 	.word	0x341c10e8

34183914 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color RGB color
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
34183914:	b580      	push	{r7, lr}
34183916:	b088      	sub	sp, #32
34183918:	af02      	add	r7, sp, #8
3418391a:	60f8      	str	r0, [r7, #12]
3418391c:	60b9      	str	r1, [r7, #8]
3418391e:	607a      	str	r2, [r7, #4]
34183920:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;
  uint32_t input_color = Color;
34183922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34183924:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
34183926:	4a46      	ldr	r2, [pc, #280]	@ (34183a40 <LL_FillBuffer+0x12c>)
34183928:	68fb      	ldr	r3, [r7, #12]
3418392a:	015b      	lsls	r3, r3, #5
3418392c:	4413      	add	r3, r2
3418392e:	330c      	adds	r3, #12
34183930:	681b      	ldr	r3, [r3, #0]
34183932:	2b04      	cmp	r3, #4
34183934:	d02f      	beq.n	34183996 <LL_FillBuffer+0x82>
34183936:	2b04      	cmp	r3, #4
34183938:	d859      	bhi.n	341839ee <LL_FillBuffer+0xda>
3418393a:	2b01      	cmp	r3, #1
3418393c:	d050      	beq.n	341839e0 <LL_FillBuffer+0xcc>
3418393e:	2b02      	cmp	r3, #2
34183940:	d155      	bne.n	341839ee <LL_FillBuffer+0xda>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
34183942:	2302      	movs	r3, #2
34183944:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
34183946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34183948:	0adb      	lsrs	r3, r3, #11
3418394a:	f003 021f 	and.w	r2, r3, #31
3418394e:	4613      	mov	r3, r2
34183950:	011b      	lsls	r3, r3, #4
34183952:	4413      	add	r3, r2
34183954:	015a      	lsls	r2, r3, #5
34183956:	1ad3      	subs	r3, r2, r3
34183958:	3317      	adds	r3, #23
3418395a:	099b      	lsrs	r3, r3, #6
3418395c:	0419      	lsls	r1, r3, #16
3418395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34183960:	095b      	lsrs	r3, r3, #5
34183962:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
34183966:	4613      	mov	r3, r2
34183968:	01db      	lsls	r3, r3, #7
3418396a:	4413      	add	r3, r2
3418396c:	005b      	lsls	r3, r3, #1
3418396e:	4413      	add	r3, r2
34183970:	3321      	adds	r3, #33	@ 0x21
34183972:	099b      	lsrs	r3, r3, #6
34183974:	021b      	lsls	r3, r3, #8
34183976:	4319      	orrs	r1, r3
34183978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418397a:	f003 021f 	and.w	r2, r3, #31
3418397e:	4613      	mov	r3, r2
34183980:	011b      	lsls	r3, r3, #4
34183982:	4413      	add	r3, r2
34183984:	015a      	lsls	r2, r3, #5
34183986:	1ad3      	subs	r3, r2, r3
34183988:	3317      	adds	r3, #23
3418398a:	099b      	lsrs	r3, r3, #6
3418398c:	430b      	orrs	r3, r1
3418398e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
34183992:	613b      	str	r3, [r7, #16]
    break;
34183994:	e02e      	b.n	341839f4 <LL_FillBuffer+0xe0>
  case LCD_PIXEL_FORMAT_ARGB4444:
    output_color_mode = DMA2D_OUTPUT_ARGB4444; /* ARGB4444 */
34183996:	2304      	movs	r3, #4
34183998:	617b      	str	r3, [r7, #20]
    input_color = CONVERTARGB44442ARGB8888(Color);
3418399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418399c:	0b1b      	lsrs	r3, r3, #12
3418399e:	f003 020f 	and.w	r2, r3, #15
341839a2:	4613      	mov	r3, r2
341839a4:	011b      	lsls	r3, r3, #4
341839a6:	4413      	add	r3, r2
341839a8:	0619      	lsls	r1, r3, #24
341839aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341839ac:	0a1b      	lsrs	r3, r3, #8
341839ae:	f003 020f 	and.w	r2, r3, #15
341839b2:	4613      	mov	r3, r2
341839b4:	011b      	lsls	r3, r3, #4
341839b6:	4413      	add	r3, r2
341839b8:	041b      	lsls	r3, r3, #16
341839ba:	4319      	orrs	r1, r3
341839bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341839be:	091b      	lsrs	r3, r3, #4
341839c0:	f003 020f 	and.w	r2, r3, #15
341839c4:	4613      	mov	r3, r2
341839c6:	011b      	lsls	r3, r3, #4
341839c8:	4413      	add	r3, r2
341839ca:	021b      	lsls	r3, r3, #8
341839cc:	4319      	orrs	r1, r3
341839ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341839d0:	f003 020f 	and.w	r2, r3, #15
341839d4:	4613      	mov	r3, r2
341839d6:	011b      	lsls	r3, r3, #4
341839d8:	4413      	add	r3, r2
341839da:	430b      	orrs	r3, r1
341839dc:	613b      	str	r3, [r7, #16]
    break;
341839de:	e009      	b.n	341839f4 <LL_FillBuffer+0xe0>
  case LCD_PIXEL_FORMAT_RGB888:
    output_color_mode = DMA2D_OUTPUT_RGB888; /* RGB888 */
341839e0:	2301      	movs	r3, #1
341839e2:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB8882ARGB8888(Color);
341839e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341839e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
341839ea:	613b      	str	r3, [r7, #16]
    break;
341839ec:	e002      	b.n	341839f4 <LL_FillBuffer+0xe0>
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
341839ee:	2300      	movs	r3, #0
341839f0:	617b      	str	r3, [r7, #20]
    break;
341839f2:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
341839f4:	4b13      	ldr	r3, [pc, #76]	@ (34183a44 <LL_FillBuffer+0x130>)
341839f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
341839fa:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
341839fc:	4a11      	ldr	r2, [pc, #68]	@ (34183a44 <LL_FillBuffer+0x130>)
341839fe:	697b      	ldr	r3, [r7, #20]
34183a00:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
34183a02:	4a10      	ldr	r2, [pc, #64]	@ (34183a44 <LL_FillBuffer+0x130>)
34183a04:	6a3b      	ldr	r3, [r7, #32]
34183a06:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
34183a08:	4b0e      	ldr	r3, [pc, #56]	@ (34183a44 <LL_FillBuffer+0x130>)
34183a0a:	4a0f      	ldr	r2, [pc, #60]	@ (34183a48 <LL_FillBuffer+0x134>)
34183a0c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
34183a0e:	480d      	ldr	r0, [pc, #52]	@ (34183a44 <LL_FillBuffer+0x130>)
34183a10:	f003 fc9c 	bl	3418734c <HAL_DMA2D_Init>
34183a14:	4603      	mov	r3, r0
34183a16:	2b00      	cmp	r3, #0
34183a18:	d10e      	bne.n	34183a38 <LL_FillBuffer+0x124>
  {
    if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
34183a1a:	68ba      	ldr	r2, [r7, #8]
34183a1c:	683b      	ldr	r3, [r7, #0]
34183a1e:	9300      	str	r3, [sp, #0]
34183a20:	687b      	ldr	r3, [r7, #4]
34183a22:	6939      	ldr	r1, [r7, #16]
34183a24:	4807      	ldr	r0, [pc, #28]	@ (34183a44 <LL_FillBuffer+0x130>)
34183a26:	f003 fcfc 	bl	34187422 <HAL_DMA2D_Start>
34183a2a:	4603      	mov	r3, r0
34183a2c:	2b00      	cmp	r3, #0
34183a2e:	d103      	bne.n	34183a38 <LL_FillBuffer+0x124>
    {
      /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
34183a30:	2132      	movs	r1, #50	@ 0x32
34183a32:	4804      	ldr	r0, [pc, #16]	@ (34183a44 <LL_FillBuffer+0x130>)
34183a34:	f003 fd20 	bl	34187478 <HAL_DMA2D_PollForTransfer>
    }
  }
}
34183a38:	bf00      	nop
34183a3a:	3718      	adds	r7, #24
34183a3c:	46bd      	mov	sp, r7
34183a3e:	bd80      	pop	{r7, pc}
34183a40:	341c1190 	.word	0x341c1190
34183a44:	341c1080 	.word	0x341c1080
34183a48:	58021000 	.word	0x58021000

34183a4c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
34183a4c:	b580      	push	{r7, lr}
34183a4e:	b088      	sub	sp, #32
34183a50:	af02      	add	r7, sp, #8
34183a52:	60f8      	str	r0, [r7, #12]
34183a54:	60b9      	str	r1, [r7, #8]
34183a56:	607a      	str	r2, [r7, #4]
34183a58:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
34183a5a:	4a29      	ldr	r2, [pc, #164]	@ (34183b00 <LL_ConvertLineToRGB+0xb4>)
34183a5c:	68fb      	ldr	r3, [r7, #12]
34183a5e:	015b      	lsls	r3, r3, #5
34183a60:	4413      	add	r3, r2
34183a62:	330c      	adds	r3, #12
34183a64:	681b      	ldr	r3, [r3, #0]
34183a66:	2b04      	cmp	r3, #4
34183a68:	d008      	beq.n	34183a7c <LL_ConvertLineToRGB+0x30>
34183a6a:	2b04      	cmp	r3, #4
34183a6c:	d80c      	bhi.n	34183a88 <LL_ConvertLineToRGB+0x3c>
34183a6e:	2b01      	cmp	r3, #1
34183a70:	d007      	beq.n	34183a82 <LL_ConvertLineToRGB+0x36>
34183a72:	2b02      	cmp	r3, #2
34183a74:	d108      	bne.n	34183a88 <LL_ConvertLineToRGB+0x3c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
34183a76:	2302      	movs	r3, #2
34183a78:	617b      	str	r3, [r7, #20]
    break;
34183a7a:	e008      	b.n	34183a8e <LL_ConvertLineToRGB+0x42>
  case LCD_PIXEL_FORMAT_ARGB4444:
    output_color_mode = DMA2D_OUTPUT_ARGB4444; /* ARGB4444 */
34183a7c:	2304      	movs	r3, #4
34183a7e:	617b      	str	r3, [r7, #20]
    break;
34183a80:	e005      	b.n	34183a8e <LL_ConvertLineToRGB+0x42>
  case LCD_PIXEL_FORMAT_RGB888:
    output_color_mode = DMA2D_OUTPUT_RGB888; /* RGB888 */
34183a82:	2301      	movs	r3, #1
34183a84:	617b      	str	r3, [r7, #20]
    break;
34183a86:	e002      	b.n	34183a8e <LL_ConvertLineToRGB+0x42>
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
34183a88:	2300      	movs	r3, #0
34183a8a:	617b      	str	r3, [r7, #20]
    break;
34183a8c:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
34183a8e:	4b1d      	ldr	r3, [pc, #116]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183a90:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34183a94:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
34183a96:	4a1b      	ldr	r2, [pc, #108]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183a98:	697b      	ldr	r3, [r7, #20]
34183a9a:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
34183a9c:	4b19      	ldr	r3, [pc, #100]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183a9e:	2200      	movs	r2, #0
34183aa0:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
34183aa2:	4b18      	ldr	r3, [pc, #96]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183aa4:	2200      	movs	r2, #0
34183aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
34183aa8:	4b16      	ldr	r3, [pc, #88]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183aaa:	22ff      	movs	r2, #255	@ 0xff
34183aac:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
34183aae:	4a15      	ldr	r2, [pc, #84]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183ab0:	6a3b      	ldr	r3, [r7, #32]
34183ab2:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
34183ab4:	4b13      	ldr	r3, [pc, #76]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183ab6:	2200      	movs	r2, #0
34183ab8:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
34183aba:	4b12      	ldr	r3, [pc, #72]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183abc:	4a12      	ldr	r2, [pc, #72]	@ (34183b08 <LL_ConvertLineToRGB+0xbc>)
34183abe:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
34183ac0:	4810      	ldr	r0, [pc, #64]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183ac2:	f003 fc43 	bl	3418734c <HAL_DMA2D_Init>
34183ac6:	4603      	mov	r3, r0
34183ac8:	2b00      	cmp	r3, #0
34183aca:	d115      	bne.n	34183af8 <LL_ConvertLineToRGB+0xac>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
34183acc:	2101      	movs	r1, #1
34183ace:	480d      	ldr	r0, [pc, #52]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183ad0:	f003 fdbc 	bl	3418764c <HAL_DMA2D_ConfigLayer>
34183ad4:	4603      	mov	r3, r0
34183ad6:	2b00      	cmp	r3, #0
34183ad8:	d10e      	bne.n	34183af8 <LL_ConvertLineToRGB+0xac>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
34183ada:	68b9      	ldr	r1, [r7, #8]
34183adc:	687a      	ldr	r2, [r7, #4]
34183ade:	2301      	movs	r3, #1
34183ae0:	9300      	str	r3, [sp, #0]
34183ae2:	683b      	ldr	r3, [r7, #0]
34183ae4:	4807      	ldr	r0, [pc, #28]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183ae6:	f003 fc9c 	bl	34187422 <HAL_DMA2D_Start>
34183aea:	4603      	mov	r3, r0
34183aec:	2b00      	cmp	r3, #0
34183aee:	d103      	bne.n	34183af8 <LL_ConvertLineToRGB+0xac>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
34183af0:	2132      	movs	r1, #50	@ 0x32
34183af2:	4804      	ldr	r0, [pc, #16]	@ (34183b04 <LL_ConvertLineToRGB+0xb8>)
34183af4:	f003 fcc0 	bl	34187478 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
34183af8:	bf00      	nop
34183afa:	3718      	adds	r7, #24
34183afc:	46bd      	mov	sp, r7
34183afe:	bd80      	pop	{r7, pc}
34183b00:	341c1190 	.word	0x341c1190
34183b04:	341c1080 	.word	0x341c1080
34183b08:	58021000 	.word	0x58021000

34183b0c <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
34183b0c:	b580      	push	{r7, lr}
34183b0e:	b088      	sub	sp, #32
34183b10:	af00      	add	r7, sp, #0
34183b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure = {0};
34183b14:	f107 030c 	add.w	r3, r7, #12
34183b18:	2200      	movs	r2, #0
34183b1a:	601a      	str	r2, [r3, #0]
34183b1c:	605a      	str	r2, [r3, #4]
34183b1e:	609a      	str	r2, [r3, #8]
34183b20:	60da      	str	r2, [r3, #12]
34183b22:	611a      	str	r2, [r3, #16]

  if (hltdc->Instance == LTDC)
34183b24:	687b      	ldr	r3, [r7, #4]
34183b26:	681b      	ldr	r3, [r3, #0]
34183b28:	4a4e      	ldr	r2, [pc, #312]	@ (34183c64 <LTDC_MspInit+0x158>)
34183b2a:	4293      	cmp	r3, r2
34183b2c:	f040 8095 	bne.w	34183c5a <LTDC_MspInit+0x14e>
  {
    __HAL_RCC_LTDC_CLK_ENABLE();
34183b30:	2002      	movs	r0, #2
34183b32:	f7ff f8d1 	bl	34182cd8 <LL_APB5_GRP1_EnableClock>

    __HAL_RCC_LTDC_FORCE_RESET();
34183b36:	2002      	movs	r0, #2
34183b38:	f7ff f8e4 	bl	34182d04 <LL_APB5_GRP1_ForceReset>
    __HAL_RCC_LTDC_RELEASE_RESET();
34183b3c:	2002      	movs	r0, #2
34183b3e:	f7ff f8f1 	bl	34182d24 <LL_APB5_GRP1_ReleaseReset>
    /* PB13 LCD_CLK     */
    /* PQ4  LCD_INT     */
    /* PQ6  LCD_BL_CTRL */
    /* PE1  NRST        */

    __HAL_RCC_GPIOA_CLK_ENABLE();
34183b42:	2001      	movs	r0, #1
34183b44:	f7ff f878 	bl	34182c38 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
34183b48:	2002      	movs	r0, #2
34183b4a:	f7ff f875 	bl	34182c38 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
34183b4e:	2008      	movs	r0, #8
34183b50:	f7ff f872 	bl	34182c38 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
34183b54:	2010      	movs	r0, #16
34183b56:	f7ff f86f 	bl	34182c38 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOG_CLK_ENABLE();
34183b5a:	2040      	movs	r0, #64	@ 0x40
34183b5c:	f7ff f86c 	bl	34182c38 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOH_CLK_ENABLE();
34183b60:	2080      	movs	r0, #128	@ 0x80
34183b62:	f7ff f869 	bl	34182c38 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOQ_CLK_ENABLE();
34183b66:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
34183b6a:	f7ff f865 	bl	34182c38 <LL_AHB4_GRP1_EnableClock>

    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
34183b6e:	2302      	movs	r3, #2
34183b70:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull      = GPIO_NOPULL;
34183b72:	2300      	movs	r3, #0
34183b74:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
34183b76:	2302      	movs	r3, #2
34183b78:	61bb      	str	r3, [r7, #24]

    /* G3, G2, B7, B1, B6, R5 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
34183b7a:	f248 1387 	movw	r3, #33159	@ 0x8187
34183b7e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34183b80:	230e      	movs	r3, #14
34183b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
34183b84:	f107 030c 	add.w	r3, r7, #12
34183b88:	4619      	mov	r1, r3
34183b8a:	4837      	ldr	r0, [pc, #220]	@ (34183c68 <LTDC_MspInit+0x15c>)
34183b8c:	f003 feb2 	bl	341878f4 <HAL_GPIO_Init>

    /* LCD_CLK, LCD_HSYNC B2, R3, G6, G5, G4 */
    gpio_init_structure.Pin       = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
34183b90:	f64f 0314 	movw	r3, #63508	@ 0xf814
34183b94:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34183b96:	230e      	movs	r3, #14
34183b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
34183b9a:	f107 030c 	add.w	r3, r7, #12
34183b9e:	4619      	mov	r1, r3
34183ba0:	4832      	ldr	r0, [pc, #200]	@ (34183c6c <LTDC_MspInit+0x160>)
34183ba2:	f003 fea7 	bl	341878f4 <HAL_GPIO_Init>

    /* R7, R1, R2 */
    gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_15;
34183ba6:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
34183baa:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34183bac:	230e      	movs	r3, #14
34183bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
34183bb0:	f107 030c 	add.w	r3, r7, #12
34183bb4:	4619      	mov	r1, r3
34183bb6:	482e      	ldr	r0, [pc, #184]	@ (34183c70 <LTDC_MspInit+0x164>)
34183bb8:	f003 fe9c 	bl	341878f4 <HAL_GPIO_Init>

    /* LCD_VSYNC */
    gpio_init_structure.Pin       = GPIO_PIN_11;
34183bbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34183bc0:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34183bc2:	230e      	movs	r3, #14
34183bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
34183bc6:	f107 030c 	add.w	r3, r7, #12
34183bca:	4619      	mov	r1, r3
34183bcc:	4829      	ldr	r0, [pc, #164]	@ (34183c74 <LTDC_MspInit+0x168>)
34183bce:	f003 fe91 	bl	341878f4 <HAL_GPIO_Init>

    /* R0, G1, B3, G7, R6, G0 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 ;
34183bd2:	f641 1343 	movw	r3, #6467	@ 0x1943
34183bd6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34183bd8:	230e      	movs	r3, #14
34183bda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
34183bdc:	f107 030c 	add.w	r3, r7, #12
34183be0:	4619      	mov	r1, r3
34183be2:	4825      	ldr	r0, [pc, #148]	@ (34183c78 <LTDC_MspInit+0x16c>)
34183be4:	f003 fe86 	bl	341878f4 <HAL_GPIO_Init>

    /* B4, R4, B5 */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
34183be8:	2358      	movs	r3, #88	@ 0x58
34183bea:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34183bec:	230e      	movs	r3, #14
34183bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
34183bf0:	f107 030c 	add.w	r3, r7, #12
34183bf4:	4619      	mov	r1, r3
34183bf6:	4821      	ldr	r0, [pc, #132]	@ (34183c7c <LTDC_MspInit+0x170>)
34183bf8:	f003 fe7c 	bl	341878f4 <HAL_GPIO_Init>

    /* NRST */
    gpio_init_structure.Pin       = GPIO_PIN_1;
34183bfc:	2302      	movs	r3, #2
34183bfe:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34183c00:	2301      	movs	r3, #1
34183c02:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
34183c04:	f107 030c 	add.w	r3, r7, #12
34183c08:	4619      	mov	r1, r3
34183c0a:	481a      	ldr	r0, [pc, #104]	@ (34183c74 <LTDC_MspInit+0x168>)
34183c0c:	f003 fe72 	bl	341878f4 <HAL_GPIO_Init>

    /* LCD_ONOFF, LCD_BL_CTRL */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_6;
34183c10:	2348      	movs	r3, #72	@ 0x48
34183c12:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34183c14:	2301      	movs	r3, #1
34183c16:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOQ, &gpio_init_structure);
34183c18:	f107 030c 	add.w	r3, r7, #12
34183c1c:	4619      	mov	r1, r3
34183c1e:	4818      	ldr	r0, [pc, #96]	@ (34183c80 <LTDC_MspInit+0x174>)
34183c20:	f003 fe68 	bl	341878f4 <HAL_GPIO_Init>

    /* LCD_DE */
    gpio_init_structure.Pin       = GPIO_PIN_13;
34183c24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34183c28:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34183c2a:	2301      	movs	r3, #1
34183c2c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
34183c2e:	f107 030c 	add.w	r3, r7, #12
34183c32:	4619      	mov	r1, r3
34183c34:	4810      	ldr	r0, [pc, #64]	@ (34183c78 <LTDC_MspInit+0x16c>)
34183c36:	f003 fe5d 	bl	341878f4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_3, GPIO_PIN_SET); /* LCD On */ /* PQ3  LCD_ONOFF   */
34183c3a:	2201      	movs	r2, #1
34183c3c:	2108      	movs	r1, #8
34183c3e:	4810      	ldr	r0, [pc, #64]	@ (34183c80 <LTDC_MspInit+0x174>)
34183c40:	f004 f94a 	bl	34187ed8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET); /* Display Enable */ /* PG13 LCD_DE      */
34183c44:	2201      	movs	r2, #1
34183c46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
34183c4a:	480b      	ldr	r0, [pc, #44]	@ (34183c78 <LTDC_MspInit+0x16c>)
34183c4c:	f004 f944 	bl	34187ed8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_6, GPIO_PIN_SET); /* 100% Brightness */ /* PQ6  LCD_BL_CTRL */
34183c50:	2201      	movs	r2, #1
34183c52:	2140      	movs	r1, #64	@ 0x40
34183c54:	480a      	ldr	r0, [pc, #40]	@ (34183c80 <LTDC_MspInit+0x174>)
34183c56:	f004 f93f 	bl	34187ed8 <HAL_GPIO_WritePin>

  }
}
34183c5a:	bf00      	nop
34183c5c:	3720      	adds	r7, #32
34183c5e:	46bd      	mov	sp, r7
34183c60:	bd80      	pop	{r7, pc}
34183c62:	bf00      	nop
34183c64:	58001000 	.word	0x58001000
34183c68:	56020000 	.word	0x56020000
34183c6c:	56020400 	.word	0x56020400
34183c70:	56020c00 	.word	0x56020c00
34183c74:	56021000 	.word	0x56021000
34183c78:	56021800 	.word	0x56021800
34183c7c:	56021c00 	.word	0x56021c00
34183c80:	56024000 	.word	0x56024000

34183c84 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
34183c84:	b580      	push	{r7, lr}
34183c86:	b082      	sub	sp, #8
34183c88:	af00      	add	r7, sp, #0
34183c8a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
34183c8c:	687b      	ldr	r3, [r7, #4]
34183c8e:	681b      	ldr	r3, [r3, #0]
34183c90:	4a07      	ldr	r2, [pc, #28]	@ (34183cb0 <DMA2D_MspInit+0x2c>)
34183c92:	4293      	cmp	r3, r2
34183c94:	d108      	bne.n	34183ca8 <DMA2D_MspInit+0x24>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
34183c96:	2002      	movs	r0, #2
34183c98:	f7fe ffe4 	bl	34182c64 <LL_AHB5_GRP1_EnableClock>

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
34183c9c:	2002      	movs	r0, #2
34183c9e:	f7fe fff7 	bl	34182c90 <LL_AHB5_GRP1_ForceReset>
    __HAL_RCC_DMA2D_RELEASE_RESET();
34183ca2:	2002      	movs	r0, #2
34183ca4:	f7ff f804 	bl	34182cb0 <LL_AHB5_GRP1_ReleaseReset>
  }
}
34183ca8:	bf00      	nop
34183caa:	3708      	adds	r7, #8
34183cac:	46bd      	mov	sp, r7
34183cae:	bd80      	pop	{r7, pc}
34183cb0:	58021000 	.word	0x58021000

34183cb4 <IMX335_WriteTable>:

/** @defgroup IMX335_Private_Functions Private Functions
  * @{
  */
static int32_t IMX335_WriteTable(IMX335_Object_t *pObj, const struct regval *regs, uint32_t size)
{
34183cb4:	b580      	push	{r7, lr}
34183cb6:	b086      	sub	sp, #24
34183cb8:	af00      	add	r7, sp, #0
34183cba:	60f8      	str	r0, [r7, #12]
34183cbc:	60b9      	str	r1, [r7, #8]
34183cbe:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = IMX335_OK;
34183cc0:	2300      	movs	r3, #0
34183cc2:	613b      	str	r3, [r7, #16]

  /* Set registers */
  for(index=0; index<size ; index++)
34183cc4:	2300      	movs	r3, #0
34183cc6:	617b      	str	r3, [r7, #20]
34183cc8:	e01c      	b.n	34183d04 <IMX335_WriteTable+0x50>
  {
    if(ret != IMX335_ERROR)
34183cca:	693b      	ldr	r3, [r7, #16]
34183ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
34183cd0:	d015      	beq.n	34183cfe <IMX335_WriteTable+0x4a>
    {
      if(imx335_write_reg(&pObj->Ctx, regs[index].addr, (uint8_t *)&(regs[index].val), 1) != IMX335_OK)
34183cd2:	68fb      	ldr	r3, [r7, #12]
34183cd4:	f103 0018 	add.w	r0, r3, #24
34183cd8:	697b      	ldr	r3, [r7, #20]
34183cda:	009b      	lsls	r3, r3, #2
34183cdc:	68ba      	ldr	r2, [r7, #8]
34183cde:	4413      	add	r3, r2
34183ce0:	8819      	ldrh	r1, [r3, #0]
34183ce2:	697b      	ldr	r3, [r7, #20]
34183ce4:	009b      	lsls	r3, r3, #2
34183ce6:	68ba      	ldr	r2, [r7, #8]
34183ce8:	4413      	add	r3, r2
34183cea:	1c9a      	adds	r2, r3, #2
34183cec:	2301      	movs	r3, #1
34183cee:	f000 fb68 	bl	341843c2 <imx335_write_reg>
34183cf2:	4603      	mov	r3, r0
34183cf4:	2b00      	cmp	r3, #0
34183cf6:	d002      	beq.n	34183cfe <IMX335_WriteTable+0x4a>
      {
        ret = IMX335_ERROR;
34183cf8:	f04f 33ff 	mov.w	r3, #4294967295
34183cfc:	613b      	str	r3, [r7, #16]
  for(index=0; index<size ; index++)
34183cfe:	697b      	ldr	r3, [r7, #20]
34183d00:	3301      	adds	r3, #1
34183d02:	617b      	str	r3, [r7, #20]
34183d04:	697a      	ldr	r2, [r7, #20]
34183d06:	687b      	ldr	r3, [r7, #4]
34183d08:	429a      	cmp	r2, r3
34183d0a:	d3de      	bcc.n	34183cca <IMX335_WriteTable+0x16>
      }
    }
  }
  return ret;
34183d0c:	693b      	ldr	r3, [r7, #16]
}
34183d0e:	4618      	mov	r0, r3
34183d10:	3718      	adds	r7, #24
34183d12:	46bd      	mov	sp, r7
34183d14:	bd80      	pop	{r7, pc}

34183d16 <IMX335_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval IMX335_OK
  */
static int32_t IMX335_Delay(IMX335_Object_t *pObj, uint32_t Delay)
{
34183d16:	b580      	push	{r7, lr}
34183d18:	b084      	sub	sp, #16
34183d1a:	af00      	add	r7, sp, #0
34183d1c:	6078      	str	r0, [r7, #4]
34183d1e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
34183d20:	687b      	ldr	r3, [r7, #4]
34183d22:	695b      	ldr	r3, [r3, #20]
34183d24:	4798      	blx	r3
34183d26:	4603      	mov	r3, r0
34183d28:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
34183d2a:	bf00      	nop
34183d2c:	687b      	ldr	r3, [r7, #4]
34183d2e:	695b      	ldr	r3, [r3, #20]
34183d30:	4798      	blx	r3
34183d32:	4603      	mov	r3, r0
34183d34:	461a      	mov	r2, r3
34183d36:	68fb      	ldr	r3, [r7, #12]
34183d38:	1ad3      	subs	r3, r2, r3
34183d3a:	683a      	ldr	r2, [r7, #0]
34183d3c:	429a      	cmp	r2, r3
34183d3e:	d8f5      	bhi.n	34183d2c <IMX335_Delay+0x16>
  {
  }
  return IMX335_OK;
34183d40:	2300      	movs	r3, #0
}
34183d42:	4618      	mov	r0, r3
34183d44:	3710      	adds	r7, #16
34183d46:	46bd      	mov	sp, r7
34183d48:	bd80      	pop	{r7, pc}

34183d4a <IMX335_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
34183d4a:	b590      	push	{r4, r7, lr}
34183d4c:	b087      	sub	sp, #28
34183d4e:	af00      	add	r7, sp, #0
34183d50:	60f8      	str	r0, [r7, #12]
34183d52:	607a      	str	r2, [r7, #4]
34183d54:	461a      	mov	r2, r3
34183d56:	460b      	mov	r3, r1
34183d58:	817b      	strh	r3, [r7, #10]
34183d5a:	4613      	mov	r3, r2
34183d5c:	813b      	strh	r3, [r7, #8]
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;
34183d5e:	68fb      	ldr	r3, [r7, #12]
34183d60:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
34183d62:	697b      	ldr	r3, [r7, #20]
34183d64:	691c      	ldr	r4, [r3, #16]
34183d66:	697b      	ldr	r3, [r7, #20]
34183d68:	8918      	ldrh	r0, [r3, #8]
34183d6a:	893b      	ldrh	r3, [r7, #8]
34183d6c:	8979      	ldrh	r1, [r7, #10]
34183d6e:	687a      	ldr	r2, [r7, #4]
34183d70:	47a0      	blx	r4
34183d72:	4603      	mov	r3, r0
}
34183d74:	4618      	mov	r0, r3
34183d76:	371c      	adds	r7, #28
34183d78:	46bd      	mov	sp, r7
34183d7a:	bd90      	pop	{r4, r7, pc}

34183d7c <IMX335_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
34183d7c:	b590      	push	{r4, r7, lr}
34183d7e:	b087      	sub	sp, #28
34183d80:	af00      	add	r7, sp, #0
34183d82:	60f8      	str	r0, [r7, #12]
34183d84:	607a      	str	r2, [r7, #4]
34183d86:	461a      	mov	r2, r3
34183d88:	460b      	mov	r3, r1
34183d8a:	817b      	strh	r3, [r7, #10]
34183d8c:	4613      	mov	r3, r2
34183d8e:	813b      	strh	r3, [r7, #8]
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;
34183d90:	68fb      	ldr	r3, [r7, #12]
34183d92:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
34183d94:	697b      	ldr	r3, [r7, #20]
34183d96:	68dc      	ldr	r4, [r3, #12]
34183d98:	697b      	ldr	r3, [r7, #20]
34183d9a:	8918      	ldrh	r0, [r3, #8]
34183d9c:	893b      	ldrh	r3, [r7, #8]
34183d9e:	8979      	ldrh	r1, [r7, #10]
34183da0:	687a      	ldr	r2, [r7, #4]
34183da2:	47a0      	blx	r4
34183da4:	4603      	mov	r3, r0
}
34183da6:	4618      	mov	r0, r3
34183da8:	371c      	adds	r7, #28
34183daa:	46bd      	mov	sp, r7
34183dac:	bd90      	pop	{r4, r7, pc}
	...

34183db0 <IMX335_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t IMX335_RegisterBusIO(IMX335_Object_t *pObj, IMX335_IO_t *pIO)
{
34183db0:	b580      	push	{r7, lr}
34183db2:	b084      	sub	sp, #16
34183db4:	af00      	add	r7, sp, #0
34183db6:	6078      	str	r0, [r7, #4]
34183db8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
34183dba:	687b      	ldr	r3, [r7, #4]
34183dbc:	2b00      	cmp	r3, #0
34183dbe:	d103      	bne.n	34183dc8 <IMX335_RegisterBusIO+0x18>
  {
    ret = IMX335_ERROR;
34183dc0:	f04f 33ff 	mov.w	r3, #4294967295
34183dc4:	60fb      	str	r3, [r7, #12]
34183dc6:	e02c      	b.n	34183e22 <IMX335_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
34183dc8:	683b      	ldr	r3, [r7, #0]
34183dca:	681a      	ldr	r2, [r3, #0]
34183dcc:	687b      	ldr	r3, [r7, #4]
34183dce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
34183dd0:	683b      	ldr	r3, [r7, #0]
34183dd2:	685a      	ldr	r2, [r3, #4]
34183dd4:	687b      	ldr	r3, [r7, #4]
34183dd6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
34183dd8:	683b      	ldr	r3, [r7, #0]
34183dda:	891a      	ldrh	r2, [r3, #8]
34183ddc:	687b      	ldr	r3, [r7, #4]
34183dde:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
34183de0:	683b      	ldr	r3, [r7, #0]
34183de2:	68da      	ldr	r2, [r3, #12]
34183de4:	687b      	ldr	r3, [r7, #4]
34183de6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
34183de8:	683b      	ldr	r3, [r7, #0]
34183dea:	691a      	ldr	r2, [r3, #16]
34183dec:	687b      	ldr	r3, [r7, #4]
34183dee:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
34183df0:	683b      	ldr	r3, [r7, #0]
34183df2:	695a      	ldr	r2, [r3, #20]
34183df4:	687b      	ldr	r3, [r7, #4]
34183df6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = IMX335_ReadRegWrap;
34183df8:	687b      	ldr	r3, [r7, #4]
34183dfa:	4a0c      	ldr	r2, [pc, #48]	@ (34183e2c <IMX335_RegisterBusIO+0x7c>)
34183dfc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = IMX335_WriteRegWrap;
34183dfe:	687b      	ldr	r3, [r7, #4]
34183e00:	4a0b      	ldr	r2, [pc, #44]	@ (34183e30 <IMX335_RegisterBusIO+0x80>)
34183e02:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
34183e04:	687b      	ldr	r3, [r7, #4]
34183e06:	687a      	ldr	r2, [r7, #4]
34183e08:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
34183e0a:	687b      	ldr	r3, [r7, #4]
34183e0c:	681b      	ldr	r3, [r3, #0]
34183e0e:	2b00      	cmp	r3, #0
34183e10:	d004      	beq.n	34183e1c <IMX335_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
34183e12:	687b      	ldr	r3, [r7, #4]
34183e14:	681b      	ldr	r3, [r3, #0]
34183e16:	4798      	blx	r3
34183e18:	60f8      	str	r0, [r7, #12]
34183e1a:	e002      	b.n	34183e22 <IMX335_RegisterBusIO+0x72>
    }
    else
    {
      ret = IMX335_ERROR;
34183e1c:	f04f 33ff 	mov.w	r3, #4294967295
34183e20:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
34183e22:	68fb      	ldr	r3, [r7, #12]
}
34183e24:	4618      	mov	r0, r3
34183e26:	3710      	adds	r7, #16
34183e28:	46bd      	mov	sp, r7
34183e2a:	bd80      	pop	{r7, pc}
34183e2c:	34183d4b 	.word	0x34183d4b
34183e30:	34183d7d 	.word	0x34183d7d

34183e34 <IMX335_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t IMX335_Init(IMX335_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
34183e34:	b580      	push	{r7, lr}
34183e36:	b086      	sub	sp, #24
34183e38:	af00      	add	r7, sp, #0
34183e3a:	60f8      	str	r0, [r7, #12]
34183e3c:	60b9      	str	r1, [r7, #8]
34183e3e:	607a      	str	r2, [r7, #4]
  int32_t ret = IMX335_OK;
34183e40:	2300      	movs	r3, #0
34183e42:	617b      	str	r3, [r7, #20]
  uint8_t tmp;

  if(pObj->IsInitialized == 0U)
34183e44:	68fb      	ldr	r3, [r7, #12]
34183e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
34183e4a:	2b00      	cmp	r3, #0
34183e4c:	d13d      	bne.n	34183eca <IMX335_Init+0x96>
  {
    switch (Resolution)
34183e4e:	68bb      	ldr	r3, [r7, #8]
34183e50:	2b06      	cmp	r3, #6
34183e52:	d10b      	bne.n	34183e6c <IMX335_Init+0x38>
    {
      case IMX335_R2592_1944:
        if(IMX335_WriteTable(pObj, res_2592_1944_regs, ARRAY_SIZE(res_2592_1944_regs)) != IMX335_OK)
34183e54:	2254      	movs	r2, #84	@ 0x54
34183e56:	491f      	ldr	r1, [pc, #124]	@ (34183ed4 <IMX335_Init+0xa0>)
34183e58:	68f8      	ldr	r0, [r7, #12]
34183e5a:	f7ff ff2b 	bl	34183cb4 <IMX335_WriteTable>
34183e5e:	4603      	mov	r3, r0
34183e60:	2b00      	cmp	r3, #0
34183e62:	d007      	beq.n	34183e74 <IMX335_Init+0x40>
        {
          ret = IMX335_ERROR;
34183e64:	f04f 33ff 	mov.w	r3, #4294967295
34183e68:	617b      	str	r3, [r7, #20]
        }
        break;
34183e6a:	e003      	b.n	34183e74 <IMX335_Init+0x40>
      /* Add new resolution here */
      default:
        /* Resolution not supported */
        ret = IMX335_ERROR;
34183e6c:	f04f 33ff 	mov.w	r3, #4294967295
34183e70:	617b      	str	r3, [r7, #20]
34183e72:	e000      	b.n	34183e76 <IMX335_Init+0x42>
        break;
34183e74:	bf00      	nop
    }

    if(!ret)
34183e76:	697b      	ldr	r3, [r7, #20]
34183e78:	2b00      	cmp	r3, #0
34183e7a:	d126      	bne.n	34183eca <IMX335_Init+0x96>
    {
      if(IMX335_WriteTable(pObj, mode_2l_10b_regs, ARRAY_SIZE(mode_2l_10b_regs)) != IMX335_OK)
34183e7c:	2205      	movs	r2, #5
34183e7e:	4916      	ldr	r1, [pc, #88]	@ (34183ed8 <IMX335_Init+0xa4>)
34183e80:	68f8      	ldr	r0, [r7, #12]
34183e82:	f7ff ff17 	bl	34183cb4 <IMX335_WriteTable>
34183e86:	4603      	mov	r3, r0
34183e88:	2b00      	cmp	r3, #0
34183e8a:	d003      	beq.n	34183e94 <IMX335_Init+0x60>
      {
        ret = IMX335_ERROR;
34183e8c:	f04f 33ff 	mov.w	r3, #4294967295
34183e90:	617b      	str	r3, [r7, #20]
34183e92:	e01a      	b.n	34183eca <IMX335_Init+0x96>
      }
      else
      {
        /* Start streaming */
        tmp = IMX335_MODE_STREAMING;
34183e94:	2300      	movs	r3, #0
34183e96:	74fb      	strb	r3, [r7, #19]
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_MODE_SELECT, &tmp, 1) != IMX335_OK)
34183e98:	68fb      	ldr	r3, [r7, #12]
34183e9a:	f103 0018 	add.w	r0, r3, #24
34183e9e:	f107 0213 	add.w	r2, r7, #19
34183ea2:	2301      	movs	r3, #1
34183ea4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
34183ea8:	f000 fa8b 	bl	341843c2 <imx335_write_reg>
34183eac:	4603      	mov	r3, r0
34183eae:	2b00      	cmp	r3, #0
34183eb0:	d003      	beq.n	34183eba <IMX335_Init+0x86>
        {
          ret = IMX335_ERROR;
34183eb2:	f04f 33ff 	mov.w	r3, #4294967295
34183eb6:	617b      	str	r3, [r7, #20]
34183eb8:	e007      	b.n	34183eca <IMX335_Init+0x96>
        }
        else
        {
          IMX335_Delay(pObj, 20);
34183eba:	2114      	movs	r1, #20
34183ebc:	68f8      	ldr	r0, [r7, #12]
34183ebe:	f7ff ff2a 	bl	34183d16 <IMX335_Delay>
          pObj->IsInitialized = 1U;
34183ec2:	68fb      	ldr	r3, [r7, #12]
34183ec4:	2201      	movs	r2, #1
34183ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
      }
    }
  }

  return ret;
34183eca:	697b      	ldr	r3, [r7, #20]
}
34183ecc:	4618      	mov	r0, r3
34183ece:	3718      	adds	r7, #24
34183ed0:	46bd      	mov	sp, r7
34183ed2:	bd80      	pop	{r7, pc}
34183ed4:	34195464 	.word	0x34195464
34183ed8:	341955b4 	.word	0x341955b4

34183edc <IMX335_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t IMX335_DeInit(IMX335_Object_t *pObj)
{
34183edc:	b480      	push	{r7}
34183ede:	b083      	sub	sp, #12
34183ee0:	af00      	add	r7, sp, #0
34183ee2:	6078      	str	r0, [r7, #4]
  if(pObj->IsInitialized == 1U)
34183ee4:	687b      	ldr	r3, [r7, #4]
34183ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
34183eea:	2b01      	cmp	r3, #1
34183eec:	d103      	bne.n	34183ef6 <IMX335_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
34183eee:	687b      	ldr	r3, [r7, #4]
34183ef0:	2200      	movs	r2, #0
34183ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return IMX335_OK;
34183ef6:	2300      	movs	r3, #0
}
34183ef8:	4618      	mov	r0, r3
34183efa:	370c      	adds	r7, #12
34183efc:	46bd      	mov	sp, r7
34183efe:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f02:	4770      	bx	lr

34183f04 <IMX335_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t IMX335_ReadID(IMX335_Object_t *pObj, uint32_t *Id)
{
34183f04:	b580      	push	{r7, lr}
34183f06:	b084      	sub	sp, #16
34183f08:	af00      	add	r7, sp, #0
34183f0a:	6078      	str	r0, [r7, #4]
34183f0c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
34183f0e:	687b      	ldr	r3, [r7, #4]
34183f10:	681b      	ldr	r3, [r3, #0]
34183f12:	4798      	blx	r3

  if(imx335_read_reg(&pObj->Ctx, IMX335_REG_ID, &tmp, 1)!= IMX335_OK)
34183f14:	687b      	ldr	r3, [r7, #4]
34183f16:	f103 0018 	add.w	r0, r3, #24
34183f1a:	f107 020b 	add.w	r2, r7, #11
34183f1e:	2301      	movs	r3, #1
34183f20:	f643 1112 	movw	r1, #14610	@ 0x3912
34183f24:	f000 fa36 	bl	34184394 <imx335_read_reg>
34183f28:	4603      	mov	r3, r0
34183f2a:	2b00      	cmp	r3, #0
34183f2c:	d003      	beq.n	34183f36 <IMX335_ReadID+0x32>
  {
    ret = IMX335_ERROR;
34183f2e:	f04f 33ff 	mov.w	r3, #4294967295
34183f32:	60fb      	str	r3, [r7, #12]
34183f34:	e005      	b.n	34183f42 <IMX335_ReadID+0x3e>
  }
  else
  {
    *Id = tmp;
34183f36:	7afb      	ldrb	r3, [r7, #11]
34183f38:	461a      	mov	r2, r3
34183f3a:	683b      	ldr	r3, [r7, #0]
34183f3c:	601a      	str	r2, [r3, #0]
    ret = IMX335_OK;
34183f3e:	2300      	movs	r3, #0
34183f40:	60fb      	str	r3, [r7, #12]
  }

  /* Component status */
  return ret;
34183f42:	68fb      	ldr	r3, [r7, #12]
}
34183f44:	4618      	mov	r0, r3
34183f46:	3710      	adds	r7, #16
34183f48:	46bd      	mov	sp, r7
34183f4a:	bd80      	pop	{r7, pc}

34183f4c <IMX335_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t IMX335_GetCapabilities(IMX335_Object_t *pObj, IMX335_Capabilities_t *Capabilities)
{
34183f4c:	b480      	push	{r7}
34183f4e:	b085      	sub	sp, #20
34183f50:	af00      	add	r7, sp, #0
34183f52:	6078      	str	r0, [r7, #4]
34183f54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
34183f56:	687b      	ldr	r3, [r7, #4]
34183f58:	2b00      	cmp	r3, #0
34183f5a:	d103      	bne.n	34183f64 <IMX335_GetCapabilities+0x18>
  {
    ret = IMX335_ERROR;
34183f5c:	f04f 33ff 	mov.w	r3, #4294967295
34183f60:	60fb      	str	r3, [r7, #12]
34183f62:	e02e      	b.n	34183fc2 <IMX335_GetCapabilities+0x76>
  }
  else
  {
    Capabilities->Config_Brightness    = 0;
34183f64:	683b      	ldr	r3, [r7, #0]
34183f66:	2200      	movs	r2, #0
34183f68:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 0;
34183f6a:	683b      	ldr	r3, [r7, #0]
34183f6c:	2200      	movs	r2, #0
34183f6e:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 0;
34183f70:	683b      	ldr	r3, [r7, #0]
34183f72:	2200      	movs	r2, #0
34183f74:	619a      	str	r2, [r3, #24]
    Capabilities->Config_Gain          = 1;
34183f76:	683b      	ldr	r3, [r7, #0]
34183f78:	2201      	movs	r2, #1
34183f7a:	61da      	str	r2, [r3, #28]
    Capabilities->Config_Exposure      = 1;
34183f7c:	683b      	ldr	r3, [r7, #0]
34183f7e:	2201      	movs	r2, #1
34183f80:	621a      	str	r2, [r3, #32]
    Capabilities->Config_ExposureMode  = 0;
34183f82:	683b      	ldr	r3, [r7, #0]
34183f84:	2200      	movs	r2, #0
34183f86:	631a      	str	r2, [r3, #48]	@ 0x30
    Capabilities->Config_LightMode     = 0;
34183f88:	683b      	ldr	r3, [r7, #0]
34183f8a:	2200      	movs	r2, #0
34183f8c:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
34183f8e:	683b      	ldr	r3, [r7, #0]
34183f90:	2201      	movs	r2, #1
34183f92:	625a      	str	r2, [r3, #36]	@ 0x24
    Capabilities->Config_NightMode     = 0;
34183f94:	683b      	ldr	r3, [r7, #0]
34183f96:	2200      	movs	r2, #0
34183f98:	62da      	str	r2, [r3, #44]	@ 0x2c
    Capabilities->Config_Resolution    = 0;
34183f9a:	683b      	ldr	r3, [r7, #0]
34183f9c:	2200      	movs	r2, #0
34183f9e:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 0;
34183fa0:	683b      	ldr	r3, [r7, #0]
34183fa2:	2200      	movs	r2, #0
34183fa4:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 0;
34183fa6:	683b      	ldr	r3, [r7, #0]
34183fa8:	2200      	movs	r2, #0
34183faa:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 0;
34183fac:	683b      	ldr	r3, [r7, #0]
34183fae:	2200      	movs	r2, #0
34183fb0:	629a      	str	r2, [r3, #40]	@ 0x28
    Capabilities->Config_SensorInfo    = 1;
34183fb2:	683b      	ldr	r3, [r7, #0]
34183fb4:	2201      	movs	r2, #1
34183fb6:	635a      	str	r2, [r3, #52]	@ 0x34
    Capabilities->Config_TestPattern   = 1;
34183fb8:	683b      	ldr	r3, [r7, #0]
34183fba:	2201      	movs	r2, #1
34183fbc:	639a      	str	r2, [r3, #56]	@ 0x38

    ret = IMX335_OK;
34183fbe:	2300      	movs	r3, #0
34183fc0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
34183fc2:	68fb      	ldr	r3, [r7, #12]
}
34183fc4:	4618      	mov	r0, r3
34183fc6:	3714      	adds	r7, #20
34183fc8:	46bd      	mov	sp, r7
34183fca:	f85d 7b04 	ldr.w	r7, [sp], #4
34183fce:	4770      	bx	lr

34183fd0 <IMX335_GetSensorInfo>:
  * @param  pObj   pointer to component object
  * @param  Info   pointer to sensor info
  * @retval Component status
  */
int32_t IMX335_GetSensorInfo(IMX335_Object_t *pObj, IMX335_SensorInfo_t *Info)
{
34183fd0:	b480      	push	{r7}
34183fd2:	b083      	sub	sp, #12
34183fd4:	af00      	add	r7, sp, #0
34183fd6:	6078      	str	r0, [r7, #4]
34183fd8:	6039      	str	r1, [r7, #0]
  if ((!pObj) || (Info == NULL))
34183fda:	687b      	ldr	r3, [r7, #4]
34183fdc:	2b00      	cmp	r3, #0
34183fde:	d002      	beq.n	34183fe6 <IMX335_GetSensorInfo+0x16>
34183fe0:	683b      	ldr	r3, [r7, #0]
34183fe2:	2b00      	cmp	r3, #0
34183fe4:	d102      	bne.n	34183fec <IMX335_GetSensorInfo+0x1c>
  {
    return IMX335_ERROR;
34183fe6:	f04f 33ff 	mov.w	r3, #4294967295
34183fea:	e025      	b.n	34184038 <IMX335_GetSensorInfo+0x68>
  }

  if (sizeof(Info->name) >= strlen(IMX335_NAME) + 1)
  {
    strcpy(Info->name, IMX335_NAME);
34183fec:	683b      	ldr	r3, [r7, #0]
34183fee:	4a15      	ldr	r2, [pc, #84]	@ (34184044 <IMX335_GetSensorInfo+0x74>)
34183ff0:	6810      	ldr	r0, [r2, #0]
34183ff2:	6018      	str	r0, [r3, #0]
34183ff4:	8891      	ldrh	r1, [r2, #4]
34183ff6:	7992      	ldrb	r2, [r2, #6]
34183ff8:	8099      	strh	r1, [r3, #4]
34183ffa:	719a      	strb	r2, [r3, #6]
  else
  {
    return IMX335_ERROR;
  }

  Info->bayer_pattern = IMX335_BAYER_PATTERN;
34183ffc:	683b      	ldr	r3, [r7, #0]
34183ffe:	2200      	movs	r2, #0
34184000:	f883 2020 	strb.w	r2, [r3, #32]
  Info->color_depth = IMX335_COLOR_DEPTH;
34184004:	683b      	ldr	r3, [r7, #0]
34184006:	220a      	movs	r2, #10
34184008:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  Info->width = IMX335_WIDTH;
3418400c:	683b      	ldr	r3, [r7, #0]
3418400e:	f44f 6222 	mov.w	r2, #2592	@ 0xa20
34184012:	625a      	str	r2, [r3, #36]	@ 0x24
  Info->height = IMX335_HEIGHT;
34184014:	683b      	ldr	r3, [r7, #0]
34184016:	f44f 62f3 	mov.w	r2, #1944	@ 0x798
3418401a:	629a      	str	r2, [r3, #40]	@ 0x28
  Info->gain_min = IMX335_GAIN_MIN;
3418401c:	683b      	ldr	r3, [r7, #0]
3418401e:	2200      	movs	r2, #0
34184020:	62da      	str	r2, [r3, #44]	@ 0x2c
  Info->gain_max = IMX335_GAIN_MAX;
34184022:	683b      	ldr	r3, [r7, #0]
34184024:	4a08      	ldr	r2, [pc, #32]	@ (34184048 <IMX335_GetSensorInfo+0x78>)
34184026:	631a      	str	r2, [r3, #48]	@ 0x30
  Info->exposure_min = IMX335_EXPOSURE_MIN;
34184028:	683b      	ldr	r3, [r7, #0]
3418402a:	2200      	movs	r2, #0
3418402c:	635a      	str	r2, [r3, #52]	@ 0x34
  Info->exposure_max = IMX335_EXPOSURE_MAX;
3418402e:	683b      	ldr	r3, [r7, #0]
34184030:	f248 12f2 	movw	r2, #33266	@ 0x81f2
34184034:	639a      	str	r2, [r3, #56]	@ 0x38

  return IMX335_OK;
34184036:	2300      	movs	r3, #0
}
34184038:	4618      	mov	r0, r3
3418403a:	370c      	adds	r7, #12
3418403c:	46bd      	mov	sp, r7
3418403e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184042:	4770      	bx	lr
34184044:	34194d28 	.word	0x34194d28
34184048:	00011940 	.word	0x00011940

3418404c <IMX335_SetGain>:
  * @param  pObj  pointer to component object
  * @param  Gain Gain in mdB
  * @retval Component status
  */
int32_t IMX335_SetGain(IMX335_Object_t *pObj, int32_t gain)
{
3418404c:	b580      	push	{r7, lr}
3418404e:	b084      	sub	sp, #16
34184050:	af00      	add	r7, sp, #0
34184052:	6078      	str	r0, [r7, #4]
34184054:	6039      	str	r1, [r7, #0]
  int32_t ret = IMX335_OK;
34184056:	2300      	movs	r3, #0
34184058:	60fb      	str	r3, [r7, #12]
  uint8_t hold;

  if ((gain > IMX335_GAIN_MAX) || (gain < IMX335_GAIN_MIN))
3418405a:	683b      	ldr	r3, [r7, #0]
3418405c:	4a25      	ldr	r2, [pc, #148]	@ (341840f4 <IMX335_SetGain+0xa8>)
3418405e:	4293      	cmp	r3, r2
34184060:	dc02      	bgt.n	34184068 <IMX335_SetGain+0x1c>
34184062:	683b      	ldr	r3, [r7, #0]
34184064:	2b00      	cmp	r3, #0
34184066:	da03      	bge.n	34184070 <IMX335_SetGain+0x24>
  {
    ret = IMX335_ERROR;
34184068:	f04f 33ff 	mov.w	r3, #4294967295
3418406c:	60fb      	str	r3, [r7, #12]
3418406e:	e03c      	b.n	341840ea <IMX335_SetGain+0x9e>
  }
  else
  {
    /* Convert to IMX335 gain unit (0.3 dB = 300 mdB) */
    gain /= IMX335_GAIN_UNIT_MDB;
34184070:	683b      	ldr	r3, [r7, #0]
34184072:	4a21      	ldr	r2, [pc, #132]	@ (341840f8 <IMX335_SetGain+0xac>)
34184074:	fb82 1203 	smull	r1, r2, r2, r3
34184078:	1152      	asrs	r2, r2, #5
3418407a:	17db      	asrs	r3, r3, #31
3418407c:	1ad3      	subs	r3, r2, r3
3418407e:	603b      	str	r3, [r7, #0]

    hold = 1;
34184080:	2301      	movs	r3, #1
34184082:	72fb      	strb	r3, [r7, #11]
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34184084:	687b      	ldr	r3, [r7, #4]
34184086:	f103 0018 	add.w	r0, r3, #24
3418408a:	f107 020b 	add.w	r2, r7, #11
3418408e:	2301      	movs	r3, #1
34184090:	f243 0101 	movw	r1, #12289	@ 0x3001
34184094:	f000 f995 	bl	341843c2 <imx335_write_reg>
34184098:	4603      	mov	r3, r0
3418409a:	2b00      	cmp	r3, #0
3418409c:	d003      	beq.n	341840a6 <IMX335_SetGain+0x5a>
    {
      ret = IMX335_ERROR;
3418409e:	f04f 33ff 	mov.w	r3, #4294967295
341840a2:	60fb      	str	r3, [r7, #12]
341840a4:	e021      	b.n	341840ea <IMX335_SetGain+0x9e>
    }
    else
    {
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_GAIN, (uint8_t *)&gain, 2) != IMX335_OK)
341840a6:	687b      	ldr	r3, [r7, #4]
341840a8:	f103 0018 	add.w	r0, r3, #24
341840ac:	463a      	mov	r2, r7
341840ae:	2302      	movs	r3, #2
341840b0:	f243 01e8 	movw	r1, #12520	@ 0x30e8
341840b4:	f000 f985 	bl	341843c2 <imx335_write_reg>
341840b8:	4603      	mov	r3, r0
341840ba:	2b00      	cmp	r3, #0
341840bc:	d003      	beq.n	341840c6 <IMX335_SetGain+0x7a>
      {
        ret = IMX335_ERROR;
341840be:	f04f 33ff 	mov.w	r3, #4294967295
341840c2:	60fb      	str	r3, [r7, #12]
341840c4:	e011      	b.n	341840ea <IMX335_SetGain+0x9e>
      }
      else
      {
        hold = 0;
341840c6:	2300      	movs	r3, #0
341840c8:	72fb      	strb	r3, [r7, #11]
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
341840ca:	687b      	ldr	r3, [r7, #4]
341840cc:	f103 0018 	add.w	r0, r3, #24
341840d0:	f107 020b 	add.w	r2, r7, #11
341840d4:	2301      	movs	r3, #1
341840d6:	f243 0101 	movw	r1, #12289	@ 0x3001
341840da:	f000 f972 	bl	341843c2 <imx335_write_reg>
341840de:	4603      	mov	r3, r0
341840e0:	2b00      	cmp	r3, #0
341840e2:	d002      	beq.n	341840ea <IMX335_SetGain+0x9e>
        {
          ret = IMX335_ERROR;
341840e4:	f04f 33ff 	mov.w	r3, #4294967295
341840e8:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

return ret;
341840ea:	68fb      	ldr	r3, [r7, #12]
}
341840ec:	4618      	mov	r0, r3
341840ee:	3710      	adds	r7, #16
341840f0:	46bd      	mov	sp, r7
341840f2:	bd80      	pop	{r7, pc}
341840f4:	00011940 	.word	0x00011940
341840f8:	1b4e81b5 	.word	0x1b4e81b5

341840fc <IMX335_SetExposure>:
  * @param  pObj  pointer to component object
  * @param  Exposure Exposure in micro seconds
  * @retval Component status
  */
int32_t IMX335_SetExposure(IMX335_Object_t *pObj, int32_t exposure)
{
341840fc:	b580      	push	{r7, lr}
341840fe:	b086      	sub	sp, #24
34184100:	af00      	add	r7, sp, #0
34184102:	6078      	str	r0, [r7, #4]
34184104:	6039      	str	r1, [r7, #0]
  int32_t ret = IMX335_OK;
34184106:	2300      	movs	r3, #0
34184108:	617b      	str	r3, [r7, #20]
  uint32_t vmax, shutter;
  uint8_t hold;


  if (imx335_read_reg(&pObj->Ctx, IMX335_REG_VMAX, (uint8_t *)&vmax, 4) != IMX335_OK)
3418410a:	687b      	ldr	r3, [r7, #4]
3418410c:	f103 0018 	add.w	r0, r3, #24
34184110:	f107 0210 	add.w	r2, r7, #16
34184114:	2304      	movs	r3, #4
34184116:	f243 0130 	movw	r1, #12336	@ 0x3030
3418411a:	f000 f93b 	bl	34184394 <imx335_read_reg>
3418411e:	4603      	mov	r3, r0
34184120:	2b00      	cmp	r3, #0
34184122:	d003      	beq.n	3418412c <IMX335_SetExposure+0x30>
  {
    ret = IMX335_ERROR;
34184124:	f04f 33ff 	mov.w	r3, #4294967295
34184128:	617b      	str	r3, [r7, #20]
3418412a:	e047      	b.n	341841bc <IMX335_SetExposure+0xc0>
  }
  else
  {
    shutter = ( vmax - (exposure /((uint32_t) IMX335_1H_PERIOD_USEC)));
3418412c:	6939      	ldr	r1, [r7, #16]
3418412e:	683a      	ldr	r2, [r7, #0]
34184130:	4b25      	ldr	r3, [pc, #148]	@ (341841c8 <IMX335_SetExposure+0xcc>)
34184132:	fba3 0302 	umull	r0, r3, r3, r2
34184136:	1ad2      	subs	r2, r2, r3
34184138:	0852      	lsrs	r2, r2, #1
3418413a:	4413      	add	r3, r2
3418413c:	089b      	lsrs	r3, r3, #2
3418413e:	1acb      	subs	r3, r1, r3
34184140:	60fb      	str	r3, [r7, #12]

    if (shutter < IMX335_SHUTTER_MIN)
34184142:	68fb      	ldr	r3, [r7, #12]
34184144:	2b08      	cmp	r3, #8
34184146:	d803      	bhi.n	34184150 <IMX335_SetExposure+0x54>
    {
      ret = IMX335_ERROR;
34184148:	f04f 33ff 	mov.w	r3, #4294967295
3418414c:	617b      	str	r3, [r7, #20]
3418414e:	e035      	b.n	341841bc <IMX335_SetExposure+0xc0>
    }
    else
    {
      hold = 1;
34184150:	2301      	movs	r3, #1
34184152:	72fb      	strb	r3, [r7, #11]
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34184154:	687b      	ldr	r3, [r7, #4]
34184156:	f103 0018 	add.w	r0, r3, #24
3418415a:	f107 020b 	add.w	r2, r7, #11
3418415e:	2301      	movs	r3, #1
34184160:	f243 0101 	movw	r1, #12289	@ 0x3001
34184164:	f000 f92d 	bl	341843c2 <imx335_write_reg>
34184168:	4603      	mov	r3, r0
3418416a:	2b00      	cmp	r3, #0
3418416c:	d003      	beq.n	34184176 <IMX335_SetExposure+0x7a>
      {
        ret = IMX335_ERROR;
3418416e:	f04f 33ff 	mov.w	r3, #4294967295
34184172:	617b      	str	r3, [r7, #20]
34184174:	e022      	b.n	341841bc <IMX335_SetExposure+0xc0>
      }
      else
      {
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_SHUTTER, (uint8_t *)&shutter, 3) != IMX335_OK)
34184176:	687b      	ldr	r3, [r7, #4]
34184178:	f103 0018 	add.w	r0, r3, #24
3418417c:	f107 020c 	add.w	r2, r7, #12
34184180:	2303      	movs	r3, #3
34184182:	f243 0158 	movw	r1, #12376	@ 0x3058
34184186:	f000 f91c 	bl	341843c2 <imx335_write_reg>
3418418a:	4603      	mov	r3, r0
3418418c:	2b00      	cmp	r3, #0
3418418e:	d003      	beq.n	34184198 <IMX335_SetExposure+0x9c>
        {
          ret = IMX335_ERROR;
34184190:	f04f 33ff 	mov.w	r3, #4294967295
34184194:	617b      	str	r3, [r7, #20]
34184196:	e011      	b.n	341841bc <IMX335_SetExposure+0xc0>
        }
        else
        {
          hold = 0;
34184198:	2300      	movs	r3, #0
3418419a:	72fb      	strb	r3, [r7, #11]
          if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
3418419c:	687b      	ldr	r3, [r7, #4]
3418419e:	f103 0018 	add.w	r0, r3, #24
341841a2:	f107 020b 	add.w	r2, r7, #11
341841a6:	2301      	movs	r3, #1
341841a8:	f243 0101 	movw	r1, #12289	@ 0x3001
341841ac:	f000 f909 	bl	341843c2 <imx335_write_reg>
341841b0:	4603      	mov	r3, r0
341841b2:	2b00      	cmp	r3, #0
341841b4:	d002      	beq.n	341841bc <IMX335_SetExposure+0xc0>
          {
            ret = IMX335_ERROR;
341841b6:	f04f 33ff 	mov.w	r3, #4294967295
341841ba:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
341841bc:	697b      	ldr	r3, [r7, #20]
}
341841be:	4618      	mov	r0, r3
341841c0:	3718      	adds	r7, #24
341841c2:	46bd      	mov	sp, r7
341841c4:	bd80      	pop	{r7, pc}
341841c6:	bf00      	nop
341841c8:	24924925 	.word	0x24924925

341841cc <IMX335_SetFrequency>:
  * @param  pObj  pointer to component object
  * @param  frequency in Mhz
  * @retval Component status
  */
int32_t IMX335_SetFrequency(IMX335_Object_t *pObj, int32_t frequency)
{
341841cc:	b580      	push	{r7, lr}
341841ce:	b084      	sub	sp, #16
341841d0:	af00      	add	r7, sp, #0
341841d2:	6078      	str	r0, [r7, #4]
341841d4:	6039      	str	r1, [r7, #0]
  uint32_t ret = IMX335_OK;
341841d6:	2300      	movs	r3, #0
341841d8:	60fb      	str	r3, [r7, #12]

  switch (frequency)
341841da:	683b      	ldr	r3, [r7, #0]
341841dc:	3b01      	subs	r3, #1
341841de:	2b03      	cmp	r3, #3
341841e0:	d83a      	bhi.n	34184258 <IMX335_SetFrequency+0x8c>
341841e2:	a201      	add	r2, pc, #4	@ (adr r2, 341841e8 <IMX335_SetFrequency+0x1c>)
341841e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341841e8:	34184241 	.word	0x34184241
341841ec:	34184229 	.word	0x34184229
341841f0:	34184211 	.word	0x34184211
341841f4:	341841f9 	.word	0x341841f9
  {
    case IMX335_INCK_74MHZ:
      if(IMX335_WriteTable(pObj, inck_74Mhz_regs, ARRAY_SIZE(inck_74Mhz_regs)) != IMX335_OK)
341841f8:	2207      	movs	r2, #7
341841fa:	4924      	ldr	r1, [pc, #144]	@ (3418428c <IMX335_SetFrequency+0xc0>)
341841fc:	6878      	ldr	r0, [r7, #4]
341841fe:	f7ff fd59 	bl	34183cb4 <IMX335_WriteTable>
34184202:	4603      	mov	r3, r0
34184204:	2b00      	cmp	r3, #0
34184206:	d033      	beq.n	34184270 <IMX335_SetFrequency+0xa4>
      {
        ret = IMX335_ERROR;
34184208:	f04f 33ff 	mov.w	r3, #4294967295
3418420c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418420e:	e02f      	b.n	34184270 <IMX335_SetFrequency+0xa4>
    case IMX335_INCK_27MHZ:
      if(IMX335_WriteTable(pObj, inck_27Mhz_regs, ARRAY_SIZE(inck_27Mhz_regs)) != IMX335_OK)
34184210:	2207      	movs	r2, #7
34184212:	491f      	ldr	r1, [pc, #124]	@ (34184290 <IMX335_SetFrequency+0xc4>)
34184214:	6878      	ldr	r0, [r7, #4]
34184216:	f7ff fd4d 	bl	34183cb4 <IMX335_WriteTable>
3418421a:	4603      	mov	r3, r0
3418421c:	2b00      	cmp	r3, #0
3418421e:	d029      	beq.n	34184274 <IMX335_SetFrequency+0xa8>
      {
        ret = IMX335_ERROR;
34184220:	f04f 33ff 	mov.w	r3, #4294967295
34184224:	60fb      	str	r3, [r7, #12]
      }
      break;
34184226:	e025      	b.n	34184274 <IMX335_SetFrequency+0xa8>
    case IMX335_INCK_24MHZ:
      if(IMX335_WriteTable(pObj, inck_24Mhz_regs, ARRAY_SIZE(inck_24Mhz_regs)) != IMX335_OK)
34184228:	2207      	movs	r2, #7
3418422a:	491a      	ldr	r1, [pc, #104]	@ (34184294 <IMX335_SetFrequency+0xc8>)
3418422c:	6878      	ldr	r0, [r7, #4]
3418422e:	f7ff fd41 	bl	34183cb4 <IMX335_WriteTable>
34184232:	4603      	mov	r3, r0
34184234:	2b00      	cmp	r3, #0
34184236:	d01f      	beq.n	34184278 <IMX335_SetFrequency+0xac>
      {
        ret = IMX335_ERROR;
34184238:	f04f 33ff 	mov.w	r3, #4294967295
3418423c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418423e:	e01b      	b.n	34184278 <IMX335_SetFrequency+0xac>
    case IMX335_INCK_18MHZ:
      if(IMX335_WriteTable(pObj, inck_18Mhz_regs, ARRAY_SIZE(inck_18Mhz_regs)) != IMX335_OK)
34184240:	2207      	movs	r2, #7
34184242:	4915      	ldr	r1, [pc, #84]	@ (34184298 <IMX335_SetFrequency+0xcc>)
34184244:	6878      	ldr	r0, [r7, #4]
34184246:	f7ff fd35 	bl	34183cb4 <IMX335_WriteTable>
3418424a:	4603      	mov	r3, r0
3418424c:	2b00      	cmp	r3, #0
3418424e:	d015      	beq.n	3418427c <IMX335_SetFrequency+0xb0>
      {
        ret = IMX335_ERROR;
34184250:	f04f 33ff 	mov.w	r3, #4294967295
34184254:	60fb      	str	r3, [r7, #12]
      }
      break;
34184256:	e011      	b.n	3418427c <IMX335_SetFrequency+0xb0>
    default:
      /* IMX335_INCK_6MHZ */
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
34184258:	2207      	movs	r2, #7
3418425a:	4910      	ldr	r1, [pc, #64]	@ (3418429c <IMX335_SetFrequency+0xd0>)
3418425c:	6878      	ldr	r0, [r7, #4]
3418425e:	f7ff fd29 	bl	34183cb4 <IMX335_WriteTable>
34184262:	4603      	mov	r3, r0
34184264:	2b00      	cmp	r3, #0
34184266:	d00b      	beq.n	34184280 <IMX335_SetFrequency+0xb4>
      {
        ret = IMX335_ERROR;
34184268:	f04f 33ff 	mov.w	r3, #4294967295
3418426c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418426e:	e007      	b.n	34184280 <IMX335_SetFrequency+0xb4>
      break;
34184270:	bf00      	nop
34184272:	e006      	b.n	34184282 <IMX335_SetFrequency+0xb6>
      break;
34184274:	bf00      	nop
34184276:	e004      	b.n	34184282 <IMX335_SetFrequency+0xb6>
      break;
34184278:	bf00      	nop
3418427a:	e002      	b.n	34184282 <IMX335_SetFrequency+0xb6>
      break;
3418427c:	bf00      	nop
3418427e:	e000      	b.n	34184282 <IMX335_SetFrequency+0xb6>
      break;
34184280:	bf00      	nop
  };

  return ret;
34184282:	68fb      	ldr	r3, [r7, #12]
}
34184284:	4618      	mov	r0, r3
34184286:	3710      	adds	r7, #16
34184288:	46bd      	mov	sp, r7
3418428a:	bd80      	pop	{r7, pc}
3418428c:	341955c8 	.word	0x341955c8
34184290:	341955e4 	.word	0x341955e4
34184294:	34195600 	.word	0x34195600
34184298:	3419561c 	.word	0x3419561c
3418429c:	34195638 	.word	0x34195638

341842a0 <IMX335_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t IMX335_MirrorFlipConfig(IMX335_Object_t *pObj, uint32_t Config)
{
341842a0:	b580      	push	{r7, lr}
341842a2:	b084      	sub	sp, #16
341842a4:	af00      	add	r7, sp, #0
341842a6:	6078      	str	r0, [r7, #4]
341842a8:	6039      	str	r1, [r7, #0]
  int32_t ret = IMX335_OK;
341842aa:	2300      	movs	r3, #0
341842ac:	60fb      	str	r3, [r7, #12]

  switch (Config)
341842ae:	683b      	ldr	r3, [r7, #0]
341842b0:	2b03      	cmp	r3, #3
341842b2:	d017      	beq.n	341842e4 <IMX335_MirrorFlipConfig+0x44>
341842b4:	683b      	ldr	r3, [r7, #0]
341842b6:	2b03      	cmp	r3, #3
341842b8:	d81b      	bhi.n	341842f2 <IMX335_MirrorFlipConfig+0x52>
341842ba:	683b      	ldr	r3, [r7, #0]
341842bc:	2b01      	cmp	r3, #1
341842be:	d003      	beq.n	341842c8 <IMX335_MirrorFlipConfig+0x28>
341842c0:	683b      	ldr	r3, [r7, #0]
341842c2:	2b02      	cmp	r3, #2
341842c4:	d007      	beq.n	341842d6 <IMX335_MirrorFlipConfig+0x36>
341842c6:	e014      	b.n	341842f2 <IMX335_MirrorFlipConfig+0x52>
  {
    case IMX335_FLIP:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[1], ARRAY_SIZE(mirrorflip_mode_regs[1]));
341842c8:	220a      	movs	r2, #10
341842ca:	4910      	ldr	r1, [pc, #64]	@ (3418430c <IMX335_MirrorFlipConfig+0x6c>)
341842cc:	6878      	ldr	r0, [r7, #4]
341842ce:	f7ff fcf1 	bl	34183cb4 <IMX335_WriteTable>
341842d2:	60f8      	str	r0, [r7, #12]
      break;
341842d4:	e014      	b.n	34184300 <IMX335_MirrorFlipConfig+0x60>
    case IMX335_MIRROR:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[2], ARRAY_SIZE(mirrorflip_mode_regs[2]));
341842d6:	220a      	movs	r2, #10
341842d8:	490d      	ldr	r1, [pc, #52]	@ (34184310 <IMX335_MirrorFlipConfig+0x70>)
341842da:	6878      	ldr	r0, [r7, #4]
341842dc:	f7ff fcea 	bl	34183cb4 <IMX335_WriteTable>
341842e0:	60f8      	str	r0, [r7, #12]
      break;
341842e2:	e00d      	b.n	34184300 <IMX335_MirrorFlipConfig+0x60>
    case IMX335_MIRROR_FLIP:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[3], ARRAY_SIZE(mirrorflip_mode_regs[3]));
341842e4:	220a      	movs	r2, #10
341842e6:	490b      	ldr	r1, [pc, #44]	@ (34184314 <IMX335_MirrorFlipConfig+0x74>)
341842e8:	6878      	ldr	r0, [r7, #4]
341842ea:	f7ff fce3 	bl	34183cb4 <IMX335_WriteTable>
341842ee:	60f8      	str	r0, [r7, #12]
      break;
341842f0:	e006      	b.n	34184300 <IMX335_MirrorFlipConfig+0x60>
    case IMX335_MIRROR_FLIP_NONE:
    default:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
341842f2:	220a      	movs	r2, #10
341842f4:	4908      	ldr	r1, [pc, #32]	@ (34184318 <IMX335_MirrorFlipConfig+0x78>)
341842f6:	6878      	ldr	r0, [r7, #4]
341842f8:	f7ff fcdc 	bl	34183cb4 <IMX335_WriteTable>
341842fc:	60f8      	str	r0, [r7, #12]
      break;
341842fe:	bf00      	nop
  }
  return ret;
34184300:	68fb      	ldr	r3, [r7, #12]
}
34184302:	4618      	mov	r0, r3
34184304:	3710      	adds	r7, #16
34184306:	46bd      	mov	sp, r7
34184308:	bd80      	pop	{r7, pc}
3418430a:	bf00      	nop
3418430c:	3419567c 	.word	0x3419567c
34184310:	341956a4 	.word	0x341956a4
34184314:	341956cc 	.word	0x341956cc
34184318:	34195654 	.word	0x34195654

3418431c <IMX335_SetTestPattern>:
  *               10: Horizontal color bars
  *               11: Vertical color bars
  * @retval Component status
  */
int32_t IMX335_SetTestPattern(IMX335_Object_t *pObj, int32_t mode)
{
3418431c:	b580      	push	{r7, lr}
3418431e:	b084      	sub	sp, #16
34184320:	af00      	add	r7, sp, #0
34184322:	6078      	str	r0, [r7, #4]
34184324:	6039      	str	r1, [r7, #0]
  int32_t ret = IMX335_OK;
34184326:	2300      	movs	r3, #0
34184328:	60fb      	str	r3, [r7, #12]
  uint8_t val;

  if (mode >= 0)
3418432a:	683b      	ldr	r3, [r7, #0]
3418432c:	2b00      	cmp	r3, #0
3418432e:	db1d      	blt.n	3418436c <IMX335_SetTestPattern+0x50>
  {
    /* Enable Test Pattern #mode */
    val = mode;
34184330:	683b      	ldr	r3, [r7, #0]
34184332:	b2db      	uxtb	r3, r3
34184334:	72fb      	strb	r3, [r7, #11]
    if (imx335_write_reg(&pObj->Ctx, IMX335_REG_TPG, &val, 1) != IMX335_OK)
34184336:	687b      	ldr	r3, [r7, #4]
34184338:	f103 0018 	add.w	r0, r3, #24
3418433c:	f107 020b 	add.w	r2, r7, #11
34184340:	2301      	movs	r3, #1
34184342:	f243 219e 	movw	r1, #12958	@ 0x329e
34184346:	f000 f83c 	bl	341843c2 <imx335_write_reg>
3418434a:	4603      	mov	r3, r0
3418434c:	2b00      	cmp	r3, #0
3418434e:	d002      	beq.n	34184356 <IMX335_SetTestPattern+0x3a>
    {
      return IMX335_ERROR;
34184350:	f04f 33ff 	mov.w	r3, #4294967295
34184354:	e016      	b.n	34184384 <IMX335_SetTestPattern+0x68>
    }
    if (IMX335_WriteTable(pObj, test_pattern_enable_regs, ARRAY_SIZE(test_pattern_enable_regs)) != IMX335_OK)
34184356:	2207      	movs	r2, #7
34184358:	490c      	ldr	r1, [pc, #48]	@ (3418438c <IMX335_SetTestPattern+0x70>)
3418435a:	6878      	ldr	r0, [r7, #4]
3418435c:	f7ff fcaa 	bl	34183cb4 <IMX335_WriteTable>
34184360:	4603      	mov	r3, r0
34184362:	2b00      	cmp	r3, #0
34184364:	d00d      	beq.n	34184382 <IMX335_SetTestPattern+0x66>
    {
      return IMX335_ERROR;
34184366:	f04f 33ff 	mov.w	r3, #4294967295
3418436a:	e00b      	b.n	34184384 <IMX335_SetTestPattern+0x68>
    }
  }
  else
  {
    /* Disable Test Pattern */
    if (IMX335_WriteTable(pObj, test_pattern_disable_regs, ARRAY_SIZE(test_pattern_disable_regs)) != IMX335_OK)
3418436c:	2207      	movs	r2, #7
3418436e:	4908      	ldr	r1, [pc, #32]	@ (34184390 <IMX335_SetTestPattern+0x74>)
34184370:	6878      	ldr	r0, [r7, #4]
34184372:	f7ff fc9f 	bl	34183cb4 <IMX335_WriteTable>
34184376:	4603      	mov	r3, r0
34184378:	2b00      	cmp	r3, #0
3418437a:	d002      	beq.n	34184382 <IMX335_SetTestPattern+0x66>
    {
      return IMX335_ERROR;
3418437c:	f04f 33ff 	mov.w	r3, #4294967295
34184380:	e000      	b.n	34184384 <IMX335_SetTestPattern+0x68>
    }
  }

  return ret;
34184382:	68fb      	ldr	r3, [r7, #12]
}
34184384:	4618      	mov	r0, r3
34184386:	3710      	adds	r7, #16
34184388:	46bd      	mov	sp, r7
3418438a:	bd80      	pop	{r7, pc}
3418438c:	341956f4 	.word	0x341956f4
34184390:	34195710 	.word	0x34195710

34184394 <imx335_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t imx335_read_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
34184394:	b590      	push	{r4, r7, lr}
34184396:	b085      	sub	sp, #20
34184398:	af00      	add	r7, sp, #0
3418439a:	60f8      	str	r0, [r7, #12]
3418439c:	607a      	str	r2, [r7, #4]
3418439e:	461a      	mov	r2, r3
341843a0:	460b      	mov	r3, r1
341843a2:	817b      	strh	r3, [r7, #10]
341843a4:	4613      	mov	r3, r2
341843a6:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
341843a8:	68fb      	ldr	r3, [r7, #12]
341843aa:	685c      	ldr	r4, [r3, #4]
341843ac:	68fb      	ldr	r3, [r7, #12]
341843ae:	6898      	ldr	r0, [r3, #8]
341843b0:	893b      	ldrh	r3, [r7, #8]
341843b2:	8979      	ldrh	r1, [r7, #10]
341843b4:	687a      	ldr	r2, [r7, #4]
341843b6:	47a0      	blx	r4
341843b8:	4603      	mov	r3, r0
}
341843ba:	4618      	mov	r0, r3
341843bc:	3714      	adds	r7, #20
341843be:	46bd      	mov	sp, r7
341843c0:	bd90      	pop	{r4, r7, pc}

341843c2 <imx335_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t imx335_write_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
341843c2:	b590      	push	{r4, r7, lr}
341843c4:	b085      	sub	sp, #20
341843c6:	af00      	add	r7, sp, #0
341843c8:	60f8      	str	r0, [r7, #12]
341843ca:	607a      	str	r2, [r7, #4]
341843cc:	461a      	mov	r2, r3
341843ce:	460b      	mov	r3, r1
341843d0:	817b      	strh	r3, [r7, #10]
341843d2:	4613      	mov	r3, r2
341843d4:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
341843d6:	68fb      	ldr	r3, [r7, #12]
341843d8:	681c      	ldr	r4, [r3, #0]
341843da:	68fb      	ldr	r3, [r7, #12]
341843dc:	6898      	ldr	r0, [r3, #8]
341843de:	893b      	ldrh	r3, [r7, #8]
341843e0:	8979      	ldrh	r1, [r7, #10]
341843e2:	687a      	ldr	r2, [r7, #4]
341843e4:	47a0      	blx	r4
341843e6:	4603      	mov	r3, r0
}
341843e8:	4618      	mov	r0, r3
341843ea:	3714      	adds	r7, #20
341843ec:	46bd      	mov	sp, r7
341843ee:	bd90      	pop	{r4, r7, pc}

341843f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
341843f0:	b580      	push	{r7, lr}
341843f2:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
341843f4:	2003      	movs	r0, #3
341843f6:	f000 f959 	bl	341846ac <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
341843fa:	f00e fa29 	bl	34192850 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
341843fe:	200f      	movs	r0, #15
34184400:	f000 f80a 	bl	34184418 <HAL_InitTick>
34184404:	4603      	mov	r3, r0
34184406:	2b00      	cmp	r3, #0
34184408:	d001      	beq.n	3418440e <HAL_Init+0x1e>
  {
    return HAL_ERROR;
3418440a:	2301      	movs	r3, #1
3418440c:	e002      	b.n	34184414 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
3418440e:	f00e f847 	bl	341924a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34184412:	2300      	movs	r3, #0
}
34184414:	4618      	mov	r0, r3
34184416:	bd80      	pop	{r7, pc}

34184418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34184418:	b580      	push	{r7, lr}
3418441a:	b082      	sub	sp, #8
3418441c:	af00      	add	r7, sp, #0
3418441e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34184420:	4b15      	ldr	r3, [pc, #84]	@ (34184478 <HAL_InitTick+0x60>)
34184422:	781b      	ldrb	r3, [r3, #0]
34184424:	2b00      	cmp	r3, #0
34184426:	d101      	bne.n	3418442c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
34184428:	2301      	movs	r3, #1
3418442a:	e021      	b.n	34184470 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
3418442c:	4b13      	ldr	r3, [pc, #76]	@ (3418447c <HAL_InitTick+0x64>)
3418442e:	681a      	ldr	r2, [r3, #0]
34184430:	4b11      	ldr	r3, [pc, #68]	@ (34184478 <HAL_InitTick+0x60>)
34184432:	781b      	ldrb	r3, [r3, #0]
34184434:	4619      	mov	r1, r3
34184436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
3418443a:	fbb3 f3f1 	udiv	r3, r3, r1
3418443e:	fbb2 f3f3 	udiv	r3, r2, r3
34184442:	4618      	mov	r0, r3
34184444:	f000 f968 	bl	34184718 <HAL_SYSTICK_Config>
34184448:	4603      	mov	r3, r0
3418444a:	2b00      	cmp	r3, #0
3418444c:	d001      	beq.n	34184452 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
3418444e:	2301      	movs	r3, #1
34184450:	e00e      	b.n	34184470 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34184452:	687b      	ldr	r3, [r7, #4]
34184454:	2b0f      	cmp	r3, #15
34184456:	d80a      	bhi.n	3418446e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34184458:	2200      	movs	r2, #0
3418445a:	6879      	ldr	r1, [r7, #4]
3418445c:	f04f 30ff 	mov.w	r0, #4294967295
34184460:	f000 f92f 	bl	341846c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
34184464:	4a06      	ldr	r2, [pc, #24]	@ (34184480 <HAL_InitTick+0x68>)
34184466:	687b      	ldr	r3, [r7, #4]
34184468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
3418446a:	2300      	movs	r3, #0
3418446c:	e000      	b.n	34184470 <HAL_InitTick+0x58>
    return HAL_ERROR;
3418446e:	2301      	movs	r3, #1
}
34184470:	4618      	mov	r0, r3
34184472:	3708      	adds	r7, #8
34184474:	46bd      	mov	sp, r7
34184476:	bd80      	pop	{r7, pc}
34184478:	341c006c 	.word	0x341c006c
3418447c:	341c0138 	.word	0x341c0138
34184480:	341c0068 	.word	0x341c0068

34184484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
34184484:	b480      	push	{r7}
34184486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
34184488:	4b06      	ldr	r3, [pc, #24]	@ (341844a4 <HAL_IncTick+0x20>)
3418448a:	781b      	ldrb	r3, [r3, #0]
3418448c:	461a      	mov	r2, r3
3418448e:	4b06      	ldr	r3, [pc, #24]	@ (341844a8 <HAL_IncTick+0x24>)
34184490:	681b      	ldr	r3, [r3, #0]
34184492:	4413      	add	r3, r2
34184494:	4a04      	ldr	r2, [pc, #16]	@ (341844a8 <HAL_IncTick+0x24>)
34184496:	6013      	str	r3, [r2, #0]
}
34184498:	bf00      	nop
3418449a:	46bd      	mov	sp, r7
3418449c:	f85d 7b04 	ldr.w	r7, [sp], #4
341844a0:	4770      	bx	lr
341844a2:	bf00      	nop
341844a4:	341c006c 	.word	0x341c006c
341844a8:	341c11b0 	.word	0x341c11b0

341844ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
341844ac:	b480      	push	{r7}
341844ae:	af00      	add	r7, sp, #0
  return uwTick;
341844b0:	4b03      	ldr	r3, [pc, #12]	@ (341844c0 <HAL_GetTick+0x14>)
341844b2:	681b      	ldr	r3, [r3, #0]
}
341844b4:	4618      	mov	r0, r3
341844b6:	46bd      	mov	sp, r7
341844b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341844bc:	4770      	bx	lr
341844be:	bf00      	nop
341844c0:	341c11b0 	.word	0x341c11b0

341844c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
341844c4:	b580      	push	{r7, lr}
341844c6:	b084      	sub	sp, #16
341844c8:	af00      	add	r7, sp, #0
341844ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
341844cc:	f7ff ffee 	bl	341844ac <HAL_GetTick>
341844d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
341844d2:	687b      	ldr	r3, [r7, #4]
341844d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
341844d6:	68fb      	ldr	r3, [r7, #12]
341844d8:	f1b3 3fff 	cmp.w	r3, #4294967295
341844dc:	d005      	beq.n	341844ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
341844de:	4b0a      	ldr	r3, [pc, #40]	@ (34184508 <HAL_Delay+0x44>)
341844e0:	781b      	ldrb	r3, [r3, #0]
341844e2:	461a      	mov	r2, r3
341844e4:	68fb      	ldr	r3, [r7, #12]
341844e6:	4413      	add	r3, r2
341844e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
341844ea:	bf00      	nop
341844ec:	f7ff ffde 	bl	341844ac <HAL_GetTick>
341844f0:	4602      	mov	r2, r0
341844f2:	68bb      	ldr	r3, [r7, #8]
341844f4:	1ad3      	subs	r3, r2, r3
341844f6:	68fa      	ldr	r2, [r7, #12]
341844f8:	429a      	cmp	r2, r3
341844fa:	d8f7      	bhi.n	341844ec <HAL_Delay+0x28>
  {
  }
}
341844fc:	bf00      	nop
341844fe:	bf00      	nop
34184500:	3710      	adds	r7, #16
34184502:	46bd      	mov	sp, r7
34184504:	bd80      	pop	{r7, pc}
34184506:	bf00      	nop
34184508:	341c006c 	.word	0x341c006c

3418450c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
3418450c:	b480      	push	{r7}
3418450e:	b085      	sub	sp, #20
34184510:	af00      	add	r7, sp, #0
34184512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34184514:	687b      	ldr	r3, [r7, #4]
34184516:	f003 0307 	and.w	r3, r3, #7
3418451a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3418451c:	4b0c      	ldr	r3, [pc, #48]	@ (34184550 <__NVIC_SetPriorityGrouping+0x44>)
3418451e:	68db      	ldr	r3, [r3, #12]
34184520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34184522:	68ba      	ldr	r2, [r7, #8]
34184524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34184528:	4013      	ands	r3, r2
3418452a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3418452c:	68fb      	ldr	r3, [r7, #12]
3418452e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34184530:	68bb      	ldr	r3, [r7, #8]
34184532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34184534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34184538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
3418453c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
3418453e:	4a04      	ldr	r2, [pc, #16]	@ (34184550 <__NVIC_SetPriorityGrouping+0x44>)
34184540:	68bb      	ldr	r3, [r7, #8]
34184542:	60d3      	str	r3, [r2, #12]
}
34184544:	bf00      	nop
34184546:	3714      	adds	r7, #20
34184548:	46bd      	mov	sp, r7
3418454a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418454e:	4770      	bx	lr
34184550:	e000ed00 	.word	0xe000ed00

34184554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
34184554:	b480      	push	{r7}
34184556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34184558:	4b04      	ldr	r3, [pc, #16]	@ (3418456c <__NVIC_GetPriorityGrouping+0x18>)
3418455a:	68db      	ldr	r3, [r3, #12]
3418455c:	0a1b      	lsrs	r3, r3, #8
3418455e:	f003 0307 	and.w	r3, r3, #7
}
34184562:	4618      	mov	r0, r3
34184564:	46bd      	mov	sp, r7
34184566:	f85d 7b04 	ldr.w	r7, [sp], #4
3418456a:	4770      	bx	lr
3418456c:	e000ed00 	.word	0xe000ed00

34184570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34184570:	b480      	push	{r7}
34184572:	b083      	sub	sp, #12
34184574:	af00      	add	r7, sp, #0
34184576:	4603      	mov	r3, r0
34184578:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
3418457a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3418457e:	2b00      	cmp	r3, #0
34184580:	db0b      	blt.n	3418459a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34184582:	88fb      	ldrh	r3, [r7, #6]
34184584:	f003 021f 	and.w	r2, r3, #31
34184588:	4907      	ldr	r1, [pc, #28]	@ (341845a8 <__NVIC_EnableIRQ+0x38>)
3418458a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3418458e:	095b      	lsrs	r3, r3, #5
34184590:	2001      	movs	r0, #1
34184592:	fa00 f202 	lsl.w	r2, r0, r2
34184596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
3418459a:	bf00      	nop
3418459c:	370c      	adds	r7, #12
3418459e:	46bd      	mov	sp, r7
341845a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341845a4:	4770      	bx	lr
341845a6:	bf00      	nop
341845a8:	e000e100 	.word	0xe000e100

341845ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
341845ac:	b480      	push	{r7}
341845ae:	b083      	sub	sp, #12
341845b0:	af00      	add	r7, sp, #0
341845b2:	4603      	mov	r3, r0
341845b4:	6039      	str	r1, [r7, #0]
341845b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
341845b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
341845bc:	2b00      	cmp	r3, #0
341845be:	db0a      	blt.n	341845d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341845c0:	683b      	ldr	r3, [r7, #0]
341845c2:	b2da      	uxtb	r2, r3
341845c4:	490c      	ldr	r1, [pc, #48]	@ (341845f8 <__NVIC_SetPriority+0x4c>)
341845c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
341845ca:	0112      	lsls	r2, r2, #4
341845cc:	b2d2      	uxtb	r2, r2
341845ce:	440b      	add	r3, r1
341845d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
341845d4:	e00a      	b.n	341845ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341845d6:	683b      	ldr	r3, [r7, #0]
341845d8:	b2da      	uxtb	r2, r3
341845da:	4908      	ldr	r1, [pc, #32]	@ (341845fc <__NVIC_SetPriority+0x50>)
341845dc:	88fb      	ldrh	r3, [r7, #6]
341845de:	f003 030f 	and.w	r3, r3, #15
341845e2:	3b04      	subs	r3, #4
341845e4:	0112      	lsls	r2, r2, #4
341845e6:	b2d2      	uxtb	r2, r2
341845e8:	440b      	add	r3, r1
341845ea:	761a      	strb	r2, [r3, #24]
}
341845ec:	bf00      	nop
341845ee:	370c      	adds	r7, #12
341845f0:	46bd      	mov	sp, r7
341845f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341845f6:	4770      	bx	lr
341845f8:	e000e100 	.word	0xe000e100
341845fc:	e000ed00 	.word	0xe000ed00

34184600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34184600:	b480      	push	{r7}
34184602:	b089      	sub	sp, #36	@ 0x24
34184604:	af00      	add	r7, sp, #0
34184606:	60f8      	str	r0, [r7, #12]
34184608:	60b9      	str	r1, [r7, #8]
3418460a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
3418460c:	68fb      	ldr	r3, [r7, #12]
3418460e:	f003 0307 	and.w	r3, r3, #7
34184612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34184614:	69fb      	ldr	r3, [r7, #28]
34184616:	f1c3 0307 	rsb	r3, r3, #7
3418461a:	2b04      	cmp	r3, #4
3418461c:	bf28      	it	cs
3418461e:	2304      	movcs	r3, #4
34184620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34184622:	69fb      	ldr	r3, [r7, #28]
34184624:	3304      	adds	r3, #4
34184626:	2b06      	cmp	r3, #6
34184628:	d902      	bls.n	34184630 <NVIC_EncodePriority+0x30>
3418462a:	69fb      	ldr	r3, [r7, #28]
3418462c:	3b03      	subs	r3, #3
3418462e:	e000      	b.n	34184632 <NVIC_EncodePriority+0x32>
34184630:	2300      	movs	r3, #0
34184632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34184634:	f04f 32ff 	mov.w	r2, #4294967295
34184638:	69bb      	ldr	r3, [r7, #24]
3418463a:	fa02 f303 	lsl.w	r3, r2, r3
3418463e:	43da      	mvns	r2, r3
34184640:	68bb      	ldr	r3, [r7, #8]
34184642:	401a      	ands	r2, r3
34184644:	697b      	ldr	r3, [r7, #20]
34184646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34184648:	f04f 31ff 	mov.w	r1, #4294967295
3418464c:	697b      	ldr	r3, [r7, #20]
3418464e:	fa01 f303 	lsl.w	r3, r1, r3
34184652:	43d9      	mvns	r1, r3
34184654:	687b      	ldr	r3, [r7, #4]
34184656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34184658:	4313      	orrs	r3, r2
         );
}
3418465a:	4618      	mov	r0, r3
3418465c:	3724      	adds	r7, #36	@ 0x24
3418465e:	46bd      	mov	sp, r7
34184660:	f85d 7b04 	ldr.w	r7, [sp], #4
34184664:	4770      	bx	lr
	...

34184668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34184668:	b580      	push	{r7, lr}
3418466a:	b082      	sub	sp, #8
3418466c:	af00      	add	r7, sp, #0
3418466e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34184670:	687b      	ldr	r3, [r7, #4]
34184672:	3b01      	subs	r3, #1
34184674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34184678:	d301      	bcc.n	3418467e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
3418467a:	2301      	movs	r3, #1
3418467c:	e00f      	b.n	3418469e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
3418467e:	4a0a      	ldr	r2, [pc, #40]	@ (341846a8 <SysTick_Config+0x40>)
34184680:	687b      	ldr	r3, [r7, #4]
34184682:	3b01      	subs	r3, #1
34184684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
34184686:	210f      	movs	r1, #15
34184688:	f04f 30ff 	mov.w	r0, #4294967295
3418468c:	f7ff ff8e 	bl	341845ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34184690:	4b05      	ldr	r3, [pc, #20]	@ (341846a8 <SysTick_Config+0x40>)
34184692:	2200      	movs	r2, #0
34184694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34184696:	4b04      	ldr	r3, [pc, #16]	@ (341846a8 <SysTick_Config+0x40>)
34184698:	2207      	movs	r2, #7
3418469a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
3418469c:	2300      	movs	r3, #0
}
3418469e:	4618      	mov	r0, r3
341846a0:	3708      	adds	r7, #8
341846a2:	46bd      	mov	sp, r7
341846a4:	bd80      	pop	{r7, pc}
341846a6:	bf00      	nop
341846a8:	e000e010 	.word	0xe000e010

341846ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
341846ac:	b580      	push	{r7, lr}
341846ae:	b082      	sub	sp, #8
341846b0:	af00      	add	r7, sp, #0
341846b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
341846b4:	6878      	ldr	r0, [r7, #4]
341846b6:	f7ff ff29 	bl	3418450c <__NVIC_SetPriorityGrouping>
}
341846ba:	bf00      	nop
341846bc:	3708      	adds	r7, #8
341846be:	46bd      	mov	sp, r7
341846c0:	bd80      	pop	{r7, pc}

341846c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
341846c2:	b580      	push	{r7, lr}
341846c4:	b086      	sub	sp, #24
341846c6:	af00      	add	r7, sp, #0
341846c8:	4603      	mov	r3, r0
341846ca:	60b9      	str	r1, [r7, #8]
341846cc:	607a      	str	r2, [r7, #4]
341846ce:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
341846d0:	f7ff ff40 	bl	34184554 <__NVIC_GetPriorityGrouping>
341846d4:	4603      	mov	r3, r0
341846d6:	f003 0307 	and.w	r3, r3, #7
341846da:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
341846dc:	687a      	ldr	r2, [r7, #4]
341846de:	68b9      	ldr	r1, [r7, #8]
341846e0:	6978      	ldr	r0, [r7, #20]
341846e2:	f7ff ff8d 	bl	34184600 <NVIC_EncodePriority>
341846e6:	4602      	mov	r2, r0
341846e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
341846ec:	4611      	mov	r1, r2
341846ee:	4618      	mov	r0, r3
341846f0:	f7ff ff5c 	bl	341845ac <__NVIC_SetPriority>
}
341846f4:	bf00      	nop
341846f6:	3718      	adds	r7, #24
341846f8:	46bd      	mov	sp, r7
341846fa:	bd80      	pop	{r7, pc}

341846fc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
341846fc:	b580      	push	{r7, lr}
341846fe:	b082      	sub	sp, #8
34184700:	af00      	add	r7, sp, #0
34184702:	4603      	mov	r3, r0
34184704:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
34184706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3418470a:	4618      	mov	r0, r3
3418470c:	f7ff ff30 	bl	34184570 <__NVIC_EnableIRQ>
}
34184710:	bf00      	nop
34184712:	3708      	adds	r7, #8
34184714:	46bd      	mov	sp, r7
34184716:	bd80      	pop	{r7, pc}

34184718 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34184718:	b580      	push	{r7, lr}
3418471a:	b082      	sub	sp, #8
3418471c:	af00      	add	r7, sp, #0
3418471e:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34184720:	6878      	ldr	r0, [r7, #4]
34184722:	f7ff ffa1 	bl	34184668 <SysTick_Config>
34184726:	4603      	mov	r3, r0
}
34184728:	4618      	mov	r0, r3
3418472a:	3708      	adds	r7, #8
3418472c:	46bd      	mov	sp, r7
3418472e:	bd80      	pop	{r7, pc}

34184730 <HAL_DCMIPP_Init>:
  * @brief  Initialize the selected HAL DCMIPP handle and associate a DCMIPP peripheral instance.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_Init(DCMIPP_HandleTypeDef *hdcmipp)
{
34184730:	b580      	push	{r7, lr}
34184732:	b084      	sub	sp, #16
34184734:	af00      	add	r7, sp, #0
34184736:	6078      	str	r0, [r7, #4]
  uint32_t pipe_index;

  /* Check pointer validity */
  if (hdcmipp == NULL)
34184738:	687b      	ldr	r3, [r7, #4]
3418473a:	2b00      	cmp	r3, #0
3418473c:	d101      	bne.n	34184742 <HAL_DCMIPP_Init+0x12>
  {
    return HAL_ERROR;
3418473e:	2301      	movs	r3, #1
34184740:	e020      	b.n	34184784 <HAL_DCMIPP_Init+0x54>
  }

  /* Check function parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));

  if (hdcmipp->State == HAL_DCMIPP_STATE_RESET)
34184742:	687b      	ldr	r3, [r7, #4]
34184744:	791b      	ldrb	r3, [r3, #4]
34184746:	b2db      	uxtb	r3, r3
34184748:	2b00      	cmp	r3, #0
3418474a:	d102      	bne.n	34184752 <HAL_DCMIPP_Init+0x22>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmipp->MspInitCallback(hdcmipp);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMIPP_MspInit(hdcmipp);
3418474c:	6878      	ldr	r0, [r7, #4]
3418474e:	f000 f81d 	bl	3418478c <HAL_DCMIPP_MspInit>
#endif /* (USE_HAL_DCMIPP_REGISTER_CALLBACKS) */
  }

  /* Change the DCMIPP state */
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
34184752:	687b      	ldr	r3, [r7, #4]
34184754:	2203      	movs	r2, #3
34184756:	711a      	strb	r2, [r3, #4]

  /* Reset DCMIPP Pipe state */
  for (pipe_index = 0U; pipe_index < DCMIPP_NUM_OF_PIPES; pipe_index++)
34184758:	2300      	movs	r3, #0
3418475a:	60fb      	str	r3, [r7, #12]
3418475c:	e008      	b.n	34184770 <HAL_DCMIPP_Init+0x40>
  {
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
3418475e:	687a      	ldr	r2, [r7, #4]
34184760:	68fb      	ldr	r3, [r7, #12]
34184762:	4413      	add	r3, r2
34184764:	3305      	adds	r3, #5
34184766:	2200      	movs	r2, #0
34184768:	701a      	strb	r2, [r3, #0]
  for (pipe_index = 0U; pipe_index < DCMIPP_NUM_OF_PIPES; pipe_index++)
3418476a:	68fb      	ldr	r3, [r7, #12]
3418476c:	3301      	adds	r3, #1
3418476e:	60fb      	str	r3, [r7, #12]
34184770:	68fb      	ldr	r3, [r7, #12]
34184772:	2b02      	cmp	r3, #2
34184774:	d9f3      	bls.n	3418475e <HAL_DCMIPP_Init+0x2e>
  }

  /* Update error code */
  hdcmipp->ErrorCode = HAL_DCMIPP_ERROR_NONE;
34184776:	687b      	ldr	r3, [r7, #4]
34184778:	2200      	movs	r2, #0
3418477a:	609a      	str	r2, [r3, #8]

  /* Update the DCMIPP state*/
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
3418477c:	687b      	ldr	r3, [r7, #4]
3418477e:	2201      	movs	r2, #1
34184780:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
34184782:	2300      	movs	r3, #0
}
34184784:	4618      	mov	r0, r3
34184786:	3710      	adds	r7, #16
34184788:	46bd      	mov	sp, r7
3418478a:	bd80      	pop	{r7, pc}

3418478c <HAL_DCMIPP_MspInit>:
  * @brief  Initializes the DCMIPP MSP.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_MspInit(DCMIPP_HandleTypeDef *hdcmipp)
{
3418478c:	b480      	push	{r7}
3418478e:	b083      	sub	sp, #12
34184790:	af00      	add	r7, sp, #0
34184792:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmipp);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_MspInit could be implemented in the user file
   */
}
34184794:	bf00      	nop
34184796:	370c      	adds	r7, #12
34184798:	46bd      	mov	sp, r7
3418479a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418479e:	4770      	bx	lr

341847a0 <HAL_DCMIPP_CSI_SetConfig>:
  *                     configuration information for DCMIPP.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_SetConfig(const DCMIPP_HandleTypeDef *hdcmipp,
                                           const DCMIPP_CSI_ConfTypeDef *pCSI_Config)
{
341847a0:	b580      	push	{r7, lr}
341847a2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
341847a6:	af00      	add	r7, sp, #0
341847a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341847ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
341847b0:	6018      	str	r0, [r3, #0]
341847b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341847b6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
341847ba:	6019      	str	r1, [r3, #0]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
341847bc:	4ba8      	ldr	r3, [pc, #672]	@ (34184a60 <HAL_DCMIPP_CSI_SetConfig+0x2c0>)
341847be:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

  const SNPS_FreqsTypeDef SNPS_Freqs[63] =
341847c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341847c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
341847ca:	4aa6      	ldr	r2, [pc, #664]	@ (34184a64 <HAL_DCMIPP_CSI_SetConfig+0x2c4>)
341847cc:	4618      	mov	r0, r3
341847ce:	4611      	mov	r1, r2
341847d0:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
341847d4:	461a      	mov	r2, r3
341847d6:	f00e fd60 	bl	3419329a <memcpy>
    { 0x48U, 451U },  /* HAL_CSI_BT_2450 */
    { 0x49U, 460U },  /* HAL_CSI_BT_2500 */
  };

  /* Check parameters */
  if ((hdcmipp == NULL) || (pCSI_Config == NULL))
341847da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341847de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
341847e2:	681b      	ldr	r3, [r3, #0]
341847e4:	2b00      	cmp	r3, #0
341847e6:	d006      	beq.n	341847f6 <HAL_DCMIPP_CSI_SetConfig+0x56>
341847e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341847ec:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
341847f0:	681b      	ldr	r3, [r3, #0]
341847f2:	2b00      	cmp	r3, #0
341847f4:	d101      	bne.n	341847fa <HAL_DCMIPP_CSI_SetConfig+0x5a>
  {
    return HAL_ERROR;
341847f6:	2301      	movs	r3, #1
341847f8:	e12c      	b.n	34184a54 <HAL_DCMIPP_CSI_SetConfig+0x2b4>
  assert_param(IS_DCMIPP_NUMBER_OF_LANES(pCSI_Config->NumberOfLanes));
  assert_param(IS_DCMIPP_CSI_DATA_LANE_MAPPING(pCSI_Config->DataLaneMapping));
  assert_param(IS_DCMIPP_CSI_DATA_PHY_BITRATE(pCSI_Config->PHYBitrate));

  /* Ensure the CSI is disabled */
  CLEAR_BIT(csi_instance->CR, CSI_CR_CSIEN);
341847fa:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
341847fe:	681b      	ldr	r3, [r3, #0]
34184800:	f023 0201 	bic.w	r2, r3, #1
34184804:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184808:	601a      	str	r2, [r3, #0]

  /* Configure the Lane Merger */
  if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
3418480a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
3418480e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184812:	681b      	ldr	r3, [r3, #0]
34184814:	685b      	ldr	r3, [r3, #4]
34184816:	2b01      	cmp	r3, #1
34184818:	d10b      	bne.n	34184832 <HAL_DCMIPP_CSI_SetConfig+0x92>
  {
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE0 << CSI_LMCFGR_DL0MAP_Pos) | \
3418481a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
3418481e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184822:	681b      	ldr	r3, [r3, #0]
34184824:	681b      	ldr	r3, [r3, #0]
34184826:	f443 1204 	orr.w	r2, r3, #2162688	@ 0x210000
3418482a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
3418482e:	671a      	str	r2, [r3, #112]	@ 0x70
34184830:	e015      	b.n	3418485e <HAL_DCMIPP_CSI_SetConfig+0xbe>
              (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL1MAP_Pos));
  }
  else if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_INVERTED_DATA_LANES)
34184832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184836:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
3418483a:	681b      	ldr	r3, [r3, #0]
3418483c:	685b      	ldr	r3, [r3, #4]
3418483e:	2b02      	cmp	r3, #2
34184840:	d10b      	bne.n	3418485a <HAL_DCMIPP_CSI_SetConfig+0xba>
  {
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL0MAP_Pos) | \
34184842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184846:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
3418484a:	681b      	ldr	r3, [r3, #0]
3418484c:	681b      	ldr	r3, [r3, #0]
3418484e:	f443 1290 	orr.w	r2, r3, #1179648	@ 0x120000
34184852:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184856:	671a      	str	r2, [r3, #112]	@ 0x70
34184858:	e001      	b.n	3418485e <HAL_DCMIPP_CSI_SetConfig+0xbe>
              (DCMIPP_CSI_DATA_LANE0 << CSI_LMCFGR_DL1MAP_Pos));
  }
  else
  {
    return HAL_ERROR;
3418485a:	2301      	movs	r3, #1
3418485c:	e0fa      	b.n	34184a54 <HAL_DCMIPP_CSI_SetConfig+0x2b4>
  }

  /* Enable the CSI */
  SET_BIT(csi_instance->CR, CSI_CR_CSIEN);
3418485e:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184862:	681b      	ldr	r3, [r3, #0]
34184864:	f043 0201 	orr.w	r2, r3, #1
34184868:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
3418486c:	601a      	str	r2, [r3, #0]

  /* Enable some interrupts, not related to virtual channels - all error cases */
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO |  DCMIPP_CSI_IT_SYNCERR | \
3418486e:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184876:	f043 43b0 	orr.w	r3, r3, #1476395008	@ 0x58000000
3418487a:	f443 1304 	orr.w	r3, r3, #2162688	@ 0x210000
3418487e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184882:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                             DCMIPP_CSI_IT_SPKTERR | DCMIPP_CSI_IT_IDERR | \
                             DCMIPP_CSI_IT_SPKT);

  /* Enable D-PHY Interrupts */
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
34184886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
3418488a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
3418488e:	681b      	ldr	r3, [r3, #0]
34184890:	681b      	ldr	r3, [r3, #0]
34184892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184896:	d11d      	bne.n	341848d4 <HAL_DCMIPP_CSI_SetConfig+0x134>
  {
    if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
34184898:	f507 7302 	add.w	r3, r7, #520	@ 0x208
3418489c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
341848a0:	681b      	ldr	r3, [r3, #0]
341848a2:	685b      	ldr	r3, [r3, #4]
341848a4:	2b01      	cmp	r3, #1
341848a6:	d10a      	bne.n	341848be <HAL_DCMIPP_CSI_SetConfig+0x11e>
    {
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0 | DCMIPP_CSI_IT_ESOTSYNCDL0 |
341848a8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
341848ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341848b0:	f043 021f 	orr.w	r2, r3, #31
341848b4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
341848b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
341848bc:	e016      	b.n	341848ec <HAL_DCMIPP_CSI_SetConfig+0x14c>
                                      DCMIPP_CSI_IT_EESCDL0 | DCMIPP_CSI_IT_ESYNCESCDL0 |
                                      DCMIPP_CSI_IT_ECTRLDL0);
    }
    else
    {
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
341848be:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
341848c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341848c6:	f443 52f8 	orr.w	r2, r3, #7936	@ 0x1f00
341848ca:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
341848ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
341848d2:	e00b      	b.n	341848ec <HAL_DCMIPP_CSI_SetConfig+0x14c>
                                      DCMIPP_CSI_IT_ECTRLDL1);
    }
  }
  else
  {
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
341848d4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
341848d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341848dc:	f443 53f8 	orr.w	r3, r3, #7936	@ 0x1f00
341848e0:	f043 031f 	orr.w	r3, r3, #31
341848e4:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
341848e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                    DCMIPP_CSI_IT_ECTRLDL0);
  }

  /* Start D-PHY Configuration */
  /* Stop the D-PHY */
  CLEAR_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
341848ec:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
341848f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341848f4:	681b      	ldr	r3, [r3, #0]
341848f6:	f023 0302 	bic.w	r3, r3, #2
341848fa:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
341848fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184902:	6013      	str	r3, [r2, #0]

  /* Get the D-PHY enabledb but with all lanes disabled */
  CLEAR_REG(csi_instance-> PCR);
34184904:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184908:	2200      	movs	r2, #0
3418490a:	605a      	str	r2, [r3, #4]

  /* Set the testclk (clock enable) on during 15ns */
  SET_BIT(csi_instance->PTCR0, CSI_PTCR0_TCKEN);
3418490c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184914:	691b      	ldr	r3, [r3, #16]
34184916:	f043 0301 	orr.w	r3, r3, #1
3418491a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
3418491e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184922:	6113      	str	r3, [r2, #16]

  HAL_Delay(1);
34184924:	2001      	movs	r0, #1
34184926:	f7ff fdcd 	bl	341844c4 <HAL_Delay>

  CLEAR_REG(csi_instance->PTCR0);
3418492a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
3418492e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184932:	461a      	mov	r2, r3
34184934:	2300      	movs	r3, #0
34184936:	6113      	str	r3, [r2, #16]

  /* Set hsfreqrange */
  MODIFY_REG(csi_instance->PFCR, CSI_PFCR_HSFR, (0x28U << CSI_PFCR_CCFR_Pos) |
34184938:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
3418493c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184940:	689b      	ldr	r3, [r3, #8]
34184942:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
34184946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
3418494a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
3418494e:	681b      	ldr	r3, [r3, #0]
34184950:	6899      	ldr	r1, [r3, #8]
34184952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184956:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
3418495a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
3418495e:	021b      	lsls	r3, r3, #8
34184960:	4313      	orrs	r3, r2
34184962:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
34184966:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
3418496a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418496e:	6093      	str	r3, [r2, #8]
             (SNPS_Freqs[pCSI_Config->PHYBitrate].hsfreqrange << CSI_PFCR_HSFR_Pos));

  /* set reg @08 deskew_polarity_rw 1'b1 */
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0x08, 0x38);
34184970:	2338      	movs	r3, #56	@ 0x38
34184972:	2208      	movs	r2, #8
34184974:	2100      	movs	r1, #0
34184976:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
3418497a:	f002 fae5 	bl	34186f48 <DCMIPP_CSI_WritePHYReg>

  /* set reg @0xE4 counter_for_des_en_config_if_rx 0x10 + DLL prog EN */
  /* This is because 13<= cfgclkfreqrange[5:0]<=38 */
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe4, 0x11);
3418497e:	2311      	movs	r3, #17
34184980:	22e4      	movs	r2, #228	@ 0xe4
34184982:	2100      	movs	r1, #0
34184984:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
34184988:	f002 fade 	bl	34186f48 <DCMIPP_CSI_WritePHYReg>

  /* set reg @0xe3 & reg @0xe2 value DLL target oscilation freq */
  /* Based on the table page 77, osc_freq_target */
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target >> 8);
3418498c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184990:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184994:	681b      	ldr	r3, [r3, #0]
34184996:	689b      	ldr	r3, [r3, #8]
34184998:	f507 7202 	add.w	r2, r7, #520	@ 0x208
3418499c:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
341849a0:	00db      	lsls	r3, r3, #3
341849a2:	4413      	add	r3, r2
341849a4:	685b      	ldr	r3, [r3, #4]
341849a6:	0a1b      	lsrs	r3, r3, #8
341849a8:	22e3      	movs	r2, #227	@ 0xe3
341849aa:	2100      	movs	r1, #0
341849ac:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
341849b0:	f002 faca 	bl	34186f48 <DCMIPP_CSI_WritePHYReg>
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target & 0xFFU);
341849b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341849b8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
341849bc:	681b      	ldr	r3, [r3, #0]
341849be:	689b      	ldr	r3, [r3, #8]
341849c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
341849c4:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
341849c8:	00db      	lsls	r3, r3, #3
341849ca:	4413      	add	r3, r2
341849cc:	685b      	ldr	r3, [r3, #4]
341849ce:	b2db      	uxtb	r3, r3
341849d0:	22e3      	movs	r2, #227	@ 0xe3
341849d2:	2100      	movs	r1, #0
341849d4:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
341849d8:	f002 fab6 	bl	34186f48 <DCMIPP_CSI_WritePHYReg>

  /* set basedir_0 to RX DLD 0 RX, 1 TX. Synopsys 1 RX 0 TX  + freq range */
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
341849dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341849e0:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
341849e4:	681b      	ldr	r3, [r3, #0]
341849e6:	689a      	ldr	r2, [r3, #8]
341849e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341849ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
341849f0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
341849f4:	021b      	lsls	r3, r3, #8
341849f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
341849fa:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
341849fe:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184a02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184a06:	6093      	str	r3, [r2, #8]
            (SNPS_Freqs[pCSI_Config->PHYBitrate].hsfreqrange << CSI_PFCR_HSFR_Pos) | CSI_PFCR_DLD);

  /* Enable the D-PHY_RX lane(s) etc */
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
34184a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184a0c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184a10:	681b      	ldr	r3, [r3, #0]
34184a12:	681b      	ldr	r3, [r3, #0]
34184a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184a18:	d104      	bne.n	34184a24 <HAL_DCMIPP_CSI_SetConfig+0x284>
  {
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
34184a1a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a1e:	2207      	movs	r2, #7
34184a20:	605a      	str	r2, [r3, #4]
34184a22:	e003      	b.n	34184a2c <HAL_DCMIPP_CSI_SetConfig+0x28c>
  }
  else
  {
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_DL1EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
34184a24:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a28:	220f      	movs	r2, #15
34184a2a:	605a      	str	r2, [r3, #4]
  }


  /* Enable PHY, out of reset */
  SET_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
34184a2c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184a34:	681b      	ldr	r3, [r3, #0]
34184a36:	f043 0302 	orr.w	r3, r3, #2
34184a3a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184a3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184a42:	6013      	str	r3, [r2, #0]

  /* Remove the force */
  CLEAR_REG(csi_instance->PMCR);
34184a44:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184a4c:	461a      	mov	r2, r3
34184a4e:	2300      	movs	r3, #0
34184a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
34184a52:	2300      	movs	r3, #0

}
34184a54:	4618      	mov	r0, r3
34184a56:	f507 7702 	add.w	r7, r7, #520	@ 0x208
34184a5a:	46bd      	mov	sp, r7
34184a5c:	bd80      	pop	{r7, pc}
34184a5e:	bf00      	nop
34184a60:	58006000 	.word	0x58006000
34184a64:	34194d30 	.word	0x34194d30

34184a68 <HAL_DCMIPP_CSI_PIPE_SetConfig>:
  *                         the CSI Pipe configuration information for DCMIPP.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_PIPE_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                const DCMIPP_CSI_PIPE_ConfTypeDef *pCSI_PipeConfig)
{
34184a68:	b480      	push	{r7}
34184a6a:	b087      	sub	sp, #28
34184a6c:	af00      	add	r7, sp, #0
34184a6e:	60f8      	str	r0, [r7, #12]
34184a70:	60b9      	str	r1, [r7, #8]
34184a72:	607a      	str	r2, [r7, #4]
  uint32_t pxfscr_reg = 0;
34184a74:	2300      	movs	r3, #0
34184a76:	617b      	str	r3, [r7, #20]
  HAL_DCMIPP_StateTypeDef state;

  /* Check the DCMIPP peripheral handle parameter and pCSI_Config parameter */
  if ((hdcmipp == NULL) || (pCSI_PipeConfig == NULL))
34184a78:	68fb      	ldr	r3, [r7, #12]
34184a7a:	2b00      	cmp	r3, #0
34184a7c:	d002      	beq.n	34184a84 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c>
34184a7e:	687b      	ldr	r3, [r7, #4]
34184a80:	2b00      	cmp	r3, #0
34184a82:	d101      	bne.n	34184a88 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x20>
  {
    return HAL_ERROR;
34184a84:	2301      	movs	r3, #1
34184a86:	e087      	b.n	34184b98 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x130>
  /* Check the parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));

  if (Pipe != DCMIPP_PIPE2)
34184a88:	68bb      	ldr	r3, [r7, #8]
34184a8a:	2b02      	cmp	r3, #2
34184a8c:	d003      	beq.n	34184a96 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2e>
  {
    assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));

    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
34184a8e:	687b      	ldr	r3, [r7, #4]
34184a90:	681b      	ldr	r3, [r3, #0]
34184a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  if (pCSI_PipeConfig->DataTypeMode != DCMIPP_DTMODE_ALL)
  {
    assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDA));
  }

  state = hdcmipp->State;
34184a96:	68fb      	ldr	r3, [r7, #12]
34184a98:	791b      	ldrb	r3, [r3, #4]
34184a9a:	74fb      	strb	r3, [r7, #19]
  if ((state == HAL_DCMIPP_STATE_INIT) || (state == HAL_DCMIPP_STATE_READY))
34184a9c:	7cfb      	ldrb	r3, [r7, #19]
34184a9e:	2b01      	cmp	r3, #1
34184aa0:	d002      	beq.n	34184aa8 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x40>
34184aa2:	7cfb      	ldrb	r3, [r7, #19]
34184aa4:	2b02      	cmp	r3, #2
34184aa6:	d173      	bne.n	34184b90 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x128>
  {
    if (((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL) || \
34184aa8:	687b      	ldr	r3, [r7, #4]
34184aaa:	681b      	ldr	r3, [r3, #0]
34184aac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34184ab0:	d004      	beq.n	34184abc <HAL_DCMIPP_CSI_PIPE_SetConfig+0x54>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
34184ab2:	687b      	ldr	r3, [r7, #4]
34184ab4:	681b      	ldr	r3, [r3, #0]
    if (((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL) || \
34184ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34184aba:	d104      	bne.n	34184ac6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x5e>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
34184abc:	68bb      	ldr	r3, [r7, #8]
34184abe:	2b00      	cmp	r3, #0
34184ac0:	d001      	beq.n	34184ac6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x5e>
    {
      return HAL_ERROR;
34184ac2:	2301      	movs	r3, #1
34184ac4:	e068      	b.n	34184b98 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x130>
    }

    /* Add Data Type Mode for the selected Pipe except Pipe2 */
    if (Pipe != DCMIPP_PIPE2)
34184ac6:	68bb      	ldr	r3, [r7, #8]
34184ac8:	2b02      	cmp	r3, #2
34184aca:	d004      	beq.n	34184ad6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x6e>
    {
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeMode);
34184acc:	687b      	ldr	r3, [r7, #4]
34184ace:	681b      	ldr	r3, [r3, #0]
34184ad0:	697a      	ldr	r2, [r7, #20]
34184ad2:	4313      	orrs	r3, r2
34184ad4:	617b      	str	r3, [r7, #20]
    }

    if (pCSI_PipeConfig->DataTypeMode != DCMIPP_DTMODE_ALL)
34184ad6:	687b      	ldr	r3, [r7, #4]
34184ad8:	681b      	ldr	r3, [r3, #0]
34184ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34184ade:	d004      	beq.n	34184aea <HAL_DCMIPP_CSI_PIPE_SetConfig+0x82>
    {
      /* Add Data Type IDA for the selected Pipe */
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDA << DCMIPP_P0FSCR_DTIDA_Pos);
34184ae0:	687b      	ldr	r3, [r7, #4]
34184ae2:	685b      	ldr	r3, [r3, #4]
34184ae4:	697a      	ldr	r2, [r7, #20]
34184ae6:	4313      	orrs	r3, r2
34184ae8:	617b      	str	r3, [r7, #20]
    }

    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
34184aea:	687b      	ldr	r3, [r7, #4]
34184aec:	681b      	ldr	r3, [r3, #0]
34184aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34184af2:	d004      	beq.n	34184afe <HAL_DCMIPP_CSI_PIPE_SetConfig+0x96>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
34184af4:	687b      	ldr	r3, [r7, #4]
34184af6:	681b      	ldr	r3, [r3, #0]
34184af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34184afc:	d108      	bne.n	34184b10 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa8>
    {
      if (Pipe != DCMIPP_PIPE2)
34184afe:	68bb      	ldr	r3, [r7, #8]
34184b00:	2b02      	cmp	r3, #2
34184b02:	d005      	beq.n	34184b10 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa8>
      {
        /* Add Data Type IDB for the selected Pipe except Pipe2 */
        pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDB << DCMIPP_P0FSCR_DTIDB_Pos);
34184b04:	687b      	ldr	r3, [r7, #4]
34184b06:	689b      	ldr	r3, [r3, #8]
34184b08:	021b      	lsls	r3, r3, #8
34184b0a:	697a      	ldr	r2, [r7, #20]
34184b0c:	4313      	orrs	r3, r2
34184b0e:	617b      	str	r3, [r7, #20]
      }
    }

    if (Pipe == DCMIPP_PIPE0)
34184b10:	68bb      	ldr	r3, [r7, #8]
34184b12:	2b00      	cmp	r3, #0
34184b14:	d10c      	bne.n	34184b30 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xc8>
    {
      MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_DTMODE | DCMIPP_P0FSCR_DTIDA |
34184b16:	68fb      	ldr	r3, [r7, #12]
34184b18:	681b      	ldr	r3, [r3, #0]
34184b1a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
34184b1e:	4b21      	ldr	r3, [pc, #132]	@ (34184ba4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>)
34184b20:	4013      	ands	r3, r2
34184b22:	68fa      	ldr	r2, [r7, #12]
34184b24:	6812      	ldr	r2, [r2, #0]
34184b26:	6979      	ldr	r1, [r7, #20]
34184b28:	430b      	orrs	r3, r1
34184b2a:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
34184b2e:	e01b      	b.n	34184b68 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x100>
                 DCMIPP_P0FSCR_DTIDB, pxfscr_reg);
    }
    else if (Pipe == DCMIPP_PIPE1)
34184b30:	68bb      	ldr	r3, [r7, #8]
34184b32:	2b01      	cmp	r3, #1
34184b34:	d10c      	bne.n	34184b50 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xe8>
    {
      MODIFY_REG(hdcmipp->Instance->P1FSCR, (DCMIPP_P1FSCR_DTIDA | DCMIPP_P1FSCR_DTIDB |
34184b36:	68fb      	ldr	r3, [r7, #12]
34184b38:	681b      	ldr	r3, [r3, #0]
34184b3a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
34184b3e:	4b19      	ldr	r3, [pc, #100]	@ (34184ba4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>)
34184b40:	4013      	ands	r3, r2
34184b42:	68fa      	ldr	r2, [r7, #12]
34184b44:	6812      	ldr	r2, [r2, #0]
34184b46:	6979      	ldr	r1, [r7, #20]
34184b48:	430b      	orrs	r3, r1
34184b4a:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
34184b4e:	e00b      	b.n	34184b68 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x100>
                                             DCMIPP_P1FSCR_DTMODE), pxfscr_reg);
    }
    else
    {
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_DTIDA, pxfscr_reg);
34184b50:	68fb      	ldr	r3, [r7, #12]
34184b52:	681b      	ldr	r3, [r3, #0]
34184b54:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34184b58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
34184b5c:	68fb      	ldr	r3, [r7, #12]
34184b5e:	681b      	ldr	r3, [r3, #0]
34184b60:	697a      	ldr	r2, [r7, #20]
34184b62:	430a      	orrs	r2, r1
34184b64:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    }

    /* Disable Parallel interface */
    CLEAR_BIT(hdcmipp->Instance->PRCR, DCMIPP_PRCR_ENABLE);
34184b68:	68fb      	ldr	r3, [r7, #12]
34184b6a:	681b      	ldr	r3, [r3, #0]
34184b6c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34184b70:	68fb      	ldr	r3, [r7, #12]
34184b72:	681b      	ldr	r3, [r3, #0]
34184b74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34184b78:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Set CSI Input Selection  */
    SET_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
34184b7c:	68fb      	ldr	r3, [r7, #12]
34184b7e:	681b      	ldr	r3, [r3, #0]
34184b80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
34184b84:	68fb      	ldr	r3, [r7, #12]
34184b86:	681b      	ldr	r3, [r3, #0]
34184b88:	f042 0201 	orr.w	r2, r2, #1
34184b8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  }

  /* Update the DCMIPP state */
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
34184b90:	68fb      	ldr	r3, [r7, #12]
34184b92:	2202      	movs	r2, #2
34184b94:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
34184b96:	2300      	movs	r3, #0
}
34184b98:	4618      	mov	r0, r3
34184b9a:	371c      	adds	r7, #28
34184b9c:	46bd      	mov	sp, r7
34184b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ba2:	4770      	bx	lr
34184ba4:	fffcc0c0 	.word	0xfffcc0c0

34184ba8 <HAL_DCMIPP_CSI_SetVCConfig>:
  * @param  DataTypeFormat Specifies the Data Type Format, can be a value from @ref DCMIPP_CSI_DataTypeFormat.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_SetVCConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel,
                                             uint32_t DataTypeFormat)
{
34184ba8:	b480      	push	{r7}
34184baa:	b087      	sub	sp, #28
34184bac:	af00      	add	r7, sp, #0
34184bae:	60f8      	str	r0, [r7, #12]
34184bb0:	60b9      	str	r1, [r7, #8]
34184bb2:	607a      	str	r2, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34184bb4:	4b1c      	ldr	r3, [pc, #112]	@ (34184c28 <HAL_DCMIPP_CSI_SetVCConfig+0x80>)
34184bb6:	617b      	str	r3, [r7, #20]

  assert_param(IS_DCMIPP_VCID(VirtualChannel));
  assert_param(IS_DCMIPP_CSI_DATA_TYPE_FORMAT(DataTypeFormat));

  /* Check pointer and input values validity */
  if (hdcmipp == NULL)
34184bb8:	68fb      	ldr	r3, [r7, #12]
34184bba:	2b00      	cmp	r3, #0
34184bbc:	d101      	bne.n	34184bc2 <HAL_DCMIPP_CSI_SetVCConfig+0x1a>
  {
    return HAL_ERROR;
34184bbe:	2301      	movs	r3, #1
34184bc0:	e02c      	b.n	34184c1c <HAL_DCMIPP_CSI_SetVCConfig+0x74>
  }

  /* Set the common format for all data type for the selected virtual channel */
  switch (VirtualChannel)
34184bc2:	68bb      	ldr	r3, [r7, #8]
34184bc4:	2b03      	cmp	r3, #3
34184bc6:	d827      	bhi.n	34184c18 <HAL_DCMIPP_CSI_SetVCConfig+0x70>
34184bc8:	a201      	add	r2, pc, #4	@ (adr r2, 34184bd0 <HAL_DCMIPP_CSI_SetVCConfig+0x28>)
34184bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34184bce:	bf00      	nop
34184bd0:	34184be1 	.word	0x34184be1
34184bd4:	34184bef 	.word	0x34184bef
34184bd8:	34184bfd 	.word	0x34184bfd
34184bdc:	34184c0b 	.word	0x34184c0b
  {
    case DCMIPP_VIRTUAL_CHANNEL0:
    {
      WRITE_REG(csi_instance->VC0CFGR1, (DataTypeFormat << CSI_VC0CFGR1_CDTFT_Pos) | CSI_VC0CFGR1_ALLDT);
34184be0:	687b      	ldr	r3, [r7, #4]
34184be2:	021b      	lsls	r3, r3, #8
34184be4:	f043 0201 	orr.w	r2, r3, #1
34184be8:	697b      	ldr	r3, [r7, #20]
34184bea:	611a      	str	r2, [r3, #16]
      break;
34184bec:	e015      	b.n	34184c1a <HAL_DCMIPP_CSI_SetVCConfig+0x72>
    }
    case DCMIPP_VIRTUAL_CHANNEL1:
    {
      WRITE_REG(csi_instance->VC1CFGR1, (DataTypeFormat << CSI_VC1CFGR1_CDTFT_Pos) | CSI_VC1CFGR1_ALLDT);
34184bee:	687b      	ldr	r3, [r7, #4]
34184bf0:	021b      	lsls	r3, r3, #8
34184bf2:	f043 0201 	orr.w	r2, r3, #1
34184bf6:	697b      	ldr	r3, [r7, #20]
34184bf8:	621a      	str	r2, [r3, #32]
      break;
34184bfa:	e00e      	b.n	34184c1a <HAL_DCMIPP_CSI_SetVCConfig+0x72>
    }
    case DCMIPP_VIRTUAL_CHANNEL2:
    {
      WRITE_REG(csi_instance->VC2CFGR1, (DataTypeFormat << CSI_VC2CFGR1_CDTFT_Pos) | CSI_VC2CFGR1_ALLDT);
34184bfc:	687b      	ldr	r3, [r7, #4]
34184bfe:	021b      	lsls	r3, r3, #8
34184c00:	f043 0201 	orr.w	r2, r3, #1
34184c04:	697b      	ldr	r3, [r7, #20]
34184c06:	631a      	str	r2, [r3, #48]	@ 0x30
      break;
34184c08:	e007      	b.n	34184c1a <HAL_DCMIPP_CSI_SetVCConfig+0x72>
    }
    case DCMIPP_VIRTUAL_CHANNEL3:
    {
      WRITE_REG(csi_instance->VC3CFGR1, (DataTypeFormat << CSI_VC3CFGR1_CDTFT_Pos) | CSI_VC3CFGR1_ALLDT);
34184c0a:	687b      	ldr	r3, [r7, #4]
34184c0c:	021b      	lsls	r3, r3, #8
34184c0e:	f043 0201 	orr.w	r2, r3, #1
34184c12:	697b      	ldr	r3, [r7, #20]
34184c14:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
34184c16:	e000      	b.n	34184c1a <HAL_DCMIPP_CSI_SetVCConfig+0x72>
    }
    default:
      break;
34184c18:	bf00      	nop
  }

  return HAL_OK;
34184c1a:	2300      	movs	r3, #0
}
34184c1c:	4618      	mov	r0, r3
34184c1e:	371c      	adds	r7, #28
34184c20:	46bd      	mov	sp, r7
34184c22:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c26:	4770      	bx	lr
34184c28:	58006000 	.word	0x58006000

34184c2c <HAL_DCMIPP_PIPE_SetConfig>:
  * @param  pPipeConfig pointer to pipe configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                            const DCMIPP_PipeConfTypeDef *pPipeConfig)
{
34184c2c:	b580      	push	{r7, lr}
34184c2e:	b086      	sub	sp, #24
34184c30:	af00      	add	r7, sp, #0
34184c32:	60f8      	str	r0, [r7, #12]
34184c34:	60b9      	str	r1, [r7, #8]
34184c36:	607a      	str	r2, [r7, #4]
  HAL_DCMIPP_PipeStateTypeDef pipe_state;

  /* Check the DCMIPP peripheral handle parameter and pPipeConfig parameter */
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
34184c38:	68fb      	ldr	r3, [r7, #12]
34184c3a:	2b00      	cmp	r3, #0
34184c3c:	d002      	beq.n	34184c44 <HAL_DCMIPP_PIPE_SetConfig+0x18>
34184c3e:	687b      	ldr	r3, [r7, #4]
34184c40:	2b00      	cmp	r3, #0
34184c42:	d101      	bne.n	34184c48 <HAL_DCMIPP_PIPE_SetConfig+0x1c>
  {
    return HAL_ERROR;
34184c44:	2301      	movs	r3, #1
34184c46:	e02f      	b.n	34184ca8 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
  {
    assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(pPipeConfig->PixelPackerFormat));
    assert_param(IS_DCMIPP_PIXEL_PIPE_PITCH(pPipeConfig->PixelPipePitch));
  }

  if ((Pipe == DCMIPP_PIPE2) && ((pPipeConfig->PixelPackerFormat) > DCMIPP_PIXEL_PACKER_FORMAT_YUV422_1))
34184c48:	68bb      	ldr	r3, [r7, #8]
34184c4a:	2b02      	cmp	r3, #2
34184c4c:	d105      	bne.n	34184c5a <HAL_DCMIPP_PIPE_SetConfig+0x2e>
34184c4e:	687b      	ldr	r3, [r7, #4]
34184c50:	689b      	ldr	r3, [r3, #8]
34184c52:	2b06      	cmp	r3, #6
34184c54:	d901      	bls.n	34184c5a <HAL_DCMIPP_PIPE_SetConfig+0x2e>
  {
    return HAL_ERROR;
34184c56:	2301      	movs	r3, #1
34184c58:	e026      	b.n	34184ca8 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
  }
  /* Get Pipe State */
  pipe_state = hdcmipp->PipeState[Pipe];
34184c5a:	68fa      	ldr	r2, [r7, #12]
34184c5c:	68bb      	ldr	r3, [r7, #8]
34184c5e:	4413      	add	r3, r2
34184c60:	3305      	adds	r3, #5
34184c62:	781b      	ldrb	r3, [r3, #0]
34184c64:	75fb      	strb	r3, [r7, #23]

  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34184c66:	68fb      	ldr	r3, [r7, #12]
34184c68:	791b      	ldrb	r3, [r3, #4]
34184c6a:	b2db      	uxtb	r3, r3
34184c6c:	2b02      	cmp	r3, #2
34184c6e:	d11a      	bne.n	34184ca6 <HAL_DCMIPP_PIPE_SetConfig+0x7a>
  {
    if ((pipe_state == HAL_DCMIPP_PIPE_STATE_RESET) || (pipe_state == HAL_DCMIPP_PIPE_STATE_ERROR))
34184c70:	7dfb      	ldrb	r3, [r7, #23]
34184c72:	2b00      	cmp	r3, #0
34184c74:	d002      	beq.n	34184c7c <HAL_DCMIPP_PIPE_SetConfig+0x50>
34184c76:	7dfb      	ldrb	r3, [r7, #23]
34184c78:	2b04      	cmp	r3, #4
34184c7a:	d112      	bne.n	34184ca2 <HAL_DCMIPP_PIPE_SetConfig+0x76>
    {
      /* Update the DCMIPP PIPE state */
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34184c7c:	68fa      	ldr	r2, [r7, #12]
34184c7e:	68bb      	ldr	r3, [r7, #8]
34184c80:	4413      	add	r3, r2
34184c82:	3305      	adds	r3, #5
34184c84:	2202      	movs	r2, #2
34184c86:	701a      	strb	r2, [r3, #0]

      /* Initialize the DCMIPP Pipe registers */
      Pipe_Config(hdcmipp, Pipe, pPipeConfig);
34184c88:	687a      	ldr	r2, [r7, #4]
34184c8a:	68b9      	ldr	r1, [r7, #8]
34184c8c:	68f8      	ldr	r0, [r7, #12]
34184c8e:	f002 f8bc 	bl	34186e0a <Pipe_Config>

      /* Update the DCMIPP pipe state */
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_READY;
34184c92:	68fa      	ldr	r2, [r7, #12]
34184c94:	68bb      	ldr	r3, [r7, #8]
34184c96:	4413      	add	r3, r2
34184c98:	3305      	adds	r3, #5
34184c9a:	2201      	movs	r2, #1
34184c9c:	701a      	strb	r2, [r3, #0]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184c9e:	2300      	movs	r3, #0
34184ca0:	e002      	b.n	34184ca8 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
      return HAL_ERROR;
34184ca2:	2301      	movs	r3, #1
34184ca4:	e000      	b.n	34184ca8 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
    return HAL_ERROR;
34184ca6:	2301      	movs	r3, #1
}
34184ca8:	4618      	mov	r0, r3
34184caa:	3718      	adds	r7, #24
34184cac:	46bd      	mov	sp, r7
34184cae:	bd80      	pop	{r7, pc}

34184cb0 <HAL_DCMIPP_CSI_PIPE_Start>:
  * @param  CaptureMode    DCMIPP capture mode for the pipe can be a value from @ref DCMIPP_Capture_Mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_PIPE_Start(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel,
                                            uint32_t DstAddress, uint32_t CaptureMode)
{
34184cb0:	b580      	push	{r7, lr}
34184cb2:	b086      	sub	sp, #24
34184cb4:	af00      	add	r7, sp, #0
34184cb6:	60f8      	str	r0, [r7, #12]
34184cb8:	60b9      	str	r1, [r7, #8]
34184cba:	607a      	str	r2, [r7, #4]
34184cbc:	603b      	str	r3, [r7, #0]
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
  assert_param(IS_DCMIPP_CAPTURE_MODE(CaptureMode));

  /* Check pointer validity */
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
34184cbe:	68fb      	ldr	r3, [r7, #12]
34184cc0:	2b00      	cmp	r3, #0
34184cc2:	d004      	beq.n	34184cce <HAL_DCMIPP_CSI_PIPE_Start+0x1e>
34184cc4:	683b      	ldr	r3, [r7, #0]
34184cc6:	f003 030f 	and.w	r3, r3, #15
34184cca:	2b00      	cmp	r3, #0
34184ccc:	d001      	beq.n	34184cd2 <HAL_DCMIPP_CSI_PIPE_Start+0x22>
  {
    return HAL_ERROR;
34184cce:	2301      	movs	r3, #1
34184cd0:	e028      	b.n	34184d24 <HAL_DCMIPP_CSI_PIPE_Start+0x74>
  }

  mode = READ_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
34184cd2:	68fb      	ldr	r3, [r7, #12]
34184cd4:	681b      	ldr	r3, [r3, #0]
34184cd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
34184cda:	f003 0301 	and.w	r3, r3, #1
34184cde:	617b      	str	r3, [r7, #20]
  if ((hdcmipp->PipeState[Pipe] != HAL_DCMIPP_PIPE_STATE_READY) || (mode != DCMIPP_SERIAL_MODE))
34184ce0:	68fa      	ldr	r2, [r7, #12]
34184ce2:	68bb      	ldr	r3, [r7, #8]
34184ce4:	4413      	add	r3, r2
34184ce6:	3305      	adds	r3, #5
34184ce8:	781b      	ldrb	r3, [r3, #0]
34184cea:	b2db      	uxtb	r3, r3
34184cec:	2b01      	cmp	r3, #1
34184cee:	d102      	bne.n	34184cf6 <HAL_DCMIPP_CSI_PIPE_Start+0x46>
34184cf0:	697b      	ldr	r3, [r7, #20]
34184cf2:	2b01      	cmp	r3, #1
34184cf4:	d001      	beq.n	34184cfa <HAL_DCMIPP_CSI_PIPE_Start+0x4a>
  {
    return HAL_ERROR;
34184cf6:	2301      	movs	r3, #1
34184cf8:	e014      	b.n	34184d24 <HAL_DCMIPP_CSI_PIPE_Start+0x74>
  }

  /* Set Virtual Channel for the selected Pipe */
  if (DCMIPP_CSI_SetVCConfig(hdcmipp, Pipe, VirtualChannel) != HAL_OK)
34184cfa:	687a      	ldr	r2, [r7, #4]
34184cfc:	68b9      	ldr	r1, [r7, #8]
34184cfe:	68f8      	ldr	r0, [r7, #12]
34184d00:	f002 fa8a 	bl	34187218 <DCMIPP_CSI_SetVCConfig>
34184d04:	4603      	mov	r3, r0
34184d06:	2b00      	cmp	r3, #0
34184d08:	d001      	beq.n	34184d0e <HAL_DCMIPP_CSI_PIPE_Start+0x5e>
  {
    return HAL_ERROR;
34184d0a:	2301      	movs	r3, #1
34184d0c:	e00a      	b.n	34184d24 <HAL_DCMIPP_CSI_PIPE_Start+0x74>
  }

  /* Set Capture Mode and Destination address for the selected pipe */
  DCMIPP_SetConfig(hdcmipp, Pipe, DstAddress, CaptureMode);
34184d0e:	6a3b      	ldr	r3, [r7, #32]
34184d10:	683a      	ldr	r2, [r7, #0]
34184d12:	68b9      	ldr	r1, [r7, #8]
34184d14:	68f8      	ldr	r0, [r7, #12]
34184d16:	f002 f9b1 	bl	3418707c <DCMIPP_SetConfig>

  /* Enable Capture for the selected Pipe */
  DCMIPP_EnableCapture(hdcmipp, Pipe);
34184d1a:	68b9      	ldr	r1, [r7, #8]
34184d1c:	68f8      	ldr	r0, [r7, #12]
34184d1e:	f002 fa25 	bl	3418716c <DCMIPP_EnableCapture>

  return HAL_OK;
34184d22:	2300      	movs	r3, #0
}
34184d24:	4618      	mov	r0, r3
34184d26:	3718      	adds	r7, #24
34184d28:	46bd      	mov	sp, r7
34184d2a:	bd80      	pop	{r7, pc}

34184d2c <HAL_DCMIPP_IRQHandler>:
  * @brief  Handles DCMIPP interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
34184d2c:	b580      	push	{r7, lr}
34184d2e:	b084      	sub	sp, #16
34184d30:	af00      	add	r7, sp, #0
34184d32:	6078      	str	r0, [r7, #4]
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34184d34:	687b      	ldr	r3, [r7, #4]
34184d36:	681b      	ldr	r3, [r3, #0]
34184d38:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
34184d3c:	60fb      	str	r3, [r7, #12]
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
34184d3e:	687b      	ldr	r3, [r7, #4]
34184d40:	681b      	ldr	r3, [r3, #0]
34184d42:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
34184d46:	60bb      	str	r3, [r7, #8]

  /* ========================= PIPE0 INTERRUPTS ==================== */
  /* Limit error on the PIPE0 ********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34184d48:	68fb      	ldr	r3, [r7, #12]
34184d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34184d4e:	2b00      	cmp	r3, #0
34184d50:	d01e      	beq.n	34184d90 <HAL_DCMIPP_IRQHandler+0x64>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
34184d52:	68bb      	ldr	r3, [r7, #8]
34184d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34184d58:	2b00      	cmp	r3, #0
34184d5a:	d019      	beq.n	34184d90 <HAL_DCMIPP_IRQHandler+0x64>
    {
      /* Disable Limit error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
34184d5c:	687b      	ldr	r3, [r7, #4]
34184d5e:	681b      	ldr	r3, [r3, #0]
34184d60:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34184d64:	687b      	ldr	r3, [r7, #4]
34184d66:	681b      	ldr	r3, [r3, #0]
34184d68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34184d6c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
34184d70:	687b      	ldr	r3, [r7, #4]
34184d72:	689b      	ldr	r3, [r3, #8]
34184d74:	f043 0204 	orr.w	r2, r3, #4
34184d78:	687b      	ldr	r3, [r7, #4]
34184d7a:	609a      	str	r2, [r3, #8]

      /* Clear the Limit error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
34184d7c:	687b      	ldr	r3, [r7, #4]
34184d7e:	681b      	ldr	r3, [r3, #0]
34184d80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34184d84:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LIMIT Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34184d88:	2100      	movs	r1, #0
34184d8a:	6878      	ldr	r0, [r7, #4]
34184d8c:	f000 fe5c 	bl	34185a48 <HAL_DCMIPP_PIPE_LimitEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
34184d90:	68fb      	ldr	r3, [r7, #12]
34184d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34184d96:	2b00      	cmp	r3, #0
34184d98:	d00e      	beq.n	34184db8 <HAL_DCMIPP_IRQHandler+0x8c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
34184d9a:	68bb      	ldr	r3, [r7, #8]
34184d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34184da0:	2b00      	cmp	r3, #0
34184da2:	d009      	beq.n	34184db8 <HAL_DCMIPP_IRQHandler+0x8c>
    {
      /* Clear the VSYNC flag for pipe0 */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34184da4:	687b      	ldr	r3, [r7, #4]
34184da6:	681b      	ldr	r3, [r3, #0]
34184da8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34184dac:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
34184db0:	2100      	movs	r1, #0
34184db2:	6878      	ldr	r0, [r7, #4]
34184db4:	f00d fb46 	bl	34192444 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* FRAME interrupt management ****************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34184db8:	68fb      	ldr	r3, [r7, #12]
34184dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34184dbe:	2b00      	cmp	r3, #0
34184dc0:	d023      	beq.n	34184e0a <HAL_DCMIPP_IRQHandler+0xde>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
34184dc2:	68bb      	ldr	r3, [r7, #8]
34184dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34184dc8:	2b00      	cmp	r3, #0
34184dca:	d01e      	beq.n	34184e0a <HAL_DCMIPP_IRQHandler+0xde>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34184dcc:	687b      	ldr	r3, [r7, #4]
34184dce:	681b      	ldr	r3, [r3, #0]
34184dd0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34184dd4:	f003 0304 	and.w	r3, r3, #4
34184dd8:	2b04      	cmp	r3, #4
34184dda:	d10c      	bne.n	34184df6 <HAL_DCMIPP_IRQHandler+0xca>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34184ddc:	687b      	ldr	r3, [r7, #4]
34184dde:	681b      	ldr	r3, [r3, #0]
34184de0:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34184de4:	687b      	ldr	r3, [r7, #4]
34184de6:	681b      	ldr	r3, [r3, #0]
34184de8:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
34184dec:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
34184df0:	687b      	ldr	r3, [r7, #4]
34184df2:	2201      	movs	r2, #1
34184df4:	715a      	strb	r2, [r3, #5]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34184df6:	687b      	ldr	r3, [r7, #4]
34184df8:	681b      	ldr	r3, [r3, #0]
34184dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
34184dfe:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34184e02:	2100      	movs	r1, #0
34184e04:	6878      	ldr	r0, [r7, #4]
34184e06:	f00d fb0b 	bl	34192420 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* LINE interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
34184e0a:	68fb      	ldr	r3, [r7, #12]
34184e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34184e10:	2b00      	cmp	r3, #0
34184e12:	d00e      	beq.n	34184e32 <HAL_DCMIPP_IRQHandler+0x106>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34184e14:	68bb      	ldr	r3, [r7, #8]
34184e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34184e1a:	2b00      	cmp	r3, #0
34184e1c:	d009      	beq.n	34184e32 <HAL_DCMIPP_IRQHandler+0x106>
    {
      /* Clear the LINE flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34184e1e:	687b      	ldr	r3, [r7, #4]
34184e20:	681b      	ldr	r3, [r3, #0]
34184e22:	f44f 7280 	mov.w	r2, #256	@ 0x100
34184e26:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LINE Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34184e2a:	2100      	movs	r1, #0
34184e2c:	6878      	ldr	r0, [r7, #4]
34184e2e:	f7fd fdcb 	bl	341829c8 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error interrupt for Pipe0 ***************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
34184e32:	68fb      	ldr	r3, [r7, #12]
34184e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34184e38:	2b00      	cmp	r3, #0
34184e3a:	d021      	beq.n	34184e80 <HAL_DCMIPP_IRQHandler+0x154>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34184e3c:	68bb      	ldr	r3, [r7, #8]
34184e3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34184e42:	2b00      	cmp	r3, #0
34184e44:	d01c      	beq.n	34184e80 <HAL_DCMIPP_IRQHandler+0x154>
    {
      /* Disable Overrun Error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34184e46:	687b      	ldr	r3, [r7, #4]
34184e48:	681b      	ldr	r3, [r3, #0]
34184e4a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34184e4e:	687b      	ldr	r3, [r7, #4]
34184e50:	681b      	ldr	r3, [r3, #0]
34184e52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34184e56:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34184e5a:	687b      	ldr	r3, [r7, #4]
34184e5c:	689b      	ldr	r3, [r3, #8]
34184e5e:	f043 0208 	orr.w	r2, r3, #8
34184e62:	687b      	ldr	r3, [r7, #4]
34184e64:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34184e66:	687b      	ldr	r3, [r7, #4]
34184e68:	681b      	ldr	r3, [r3, #0]
34184e6a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34184e6e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP Pipe state */
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34184e72:	687b      	ldr	r3, [r7, #4]
34184e74:	2204      	movs	r2, #4
34184e76:	715a      	strb	r2, [r3, #5]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34184e78:	2100      	movs	r1, #0
34184e7a:	6878      	ldr	r0, [r7, #4]
34184e7c:	f7fd fdb0 	bl	341829e0 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE1 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34184e80:	68fb      	ldr	r3, [r7, #12]
34184e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34184e86:	2b00      	cmp	r3, #0
34184e88:	d00e      	beq.n	34184ea8 <HAL_DCMIPP_IRQHandler+0x17c>
  {
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34184e8a:	68bb      	ldr	r3, [r7, #8]
34184e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34184e90:	2b00      	cmp	r3, #0
34184e92:	d009      	beq.n	34184ea8 <HAL_DCMIPP_IRQHandler+0x17c>
    {
      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34184e94:	687b      	ldr	r3, [r7, #4]
34184e96:	681b      	ldr	r3, [r3, #0]
34184e98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34184e9c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34184ea0:	2101      	movs	r1, #1
34184ea2:	6878      	ldr	r0, [r7, #4]
34184ea4:	f7fd fd90 	bl	341829c8 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34184ea8:	68fb      	ldr	r3, [r7, #12]
34184eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34184eae:	2b00      	cmp	r3, #0
34184eb0:	d00e      	beq.n	34184ed0 <HAL_DCMIPP_IRQHandler+0x1a4>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
34184eb2:	68bb      	ldr	r3, [r7, #8]
34184eb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34184eb8:	2b00      	cmp	r3, #0
34184eba:	d009      	beq.n	34184ed0 <HAL_DCMIPP_IRQHandler+0x1a4>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34184ebc:	687b      	ldr	r3, [r7, #4]
34184ebe:	681b      	ldr	r3, [r3, #0]
34184ec0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34184ec4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34184ec8:	2101      	movs	r1, #1
34184eca:	6878      	ldr	r0, [r7, #4]
34184ecc:	f00d faba 	bl	34192444 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
34184ed0:	68fb      	ldr	r3, [r7, #12]
34184ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34184ed6:	2b00      	cmp	r3, #0
34184ed8:	d023      	beq.n	34184f22 <HAL_DCMIPP_IRQHandler+0x1f6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
34184eda:	68bb      	ldr	r3, [r7, #8]
34184edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34184ee0:	2b00      	cmp	r3, #0
34184ee2:	d01e      	beq.n	34184f22 <HAL_DCMIPP_IRQHandler+0x1f6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34184ee4:	687b      	ldr	r3, [r7, #4]
34184ee6:	681b      	ldr	r3, [r3, #0]
34184ee8:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
34184eec:	f003 0304 	and.w	r3, r3, #4
34184ef0:	2b04      	cmp	r3, #4
34184ef2:	d10c      	bne.n	34184f0e <HAL_DCMIPP_IRQHandler+0x1e2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
34184ef4:	687b      	ldr	r3, [r7, #4]
34184ef6:	681b      	ldr	r3, [r3, #0]
34184ef8:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34184efc:	687b      	ldr	r3, [r7, #4]
34184efe:	681b      	ldr	r3, [r3, #0]
34184f00:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34184f04:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
34184f08:	687b      	ldr	r3, [r7, #4]
34184f0a:	2201      	movs	r2, #1
34184f0c:	719a      	strb	r2, [r3, #6]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34184f0e:	687b      	ldr	r3, [r7, #4]
34184f10:	681b      	ldr	r3, [r3, #0]
34184f12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34184f16:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34184f1a:	2101      	movs	r1, #1
34184f1c:	6878      	ldr	r0, [r7, #4]
34184f1e:	f00d fa7f 	bl	34192420 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error on the PIPE1 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
34184f22:	68fb      	ldr	r3, [r7, #12]
34184f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34184f28:	2b00      	cmp	r3, #0
34184f2a:	d021      	beq.n	34184f70 <HAL_DCMIPP_IRQHandler+0x244>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
34184f2c:	68bb      	ldr	r3, [r7, #8]
34184f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34184f32:	2b00      	cmp	r3, #0
34184f34:	d01c      	beq.n	34184f70 <HAL_DCMIPP_IRQHandler+0x244>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34184f36:	687b      	ldr	r3, [r7, #4]
34184f38:	681b      	ldr	r3, [r3, #0]
34184f3a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34184f3e:	687b      	ldr	r3, [r7, #4]
34184f40:	681b      	ldr	r3, [r3, #0]
34184f42:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
34184f46:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
34184f4a:	687b      	ldr	r3, [r7, #4]
34184f4c:	689b      	ldr	r3, [r3, #8]
34184f4e:	f043 0210 	orr.w	r2, r3, #16
34184f52:	687b      	ldr	r3, [r7, #4]
34184f54:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
34184f56:	687b      	ldr	r3, [r7, #4]
34184f58:	681b      	ldr	r3, [r3, #0]
34184f5a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34184f5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34184f62:	687b      	ldr	r3, [r7, #4]
34184f64:	2204      	movs	r2, #4
34184f66:	719a      	strb	r2, [r3, #6]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34184f68:	2101      	movs	r1, #1
34184f6a:	6878      	ldr	r0, [r7, #4]
34184f6c:	f7fd fd38 	bl	341829e0 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE2 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34184f70:	68fb      	ldr	r3, [r7, #12]
34184f72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34184f76:	2b00      	cmp	r3, #0
34184f78:	d00e      	beq.n	34184f98 <HAL_DCMIPP_IRQHandler+0x26c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
34184f7a:	68bb      	ldr	r3, [r7, #8]
34184f7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34184f80:	2b00      	cmp	r3, #0
34184f82:	d009      	beq.n	34184f98 <HAL_DCMIPP_IRQHandler+0x26c>
    {
      /* Clear the End of Line flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34184f84:	687b      	ldr	r3, [r7, #4]
34184f86:	681b      	ldr	r3, [r3, #0]
34184f88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34184f8c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34184f90:	2102      	movs	r1, #2
34184f92:	6878      	ldr	r0, [r7, #4]
34184f94:	f7fd fd18 	bl	341829c8 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34184f98:	68fb      	ldr	r3, [r7, #12]
34184f9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34184f9e:	2b00      	cmp	r3, #0
34184fa0:	d00e      	beq.n	34184fc0 <HAL_DCMIPP_IRQHandler+0x294>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
34184fa2:	68bb      	ldr	r3, [r7, #8]
34184fa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34184fa8:	2b00      	cmp	r3, #0
34184faa:	d009      	beq.n	34184fc0 <HAL_DCMIPP_IRQHandler+0x294>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34184fac:	687b      	ldr	r3, [r7, #4]
34184fae:	681b      	ldr	r3, [r3, #0]
34184fb0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34184fb4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34184fb8:	2102      	movs	r1, #2
34184fba:	6878      	ldr	r0, [r7, #4]
34184fbc:	f00d fa42 	bl	34192444 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34184fc0:	68fb      	ldr	r3, [r7, #12]
34184fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34184fc6:	2b00      	cmp	r3, #0
34184fc8:	d023      	beq.n	34185012 <HAL_DCMIPP_IRQHandler+0x2e6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34184fca:	68bb      	ldr	r3, [r7, #8]
34184fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34184fd0:	2b00      	cmp	r3, #0
34184fd2:	d01e      	beq.n	34185012 <HAL_DCMIPP_IRQHandler+0x2e6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34184fd4:	687b      	ldr	r3, [r7, #4]
34184fd6:	681b      	ldr	r3, [r3, #0]
34184fd8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
34184fdc:	f003 0304 	and.w	r3, r3, #4
34184fe0:	2b04      	cmp	r3, #4
34184fe2:	d10c      	bne.n	34184ffe <HAL_DCMIPP_IRQHandler+0x2d2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34184fe4:	687b      	ldr	r3, [r7, #4]
34184fe6:	681b      	ldr	r3, [r3, #0]
34184fe8:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34184fec:	687b      	ldr	r3, [r7, #4]
34184fee:	681b      	ldr	r3, [r3, #0]
34184ff0:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
34184ff4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
34184ff8:	687b      	ldr	r3, [r7, #4]
34184ffa:	2201      	movs	r2, #1
34184ffc:	71da      	strb	r2, [r3, #7]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34184ffe:	687b      	ldr	r3, [r7, #4]
34185000:	681b      	ldr	r3, [r3, #0]
34185002:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34185006:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
3418500a:	2102      	movs	r1, #2
3418500c:	6878      	ldr	r0, [r7, #4]
3418500e:	f00d fa07 	bl	34192420 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
  /* Overrun error on the PIPE2 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34185012:	68fb      	ldr	r3, [r7, #12]
34185014:	2b00      	cmp	r3, #0
34185016:	da1f      	bge.n	34185058 <HAL_DCMIPP_IRQHandler+0x32c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34185018:	68bb      	ldr	r3, [r7, #8]
3418501a:	2b00      	cmp	r3, #0
3418501c:	da1c      	bge.n	34185058 <HAL_DCMIPP_IRQHandler+0x32c>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3418501e:	687b      	ldr	r3, [r7, #4]
34185020:	681b      	ldr	r3, [r3, #0]
34185022:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34185026:	687b      	ldr	r3, [r7, #4]
34185028:	681b      	ldr	r3, [r3, #0]
3418502a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
3418502e:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34185032:	687b      	ldr	r3, [r7, #4]
34185034:	689b      	ldr	r3, [r3, #8]
34185036:	f043 0220 	orr.w	r2, r3, #32
3418503a:	687b      	ldr	r3, [r7, #4]
3418503c:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
3418503e:	687b      	ldr	r3, [r7, #4]
34185040:	681b      	ldr	r3, [r3, #0]
34185042:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34185046:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
3418504a:	687b      	ldr	r3, [r7, #4]
3418504c:	2204      	movs	r2, #4
3418504e:	71da      	strb	r2, [r3, #7]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34185050:	2102      	movs	r1, #2
34185052:	6878      	ldr	r0, [r7, #4]
34185054:	f7fd fcc4 	bl	341829e0 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization Error Interrupt on the parallel interface  **************/
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
34185058:	68fb      	ldr	r3, [r7, #12]
3418505a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418505e:	2b00      	cmp	r3, #0
34185060:	d01f      	beq.n	341850a2 <HAL_DCMIPP_IRQHandler+0x376>
  {
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
34185062:	68bb      	ldr	r3, [r7, #8]
34185064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34185068:	2b00      	cmp	r3, #0
3418506a:	d01a      	beq.n	341850a2 <HAL_DCMIPP_IRQHandler+0x376>
    {
      /* Disable Synchronization error interrupt on parallel interface */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
3418506c:	687b      	ldr	r3, [r7, #4]
3418506e:	681b      	ldr	r3, [r3, #0]
34185070:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34185074:	687b      	ldr	r3, [r7, #4]
34185076:	681b      	ldr	r3, [r3, #0]
34185078:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
3418507c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34185080:	687b      	ldr	r3, [r7, #4]
34185082:	689b      	ldr	r3, [r3, #8]
34185084:	f043 0202 	orr.w	r2, r3, #2
34185088:	687b      	ldr	r3, [r7, #4]
3418508a:	609a      	str	r2, [r3, #8]

      /* Clear the synchronization error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
3418508c:	687b      	ldr	r3, [r7, #4]
3418508e:	681b      	ldr	r3, [r3, #0]
34185090:	2240      	movs	r2, #64	@ 0x40
34185092:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34185096:	687b      	ldr	r3, [r7, #4]
34185098:	2204      	movs	r2, #4
3418509a:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3418509c:	6878      	ldr	r0, [r7, #4]
3418509e:	f7fd fcab 	bl	341829f8 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* IPPLUG AXI transfer Error Interrupt     *********************************/
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
341850a2:	68fb      	ldr	r3, [r7, #12]
341850a4:	f003 0320 	and.w	r3, r3, #32
341850a8:	2b00      	cmp	r3, #0
341850aa:	d01f      	beq.n	341850ec <HAL_DCMIPP_IRQHandler+0x3c0>
  {
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
341850ac:	68bb      	ldr	r3, [r7, #8]
341850ae:	f003 0320 	and.w	r3, r3, #32
341850b2:	2b00      	cmp	r3, #0
341850b4:	d01a      	beq.n	341850ec <HAL_DCMIPP_IRQHandler+0x3c0>
    {
      /* Disable IPPLUG AXI transfer Error Interrupt */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
341850b6:	687b      	ldr	r3, [r7, #4]
341850b8:	681b      	ldr	r3, [r3, #0]
341850ba:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
341850be:	687b      	ldr	r3, [r7, #4]
341850c0:	681b      	ldr	r3, [r3, #0]
341850c2:	f022 0220 	bic.w	r2, r2, #32
341850c6:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
341850ca:	687b      	ldr	r3, [r7, #4]
341850cc:	689b      	ldr	r3, [r3, #8]
341850ce:	f043 0201 	orr.w	r2, r3, #1
341850d2:	687b      	ldr	r3, [r7, #4]
341850d4:	609a      	str	r2, [r3, #8]

      /* Clear the AXI transfer error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
341850d6:	687b      	ldr	r3, [r7, #4]
341850d8:	681b      	ldr	r3, [r3, #0]
341850da:	2220      	movs	r2, #32
341850dc:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
341850e0:	687b      	ldr	r3, [r7, #4]
341850e2:	2204      	movs	r2, #4
341850e4:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
341850e6:	6878      	ldr	r0, [r7, #4]
341850e8:	f7fd fc86 	bl	341829f8 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
341850ec:	bf00      	nop
341850ee:	3710      	adds	r7, #16
341850f0:	46bd      	mov	sp, r7
341850f2:	bd80      	pop	{r7, pc}

341850f4 <HAL_DCMIPP_CSI_IRQHandler>:
  * @brief  Handles DCMIPP CSI interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_CSI_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
341850f4:	b580      	push	{r7, lr}
341850f6:	b088      	sub	sp, #32
341850f8:	af00      	add	r7, sp, #0
341850fa:	6078      	str	r0, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
341850fc:	4bb1      	ldr	r3, [pc, #708]	@ (341853c4 <HAL_DCMIPP_CSI_IRQHandler+0x2d0>)
341850fe:	61fb      	str	r3, [r7, #28]

  /* Read the SR0 register once */
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34185100:	69fb      	ldr	r3, [r7, #28]
34185102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34185106:	61bb      	str	r3, [r7, #24]
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
34185108:	69fb      	ldr	r3, [r7, #28]
3418510a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418510e:	617b      	str	r3, [r7, #20]

  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
34185110:	69fb      	ldr	r3, [r7, #28]
34185112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185116:	613b      	str	r3, [r7, #16]
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
34185118:	69fb      	ldr	r3, [r7, #28]
3418511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418511e:	60fb      	str	r3, [r7, #12]

  /* Clock changer FIFO full event */
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34185120:	69bb      	ldr	r3, [r7, #24]
34185122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34185126:	2b00      	cmp	r3, #0
34185128:	d014      	beq.n	34185154 <HAL_DCMIPP_CSI_IRQHandler+0x60>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
3418512a:	693b      	ldr	r3, [r7, #16]
3418512c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34185130:	2b00      	cmp	r3, #0
34185132:	d00f      	beq.n	34185154 <HAL_DCMIPP_CSI_IRQHandler+0x60>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
34185134:	69fb      	ldr	r3, [r7, #28]
34185136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418513a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
3418513e:	69fb      	ldr	r3, [r7, #28]
34185140:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34185144:	69fb      	ldr	r3, [r7, #28]
34185146:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3418514a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ClockChangerFifoFullEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
3418514e:	6878      	ldr	r0, [r7, #4]
34185150:	f000 fc90 	bl	34185a74 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  }

  /*###############################
     Byte/Line Counter Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34185154:	69bb      	ldr	r3, [r7, #24]
34185156:	f003 0308 	and.w	r3, r3, #8
3418515a:	2b00      	cmp	r3, #0
3418515c:	d01c      	beq.n	34185198 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
3418515e:	693b      	ldr	r3, [r7, #16]
34185160:	f003 0308 	and.w	r3, r3, #8
34185164:	2b00      	cmp	r3, #0
34185166:	d017      	beq.n	34185198 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185168:	687b      	ldr	r3, [r7, #4]
3418516a:	681b      	ldr	r3, [r3, #0]
3418516c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185170:	f003 0304 	and.w	r3, r3, #4
34185174:	2b04      	cmp	r3, #4
34185176:	d107      	bne.n	34185188 <HAL_DCMIPP_CSI_IRQHandler+0x94>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34185178:	69fb      	ldr	r3, [r7, #28]
3418517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418517e:	f023 0208 	bic.w	r2, r3, #8
34185182:	69fb      	ldr	r3, [r7, #28]
34185184:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34185188:	69fb      	ldr	r3, [r7, #28]
3418518a:	2208      	movs	r2, #8
3418518c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34185190:	2103      	movs	r1, #3
34185192:	6878      	ldr	r0, [r7, #4]
34185194:	f000 fca3 	bl	34185ade <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34185198:	69bb      	ldr	r3, [r7, #24]
3418519a:	f003 0304 	and.w	r3, r3, #4
3418519e:	2b00      	cmp	r3, #0
341851a0:	d01c      	beq.n	341851dc <HAL_DCMIPP_CSI_IRQHandler+0xe8>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
341851a2:	693b      	ldr	r3, [r7, #16]
341851a4:	f003 0304 	and.w	r3, r3, #4
341851a8:	2b00      	cmp	r3, #0
341851aa:	d017      	beq.n	341851dc <HAL_DCMIPP_CSI_IRQHandler+0xe8>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341851ac:	687b      	ldr	r3, [r7, #4]
341851ae:	681b      	ldr	r3, [r3, #0]
341851b0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341851b4:	f003 0304 	and.w	r3, r3, #4
341851b8:	2b04      	cmp	r3, #4
341851ba:	d107      	bne.n	341851cc <HAL_DCMIPP_CSI_IRQHandler+0xd8>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
341851bc:	69fb      	ldr	r3, [r7, #28]
341851be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341851c2:	f023 0204 	bic.w	r2, r3, #4
341851c6:	69fb      	ldr	r3, [r7, #28]
341851c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
341851cc:	69fb      	ldr	r3, [r7, #28]
341851ce:	2204      	movs	r2, #4
341851d0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
341851d4:	2102      	movs	r1, #2
341851d6:	6878      	ldr	r0, [r7, #4]
341851d8:	f000 fc81 	bl	34185ade <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
341851dc:	69bb      	ldr	r3, [r7, #24]
341851de:	f003 0302 	and.w	r3, r3, #2
341851e2:	2b00      	cmp	r3, #0
341851e4:	d01c      	beq.n	34185220 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
341851e6:	693b      	ldr	r3, [r7, #16]
341851e8:	f003 0302 	and.w	r3, r3, #2
341851ec:	2b00      	cmp	r3, #0
341851ee:	d017      	beq.n	34185220 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341851f0:	687b      	ldr	r3, [r7, #4]
341851f2:	681b      	ldr	r3, [r3, #0]
341851f4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341851f8:	f003 0304 	and.w	r3, r3, #4
341851fc:	2b04      	cmp	r3, #4
341851fe:	d107      	bne.n	34185210 <HAL_DCMIPP_CSI_IRQHandler+0x11c>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
34185200:	69fb      	ldr	r3, [r7, #28]
34185202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185206:	f023 0202 	bic.w	r2, r3, #2
3418520a:	69fb      	ldr	r3, [r7, #28]
3418520c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
34185210:	69fb      	ldr	r3, [r7, #28]
34185212:	2202      	movs	r2, #2
34185214:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34185218:	2101      	movs	r1, #1
3418521a:	6878      	ldr	r0, [r7, #4]
3418521c:	f000 fc5f 	bl	34185ade <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
34185220:	69bb      	ldr	r3, [r7, #24]
34185222:	f003 0301 	and.w	r3, r3, #1
34185226:	2b00      	cmp	r3, #0
34185228:	d01c      	beq.n	34185264 <HAL_DCMIPP_CSI_IRQHandler+0x170>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
3418522a:	693b      	ldr	r3, [r7, #16]
3418522c:	f003 0301 	and.w	r3, r3, #1
34185230:	2b00      	cmp	r3, #0
34185232:	d017      	beq.n	34185264 <HAL_DCMIPP_CSI_IRQHandler+0x170>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185234:	687b      	ldr	r3, [r7, #4]
34185236:	681b      	ldr	r3, [r3, #0]
34185238:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3418523c:	f003 0304 	and.w	r3, r3, #4
34185240:	2b04      	cmp	r3, #4
34185242:	d107      	bne.n	34185254 <HAL_DCMIPP_CSI_IRQHandler+0x160>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34185244:	69fb      	ldr	r3, [r7, #28]
34185246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418524a:	f023 0201 	bic.w	r2, r3, #1
3418524e:	69fb      	ldr	r3, [r7, #28]
34185250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34185254:	69fb      	ldr	r3, [r7, #28]
34185256:	2201      	movs	r2, #1
34185258:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
3418525c:	2100      	movs	r1, #0
3418525e:	6878      	ldr	r0, [r7, #4]
34185260:	f000 fc3d 	bl	34185ade <HAL_DCMIPP_CSI_LineByteEventCallback>
  }

  /*###############################
            End Of Frame
    ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34185264:	69bb      	ldr	r3, [r7, #24]
34185266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418526a:	2b00      	cmp	r3, #0
3418526c:	d01d      	beq.n	341852aa <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
3418526e:	693b      	ldr	r3, [r7, #16]
34185270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34185274:	2b00      	cmp	r3, #0
34185276:	d018      	beq.n	341852aa <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185278:	687b      	ldr	r3, [r7, #4]
3418527a:	681b      	ldr	r3, [r3, #0]
3418527c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185280:	f003 0304 	and.w	r3, r3, #4
34185284:	2b04      	cmp	r3, #4
34185286:	d107      	bne.n	34185298 <HAL_DCMIPP_CSI_IRQHandler+0x1a4>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34185288:	69fb      	ldr	r3, [r7, #28]
3418528a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418528e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34185292:	69fb      	ldr	r3, [r7, #28]
34185294:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34185298:	69fb      	ldr	r3, [r7, #28]
3418529a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418529e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
341852a2:	2103      	movs	r1, #3
341852a4:	6878      	ldr	r0, [r7, #4]
341852a6:	f000 fbf9 	bl	34185a9c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
341852aa:	69bb      	ldr	r3, [r7, #24]
341852ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
341852b0:	2b00      	cmp	r3, #0
341852b2:	d01d      	beq.n	341852f0 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
341852b4:	693b      	ldr	r3, [r7, #16]
341852b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
341852ba:	2b00      	cmp	r3, #0
341852bc:	d018      	beq.n	341852f0 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341852be:	687b      	ldr	r3, [r7, #4]
341852c0:	681b      	ldr	r3, [r3, #0]
341852c2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341852c6:	f003 0304 	and.w	r3, r3, #4
341852ca:	2b04      	cmp	r3, #4
341852cc:	d107      	bne.n	341852de <HAL_DCMIPP_CSI_IRQHandler+0x1ea>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
341852ce:	69fb      	ldr	r3, [r7, #28]
341852d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341852d4:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
341852d8:	69fb      	ldr	r3, [r7, #28]
341852da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
341852de:	69fb      	ldr	r3, [r7, #28]
341852e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
341852e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
341852e8:	2102      	movs	r1, #2
341852ea:	6878      	ldr	r0, [r7, #4]
341852ec:	f000 fbd6 	bl	34185a9c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
341852f0:	69bb      	ldr	r3, [r7, #24]
341852f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
341852f6:	2b00      	cmp	r3, #0
341852f8:	d01d      	beq.n	34185336 <HAL_DCMIPP_CSI_IRQHandler+0x242>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
341852fa:	693b      	ldr	r3, [r7, #16]
341852fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34185300:	2b00      	cmp	r3, #0
34185302:	d018      	beq.n	34185336 <HAL_DCMIPP_CSI_IRQHandler+0x242>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185304:	687b      	ldr	r3, [r7, #4]
34185306:	681b      	ldr	r3, [r3, #0]
34185308:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3418530c:	f003 0304 	and.w	r3, r3, #4
34185310:	2b04      	cmp	r3, #4
34185312:	d107      	bne.n	34185324 <HAL_DCMIPP_CSI_IRQHandler+0x230>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34185314:	69fb      	ldr	r3, [r7, #28]
34185316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418531a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
3418531e:	69fb      	ldr	r3, [r7, #28]
34185320:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34185324:	69fb      	ldr	r3, [r7, #28]
34185326:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418532a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
3418532e:	2101      	movs	r1, #1
34185330:	6878      	ldr	r0, [r7, #4]
34185332:	f000 fbb3 	bl	34185a9c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
34185336:	69bb      	ldr	r3, [r7, #24]
34185338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418533c:	2b00      	cmp	r3, #0
3418533e:	d01d      	beq.n	3418537c <HAL_DCMIPP_CSI_IRQHandler+0x288>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34185340:	693b      	ldr	r3, [r7, #16]
34185342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34185346:	2b00      	cmp	r3, #0
34185348:	d018      	beq.n	3418537c <HAL_DCMIPP_CSI_IRQHandler+0x288>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3418534a:	687b      	ldr	r3, [r7, #4]
3418534c:	681b      	ldr	r3, [r3, #0]
3418534e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185352:	f003 0304 	and.w	r3, r3, #4
34185356:	2b04      	cmp	r3, #4
34185358:	d107      	bne.n	3418536a <HAL_DCMIPP_CSI_IRQHandler+0x276>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
3418535a:	69fb      	ldr	r3, [r7, #28]
3418535c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185360:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34185364:	69fb      	ldr	r3, [r7, #28]
34185366:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
3418536a:	69fb      	ldr	r3, [r7, #28]
3418536c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34185370:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_CSIREGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34185374:	2100      	movs	r1, #0
34185376:	6878      	ldr	r0, [r7, #4]
34185378:	f000 fb90 	bl	34185a9c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  }

  /*###############################
           Start Of Frame
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
3418537c:	69bb      	ldr	r3, [r7, #24]
3418537e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34185382:	2b00      	cmp	r3, #0
34185384:	d020      	beq.n	341853c8 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34185386:	693b      	ldr	r3, [r7, #16]
34185388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418538c:	2b00      	cmp	r3, #0
3418538e:	d01b      	beq.n	341853c8 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185390:	687b      	ldr	r3, [r7, #4]
34185392:	681b      	ldr	r3, [r3, #0]
34185394:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185398:	f003 0304 	and.w	r3, r3, #4
3418539c:	2b04      	cmp	r3, #4
3418539e:	d107      	bne.n	341853b0 <HAL_DCMIPP_CSI_IRQHandler+0x2bc>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
341853a0:	69fb      	ldr	r3, [r7, #28]
341853a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341853a6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
341853aa:	69fb      	ldr	r3, [r7, #28]
341853ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
341853b0:	69fb      	ldr	r3, [r7, #28]
341853b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
341853b6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
341853ba:	2103      	movs	r1, #3
341853bc:	6878      	ldr	r0, [r7, #4]
341853be:	f000 fb78 	bl	34185ab2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
341853c2:	e001      	b.n	341853c8 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
341853c4:	58006000 	.word	0x58006000
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
341853c8:	69bb      	ldr	r3, [r7, #24]
341853ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341853ce:	2b00      	cmp	r3, #0
341853d0:	d01d      	beq.n	3418540e <HAL_DCMIPP_CSI_IRQHandler+0x31a>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
341853d2:	693b      	ldr	r3, [r7, #16]
341853d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341853d8:	2b00      	cmp	r3, #0
341853da:	d018      	beq.n	3418540e <HAL_DCMIPP_CSI_IRQHandler+0x31a>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341853dc:	687b      	ldr	r3, [r7, #4]
341853de:	681b      	ldr	r3, [r3, #0]
341853e0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341853e4:	f003 0304 	and.w	r3, r3, #4
341853e8:	2b04      	cmp	r3, #4
341853ea:	d107      	bne.n	341853fc <HAL_DCMIPP_CSI_IRQHandler+0x308>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
341853ec:	69fb      	ldr	r3, [r7, #28]
341853ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341853f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
341853f6:	69fb      	ldr	r3, [r7, #28]
341853f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
341853fc:	69fb      	ldr	r3, [r7, #28]
341853fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34185402:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34185406:	2102      	movs	r1, #2
34185408:	6878      	ldr	r0, [r7, #4]
3418540a:	f000 fb52 	bl	34185ab2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
3418540e:	69bb      	ldr	r3, [r7, #24]
34185410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34185414:	2b00      	cmp	r3, #0
34185416:	d01d      	beq.n	34185454 <HAL_DCMIPP_CSI_IRQHandler+0x360>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34185418:	693b      	ldr	r3, [r7, #16]
3418541a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418541e:	2b00      	cmp	r3, #0
34185420:	d018      	beq.n	34185454 <HAL_DCMIPP_CSI_IRQHandler+0x360>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185422:	687b      	ldr	r3, [r7, #4]
34185424:	681b      	ldr	r3, [r3, #0]
34185426:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3418542a:	f003 0304 	and.w	r3, r3, #4
3418542e:	2b04      	cmp	r3, #4
34185430:	d107      	bne.n	34185442 <HAL_DCMIPP_CSI_IRQHandler+0x34e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34185432:	69fb      	ldr	r3, [r7, #28]
34185434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185438:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3418543c:	69fb      	ldr	r3, [r7, #28]
3418543e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34185442:	69fb      	ldr	r3, [r7, #28]
34185444:	f44f 7200 	mov.w	r2, #512	@ 0x200
34185448:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
3418544c:	2101      	movs	r1, #1
3418544e:	6878      	ldr	r0, [r7, #4]
34185450:	f000 fb2f 	bl	34185ab2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34185454:	69bb      	ldr	r3, [r7, #24]
34185456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418545a:	2b00      	cmp	r3, #0
3418545c:	d01d      	beq.n	3418549a <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
3418545e:	693b      	ldr	r3, [r7, #16]
34185460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34185464:	2b00      	cmp	r3, #0
34185466:	d018      	beq.n	3418549a <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185468:	687b      	ldr	r3, [r7, #4]
3418546a:	681b      	ldr	r3, [r3, #0]
3418546c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185470:	f003 0304 	and.w	r3, r3, #4
34185474:	2b04      	cmp	r3, #4
34185476:	d107      	bne.n	34185488 <HAL_DCMIPP_CSI_IRQHandler+0x394>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34185478:	69fb      	ldr	r3, [r7, #28]
3418547a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418547e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34185482:	69fb      	ldr	r3, [r7, #28]
34185484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34185488:	69fb      	ldr	r3, [r7, #28]
3418548a:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418548e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34185492:	2100      	movs	r1, #0
34185494:	6878      	ldr	r0, [r7, #4]
34185496:	f000 fb0c 	bl	34185ab2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  }

  /*###############################
           Timer Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
3418549a:	69bb      	ldr	r3, [r7, #24]
3418549c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
341854a0:	2b00      	cmp	r3, #0
341854a2:	d01c      	beq.n	341854de <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
341854a4:	693b      	ldr	r3, [r7, #16]
341854a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
341854aa:	2b00      	cmp	r3, #0
341854ac:	d017      	beq.n	341854de <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341854ae:	687b      	ldr	r3, [r7, #4]
341854b0:	681b      	ldr	r3, [r3, #0]
341854b2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341854b6:	f003 0304 	and.w	r3, r3, #4
341854ba:	2b04      	cmp	r3, #4
341854bc:	d107      	bne.n	341854ce <HAL_DCMIPP_CSI_IRQHandler+0x3da>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
341854be:	69fb      	ldr	r3, [r7, #28]
341854c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341854c4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
341854c8:	69fb      	ldr	r3, [r7, #28]
341854ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
341854ce:	69fb      	ldr	r3, [r7, #28]
341854d0:	2280      	movs	r2, #128	@ 0x80
341854d2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
341854d6:	2103      	movs	r1, #3
341854d8:	6878      	ldr	r0, [r7, #4]
341854da:	f000 faf5 	bl	34185ac8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
341854de:	69bb      	ldr	r3, [r7, #24]
341854e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341854e4:	2b00      	cmp	r3, #0
341854e6:	d01c      	beq.n	34185522 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
341854e8:	693b      	ldr	r3, [r7, #16]
341854ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341854ee:	2b00      	cmp	r3, #0
341854f0:	d017      	beq.n	34185522 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341854f2:	687b      	ldr	r3, [r7, #4]
341854f4:	681b      	ldr	r3, [r3, #0]
341854f6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341854fa:	f003 0304 	and.w	r3, r3, #4
341854fe:	2b04      	cmp	r3, #4
34185500:	d107      	bne.n	34185512 <HAL_DCMIPP_CSI_IRQHandler+0x41e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34185502:	69fb      	ldr	r3, [r7, #28]
34185504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185508:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
3418550c:	69fb      	ldr	r3, [r7, #28]
3418550e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34185512:	69fb      	ldr	r3, [r7, #28]
34185514:	2240      	movs	r2, #64	@ 0x40
34185516:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
3418551a:	2102      	movs	r1, #2
3418551c:	6878      	ldr	r0, [r7, #4]
3418551e:	f000 fad3 	bl	34185ac8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34185522:	69bb      	ldr	r3, [r7, #24]
34185524:	f003 0320 	and.w	r3, r3, #32
34185528:	2b00      	cmp	r3, #0
3418552a:	d01c      	beq.n	34185566 <HAL_DCMIPP_CSI_IRQHandler+0x472>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
3418552c:	693b      	ldr	r3, [r7, #16]
3418552e:	f003 0320 	and.w	r3, r3, #32
34185532:	2b00      	cmp	r3, #0
34185534:	d017      	beq.n	34185566 <HAL_DCMIPP_CSI_IRQHandler+0x472>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185536:	687b      	ldr	r3, [r7, #4]
34185538:	681b      	ldr	r3, [r3, #0]
3418553a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3418553e:	f003 0304 	and.w	r3, r3, #4
34185542:	2b04      	cmp	r3, #4
34185544:	d107      	bne.n	34185556 <HAL_DCMIPP_CSI_IRQHandler+0x462>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34185546:	69fb      	ldr	r3, [r7, #28]
34185548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418554c:	f023 0220 	bic.w	r2, r3, #32
34185550:	69fb      	ldr	r3, [r7, #28]
34185552:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34185556:	69fb      	ldr	r3, [r7, #28]
34185558:	2220      	movs	r2, #32
3418555a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
3418555e:	2101      	movs	r1, #1
34185560:	6878      	ldr	r0, [r7, #4]
34185562:	f000 fab1 	bl	34185ac8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34185566:	69bb      	ldr	r3, [r7, #24]
34185568:	f003 0310 	and.w	r3, r3, #16
3418556c:	2b00      	cmp	r3, #0
3418556e:	d01c      	beq.n	341855aa <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34185570:	693b      	ldr	r3, [r7, #16]
34185572:	f003 0310 	and.w	r3, r3, #16
34185576:	2b00      	cmp	r3, #0
34185578:	d017      	beq.n	341855aa <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3418557a:	687b      	ldr	r3, [r7, #4]
3418557c:	681b      	ldr	r3, [r3, #0]
3418557e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185582:	f003 0304 	and.w	r3, r3, #4
34185586:	2b04      	cmp	r3, #4
34185588:	d107      	bne.n	3418559a <HAL_DCMIPP_CSI_IRQHandler+0x4a6>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
3418558a:	69fb      	ldr	r3, [r7, #28]
3418558c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185590:	f023 0210 	bic.w	r2, r3, #16
34185594:	69fb      	ldr	r3, [r7, #28]
34185596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
3418559a:	69fb      	ldr	r3, [r7, #28]
3418559c:	2210      	movs	r2, #16
3418559e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
341855a2:	2100      	movs	r1, #0
341855a4:	6878      	ldr	r0, [r7, #4]
341855a6:	f000 fa8f 	bl	34185ac8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization error  */
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
341855aa:	69bb      	ldr	r3, [r7, #24]
341855ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341855b0:	2b00      	cmp	r3, #0
341855b2:	d01a      	beq.n	341855ea <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
341855b4:	693b      	ldr	r3, [r7, #16]
341855b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341855ba:	2b00      	cmp	r3, #0
341855bc:	d015      	beq.n	341855ea <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
341855be:	69fb      	ldr	r3, [r7, #28]
341855c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341855c4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
341855c8:	69fb      	ldr	r3, [r7, #28]
341855ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
341855ce:	69fb      	ldr	r3, [r7, #28]
341855d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
341855d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
341855d8:	687b      	ldr	r3, [r7, #4]
341855da:	689b      	ldr	r3, [r3, #8]
341855dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
341855e0:	687b      	ldr	r3, [r7, #4]
341855e2:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
341855e4:	6878      	ldr	r0, [r7, #4]
341855e6:	f7fd fa07 	bl	341829f8 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
341855ea:	69bb      	ldr	r3, [r7, #24]
341855ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
341855f0:	2b00      	cmp	r3, #0
341855f2:	d01a      	beq.n	3418562a <HAL_DCMIPP_CSI_IRQHandler+0x536>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
341855f4:	693b      	ldr	r3, [r7, #16]
341855f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
341855fa:	2b00      	cmp	r3, #0
341855fc:	d015      	beq.n	3418562a <HAL_DCMIPP_CSI_IRQHandler+0x536>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
341855fe:	69fb      	ldr	r3, [r7, #28]
34185600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185604:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
34185608:	69fb      	ldr	r3, [r7, #28]
3418560a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
3418560e:	69fb      	ldr	r3, [r7, #28]
34185610:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34185614:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34185618:	687b      	ldr	r3, [r7, #4]
3418561a:	689b      	ldr	r3, [r3, #8]
3418561c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
34185620:	687b      	ldr	r3, [r7, #4]
34185622:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185624:	6878      	ldr	r0, [r7, #4]
34185626:	f7fd f9e7 	bl	341829f8 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
3418562a:	69bb      	ldr	r3, [r7, #24]
3418562c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34185630:	2b00      	cmp	r3, #0
34185632:	d01a      	beq.n	3418566a <HAL_DCMIPP_CSI_IRQHandler+0x576>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34185634:	693b      	ldr	r3, [r7, #16]
34185636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
3418563a:	2b00      	cmp	r3, #0
3418563c:	d015      	beq.n	3418566a <HAL_DCMIPP_CSI_IRQHandler+0x576>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
3418563e:	69fb      	ldr	r3, [r7, #28]
34185640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185644:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
34185648:	69fb      	ldr	r3, [r7, #28]
3418564a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
3418564e:	69fb      	ldr	r3, [r7, #28]
34185650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34185654:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34185658:	687b      	ldr	r3, [r7, #4]
3418565a:	689b      	ldr	r3, [r3, #8]
3418565c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34185660:	687b      	ldr	r3, [r7, #4]
34185662:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185664:	6878      	ldr	r0, [r7, #4]
34185666:	f7fd f9c7 	bl	341829f8 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
3418566a:	69bb      	ldr	r3, [r7, #24]
3418566c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34185670:	2b00      	cmp	r3, #0
34185672:	d01a      	beq.n	341856aa <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34185674:	693b      	ldr	r3, [r7, #16]
34185676:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418567a:	2b00      	cmp	r3, #0
3418567c:	d015      	beq.n	341856aa <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
3418567e:	69fb      	ldr	r3, [r7, #28]
34185680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185684:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34185688:	69fb      	ldr	r3, [r7, #28]
3418568a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
3418568e:	69fb      	ldr	r3, [r7, #28]
34185690:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34185694:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34185698:	687b      	ldr	r3, [r7, #4]
3418569a:	689b      	ldr	r3, [r3, #8]
3418569c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
341856a0:	687b      	ldr	r3, [r7, #4]
341856a2:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
341856a4:	6878      	ldr	r0, [r7, #4]
341856a6:	f7fd f9a7 	bl	341829f8 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
341856aa:	69bb      	ldr	r3, [r7, #24]
341856ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
341856b0:	2b00      	cmp	r3, #0
341856b2:	d01a      	beq.n	341856ea <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
341856b4:	693b      	ldr	r3, [r7, #16]
341856b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
341856ba:	2b00      	cmp	r3, #0
341856bc:	d015      	beq.n	341856ea <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
341856be:	69fb      	ldr	r3, [r7, #28]
341856c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341856c4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
341856c8:	69fb      	ldr	r3, [r7, #28]
341856ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
341856ce:	69fb      	ldr	r3, [r7, #28]
341856d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
341856d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
341856d8:	687b      	ldr	r3, [r7, #4]
341856da:	689b      	ldr	r3, [r3, #8]
341856dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
341856e0:	687b      	ldr	r3, [r7, #4]
341856e2:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
341856e4:	6878      	ldr	r0, [r7, #4]
341856e6:	f7fd f987 	bl	341829f8 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
341856ea:	69bb      	ldr	r3, [r7, #24]
341856ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
341856f0:	2b00      	cmp	r3, #0
341856f2:	d01a      	beq.n	3418572a <HAL_DCMIPP_CSI_IRQHandler+0x636>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
341856f4:	693b      	ldr	r3, [r7, #16]
341856f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
341856fa:	2b00      	cmp	r3, #0
341856fc:	d015      	beq.n	3418572a <HAL_DCMIPP_CSI_IRQHandler+0x636>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
341856fe:	69fb      	ldr	r3, [r7, #28]
34185700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185704:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34185708:	69fb      	ldr	r3, [r7, #28]
3418570a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
3418570e:	69fb      	ldr	r3, [r7, #28]
34185710:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34185714:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34185718:	687b      	ldr	r3, [r7, #4]
3418571a:	689b      	ldr	r3, [r3, #8]
3418571c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
34185720:	687b      	ldr	r3, [r7, #4]
34185722:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185724:	6878      	ldr	r0, [r7, #4]
34185726:	f7fd f967 	bl	341829f8 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
3418572a:	69bb      	ldr	r3, [r7, #24]
3418572c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34185730:	2b00      	cmp	r3, #0
34185732:	d01a      	beq.n	3418576a <HAL_DCMIPP_CSI_IRQHandler+0x676>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34185734:	693b      	ldr	r3, [r7, #16]
34185736:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3418573a:	2b00      	cmp	r3, #0
3418573c:	d015      	beq.n	3418576a <HAL_DCMIPP_CSI_IRQHandler+0x676>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
3418573e:	69fb      	ldr	r3, [r7, #28]
34185740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185744:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34185748:	69fb      	ldr	r3, [r7, #28]
3418574a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
3418574e:	69fb      	ldr	r3, [r7, #28]
34185750:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34185754:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34185758:	687b      	ldr	r3, [r7, #4]
3418575a:	689b      	ldr	r3, [r3, #8]
3418575c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34185760:	687b      	ldr	r3, [r7, #4]
34185762:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185764:	6878      	ldr	r0, [r7, #4]
34185766:	f7fd f947 	bl	341829f8 <HAL_DCMIPP_ErrorCallback>
    }
  }

  /* Lane 0 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
3418576a:	697b      	ldr	r3, [r7, #20]
3418576c:	f003 0301 	and.w	r3, r3, #1
34185770:	2b00      	cmp	r3, #0
34185772:	d01d      	beq.n	341857b0 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34185774:	68fb      	ldr	r3, [r7, #12]
34185776:	f003 0301 	and.w	r3, r3, #1
3418577a:	2b00      	cmp	r3, #0
3418577c:	d018      	beq.n	341857b0 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
3418577e:	69fb      	ldr	r3, [r7, #28]
34185780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185784:	f023 0201 	bic.w	r2, r3, #1
34185788:	69fb      	ldr	r3, [r7, #28]
3418578a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
3418578e:	69fb      	ldr	r3, [r7, #28]
34185790:	2201      	movs	r2, #1
34185792:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34185796:	687b      	ldr	r3, [r7, #4]
34185798:	689b      	ldr	r3, [r3, #8]
3418579a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
3418579e:	687b      	ldr	r3, [r7, #4]
341857a0:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
341857a2:	687b      	ldr	r3, [r7, #4]
341857a4:	2204      	movs	r2, #4
341857a6:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
341857a8:	2101      	movs	r1, #1
341857aa:	6878      	ldr	r0, [r7, #4]
341857ac:	f000 f957 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
341857b0:	697b      	ldr	r3, [r7, #20]
341857b2:	f003 0302 	and.w	r3, r3, #2
341857b6:	2b00      	cmp	r3, #0
341857b8:	d01d      	beq.n	341857f6 <HAL_DCMIPP_CSI_IRQHandler+0x702>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
341857ba:	68fb      	ldr	r3, [r7, #12]
341857bc:	f003 0302 	and.w	r3, r3, #2
341857c0:	2b00      	cmp	r3, #0
341857c2:	d018      	beq.n	341857f6 <HAL_DCMIPP_CSI_IRQHandler+0x702>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
341857c4:	69fb      	ldr	r3, [r7, #28]
341857c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341857ca:	f023 0202 	bic.w	r2, r3, #2
341857ce:	69fb      	ldr	r3, [r7, #28]
341857d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
341857d4:	69fb      	ldr	r3, [r7, #28]
341857d6:	2202      	movs	r2, #2
341857d8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
341857dc:	687b      	ldr	r3, [r7, #4]
341857de:	689b      	ldr	r3, [r3, #8]
341857e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
341857e4:	687b      	ldr	r3, [r7, #4]
341857e6:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
341857e8:	687b      	ldr	r3, [r7, #4]
341857ea:	2204      	movs	r2, #4
341857ec:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
341857ee:	2101      	movs	r1, #1
341857f0:	6878      	ldr	r0, [r7, #4]
341857f2:	f000 f934 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
341857f6:	697b      	ldr	r3, [r7, #20]
341857f8:	f003 0304 	and.w	r3, r3, #4
341857fc:	2b00      	cmp	r3, #0
341857fe:	d01a      	beq.n	34185836 <HAL_DCMIPP_CSI_IRQHandler+0x742>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34185800:	68fb      	ldr	r3, [r7, #12]
34185802:	f003 0304 	and.w	r3, r3, #4
34185806:	2b00      	cmp	r3, #0
34185808:	d015      	beq.n	34185836 <HAL_DCMIPP_CSI_IRQHandler+0x742>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
3418580a:	69fb      	ldr	r3, [r7, #28]
3418580c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185810:	f023 0204 	bic.w	r2, r3, #4
34185814:	69fb      	ldr	r3, [r7, #28]
34185816:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
3418581a:	69fb      	ldr	r3, [r7, #28]
3418581c:	2204      	movs	r2, #4
3418581e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34185822:	687b      	ldr	r3, [r7, #4]
34185824:	689b      	ldr	r3, [r3, #8]
34185826:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
3418582a:	687b      	ldr	r3, [r7, #4]
3418582c:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3418582e:	2101      	movs	r1, #1
34185830:	6878      	ldr	r0, [r7, #4]
34185832:	f000 f914 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34185836:	697b      	ldr	r3, [r7, #20]
34185838:	f003 0308 	and.w	r3, r3, #8
3418583c:	2b00      	cmp	r3, #0
3418583e:	d01a      	beq.n	34185876 <HAL_DCMIPP_CSI_IRQHandler+0x782>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34185840:	68fb      	ldr	r3, [r7, #12]
34185842:	f003 0308 	and.w	r3, r3, #8
34185846:	2b00      	cmp	r3, #0
34185848:	d015      	beq.n	34185876 <HAL_DCMIPP_CSI_IRQHandler+0x782>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
3418584a:	69fb      	ldr	r3, [r7, #28]
3418584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185850:	f023 0208 	bic.w	r2, r3, #8
34185854:	69fb      	ldr	r3, [r7, #28]
34185856:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
3418585a:	69fb      	ldr	r3, [r7, #28]
3418585c:	2208      	movs	r2, #8
3418585e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34185862:	687b      	ldr	r3, [r7, #4]
34185864:	689b      	ldr	r3, [r3, #8]
34185866:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
3418586a:	687b      	ldr	r3, [r7, #4]
3418586c:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3418586e:	2101      	movs	r1, #1
34185870:	6878      	ldr	r0, [r7, #4]
34185872:	f000 f8f4 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34185876:	697b      	ldr	r3, [r7, #20]
34185878:	f003 0310 	and.w	r3, r3, #16
3418587c:	2b00      	cmp	r3, #0
3418587e:	d01a      	beq.n	341858b6 <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34185880:	68fb      	ldr	r3, [r7, #12]
34185882:	f003 0310 	and.w	r3, r3, #16
34185886:	2b00      	cmp	r3, #0
34185888:	d015      	beq.n	341858b6 <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
3418588a:	69fb      	ldr	r3, [r7, #28]
3418588c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185890:	f023 0210 	bic.w	r2, r3, #16
34185894:	69fb      	ldr	r3, [r7, #28]
34185896:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
3418589a:	69fb      	ldr	r3, [r7, #28]
3418589c:	2210      	movs	r2, #16
3418589e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
341858a2:	687b      	ldr	r3, [r7, #4]
341858a4:	689b      	ldr	r3, [r3, #8]
341858a6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
341858aa:	687b      	ldr	r3, [r7, #4]
341858ac:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
341858ae:	2101      	movs	r1, #1
341858b0:	6878      	ldr	r0, [r7, #4]
341858b2:	f000 f8d4 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
    }
  }

  /* Lane 1 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
341858b6:	697b      	ldr	r3, [r7, #20]
341858b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341858bc:	2b00      	cmp	r3, #0
341858be:	d01e      	beq.n	341858fe <HAL_DCMIPP_CSI_IRQHandler+0x80a>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
341858c0:	68fb      	ldr	r3, [r7, #12]
341858c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341858c6:	2b00      	cmp	r3, #0
341858c8:	d019      	beq.n	341858fe <HAL_DCMIPP_CSI_IRQHandler+0x80a>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
341858ca:	69fb      	ldr	r3, [r7, #28]
341858cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341858d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
341858d4:	69fb      	ldr	r3, [r7, #28]
341858d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
341858da:	69fb      	ldr	r3, [r7, #28]
341858dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
341858e0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
341858e4:	687b      	ldr	r3, [r7, #4]
341858e6:	689b      	ldr	r3, [r3, #8]
341858e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
341858ec:	687b      	ldr	r3, [r7, #4]
341858ee:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
341858f0:	687b      	ldr	r3, [r7, #4]
341858f2:	2204      	movs	r2, #4
341858f4:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
341858f6:	2102      	movs	r1, #2
341858f8:	6878      	ldr	r0, [r7, #4]
341858fa:	f000 f8b0 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
341858fe:	697b      	ldr	r3, [r7, #20]
34185900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34185904:	2b00      	cmp	r3, #0
34185906:	d01e      	beq.n	34185946 <HAL_DCMIPP_CSI_IRQHandler+0x852>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34185908:	68fb      	ldr	r3, [r7, #12]
3418590a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418590e:	2b00      	cmp	r3, #0
34185910:	d019      	beq.n	34185946 <HAL_DCMIPP_CSI_IRQHandler+0x852>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34185912:	69fb      	ldr	r3, [r7, #28]
34185914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185918:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3418591c:	69fb      	ldr	r3, [r7, #28]
3418591e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34185922:	69fb      	ldr	r3, [r7, #28]
34185924:	f44f 7200 	mov.w	r2, #512	@ 0x200
34185928:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
3418592c:	687b      	ldr	r3, [r7, #4]
3418592e:	689b      	ldr	r3, [r3, #8]
34185930:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34185934:	687b      	ldr	r3, [r7, #4]
34185936:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34185938:	687b      	ldr	r3, [r7, #4]
3418593a:	2204      	movs	r2, #4
3418593c:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3418593e:	2102      	movs	r1, #2
34185940:	6878      	ldr	r0, [r7, #4]
34185942:	f000 f88c 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34185946:	697b      	ldr	r3, [r7, #20]
34185948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418594c:	2b00      	cmp	r3, #0
3418594e:	d01b      	beq.n	34185988 <HAL_DCMIPP_CSI_IRQHandler+0x894>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34185950:	68fb      	ldr	r3, [r7, #12]
34185952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34185956:	2b00      	cmp	r3, #0
34185958:	d016      	beq.n	34185988 <HAL_DCMIPP_CSI_IRQHandler+0x894>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3418595a:	69fb      	ldr	r3, [r7, #28]
3418595c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185960:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34185964:	69fb      	ldr	r3, [r7, #28]
34185966:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
3418596a:	69fb      	ldr	r3, [r7, #28]
3418596c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34185970:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34185974:	687b      	ldr	r3, [r7, #4]
34185976:	689b      	ldr	r3, [r3, #8]
34185978:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
3418597c:	687b      	ldr	r3, [r7, #4]
3418597e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34185980:	2102      	movs	r1, #2
34185982:	6878      	ldr	r0, [r7, #4]
34185984:	f000 f86b 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34185988:	697b      	ldr	r3, [r7, #20]
3418598a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418598e:	2b00      	cmp	r3, #0
34185990:	d01b      	beq.n	341859ca <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34185992:	68fb      	ldr	r3, [r7, #12]
34185994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34185998:	2b00      	cmp	r3, #0
3418599a:	d016      	beq.n	341859ca <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
3418599c:	69fb      	ldr	r3, [r7, #28]
3418599e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341859a2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
341859a6:	69fb      	ldr	r3, [r7, #28]
341859a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
341859ac:	69fb      	ldr	r3, [r7, #28]
341859ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
341859b2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
341859b6:	687b      	ldr	r3, [r7, #4]
341859b8:	689b      	ldr	r3, [r3, #8]
341859ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
341859be:	687b      	ldr	r3, [r7, #4]
341859c0:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
341859c2:	2102      	movs	r1, #2
341859c4:	6878      	ldr	r0, [r7, #4]
341859c6:	f000 f84a 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
341859ca:	697b      	ldr	r3, [r7, #20]
341859cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
341859d0:	2b00      	cmp	r3, #0
341859d2:	d01b      	beq.n	34185a0c <HAL_DCMIPP_CSI_IRQHandler+0x918>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
341859d4:	68fb      	ldr	r3, [r7, #12]
341859d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
341859da:	2b00      	cmp	r3, #0
341859dc:	d016      	beq.n	34185a0c <HAL_DCMIPP_CSI_IRQHandler+0x918>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
341859de:	69fb      	ldr	r3, [r7, #28]
341859e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341859e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
341859e8:	69fb      	ldr	r3, [r7, #28]
341859ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
341859ee:	69fb      	ldr	r3, [r7, #28]
341859f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
341859f4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
341859f8:	687b      	ldr	r3, [r7, #4]
341859fa:	689b      	ldr	r3, [r3, #8]
341859fc:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34185a00:	687b      	ldr	r3, [r7, #4]
34185a02:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34185a04:	2102      	movs	r1, #2
34185a06:	6878      	ldr	r0, [r7, #4]
34185a08:	f000 f829 	bl	34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
34185a0c:	69bb      	ldr	r3, [r7, #24]
34185a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34185a12:	2b00      	cmp	r3, #0
34185a14:	d014      	beq.n	34185a40 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
34185a16:	693b      	ldr	r3, [r7, #16]
34185a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34185a1c:	2b00      	cmp	r3, #0
34185a1e:	d00f      	beq.n	34185a40 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34185a20:	69fb      	ldr	r3, [r7, #28]
34185a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185a26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
34185a2a:	69fb      	ldr	r3, [r7, #28]
34185a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
34185a30:	69fb      	ldr	r3, [r7, #28]
34185a32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34185a36:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ShortPacketDetectionEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34185a3a:	6878      	ldr	r0, [r7, #4]
34185a3c:	f000 f824 	bl	34185a88 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34185a40:	bf00      	nop
34185a42:	3720      	adds	r7, #32
34185a44:	46bd      	mov	sp, r7
34185a46:	bd80      	pop	{r7, pc}

34185a48 <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185a48:	b480      	push	{r7}
34185a4a:	b083      	sub	sp, #12
34185a4c:	af00      	add	r7, sp, #0
34185a4e:	6078      	str	r0, [r7, #4]
34185a50:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LimitEventDumpPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34185a52:	bf00      	nop
34185a54:	370c      	adds	r7, #12
34185a56:	46bd      	mov	sp, r7
34185a58:	f85d 7b04 	ldr.w	r7, [sp], #4
34185a5c:	4770      	bx	lr

34185a5e <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
{
34185a5e:	b480      	push	{r7}
34185a60:	b083      	sub	sp, #12
34185a62:	af00      	add	r7, sp, #0
34185a64:	6078      	str	r0, [r7, #4]
34185a66:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_LineErrorCallback could be implemented in the user file
   */
  UNUSED(DataLane);
  UNUSED(hdcmipp);
}
34185a68:	bf00      	nop
34185a6a:	370c      	adds	r7, #12
34185a6c:	46bd      	mov	sp, r7
34185a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185a72:	4770      	bx	lr

34185a74 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34185a74:	b480      	push	{r7}
34185a76:	b083      	sub	sp, #12
34185a78:	af00      	add	r7, sp, #0
34185a7a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34185a7c:	bf00      	nop
34185a7e:	370c      	adds	r7, #12
34185a80:	46bd      	mov	sp, r7
34185a82:	f85d 7b04 	ldr.w	r7, [sp], #4
34185a86:	4770      	bx	lr

34185a88 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34185a88:	b480      	push	{r7}
34185a8a:	b083      	sub	sp, #12
34185a8c:	af00      	add	r7, sp, #0
34185a8e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34185a90:	bf00      	nop
34185a92:	370c      	adds	r7, #12
34185a94:	46bd      	mov	sp, r7
34185a96:	f85d 7b04 	ldr.w	r7, [sp], #4
34185a9a:	4770      	bx	lr

34185a9c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
34185a9c:	b480      	push	{r7}
34185a9e:	b083      	sub	sp, #12
34185aa0:	af00      	add	r7, sp, #0
34185aa2:	6078      	str	r0, [r7, #4]
34185aa4:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_EndOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34185aa6:	bf00      	nop
34185aa8:	370c      	adds	r7, #12
34185aaa:	46bd      	mov	sp, r7
34185aac:	f85d 7b04 	ldr.w	r7, [sp], #4
34185ab0:	4770      	bx	lr

34185ab2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
34185ab2:	b480      	push	{r7}
34185ab4:	b083      	sub	sp, #12
34185ab6:	af00      	add	r7, sp, #0
34185ab8:	6078      	str	r0, [r7, #4]
34185aba:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_StartOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34185abc:	bf00      	nop
34185abe:	370c      	adds	r7, #12
34185ac0:	46bd      	mov	sp, r7
34185ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185ac6:	4770      	bx	lr

34185ac8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
{
34185ac8:	b480      	push	{r7}
34185aca:	b083      	sub	sp, #12
34185acc:	af00      	add	r7, sp, #0
34185ace:	6078      	str	r0, [r7, #4]
34185ad0:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_TimerCounterEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(Timer);
}
34185ad2:	bf00      	nop
34185ad4:	370c      	adds	r7, #12
34185ad6:	46bd      	mov	sp, r7
34185ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
34185adc:	4770      	bx	lr

34185ade <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
{
34185ade:	b480      	push	{r7}
34185ae0:	b083      	sub	sp, #12
34185ae2:	af00      	add	r7, sp, #0
34185ae4:	6078      	str	r0, [r7, #4]
34185ae6:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
          the HAL_DCMIPP_CSI_LineByteEventCallback could be implemented in the user file
  */
  UNUSED(hdcmipp);
  UNUSED(Counter);
}
34185ae8:	bf00      	nop
34185aea:	370c      	adds	r7, #12
34185aec:	46bd      	mov	sp, r7
34185aee:	f85d 7b04 	ldr.w	r7, [sp], #4
34185af2:	4770      	bx	lr

34185af4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig>:
  * @param  pDecConfig pointer to DCMIPP_DecimationConfTypeDef structure that contains the decimation information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPDecimationConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                         const DCMIPP_DecimationConfTypeDef *pDecConfig)
{
34185af4:	b480      	push	{r7}
34185af6:	b085      	sub	sp, #20
34185af8:	af00      	add	r7, sp, #0
34185afa:	60f8      	str	r0, [r7, #12]
34185afc:	60b9      	str	r1, [r7, #8]
34185afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_VRATIO(pDecConfig->VRatio));
  assert_param(IS_DCMIPP_HRATIO(pDecConfig->HRatio));

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pDecConfig == NULL))
34185b00:	68fb      	ldr	r3, [r7, #12]
34185b02:	2b00      	cmp	r3, #0
34185b04:	d002      	beq.n	34185b0c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x18>
34185b06:	687b      	ldr	r3, [r7, #4]
34185b08:	2b00      	cmp	r3, #0
34185b0a:	d101      	bne.n	34185b10 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x1c>
  {
    return HAL_ERROR;
34185b0c:	2301      	movs	r3, #1
34185b0e:	e01c      	b.n	34185b4a <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x56>
  }

  /* Set Decimation Type , Vertical and Horizontal Ratio */
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34185b10:	68fb      	ldr	r3, [r7, #12]
34185b12:	791b      	ldrb	r3, [r3, #4]
34185b14:	b2db      	uxtb	r3, r3
34185b16:	2b02      	cmp	r3, #2
34185b18:	d116      	bne.n	34185b48 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x54>
  {
    if (Pipe == DCMIPP_PIPE1)
34185b1a:	68bb      	ldr	r3, [r7, #8]
34185b1c:	2b01      	cmp	r3, #1
34185b1e:	d111      	bne.n	34185b44 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x50>
    {
      MODIFY_REG(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_VDEC | DCMIPP_P1DECR_HDEC,
34185b20:	68fb      	ldr	r3, [r7, #12]
34185b22:	681b      	ldr	r3, [r3, #0]
34185b24:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
34185b28:	f023 011e 	bic.w	r1, r3, #30
34185b2c:	687b      	ldr	r3, [r7, #4]
34185b2e:	681a      	ldr	r2, [r3, #0]
34185b30:	687b      	ldr	r3, [r7, #4]
34185b32:	685b      	ldr	r3, [r3, #4]
34185b34:	431a      	orrs	r2, r3
34185b36:	68fb      	ldr	r3, [r7, #12]
34185b38:	681b      	ldr	r3, [r3, #0]
34185b3a:	430a      	orrs	r2, r1
34185b3c:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  {
    return HAL_ERROR;
  }


  return HAL_OK;
34185b40:	2300      	movs	r3, #0
34185b42:	e002      	b.n	34185b4a <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x56>
      return HAL_ERROR;
34185b44:	2301      	movs	r3, #1
34185b46:	e000      	b.n	34185b4a <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x56>
    return HAL_ERROR;
34185b48:	2301      	movs	r3, #1
}
34185b4a:	4618      	mov	r0, r3
34185b4c:	3714      	adds	r7, #20
34185b4e:	46bd      	mov	sp, r7
34185b50:	f85d 7b04 	ldr.w	r7, [sp], #4
34185b54:	4770      	bx	lr

34185b56 <HAL_DCMIPP_PIPE_EnableISPDecimation>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPDecimation(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185b56:	b480      	push	{r7}
34185b58:	b083      	sub	sp, #12
34185b5a:	af00      	add	r7, sp, #0
34185b5c:	6078      	str	r0, [r7, #4]
34185b5e:	6039      	str	r1, [r7, #0]
  assert_param(IS_DCMIPP_PIPE(Pipe));

  /* Check handle validity */
  if (hdcmipp == NULL)
34185b60:	687b      	ldr	r3, [r7, #4]
34185b62:	2b00      	cmp	r3, #0
34185b64:	d101      	bne.n	34185b6a <HAL_DCMIPP_PIPE_EnableISPDecimation+0x14>
  {
    return HAL_ERROR;
34185b66:	2301      	movs	r3, #1
34185b68:	e00f      	b.n	34185b8a <HAL_DCMIPP_PIPE_EnableISPDecimation+0x34>
  }

  /* Enable decimation */
  if (Pipe == DCMIPP_PIPE1)
34185b6a:	683b      	ldr	r3, [r7, #0]
34185b6c:	2b01      	cmp	r3, #1
34185b6e:	d10b      	bne.n	34185b88 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_ENABLE);
34185b70:	687b      	ldr	r3, [r7, #4]
34185b72:	681b      	ldr	r3, [r3, #0]
34185b74:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
34185b78:	687b      	ldr	r3, [r7, #4]
34185b7a:	681b      	ldr	r3, [r3, #0]
34185b7c:	f042 0201 	orr.w	r2, r2, #1
34185b80:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34185b84:	2300      	movs	r3, #0
34185b86:	e000      	b.n	34185b8a <HAL_DCMIPP_PIPE_EnableISPDecimation+0x34>
    return HAL_ERROR;
34185b88:	2301      	movs	r3, #1
}
34185b8a:	4618      	mov	r0, r3
34185b8c:	370c      	adds	r7, #12
34185b8e:	46bd      	mov	sp, r7
34185b90:	f85d 7b04 	ldr.w	r7, [sp], #4
34185b94:	4770      	bx	lr

34185b96 <HAL_DCMIPP_PIPE_SetDownsizeConfig>:
  * @param  pDownsizeConfig pointer to the DCMIPP_DownsizeTypeDef structure that contains Downsize information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetDownsizeConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                    const DCMIPP_DownsizeTypeDef *pDownsizeConfig)
{
34185b96:	b480      	push	{r7}
34185b98:	b085      	sub	sp, #20
34185b9a:	af00      	add	r7, sp, #0
34185b9c:	60f8      	str	r0, [r7, #12]
34185b9e:	60b9      	str	r1, [r7, #8]
34185ba0:	607a      	str	r2, [r7, #4]
  /* Check handle validity */
  if ((hdcmipp == NULL) || (pDownsizeConfig == NULL))
34185ba2:	68fb      	ldr	r3, [r7, #12]
34185ba4:	2b00      	cmp	r3, #0
34185ba6:	d002      	beq.n	34185bae <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x18>
34185ba8:	687b      	ldr	r3, [r7, #4]
34185baa:	2b00      	cmp	r3, #0
34185bac:	d101      	bne.n	34185bb2 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x1c>
  {
    return HAL_ERROR;
34185bae:	2301      	movs	r3, #1
34185bb0:	e069      	b.n	34185c86 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xf0>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->HRatio));
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->VRatio));
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->HSize));
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->VSize));

  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34185bb2:	68fb      	ldr	r3, [r7, #12]
34185bb4:	791b      	ldrb	r3, [r3, #4]
34185bb6:	b2db      	uxtb	r3, r3
34185bb8:	2b02      	cmp	r3, #2
34185bba:	d161      	bne.n	34185c80 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xea>
  {
    if (Pipe == DCMIPP_PIPE1)
34185bbc:	68bb      	ldr	r3, [r7, #8]
34185bbe:	2b01      	cmp	r3, #1
34185bc0:	d12c      	bne.n	34185c1c <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x86>
    {
      /* Set Vertical and Horizontal division */
      MODIFY_REG(hdcmipp->Instance->P1DSCR, (DCMIPP_P1DSCR_HDIV | DCMIPP_P1DSCR_VDIV),
34185bc2:	68fb      	ldr	r3, [r7, #12]
34185bc4:	681b      	ldr	r3, [r3, #0]
34185bc6:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
34185bca:	f003 21fc 	and.w	r1, r3, #4227922944	@ 0xfc00fc00
34185bce:	687b      	ldr	r3, [r7, #4]
34185bd0:	695a      	ldr	r2, [r3, #20]
34185bd2:	687b      	ldr	r3, [r7, #4]
34185bd4:	691b      	ldr	r3, [r3, #16]
34185bd6:	041b      	lsls	r3, r3, #16
34185bd8:	431a      	orrs	r2, r3
34185bda:	68fb      	ldr	r3, [r7, #12]
34185bdc:	681b      	ldr	r3, [r3, #0]
34185bde:	430a      	orrs	r2, r1
34185be0:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
                 ((pDownsizeConfig->HDivFactor << DCMIPP_P1DSCR_HDIV_Pos) | \
                  (pDownsizeConfig->VDivFactor << DCMIPP_P1DSCR_VDIV_Pos)));

      /* Set Vertical and Horizontal Ratio */
      WRITE_REG(hdcmipp->Instance->P1DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P1DSRTIOR_HRATIO_Pos) | \
34185be4:	687b      	ldr	r3, [r7, #4]
34185be6:	68d9      	ldr	r1, [r3, #12]
34185be8:	687b      	ldr	r3, [r7, #4]
34185bea:	689b      	ldr	r3, [r3, #8]
34185bec:	041a      	lsls	r2, r3, #16
34185bee:	68fb      	ldr	r3, [r7, #12]
34185bf0:	681b      	ldr	r3, [r3, #0]
34185bf2:	430a      	orrs	r2, r1
34185bf4:	f8c3 2914 	str.w	r2, [r3, #2324]	@ 0x914
                (pDownsizeConfig->VRatio << DCMIPP_P1DSRTIOR_VRATIO_Pos));

      /* Set Downsize Destination size */
      MODIFY_REG(hdcmipp->Instance->P1DSSZR, DCMIPP_P1DSSZR_HSIZE | DCMIPP_P1DSSZR_VSIZE,
34185bf8:	68fb      	ldr	r3, [r7, #12]
34185bfa:	681b      	ldr	r3, [r3, #0]
34185bfc:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
34185c00:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
34185c04:	687b      	ldr	r3, [r7, #4]
34185c06:	685a      	ldr	r2, [r3, #4]
34185c08:	687b      	ldr	r3, [r7, #4]
34185c0a:	681b      	ldr	r3, [r3, #0]
34185c0c:	041b      	lsls	r3, r3, #16
34185c0e:	431a      	orrs	r2, r3
34185c10:	68fb      	ldr	r3, [r7, #12]
34185c12:	681b      	ldr	r3, [r3, #0]
34185c14:	430a      	orrs	r2, r1
34185c16:	f8c3 2918 	str.w	r2, [r3, #2328]	@ 0x918
34185c1a:	e033      	b.n	34185c84 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xee>
                 (pDownsizeConfig->HSize << DCMIPP_P1DSSZR_HSIZE_Pos) | \
                 (pDownsizeConfig->VSize << DCMIPP_P1DSSZR_VSIZE_Pos));
    }
    else if (Pipe == DCMIPP_PIPE2)
34185c1c:	68bb      	ldr	r3, [r7, #8]
34185c1e:	2b02      	cmp	r3, #2
34185c20:	d12c      	bne.n	34185c7c <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xe6>
    {
      /* Set Vertical and Horizontal division */
      MODIFY_REG(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_HDIV | DCMIPP_P2DSCR_VDIV,
34185c22:	68fb      	ldr	r3, [r7, #12]
34185c24:	681b      	ldr	r3, [r3, #0]
34185c26:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	@ 0xd10
34185c2a:	f003 21fc 	and.w	r1, r3, #4227922944	@ 0xfc00fc00
34185c2e:	687b      	ldr	r3, [r7, #4]
34185c30:	695a      	ldr	r2, [r3, #20]
34185c32:	687b      	ldr	r3, [r7, #4]
34185c34:	691b      	ldr	r3, [r3, #16]
34185c36:	041b      	lsls	r3, r3, #16
34185c38:	431a      	orrs	r2, r3
34185c3a:	68fb      	ldr	r3, [r7, #12]
34185c3c:	681b      	ldr	r3, [r3, #0]
34185c3e:	430a      	orrs	r2, r1
34185c40:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
                 (pDownsizeConfig->HDivFactor << DCMIPP_P2DSCR_HDIV_Pos) | \
                 (pDownsizeConfig->VDivFactor << DCMIPP_P2DSCR_VDIV_Pos));

      /* Set Vertical and Horizontal Ratio */
      WRITE_REG(hdcmipp->Instance->P2DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P2DSRTIOR_HRATIO_Pos) | \
34185c44:	687b      	ldr	r3, [r7, #4]
34185c46:	68d9      	ldr	r1, [r3, #12]
34185c48:	687b      	ldr	r3, [r7, #4]
34185c4a:	689b      	ldr	r3, [r3, #8]
34185c4c:	041a      	lsls	r2, r3, #16
34185c4e:	68fb      	ldr	r3, [r7, #12]
34185c50:	681b      	ldr	r3, [r3, #0]
34185c52:	430a      	orrs	r2, r1
34185c54:	f8c3 2d14 	str.w	r2, [r3, #3348]	@ 0xd14
                (pDownsizeConfig->VRatio << DCMIPP_P2DSRTIOR_VRATIO_Pos));

      /* Set Downsize Destination size */
      MODIFY_REG(hdcmipp->Instance->P2DSSZR, DCMIPP_P2DSSZR_HSIZE | DCMIPP_P2DSSZR_VSIZE,
34185c58:	68fb      	ldr	r3, [r7, #12]
34185c5a:	681b      	ldr	r3, [r3, #0]
34185c5c:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
34185c60:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
34185c64:	687b      	ldr	r3, [r7, #4]
34185c66:	685a      	ldr	r2, [r3, #4]
34185c68:	687b      	ldr	r3, [r7, #4]
34185c6a:	681b      	ldr	r3, [r3, #0]
34185c6c:	041b      	lsls	r3, r3, #16
34185c6e:	431a      	orrs	r2, r3
34185c70:	68fb      	ldr	r3, [r7, #12]
34185c72:	681b      	ldr	r3, [r3, #0]
34185c74:	430a      	orrs	r2, r1
34185c76:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
34185c7a:	e003      	b.n	34185c84 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xee>
                 (pDownsizeConfig->HSize << DCMIPP_P2DSSZR_HSIZE_Pos) | \
                 (pDownsizeConfig->VSize << DCMIPP_P2DSSZR_VSIZE_Pos));
    }
    else
    {
      return HAL_ERROR;
34185c7c:	2301      	movs	r3, #1
34185c7e:	e002      	b.n	34185c86 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xf0>
    }
  }
  else
  {
    return HAL_ERROR;
34185c80:	2301      	movs	r3, #1
34185c82:	e000      	b.n	34185c86 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xf0>
  }

  return HAL_OK;
34185c84:	2300      	movs	r3, #0
}
34185c86:	4618      	mov	r0, r3
34185c88:	3714      	adds	r7, #20
34185c8a:	46bd      	mov	sp, r7
34185c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185c90:	4770      	bx	lr

34185c92 <HAL_DCMIPP_PIPE_EnableDownsize>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableDownsize(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185c92:	b480      	push	{r7}
34185c94:	b083      	sub	sp, #12
34185c96:	af00      	add	r7, sp, #0
34185c98:	6078      	str	r0, [r7, #4]
34185c9a:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34185c9c:	687b      	ldr	r3, [r7, #4]
34185c9e:	2b00      	cmp	r3, #0
34185ca0:	d101      	bne.n	34185ca6 <HAL_DCMIPP_PIPE_EnableDownsize+0x14>
  {
    return HAL_ERROR;
34185ca2:	2301      	movs	r3, #1
34185ca4:	e01e      	b.n	34185ce4 <HAL_DCMIPP_PIPE_EnableDownsize+0x52>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34185ca6:	683b      	ldr	r3, [r7, #0]
34185ca8:	2b01      	cmp	r3, #1
34185caa:	d10a      	bne.n	34185cc2 <HAL_DCMIPP_PIPE_EnableDownsize+0x30>
  {
    SET_BIT(hdcmipp->Instance->P1DSCR, DCMIPP_P1DSCR_ENABLE);
34185cac:	687b      	ldr	r3, [r7, #4]
34185cae:	681b      	ldr	r3, [r3, #0]
34185cb0:	f8d3 2910 	ldr.w	r2, [r3, #2320]	@ 0x910
34185cb4:	687b      	ldr	r3, [r7, #4]
34185cb6:	681b      	ldr	r3, [r3, #0]
34185cb8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34185cbc:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
34185cc0:	e00f      	b.n	34185ce2 <HAL_DCMIPP_PIPE_EnableDownsize+0x50>
  }
  else if (Pipe == DCMIPP_PIPE2)
34185cc2:	683b      	ldr	r3, [r7, #0]
34185cc4:	2b02      	cmp	r3, #2
34185cc6:	d10a      	bne.n	34185cde <HAL_DCMIPP_PIPE_EnableDownsize+0x4c>
  {
    SET_BIT(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_ENABLE);
34185cc8:	687b      	ldr	r3, [r7, #4]
34185cca:	681b      	ldr	r3, [r3, #0]
34185ccc:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	@ 0xd10
34185cd0:	687b      	ldr	r3, [r7, #4]
34185cd2:	681b      	ldr	r3, [r3, #0]
34185cd4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34185cd8:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
34185cdc:	e001      	b.n	34185ce2 <HAL_DCMIPP_PIPE_EnableDownsize+0x50>
  }
  else
  {
    return HAL_ERROR;
34185cde:	2301      	movs	r3, #1
34185ce0:	e000      	b.n	34185ce4 <HAL_DCMIPP_PIPE_EnableDownsize+0x52>
  }

  return HAL_OK;
34185ce2:	2300      	movs	r3, #0
}
34185ce4:	4618      	mov	r0, r3
34185ce6:	370c      	adds	r7, #12
34185ce8:	46bd      	mov	sp, r7
34185cea:	f85d 7b04 	ldr.w	r7, [sp], #4
34185cee:	4770      	bx	lr

34185cf0 <HAL_DCMIPP_PIPE_EnableGammaConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableGammaConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185cf0:	b480      	push	{r7}
34185cf2:	b083      	sub	sp, #12
34185cf4:	af00      	add	r7, sp, #0
34185cf6:	6078      	str	r0, [r7, #4]
34185cf8:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34185cfa:	687b      	ldr	r3, [r7, #4]
34185cfc:	2b00      	cmp	r3, #0
34185cfe:	d101      	bne.n	34185d04 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x14>
  {
    return HAL_ERROR;
34185d00:	2301      	movs	r3, #1
34185d02:	e01e      	b.n	34185d42 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x52>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34185d04:	683b      	ldr	r3, [r7, #0]
34185d06:	2b01      	cmp	r3, #1
34185d08:	d10a      	bne.n	34185d20 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x30>
  {
    SET_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
34185d0a:	687b      	ldr	r3, [r7, #4]
34185d0c:	681b      	ldr	r3, [r3, #0]
34185d0e:	f8d3 2970 	ldr.w	r2, [r3, #2416]	@ 0x970
34185d12:	687b      	ldr	r3, [r7, #4]
34185d14:	681b      	ldr	r3, [r3, #0]
34185d16:	f042 0201 	orr.w	r2, r2, #1
34185d1a:	f8c3 2970 	str.w	r2, [r3, #2416]	@ 0x970
34185d1e:	e00f      	b.n	34185d40 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x50>
  }
  else if (Pipe == DCMIPP_PIPE2)
34185d20:	683b      	ldr	r3, [r7, #0]
34185d22:	2b02      	cmp	r3, #2
34185d24:	d10a      	bne.n	34185d3c <HAL_DCMIPP_PIPE_EnableGammaConversion+0x4c>
  {
    SET_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
34185d26:	687b      	ldr	r3, [r7, #4]
34185d28:	681b      	ldr	r3, [r3, #0]
34185d2a:	f8d3 2d70 	ldr.w	r2, [r3, #3440]	@ 0xd70
34185d2e:	687b      	ldr	r3, [r7, #4]
34185d30:	681b      	ldr	r3, [r3, #0]
34185d32:	f042 0201 	orr.w	r2, r2, #1
34185d36:	f8c3 2d70 	str.w	r2, [r3, #3440]	@ 0xd70
34185d3a:	e001      	b.n	34185d40 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x50>
  }
  else
  {
    return HAL_ERROR;
34185d3c:	2301      	movs	r3, #1
34185d3e:	e000      	b.n	34185d42 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x52>
  }

  return HAL_OK;
34185d40:	2300      	movs	r3, #0
}
34185d42:	4618      	mov	r0, r3
34185d44:	370c      	adds	r7, #12
34185d46:	46bd      	mov	sp, r7
34185d48:	f85d 7b04 	ldr.w	r7, [sp], #4
34185d4c:	4770      	bx	lr

34185d4e <HAL_DCMIPP_PIPE_DisableGammaConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableGammaConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185d4e:	b480      	push	{r7}
34185d50:	b083      	sub	sp, #12
34185d52:	af00      	add	r7, sp, #0
34185d54:	6078      	str	r0, [r7, #4]
34185d56:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34185d58:	687b      	ldr	r3, [r7, #4]
34185d5a:	2b00      	cmp	r3, #0
34185d5c:	d101      	bne.n	34185d62 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x14>
  {
    return HAL_ERROR;
34185d5e:	2301      	movs	r3, #1
34185d60:	e01e      	b.n	34185da0 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x52>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34185d62:	683b      	ldr	r3, [r7, #0]
34185d64:	2b01      	cmp	r3, #1
34185d66:	d10a      	bne.n	34185d7e <HAL_DCMIPP_PIPE_DisableGammaConversion+0x30>
  {
    CLEAR_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
34185d68:	687b      	ldr	r3, [r7, #4]
34185d6a:	681b      	ldr	r3, [r3, #0]
34185d6c:	f8d3 2970 	ldr.w	r2, [r3, #2416]	@ 0x970
34185d70:	687b      	ldr	r3, [r7, #4]
34185d72:	681b      	ldr	r3, [r3, #0]
34185d74:	f022 0201 	bic.w	r2, r2, #1
34185d78:	f8c3 2970 	str.w	r2, [r3, #2416]	@ 0x970
34185d7c:	e00f      	b.n	34185d9e <HAL_DCMIPP_PIPE_DisableGammaConversion+0x50>
  }
  else if (Pipe == DCMIPP_PIPE2)
34185d7e:	683b      	ldr	r3, [r7, #0]
34185d80:	2b02      	cmp	r3, #2
34185d82:	d10a      	bne.n	34185d9a <HAL_DCMIPP_PIPE_DisableGammaConversion+0x4c>
  {
    CLEAR_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
34185d84:	687b      	ldr	r3, [r7, #4]
34185d86:	681b      	ldr	r3, [r3, #0]
34185d88:	f8d3 2d70 	ldr.w	r2, [r3, #3440]	@ 0xd70
34185d8c:	687b      	ldr	r3, [r7, #4]
34185d8e:	681b      	ldr	r3, [r3, #0]
34185d90:	f022 0201 	bic.w	r2, r2, #1
34185d94:	f8c3 2d70 	str.w	r2, [r3, #3440]	@ 0xd70
34185d98:	e001      	b.n	34185d9e <HAL_DCMIPP_PIPE_DisableGammaConversion+0x50>
  }
  else
  {
    return HAL_ERROR;
34185d9a:	2301      	movs	r3, #1
34185d9c:	e000      	b.n	34185da0 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x52>
  }

  return HAL_OK;
34185d9e:	2300      	movs	r3, #0
}
34185da0:	4618      	mov	r0, r3
34185da2:	370c      	adds	r7, #12
34185da4:	46bd      	mov	sp, r7
34185da6:	f85d 7b04 	ldr.w	r7, [sp], #4
34185daa:	4770      	bx	lr

34185dac <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledGammaConversion(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185dac:	b480      	push	{r7}
34185dae:	b083      	sub	sp, #12
34185db0:	af00      	add	r7, sp, #0
34185db2:	6078      	str	r0, [r7, #4]
34185db4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34185db6:	683b      	ldr	r3, [r7, #0]
34185db8:	2b01      	cmp	r3, #1
34185dba:	d10b      	bne.n	34185dd4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE) == DCMIPP_P1GMCR_ENABLE) ? 1U : 0U);
34185dbc:	687b      	ldr	r3, [r7, #4]
34185dbe:	681b      	ldr	r3, [r3, #0]
34185dc0:	f8d3 3970 	ldr.w	r3, [r3, #2416]	@ 0x970
34185dc4:	f003 0301 	and.w	r3, r3, #1
34185dc8:	2b01      	cmp	r3, #1
34185dca:	d101      	bne.n	34185dd0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x24>
34185dcc:	2301      	movs	r3, #1
34185dce:	e011      	b.n	34185df4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x48>
34185dd0:	2300      	movs	r3, #0
34185dd2:	e00f      	b.n	34185df4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x48>
  }
  else if (Pipe == DCMIPP_PIPE2)
34185dd4:	683b      	ldr	r3, [r7, #0]
34185dd6:	2b02      	cmp	r3, #2
34185dd8:	d10b      	bne.n	34185df2 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x46>
  {
    return ((READ_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE) == DCMIPP_P2GMCR_ENABLE) ? 1U : 0U);
34185dda:	687b      	ldr	r3, [r7, #4]
34185ddc:	681b      	ldr	r3, [r3, #0]
34185dde:	f8d3 3d70 	ldr.w	r3, [r3, #3440]	@ 0xd70
34185de2:	f003 0301 	and.w	r3, r3, #1
34185de6:	2b01      	cmp	r3, #1
34185de8:	d101      	bne.n	34185dee <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x42>
34185dea:	2301      	movs	r3, #1
34185dec:	e002      	b.n	34185df4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x48>
34185dee:	2300      	movs	r3, #0
34185df0:	e000      	b.n	34185df4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x48>
  }
  else
  {
    /* State Disabled */
    return 0;
34185df2:	2300      	movs	r3, #0
  }
}
34185df4:	4618      	mov	r0, r3
34185df6:	370c      	adds	r7, #12
34185df8:	46bd      	mov	sp, r7
34185dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
34185dfe:	4770      	bx	lr

34185e00 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>:
  *         information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                           const DCMIPP_RawBayer2RGBConfTypeDef *pRawBayer2RGBConfig)
{
34185e00:	b480      	push	{r7}
34185e02:	b087      	sub	sp, #28
34185e04:	af00      	add	r7, sp, #0
34185e06:	60f8      	str	r0, [r7, #12]
34185e08:	60b9      	str	r1, [r7, #8]
34185e0a:	607a      	str	r2, [r7, #4]
  uint32_t p1dmcr_reg;

  /* Check handles validity */
  if ((hdcmipp == NULL) || (pRawBayer2RGBConfig == NULL))
34185e0c:	68fb      	ldr	r3, [r7, #12]
34185e0e:	2b00      	cmp	r3, #0
34185e10:	d002      	beq.n	34185e18 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18>
34185e12:	687b      	ldr	r3, [r7, #4]
34185e14:	2b00      	cmp	r3, #0
34185e16:	d101      	bne.n	34185e1c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1c>
  {
    return HAL_ERROR;
34185e18:	2301      	movs	r3, #1
34185e1a:	e024      	b.n	34185e66 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x66>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->PeakStrength));
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->VLineStrength));
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->HLineStrength));
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->EdgeStrength));

  if (Pipe == DCMIPP_PIPE1)
34185e1c:	68bb      	ldr	r3, [r7, #8]
34185e1e:	2b01      	cmp	r3, #1
34185e20:	d120      	bne.n	34185e64 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x64>
  {

    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
34185e22:	687b      	ldr	r3, [r7, #4]
34185e24:	689a      	ldr	r2, [r3, #8]
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
34185e26:	687b      	ldr	r3, [r7, #4]
34185e28:	68db      	ldr	r3, [r3, #12]
34185e2a:	041b      	lsls	r3, r3, #16
    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
34185e2c:	431a      	orrs	r2, r3
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
34185e2e:	687b      	ldr	r3, [r7, #4]
34185e30:	691b      	ldr	r3, [r3, #16]
34185e32:	071b      	lsls	r3, r3, #28
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
34185e34:	431a      	orrs	r2, r3
                  (pRawBayer2RGBConfig->VLineStrength << DCMIPP_P1DMCR_LINEV_Pos)   | \
34185e36:	687b      	ldr	r3, [r7, #4]
34185e38:	681b      	ldr	r3, [r3, #0]
34185e3a:	051b      	lsls	r3, r3, #20
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
34185e3c:	431a      	orrs	r2, r3
                  (pRawBayer2RGBConfig->HLineStrength << DCMIPP_P1DMCR_LINEH_Pos));
34185e3e:	687b      	ldr	r3, [r7, #4]
34185e40:	685b      	ldr	r3, [r3, #4]
34185e42:	061b      	lsls	r3, r3, #24
    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
34185e44:	4313      	orrs	r3, r2
34185e46:	617b      	str	r3, [r7, #20]


    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34185e48:	68fb      	ldr	r3, [r7, #12]
34185e4a:	681b      	ldr	r3, [r3, #0]
34185e4c:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
34185e50:	4b08      	ldr	r3, [pc, #32]	@ (34185e74 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x74>)
34185e52:	4013      	ands	r3, r2
34185e54:	68fa      	ldr	r2, [r7, #12]
34185e56:	6812      	ldr	r2, [r2, #0]
34185e58:	6979      	ldr	r1, [r7, #20]
34185e5a:	430b      	orrs	r3, r1
34185e5c:	f8c2 3870 	str.w	r3, [r2, #2160]	@ 0x870
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34185e60:	2300      	movs	r3, #0
34185e62:	e000      	b.n	34185e66 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x66>
    return HAL_ERROR;
34185e64:	2301      	movs	r3, #1
}
34185e66:	4618      	mov	r0, r3
34185e68:	371c      	adds	r7, #28
34185e6a:	46bd      	mov	sp, r7
34185e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185e70:	4770      	bx	lr
34185e72:	bf00      	nop
34185e74:	8888fff9 	.word	0x8888fff9

34185e78 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185e78:	b480      	push	{r7}
34185e7a:	b083      	sub	sp, #12
34185e7c:	af00      	add	r7, sp, #0
34185e7e:	6078      	str	r0, [r7, #4]
34185e80:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34185e82:	687b      	ldr	r3, [r7, #4]
34185e84:	2b00      	cmp	r3, #0
34185e86:	d101      	bne.n	34185e8c <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x14>
  {
    return HAL_ERROR;
34185e88:	2301      	movs	r3, #1
34185e8a:	e00f      	b.n	34185eac <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34185e8c:	683b      	ldr	r3, [r7, #0]
34185e8e:	2b01      	cmp	r3, #1
34185e90:	d10b      	bne.n	34185eaa <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
34185e92:	687b      	ldr	r3, [r7, #4]
34185e94:	681b      	ldr	r3, [r3, #0]
34185e96:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
34185e9a:	687b      	ldr	r3, [r7, #4]
34185e9c:	681b      	ldr	r3, [r3, #0]
34185e9e:	f042 0201 	orr.w	r2, r2, #1
34185ea2:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34185ea6:	2300      	movs	r3, #0
34185ea8:	e000      	b.n	34185eac <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x34>
    return HAL_ERROR;
34185eaa:	2301      	movs	r3, #1
}
34185eac:	4618      	mov	r0, r3
34185eae:	370c      	adds	r7, #12
34185eb0:	46bd      	mov	sp, r7
34185eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185eb6:	4770      	bx	lr

34185eb8 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185eb8:	b480      	push	{r7}
34185eba:	b083      	sub	sp, #12
34185ebc:	af00      	add	r7, sp, #0
34185ebe:	6078      	str	r0, [r7, #4]
34185ec0:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34185ec2:	687b      	ldr	r3, [r7, #4]
34185ec4:	2b00      	cmp	r3, #0
34185ec6:	d101      	bne.n	34185ecc <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x14>
  {
    return HAL_ERROR;
34185ec8:	2301      	movs	r3, #1
34185eca:	e00f      	b.n	34185eec <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34185ecc:	683b      	ldr	r3, [r7, #0]
34185ece:	2b01      	cmp	r3, #1
34185ed0:	d10b      	bne.n	34185eea <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
34185ed2:	687b      	ldr	r3, [r7, #4]
34185ed4:	681b      	ldr	r3, [r3, #0]
34185ed6:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
34185eda:	687b      	ldr	r3, [r7, #4]
34185edc:	681b      	ldr	r3, [r3, #0]
34185ede:	f022 0201 	bic.w	r2, r2, #1
34185ee2:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34185ee6:	2300      	movs	r3, #0
34185ee8:	e000      	b.n	34185eec <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x34>
    return HAL_ERROR;
34185eea:	2301      	movs	r3, #1
}
34185eec:	4618      	mov	r0, r3
34185eee:	370c      	adds	r7, #12
34185ef0:	46bd      	mov	sp, r7
34185ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185ef6:	4770      	bx	lr

34185ef8 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>:
  * @param  NbLastLines  number of valid image line to keep after the skipped first lines
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                               uint32_t NbFirstLines, uint32_t NbLastLines)
{
34185ef8:	b480      	push	{r7}
34185efa:	b087      	sub	sp, #28
34185efc:	af00      	add	r7, sp, #0
34185efe:	60f8      	str	r0, [r7, #12]
34185f00:	60b9      	str	r1, [r7, #8]
34185f02:	607a      	str	r2, [r7, #4]
34185f04:	603b      	str	r3, [r7, #0]
  uint32_t p1srcr_reg;

  /* Check handles validity */
  if (hdcmipp == NULL)
34185f06:	68fb      	ldr	r3, [r7, #12]
34185f08:	2b00      	cmp	r3, #0
34185f0a:	d101      	bne.n	34185f10 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x18>
  {
    return HAL_ERROR;
34185f0c:	2301      	movs	r3, #1
34185f0e:	e018      	b.n	34185f42 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x4a>
  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_NB_FIRST_LINES(NbFirstLines));
  assert_param(IS_DCMIPP_NB_LAST_LINES(NbLastLines));

  if (Pipe == DCMIPP_PIPE1)
34185f10:	68bb      	ldr	r3, [r7, #8]
34185f12:	2b01      	cmp	r3, #1
34185f14:	d114      	bne.n	34185f40 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x48>
  {
    p1srcr_reg = ((NbFirstLines << DCMIPP_P1SRCR_FIRSTLINEDEL_Pos) | (NbLastLines << DCMIPP_P1SRCR_LASTLINE_Pos));
34185f16:	687b      	ldr	r3, [r7, #4]
34185f18:	031b      	lsls	r3, r3, #12
34185f1a:	683a      	ldr	r2, [r7, #0]
34185f1c:	4313      	orrs	r3, r2
34185f1e:	617b      	str	r3, [r7, #20]

    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
34185f20:	68fb      	ldr	r3, [r7, #12]
34185f22:	681b      	ldr	r3, [r3, #0]
34185f24:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
34185f28:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34185f2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34185f30:	68fa      	ldr	r2, [r7, #12]
34185f32:	6812      	ldr	r2, [r2, #0]
34185f34:	6979      	ldr	r1, [r7, #20]
34185f36:	430b      	orrs	r3, r1
34185f38:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34185f3c:	2300      	movs	r3, #0
34185f3e:	e000      	b.n	34185f42 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x4a>
    return HAL_ERROR;
34185f40:	2301      	movs	r3, #1
}
34185f42:	4618      	mov	r0, r3
34185f44:	371c      	adds	r7, #28
34185f46:	46bd      	mov	sp, r7
34185f48:	f85d 7b04 	ldr.w	r7, [sp], #4
34185f4c:	4770      	bx	lr

34185f4e <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185f4e:	b480      	push	{r7}
34185f50:	b083      	sub	sp, #12
34185f52:	af00      	add	r7, sp, #0
34185f54:	6078      	str	r0, [r7, #4]
34185f56:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34185f58:	687b      	ldr	r3, [r7, #4]
34185f5a:	2b00      	cmp	r3, #0
34185f5c:	d101      	bne.n	34185f62 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x14>
  {
    return HAL_ERROR;
34185f5e:	2301      	movs	r3, #1
34185f60:	e00f      	b.n	34185f82 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x34>
  }

  if (Pipe == DCMIPP_PIPE1)
34185f62:	683b      	ldr	r3, [r7, #0]
34185f64:	2b01      	cmp	r3, #1
34185f66:	d10b      	bne.n	34185f80 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34185f68:	687b      	ldr	r3, [r7, #4]
34185f6a:	681b      	ldr	r3, [r3, #0]
34185f6c:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
34185f70:	687b      	ldr	r3, [r7, #4]
34185f72:	681b      	ldr	r3, [r3, #0]
34185f74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34185f78:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34185f7c:	2300      	movs	r3, #0
34185f7e:	e000      	b.n	34185f82 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x34>
    return HAL_ERROR;
34185f80:	2301      	movs	r3, #1
}
34185f82:	4618      	mov	r0, r3
34185f84:	370c      	adds	r7, #12
34185f86:	46bd      	mov	sp, r7
34185f88:	f85d 7b04 	ldr.w	r7, [sp], #4
34185f8c:	4770      	bx	lr

34185f8e <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185f8e:	b480      	push	{r7}
34185f90:	b083      	sub	sp, #12
34185f92:	af00      	add	r7, sp, #0
34185f94:	6078      	str	r0, [r7, #4]
34185f96:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34185f98:	687b      	ldr	r3, [r7, #4]
34185f9a:	2b00      	cmp	r3, #0
34185f9c:	d101      	bne.n	34185fa2 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x14>
  {
    return HAL_ERROR;
34185f9e:	2301      	movs	r3, #1
34185fa0:	e00f      	b.n	34185fc2 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x34>
  }

  if (Pipe == DCMIPP_PIPE1)
34185fa2:	683b      	ldr	r3, [r7, #0]
34185fa4:	2b01      	cmp	r3, #1
34185fa6:	d10b      	bne.n	34185fc0 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34185fa8:	687b      	ldr	r3, [r7, #4]
34185faa:	681b      	ldr	r3, [r3, #0]
34185fac:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
34185fb0:	687b      	ldr	r3, [r7, #4]
34185fb2:	681b      	ldr	r3, [r3, #0]
34185fb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34185fb8:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34185fbc:	2300      	movs	r3, #0
34185fbe:	e000      	b.n	34185fc2 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x34>
    return HAL_ERROR;
34185fc0:	2301      	movs	r3, #1
}
34185fc2:	4618      	mov	r0, r3
34185fc4:	370c      	adds	r7, #12
34185fc6:	46bd      	mov	sp, r7
34185fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34185fcc:	4770      	bx	lr

34185fce <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>:
  * @param  Strength Specifies the removal strength, can be a value from @ref DCMIPP_Bad_Pixel_Removal_Strength
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                              uint32_t Strength)
{
34185fce:	b480      	push	{r7}
34185fd0:	b085      	sub	sp, #20
34185fd2:	af00      	add	r7, sp, #0
34185fd4:	60f8      	str	r0, [r7, #12]
34185fd6:	60b9      	str	r1, [r7, #8]
34185fd8:	607a      	str	r2, [r7, #4]
  /* Check handles validity */
  if (hdcmipp == NULL)
34185fda:	68fb      	ldr	r3, [r7, #12]
34185fdc:	2b00      	cmp	r3, #0
34185fde:	d101      	bne.n	34185fe4 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x16>
  {
    return HAL_ERROR;
34185fe0:	2301      	movs	r3, #1
34185fe2:	e012      	b.n	3418600a <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x3c>

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_BAD_PXL_REMOVAL_STRENGTH(Strength));

  if (Pipe == DCMIPP_PIPE1)
34185fe4:	68bb      	ldr	r3, [r7, #8]
34185fe6:	2b01      	cmp	r3, #1
34185fe8:	d10e      	bne.n	34186008 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x3a>
  {
    MODIFY_REG(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_STRENGTH, Strength << DCMIPP_P1BPRCR_STRENGTH_Pos);
34185fea:	68fb      	ldr	r3, [r7, #12]
34185fec:	681b      	ldr	r3, [r3, #0]
34185fee:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
34185ff2:	f023 010e 	bic.w	r1, r3, #14
34185ff6:	687b      	ldr	r3, [r7, #4]
34185ff8:	005a      	lsls	r2, r3, #1
34185ffa:	68fb      	ldr	r3, [r7, #12]
34185ffc:	681b      	ldr	r3, [r3, #0]
34185ffe:	430a      	orrs	r2, r1
34186000:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186004:	2300      	movs	r3, #0
34186006:	e000      	b.n	3418600a <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x3c>
    return HAL_ERROR;
34186008:	2301      	movs	r3, #1
}
3418600a:	4618      	mov	r0, r3
3418600c:	3714      	adds	r7, #20
3418600e:	46bd      	mov	sp, r7
34186010:	f85d 7b04 	ldr.w	r7, [sp], #4
34186014:	4770      	bx	lr

34186016 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186016:	b480      	push	{r7}
34186018:	b083      	sub	sp, #12
3418601a:	af00      	add	r7, sp, #0
3418601c:	6078      	str	r0, [r7, #4]
3418601e:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34186020:	687b      	ldr	r3, [r7, #4]
34186022:	2b00      	cmp	r3, #0
34186024:	d101      	bne.n	3418602a <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x14>
  {
    return HAL_ERROR;
34186026:	2301      	movs	r3, #1
34186028:	e00f      	b.n	3418604a <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
3418602a:	683b      	ldr	r3, [r7, #0]
3418602c:	2b01      	cmp	r3, #1
3418602e:	d10b      	bne.n	34186048 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
34186030:	687b      	ldr	r3, [r7, #4]
34186032:	681b      	ldr	r3, [r3, #0]
34186034:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
34186038:	687b      	ldr	r3, [r7, #4]
3418603a:	681b      	ldr	r3, [r3, #0]
3418603c:	f042 0201 	orr.w	r2, r2, #1
34186040:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186044:	2300      	movs	r3, #0
34186046:	e000      	b.n	3418604a <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x34>
    return HAL_ERROR;
34186048:	2301      	movs	r3, #1
}
3418604a:	4618      	mov	r0, r3
3418604c:	370c      	adds	r7, #12
3418604e:	46bd      	mov	sp, r7
34186050:	f85d 7b04 	ldr.w	r7, [sp], #4
34186054:	4770      	bx	lr

34186056 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186056:	b480      	push	{r7}
34186058:	b083      	sub	sp, #12
3418605a:	af00      	add	r7, sp, #0
3418605c:	6078      	str	r0, [r7, #4]
3418605e:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34186060:	687b      	ldr	r3, [r7, #4]
34186062:	2b00      	cmp	r3, #0
34186064:	d101      	bne.n	3418606a <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x14>
  {
    return HAL_ERROR;
34186066:	2301      	movs	r3, #1
34186068:	e00f      	b.n	3418608a <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
3418606a:	683b      	ldr	r3, [r7, #0]
3418606c:	2b01      	cmp	r3, #1
3418606e:	d10b      	bne.n	34186088 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
34186070:	687b      	ldr	r3, [r7, #4]
34186072:	681b      	ldr	r3, [r3, #0]
34186074:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
34186078:	687b      	ldr	r3, [r7, #4]
3418607a:	681b      	ldr	r3, [r3, #0]
3418607c:	f022 0201 	bic.w	r2, r2, #1
34186080:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186084:	2300      	movs	r3, #0
34186086:	e000      	b.n	3418608a <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x34>
    return HAL_ERROR;
34186088:	2301      	movs	r3, #1
}
3418608a:	4618      	mov	r0, r3
3418608c:	370c      	adds	r7, #12
3418608e:	46bd      	mov	sp, r7
34186090:	f85d 7b04 	ldr.w	r7, [sp], #4
34186094:	4770      	bx	lr

34186096 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval  The strength of the bad pixel removal process.
  */
uint32_t HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186096:	b480      	push	{r7}
34186098:	b083      	sub	sp, #12
3418609a:	af00      	add	r7, sp, #0
3418609c:	6078      	str	r0, [r7, #4]
3418609e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  return (((READ_REG(hdcmipp->Instance->P1BPRCR)) & DCMIPP_P1BPRCR_STRENGTH) >> DCMIPP_P1BPRCR_STRENGTH_Pos);
341860a0:	687b      	ldr	r3, [r7, #4]
341860a2:	681b      	ldr	r3, [r3, #0]
341860a4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
341860a8:	085b      	lsrs	r3, r3, #1
341860aa:	f003 0307 	and.w	r3, r3, #7
}
341860ae:	4618      	mov	r0, r3
341860b0:	370c      	adds	r7, #12
341860b2:	46bd      	mov	sp, r7
341860b4:	f85d 7b04 	ldr.w	r7, [sp], #4
341860b8:	4770      	bx	lr

341860ba <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341860ba:	b480      	push	{r7}
341860bc:	b083      	sub	sp, #12
341860be:	af00      	add	r7, sp, #0
341860c0:	6078      	str	r0, [r7, #4]
341860c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
341860c4:	683b      	ldr	r3, [r7, #0]
341860c6:	2b01      	cmp	r3, #1
341860c8:	d10b      	bne.n	341860e2 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE) == DCMIPP_P1BPRCR_ENABLE) ? 1U : 0U);
341860ca:	687b      	ldr	r3, [r7, #4]
341860cc:	681b      	ldr	r3, [r3, #0]
341860ce:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
341860d2:	f003 0301 	and.w	r3, r3, #1
341860d6:	2b01      	cmp	r3, #1
341860d8:	d101      	bne.n	341860de <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x24>
341860da:	2301      	movs	r3, #1
341860dc:	e002      	b.n	341860e4 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x2a>
341860de:	2300      	movs	r3, #0
341860e0:	e000      	b.n	341860e4 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x2a>
  }
  else
  {
    /* State Disabled */
    return 0;
341860e2:	2300      	movs	r3, #0
  }
}
341860e4:	4618      	mov	r0, r3
341860e6:	370c      	adds	r7, #12
341860e8:	46bd      	mov	sp, r7
341860ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341860ee:	4770      	bx	lr

341860f0 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>:
  * @param  pCounter pointer receiving the number of corrected bad pixels
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                               uint32_t *pCounter)
{
341860f0:	b480      	push	{r7}
341860f2:	b085      	sub	sp, #20
341860f4:	af00      	add	r7, sp, #0
341860f6:	60f8      	str	r0, [r7, #12]
341860f8:	60b9      	str	r1, [r7, #8]
341860fa:	607a      	str	r2, [r7, #4]
  /* Check handles validity */
  if ((hdcmipp == NULL) || (pCounter == NULL))
341860fc:	68fb      	ldr	r3, [r7, #12]
341860fe:	2b00      	cmp	r3, #0
34186100:	d002      	beq.n	34186108 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x18>
34186102:	687b      	ldr	r3, [r7, #4]
34186104:	2b00      	cmp	r3, #0
34186106:	d101      	bne.n	3418610c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x1c>
  {
    return HAL_ERROR;
34186108:	2301      	movs	r3, #1
3418610a:	e00f      	b.n	3418612c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x3c>

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  /* Check the DCMIPP State */
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
3418610c:	68fb      	ldr	r3, [r7, #12]
3418610e:	791b      	ldrb	r3, [r3, #4]
34186110:	b2db      	uxtb	r3, r3
34186112:	2b02      	cmp	r3, #2
34186114:	d109      	bne.n	3418612a <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x3a>
  {
    *pCounter = READ_REG(hdcmipp->Instance->P1BPRSR & DCMIPP_P1BPRSR_BADCNT);
34186116:	68fb      	ldr	r3, [r7, #12]
34186118:	681b      	ldr	r3, [r3, #0]
3418611a:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
3418611e:	f3c3 020b 	ubfx	r2, r3, #0, #12
34186122:	687b      	ldr	r3, [r7, #4]
34186124:	601a      	str	r2, [r3, #0]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186126:	2300      	movs	r3, #0
34186128:	e000      	b.n	3418612c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x3c>
    return HAL_ERROR;
3418612a:	2301      	movs	r3, #1
}
3418612c:	4618      	mov	r0, r3
3418612e:	3714      	adds	r7, #20
34186130:	46bd      	mov	sp, r7
34186132:	f85d 7b04 	ldr.w	r7, [sp], #4
34186136:	4770      	bx	lr

34186138 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPColorConversionConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                              const DCMIPP_ColorConversionConfTypeDef
                                                              *pColorConversionConfig)
{
34186138:	b480      	push	{r7}
3418613a:	b087      	sub	sp, #28
3418613c:	af00      	add	r7, sp, #0
3418613e:	60f8      	str	r0, [r7, #12]
34186140:	60b9      	str	r1, [r7, #8]
34186142:	607a      	str	r2, [r7, #4]
  uint32_t p1cccr_reg;
  uint16_t tmp1;
  uint16_t tmp2;

  /* Check handles validity */
  if ((hdcmipp == NULL) || (pColorConversionConfig == NULL))
34186144:	68fb      	ldr	r3, [r7, #12]
34186146:	2b00      	cmp	r3, #0
34186148:	d002      	beq.n	34186150 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x18>
3418614a:	687b      	ldr	r3, [r7, #4]
3418614c:	2b00      	cmp	r3, #0
3418614e:	d101      	bne.n	34186154 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1c>
  {
    return HAL_ERROR;
34186150:	2301      	movs	r3, #1
34186152:	e14b      	b.n	341863ec <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2b4>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BR));
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BG));
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BB));
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BA));

  if (Pipe == DCMIPP_PIPE1)
34186154:	68bb      	ldr	r3, [r7, #8]
34186156:	2b01      	cmp	r3, #1
34186158:	f040 8147 	bne.w	341863ea <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2b2>
  {
    /* Set Clamp and Type */
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
3418615c:	687b      	ldr	r3, [r7, #4]
3418615e:	781b      	ldrb	r3, [r3, #0]
34186160:	009b      	lsls	r3, r3, #2
                 ((uint32_t)pColorConversionConfig->OutputSamplesType);
34186162:	687a      	ldr	r2, [r7, #4]
34186164:	7852      	ldrb	r2, [r2, #1]
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
34186166:	4313      	orrs	r3, r2
34186168:	617b      	str	r3, [r7, #20]

    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
3418616a:	68fb      	ldr	r3, [r7, #12]
3418616c:	681b      	ldr	r3, [r3, #0]
3418616e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
34186172:	f023 0106 	bic.w	r1, r3, #6
34186176:	68fb      	ldr	r3, [r7, #12]
34186178:	681b      	ldr	r3, [r3, #0]
3418617a:	697a      	ldr	r2, [r7, #20]
3418617c:	430a      	orrs	r2, r1
3418617e:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RR);
34186182:	687b      	ldr	r3, [r7, #4]
34186184:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
34186188:	2b00      	cmp	r3, #0
3418618a:	da07      	bge.n	3418619c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x64>
3418618c:	687b      	ldr	r3, [r7, #4]
3418618e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
34186192:	b29b      	uxth	r3, r3
34186194:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186198:	b29b      	uxth	r3, r3
3418619a:	e003      	b.n	341861a4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x6c>
3418619c:	687b      	ldr	r3, [r7, #4]
3418619e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
341861a2:	b29b      	uxth	r3, r3
341861a4:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RG);
341861a6:	687b      	ldr	r3, [r7, #4]
341861a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
341861ac:	2b00      	cmp	r3, #0
341861ae:	da07      	bge.n	341861c0 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x88>
341861b0:	687b      	ldr	r3, [r7, #4]
341861b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
341861b6:	b29b      	uxth	r3, r3
341861b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
341861bc:	b29b      	uxth	r3, r3
341861be:	e003      	b.n	341861c8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x90>
341861c0:	687b      	ldr	r3, [r7, #4]
341861c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
341861c6:	b29b      	uxth	r3, r3
341861c8:	823b      	strh	r3, [r7, #16]

    /* Set Coefficient row 1 columns 1 2 3 and the added column of the matrix */
    MODIFY_REG(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR | DCMIPP_P1CCRR1_RG,
341861ca:	68fb      	ldr	r3, [r7, #12]
341861cc:	681b      	ldr	r3, [r3, #0]
341861ce:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
341861d2:	f003 21f8 	and.w	r1, r3, #4160813056	@ 0xf800f800
341861d6:	8a7a      	ldrh	r2, [r7, #18]
341861d8:	8a3b      	ldrh	r3, [r7, #16]
341861da:	041b      	lsls	r3, r3, #16
341861dc:	431a      	orrs	r2, r3
341861de:	68fb      	ldr	r3, [r7, #12]
341861e0:	681b      	ldr	r3, [r3, #0]
341861e2:	430a      	orrs	r2, r1
341861e4:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
               (((uint32_t)tmp1) << DCMIPP_P1CCRR1_RR_Pos) | (((uint32_t)tmp2) << DCMIPP_P1CCRR1_RG_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RB);
341861e8:	687b      	ldr	r3, [r7, #4]
341861ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
341861ee:	2b00      	cmp	r3, #0
341861f0:	da07      	bge.n	34186202 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xca>
341861f2:	687b      	ldr	r3, [r7, #4]
341861f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
341861f8:	b29b      	uxth	r3, r3
341861fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
341861fe:	b29b      	uxth	r3, r3
34186200:	e003      	b.n	3418620a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xd2>
34186202:	687b      	ldr	r3, [r7, #4]
34186204:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
34186208:	b29b      	uxth	r3, r3
3418620a:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->RA);
3418620c:	687b      	ldr	r3, [r7, #4]
3418620e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
34186212:	2b00      	cmp	r3, #0
34186214:	da07      	bge.n	34186226 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xee>
34186216:	687b      	ldr	r3, [r7, #4]
34186218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
3418621c:	b29b      	uxth	r3, r3
3418621e:	f3c3 0309 	ubfx	r3, r3, #0, #10
34186222:	b29b      	uxth	r3, r3
34186224:	e003      	b.n	3418622e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xf6>
34186226:	687b      	ldr	r3, [r7, #4]
34186228:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
3418622c:	b29b      	uxth	r3, r3
3418622e:	823b      	strh	r3, [r7, #16]

    MODIFY_REG(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB | DCMIPP_P1CCRR2_RA,
34186230:	68fb      	ldr	r3, [r7, #12]
34186232:	681b      	ldr	r3, [r3, #0]
34186234:	f8d3 2888 	ldr.w	r2, [r3, #2184]	@ 0x888
34186238:	4b6f      	ldr	r3, [pc, #444]	@ (341863f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2c0>)
3418623a:	4013      	ands	r3, r2
3418623c:	8a79      	ldrh	r1, [r7, #18]
3418623e:	8a3a      	ldrh	r2, [r7, #16]
34186240:	0412      	lsls	r2, r2, #16
34186242:	4311      	orrs	r1, r2
34186244:	68fa      	ldr	r2, [r7, #12]
34186246:	6812      	ldr	r2, [r2, #0]
34186248:	430b      	orrs	r3, r1
3418624a:	f8c2 3888 	str.w	r3, [r2, #2184]	@ 0x888
               ((uint32_t)tmp1 << DCMIPP_P1CCRR2_RB_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCRR2_RA_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GG);
3418624e:	687b      	ldr	r3, [r7, #4]
34186250:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
34186254:	2b00      	cmp	r3, #0
34186256:	da07      	bge.n	34186268 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x130>
34186258:	687b      	ldr	r3, [r7, #4]
3418625a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
3418625e:	b29b      	uxth	r3, r3
34186260:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186264:	b29b      	uxth	r3, r3
34186266:	e003      	b.n	34186270 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x138>
34186268:	687b      	ldr	r3, [r7, #4]
3418626a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
3418626e:	b29b      	uxth	r3, r3
34186270:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GR);
34186272:	687b      	ldr	r3, [r7, #4]
34186274:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
34186278:	2b00      	cmp	r3, #0
3418627a:	da07      	bge.n	3418628c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x154>
3418627c:	687b      	ldr	r3, [r7, #4]
3418627e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
34186282:	b29b      	uxth	r3, r3
34186284:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186288:	b29b      	uxth	r3, r3
3418628a:	e003      	b.n	34186294 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x15c>
3418628c:	687b      	ldr	r3, [r7, #4]
3418628e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
34186292:	b29b      	uxth	r3, r3
34186294:	823b      	strh	r3, [r7, #16]


    /* Set Coefficient row 2 columns 1 2 3 and the added column of the matrix  */
    MODIFY_REG(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR | DCMIPP_P1CCGR1_GG,
34186296:	68fb      	ldr	r3, [r7, #12]
34186298:	681b      	ldr	r3, [r3, #0]
3418629a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
3418629e:	f003 21f8 	and.w	r1, r3, #4160813056	@ 0xf800f800
341862a2:	8a7b      	ldrh	r3, [r7, #18]
341862a4:	041a      	lsls	r2, r3, #16
341862a6:	8a3b      	ldrh	r3, [r7, #16]
341862a8:	431a      	orrs	r2, r3
341862aa:	68fb      	ldr	r3, [r7, #12]
341862ac:	681b      	ldr	r3, [r3, #0]
341862ae:	430a      	orrs	r2, r1
341862b0:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c
               ((uint32_t)tmp1 << DCMIPP_P1CCGR1_GG_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCGR1_GR_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GB);
341862b4:	687b      	ldr	r3, [r7, #4]
341862b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
341862ba:	2b00      	cmp	r3, #0
341862bc:	da07      	bge.n	341862ce <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x196>
341862be:	687b      	ldr	r3, [r7, #4]
341862c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
341862c4:	b29b      	uxth	r3, r3
341862c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
341862ca:	b29b      	uxth	r3, r3
341862cc:	e003      	b.n	341862d6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x19e>
341862ce:	687b      	ldr	r3, [r7, #4]
341862d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
341862d4:	b29b      	uxth	r3, r3
341862d6:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->GA);
341862d8:	687b      	ldr	r3, [r7, #4]
341862da:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
341862de:	2b00      	cmp	r3, #0
341862e0:	da07      	bge.n	341862f2 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1ba>
341862e2:	687b      	ldr	r3, [r7, #4]
341862e4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
341862e8:	b29b      	uxth	r3, r3
341862ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
341862ee:	b29b      	uxth	r3, r3
341862f0:	e003      	b.n	341862fa <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1c2>
341862f2:	687b      	ldr	r3, [r7, #4]
341862f4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
341862f8:	b29b      	uxth	r3, r3
341862fa:	823b      	strh	r3, [r7, #16]

    MODIFY_REG(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB | DCMIPP_P1CCGR2_GA,
341862fc:	68fb      	ldr	r3, [r7, #12]
341862fe:	681b      	ldr	r3, [r3, #0]
34186300:	f8d3 2890 	ldr.w	r2, [r3, #2192]	@ 0x890
34186304:	4b3c      	ldr	r3, [pc, #240]	@ (341863f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2c0>)
34186306:	4013      	ands	r3, r2
34186308:	8a79      	ldrh	r1, [r7, #18]
3418630a:	8a3a      	ldrh	r2, [r7, #16]
3418630c:	0412      	lsls	r2, r2, #16
3418630e:	4311      	orrs	r1, r2
34186310:	68fa      	ldr	r2, [r7, #12]
34186312:	6812      	ldr	r2, [r2, #0]
34186314:	430b      	orrs	r3, r1
34186316:	f8c2 3890 	str.w	r3, [r2, #2192]	@ 0x890
               ((uint32_t)tmp1 << DCMIPP_P1CCGR2_GB_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCGR2_GA_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BR);
3418631a:	687b      	ldr	r3, [r7, #4]
3418631c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
34186320:	2b00      	cmp	r3, #0
34186322:	da07      	bge.n	34186334 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1fc>
34186324:	687b      	ldr	r3, [r7, #4]
34186326:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
3418632a:	b29b      	uxth	r3, r3
3418632c:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186330:	b29b      	uxth	r3, r3
34186332:	e003      	b.n	3418633c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x204>
34186334:	687b      	ldr	r3, [r7, #4]
34186336:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
3418633a:	b29b      	uxth	r3, r3
3418633c:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BG);
3418633e:	687b      	ldr	r3, [r7, #4]
34186340:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
34186344:	2b00      	cmp	r3, #0
34186346:	da07      	bge.n	34186358 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x220>
34186348:	687b      	ldr	r3, [r7, #4]
3418634a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
3418634e:	b29b      	uxth	r3, r3
34186350:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186354:	b29b      	uxth	r3, r3
34186356:	e003      	b.n	34186360 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x228>
34186358:	687b      	ldr	r3, [r7, #4]
3418635a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
3418635e:	b29b      	uxth	r3, r3
34186360:	823b      	strh	r3, [r7, #16]

    /* Set Coefficient row 3 columns 1 2 3 and the added column of the matrix  */
    MODIFY_REG(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR | DCMIPP_P1CCBR1_BG,
34186362:	68fb      	ldr	r3, [r7, #12]
34186364:	681b      	ldr	r3, [r3, #0]
34186366:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
3418636a:	f003 21f8 	and.w	r1, r3, #4160813056	@ 0xf800f800
3418636e:	8a7a      	ldrh	r2, [r7, #18]
34186370:	8a3b      	ldrh	r3, [r7, #16]
34186372:	041b      	lsls	r3, r3, #16
34186374:	431a      	orrs	r2, r3
34186376:	68fb      	ldr	r3, [r7, #12]
34186378:	681b      	ldr	r3, [r3, #0]
3418637a:	430a      	orrs	r2, r1
3418637c:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
               ((uint32_t)tmp1 << DCMIPP_P1CCBR1_BR_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCBR1_BG_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BB);
34186380:	687b      	ldr	r3, [r7, #4]
34186382:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
34186386:	2b00      	cmp	r3, #0
34186388:	da07      	bge.n	3418639a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x262>
3418638a:	687b      	ldr	r3, [r7, #4]
3418638c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
34186390:	b29b      	uxth	r3, r3
34186392:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186396:	b29b      	uxth	r3, r3
34186398:	e003      	b.n	341863a2 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x26a>
3418639a:	687b      	ldr	r3, [r7, #4]
3418639c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
341863a0:	b29b      	uxth	r3, r3
341863a2:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->BA);
341863a4:	687b      	ldr	r3, [r7, #4]
341863a6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
341863aa:	2b00      	cmp	r3, #0
341863ac:	da07      	bge.n	341863be <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x286>
341863ae:	687b      	ldr	r3, [r7, #4]
341863b0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
341863b4:	b29b      	uxth	r3, r3
341863b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
341863ba:	b29b      	uxth	r3, r3
341863bc:	e003      	b.n	341863c6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x28e>
341863be:	687b      	ldr	r3, [r7, #4]
341863c0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
341863c4:	b29b      	uxth	r3, r3
341863c6:	823b      	strh	r3, [r7, #16]

    MODIFY_REG(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB | DCMIPP_P1CCBR2_BA,
341863c8:	68fb      	ldr	r3, [r7, #12]
341863ca:	681b      	ldr	r3, [r3, #0]
341863cc:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
341863d0:	4b09      	ldr	r3, [pc, #36]	@ (341863f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2c0>)
341863d2:	4013      	ands	r3, r2
341863d4:	8a79      	ldrh	r1, [r7, #18]
341863d6:	8a3a      	ldrh	r2, [r7, #16]
341863d8:	0412      	lsls	r2, r2, #16
341863da:	4311      	orrs	r1, r2
341863dc:	68fa      	ldr	r2, [r7, #12]
341863de:	6812      	ldr	r2, [r2, #0]
341863e0:	430b      	orrs	r3, r1
341863e2:	f8c2 3898 	str.w	r3, [r2, #2200]	@ 0x898
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341863e6:	2300      	movs	r3, #0
341863e8:	e000      	b.n	341863ec <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2b4>
    return HAL_ERROR;
341863ea:	2301      	movs	r3, #1
}
341863ec:	4618      	mov	r0, r3
341863ee:	371c      	adds	r7, #28
341863f0:	46bd      	mov	sp, r7
341863f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341863f6:	4770      	bx	lr
341863f8:	fc00f800 	.word	0xfc00f800

341863fc <HAL_DCMIPP_PIPE_EnableISPColorConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPColorConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341863fc:	b480      	push	{r7}
341863fe:	b083      	sub	sp, #12
34186400:	af00      	add	r7, sp, #0
34186402:	6078      	str	r0, [r7, #4]
34186404:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34186406:	687b      	ldr	r3, [r7, #4]
34186408:	2b00      	cmp	r3, #0
3418640a:	d101      	bne.n	34186410 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x14>
  {
    return HAL_ERROR;
3418640c:	2301      	movs	r3, #1
3418640e:	e00f      	b.n	34186430 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186410:	683b      	ldr	r3, [r7, #0]
34186412:	2b01      	cmp	r3, #1
34186414:	d10b      	bne.n	3418642e <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
34186416:	687b      	ldr	r3, [r7, #4]
34186418:	681b      	ldr	r3, [r3, #0]
3418641a:	f8d3 2880 	ldr.w	r2, [r3, #2176]	@ 0x880
3418641e:	687b      	ldr	r3, [r7, #4]
34186420:	681b      	ldr	r3, [r3, #0]
34186422:	f042 0201 	orr.w	r2, r2, #1
34186426:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
3418642a:	2300      	movs	r3, #0
3418642c:	e000      	b.n	34186430 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x34>
    return HAL_ERROR;
3418642e:	2301      	movs	r3, #1
}
34186430:	4618      	mov	r0, r3
34186432:	370c      	adds	r7, #12
34186434:	46bd      	mov	sp, r7
34186436:	f85d 7b04 	ldr.w	r7, [sp], #4
3418643a:	4770      	bx	lr

3418643c <HAL_DCMIPP_PIPE_DisableISPColorConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPColorConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418643c:	b480      	push	{r7}
3418643e:	b083      	sub	sp, #12
34186440:	af00      	add	r7, sp, #0
34186442:	6078      	str	r0, [r7, #4]
34186444:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34186446:	687b      	ldr	r3, [r7, #4]
34186448:	2b00      	cmp	r3, #0
3418644a:	d101      	bne.n	34186450 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x14>
  {
    return HAL_ERROR;
3418644c:	2301      	movs	r3, #1
3418644e:	e00f      	b.n	34186470 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186450:	683b      	ldr	r3, [r7, #0]
34186452:	2b01      	cmp	r3, #1
34186454:	d10b      	bne.n	3418646e <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
34186456:	687b      	ldr	r3, [r7, #4]
34186458:	681b      	ldr	r3, [r3, #0]
3418645a:	f8d3 2880 	ldr.w	r2, [r3, #2176]	@ 0x880
3418645e:	687b      	ldr	r3, [r7, #4]
34186460:	681b      	ldr	r3, [r3, #0]
34186462:	f022 0201 	bic.w	r2, r2, #1
34186466:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
3418646a:	2300      	movs	r3, #0
3418646c:	e000      	b.n	34186470 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x34>
    return HAL_ERROR;
3418646e:	2301      	movs	r3, #1
}
34186470:	4618      	mov	r0, r3
34186472:	370c      	adds	r7, #12
34186474:	46bd      	mov	sp, r7
34186476:	f85d 7b04 	ldr.w	r7, [sp], #4
3418647a:	4770      	bx	lr

3418647c <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                    const DCMIPP_BlackLevelConfTypeDef
                                                                    *pBlackLevelConfig)
{
3418647c:	b480      	push	{r7}
3418647e:	b085      	sub	sp, #20
34186480:	af00      	add	r7, sp, #0
34186482:	60f8      	str	r0, [r7, #12]
34186484:	60b9      	str	r1, [r7, #8]
34186486:	607a      	str	r2, [r7, #4]
  /* Check handles validity */
  if ((hdcmipp == NULL) || (pBlackLevelConfig == NULL))
34186488:	68fb      	ldr	r3, [r7, #12]
3418648a:	2b00      	cmp	r3, #0
3418648c:	d002      	beq.n	34186494 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x18>
3418648e:	687b      	ldr	r3, [r7, #4]
34186490:	2b00      	cmp	r3, #0
34186492:	d101      	bne.n	34186498 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x1c>
  {
    return HAL_ERROR;
34186494:	2301      	movs	r3, #1
34186496:	e01a      	b.n	341864ce <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x52>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186498:	68bb      	ldr	r3, [r7, #8]
3418649a:	2b01      	cmp	r3, #1
3418649c:	d116      	bne.n	341864cc <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x50>
  {
    MODIFY_REG(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_BLCR | DCMIPP_P1BLCCR_BLCG | DCMIPP_P1BLCCR_BLCB,
3418649e:	68fb      	ldr	r3, [r7, #12]
341864a0:	681b      	ldr	r3, [r3, #0]
341864a2:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
341864a6:	b2d9      	uxtb	r1, r3
341864a8:	687b      	ldr	r3, [r7, #4]
341864aa:	781b      	ldrb	r3, [r3, #0]
341864ac:	061a      	lsls	r2, r3, #24
341864ae:	687b      	ldr	r3, [r7, #4]
341864b0:	785b      	ldrb	r3, [r3, #1]
341864b2:	041b      	lsls	r3, r3, #16
341864b4:	431a      	orrs	r2, r3
341864b6:	687b      	ldr	r3, [r7, #4]
341864b8:	789b      	ldrb	r3, [r3, #2]
341864ba:	021b      	lsls	r3, r3, #8
341864bc:	431a      	orrs	r2, r3
341864be:	68fb      	ldr	r3, [r7, #12]
341864c0:	681b      	ldr	r3, [r3, #0]
341864c2:	430a      	orrs	r2, r1
341864c4:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341864c8:	2300      	movs	r3, #0
341864ca:	e000      	b.n	341864ce <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x52>
    return HAL_ERROR;
341864cc:	2301      	movs	r3, #1
}
341864ce:	4618      	mov	r0, r3
341864d0:	3714      	adds	r7, #20
341864d2:	46bd      	mov	sp, r7
341864d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341864d8:	4770      	bx	lr

341864da <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341864da:	b480      	push	{r7}
341864dc:	b083      	sub	sp, #12
341864de:	af00      	add	r7, sp, #0
341864e0:	6078      	str	r0, [r7, #4]
341864e2:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
341864e4:	687b      	ldr	r3, [r7, #4]
341864e6:	2b00      	cmp	r3, #0
341864e8:	d101      	bne.n	341864ee <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x14>
  {
    return HAL_ERROR;
341864ea:	2301      	movs	r3, #1
341864ec:	e00f      	b.n	3418650e <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
341864ee:	683b      	ldr	r3, [r7, #0]
341864f0:	2b01      	cmp	r3, #1
341864f2:	d10b      	bne.n	3418650c <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
341864f4:	687b      	ldr	r3, [r7, #4]
341864f6:	681b      	ldr	r3, [r3, #0]
341864f8:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
341864fc:	687b      	ldr	r3, [r7, #4]
341864fe:	681b      	ldr	r3, [r3, #0]
34186500:	f042 0201 	orr.w	r2, r2, #1
34186504:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186508:	2300      	movs	r3, #0
3418650a:	e000      	b.n	3418650e <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x34>
    return HAL_ERROR;
3418650c:	2301      	movs	r3, #1
}
3418650e:	4618      	mov	r0, r3
34186510:	370c      	adds	r7, #12
34186512:	46bd      	mov	sp, r7
34186514:	f85d 7b04 	ldr.w	r7, [sp], #4
34186518:	4770      	bx	lr

3418651a <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418651a:	b480      	push	{r7}
3418651c:	b083      	sub	sp, #12
3418651e:	af00      	add	r7, sp, #0
34186520:	6078      	str	r0, [r7, #4]
34186522:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34186524:	687b      	ldr	r3, [r7, #4]
34186526:	2b00      	cmp	r3, #0
34186528:	d101      	bne.n	3418652e <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x14>
  {
    return HAL_ERROR;
3418652a:	2301      	movs	r3, #1
3418652c:	e00f      	b.n	3418654e <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
3418652e:	683b      	ldr	r3, [r7, #0]
34186530:	2b01      	cmp	r3, #1
34186532:	d10b      	bne.n	3418654c <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
34186534:	687b      	ldr	r3, [r7, #4]
34186536:	681b      	ldr	r3, [r3, #0]
34186538:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
3418653c:	687b      	ldr	r3, [r7, #4]
3418653e:	681b      	ldr	r3, [r3, #0]
34186540:	f022 0201 	bic.w	r2, r2, #1
34186544:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186548:	2300      	movs	r3, #0
3418654a:	e000      	b.n	3418654e <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x34>
    return HAL_ERROR;
3418654c:	2301      	movs	r3, #1
}
3418654e:	4618      	mov	r0, r3
34186550:	370c      	adds	r7, #12
34186552:	46bd      	mov	sp, r7
34186554:	f85d 7b04 	ldr.w	r7, [sp], #4
34186558:	4770      	bx	lr

3418655a <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>:
  *                            filled with the black level calibration configuration of the specified pipe.
  * @retval None
  */
void HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                       DCMIPP_BlackLevelConfTypeDef *pBlackLevelConfig)
{
3418655a:	b480      	push	{r7}
3418655c:	b087      	sub	sp, #28
3418655e:	af00      	add	r7, sp, #0
34186560:	60f8      	str	r0, [r7, #12]
34186562:	60b9      	str	r1, [r7, #8]
34186564:	607a      	str	r2, [r7, #4]
  uint32_t p1blccr_reg;
  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186566:	68bb      	ldr	r3, [r7, #8]
34186568:	2b01      	cmp	r3, #1
3418656a:	d113      	bne.n	34186594 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x3a>
  {
    p1blccr_reg = READ_REG(hdcmipp->Instance->P1BLCCR);
3418656c:	68fb      	ldr	r3, [r7, #12]
3418656e:	681b      	ldr	r3, [r3, #0]
34186570:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
34186574:	617b      	str	r3, [r7, #20]
    pBlackLevelConfig->BlueCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCB) >> DCMIPP_P1BLCCR_BLCB_Pos);
34186576:	697b      	ldr	r3, [r7, #20]
34186578:	0a1b      	lsrs	r3, r3, #8
3418657a:	b2da      	uxtb	r2, r3
3418657c:	687b      	ldr	r3, [r7, #4]
3418657e:	709a      	strb	r2, [r3, #2]
    pBlackLevelConfig->GreenCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCG) >> DCMIPP_P1BLCCR_BLCG_Pos);
34186580:	697b      	ldr	r3, [r7, #20]
34186582:	0c1b      	lsrs	r3, r3, #16
34186584:	b2da      	uxtb	r2, r3
34186586:	687b      	ldr	r3, [r7, #4]
34186588:	705a      	strb	r2, [r3, #1]
    pBlackLevelConfig->RedCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCR) >> DCMIPP_P1BLCCR_BLCR_Pos);
3418658a:	697b      	ldr	r3, [r7, #20]
3418658c:	0e1b      	lsrs	r3, r3, #24
3418658e:	b2da      	uxtb	r2, r3
34186590:	687b      	ldr	r3, [r7, #4]
34186592:	701a      	strb	r2, [r3, #0]
  }
}
34186594:	bf00      	nop
34186596:	371c      	adds	r7, #28
34186598:	46bd      	mov	sp, r7
3418659a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418659e:	4770      	bx	lr

341865a0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341865a0:	b480      	push	{r7}
341865a2:	b083      	sub	sp, #12
341865a4:	af00      	add	r7, sp, #0
341865a6:	6078      	str	r0, [r7, #4]
341865a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
341865aa:	683b      	ldr	r3, [r7, #0]
341865ac:	2b01      	cmp	r3, #1
341865ae:	d10b      	bne.n	341865c8 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE) == DCMIPP_P1BLCCR_ENABLE) ? 1U : 0U);
341865b0:	687b      	ldr	r3, [r7, #4]
341865b2:	681b      	ldr	r3, [r3, #0]
341865b4:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
341865b8:	f003 0301 	and.w	r3, r3, #1
341865bc:	2b01      	cmp	r3, #1
341865be:	d101      	bne.n	341865c4 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x24>
341865c0:	2301      	movs	r3, #1
341865c2:	e002      	b.n	341865ca <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x2a>
341865c4:	2300      	movs	r3, #0
341865c6:	e000      	b.n	341865ca <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x2a>
  }
  else
  {
    /* State Disabled */
    return 0;
341865c8:	2300      	movs	r3, #0
  }
}
341865ca:	4618      	mov	r0, r3
341865cc:	370c      	adds	r7, #12
341865ce:	46bd      	mov	sp, r7
341865d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341865d4:	4770      	bx	lr

341865d6 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>:
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                  uint8_t ModuleID, const
                                                                  DCMIPP_StatisticExtractionConfTypeDef
                                                                  *pStatisticExtractionConfig)
{
341865d6:	b480      	push	{r7}
341865d8:	b087      	sub	sp, #28
341865da:	af00      	add	r7, sp, #0
341865dc:	60f8      	str	r0, [r7, #12]
341865de:	60b9      	str	r1, [r7, #8]
341865e0:	603b      	str	r3, [r7, #0]
341865e2:	4613      	mov	r3, r2
341865e4:	71fb      	strb	r3, [r7, #7]
  uint32_t p1stxcr_reg;

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pStatisticExtractionConfig == NULL))
341865e6:	68fb      	ldr	r3, [r7, #12]
341865e8:	2b00      	cmp	r3, #0
341865ea:	d002      	beq.n	341865f2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x1c>
341865ec:	683b      	ldr	r3, [r7, #0]
341865ee:	2b00      	cmp	r3, #0
341865f0:	d101      	bne.n	341865f6 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x20>
  {
    return HAL_ERROR;
341865f2:	2301      	movs	r3, #1
341865f4:	e03b      	b.n	3418666e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x98>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_BINS(pStatisticExtractionConfig->Bins));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_SOURCE(pStatisticExtractionConfig->Source));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODE(pStatisticExtractionConfig->Mode));

  if (Pipe == DCMIPP_PIPE1)
341865f6:	68bb      	ldr	r3, [r7, #8]
341865f8:	2b01      	cmp	r3, #1
341865fa:	d135      	bne.n	34186668 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x92>
  {
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
341865fc:	683b      	ldr	r3, [r7, #0]
341865fe:	681a      	ldr	r2, [r3, #0]
34186600:	683b      	ldr	r3, [r7, #0]
34186602:	685b      	ldr	r3, [r3, #4]
34186604:	431a      	orrs	r2, r3
                  (pStatisticExtractionConfig->Bins);
34186606:	683b      	ldr	r3, [r7, #0]
34186608:	689b      	ldr	r3, [r3, #8]
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
3418660a:	4313      	orrs	r3, r2
3418660c:	617b      	str	r3, [r7, #20]

    switch (ModuleID)
3418660e:	79fb      	ldrb	r3, [r7, #7]
34186610:	2b01      	cmp	r3, #1
34186612:	d002      	beq.n	3418661a <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x44>
34186614:	2b02      	cmp	r3, #2
34186616:	d00d      	beq.n	34186634 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x5e>
34186618:	e019      	b.n	3418664e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x78>
    {
      case DCMIPP_STATEXT_MODULE1:
        MODIFY_REG(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_BINS | DCMIPP_P1ST1CR_SRC | \
3418661a:	68fb      	ldr	r3, [r7, #12]
3418661c:	681b      	ldr	r3, [r3, #0]
3418661e:	f8d3 3850 	ldr.w	r3, [r3, #2128]	@ 0x850
34186622:	f023 01fc 	bic.w	r1, r3, #252	@ 0xfc
34186626:	68fb      	ldr	r3, [r7, #12]
34186628:	681b      	ldr	r3, [r3, #0]
3418662a:	697a      	ldr	r2, [r7, #20]
3418662c:	430a      	orrs	r2, r1
3418662e:	f8c3 2850 	str.w	r2, [r3, #2128]	@ 0x850
                   DCMIPP_P1ST1CR_MODE, p1stxcr_reg);
        break;
34186632:	e01b      	b.n	3418666c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x96>
      case DCMIPP_STATEXT_MODULE2:
        MODIFY_REG(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_BINS | DCMIPP_P1ST2CR_SRC | \
34186634:	68fb      	ldr	r3, [r7, #12]
34186636:	681b      	ldr	r3, [r3, #0]
34186638:	f8d3 3854 	ldr.w	r3, [r3, #2132]	@ 0x854
3418663c:	f023 01fc 	bic.w	r1, r3, #252	@ 0xfc
34186640:	68fb      	ldr	r3, [r7, #12]
34186642:	681b      	ldr	r3, [r3, #0]
34186644:	697a      	ldr	r2, [r7, #20]
34186646:	430a      	orrs	r2, r1
34186648:	f8c3 2854 	str.w	r2, [r3, #2132]	@ 0x854
                   DCMIPP_P1ST2CR_MODE, p1stxcr_reg);
        break;
3418664c:	e00e      	b.n	3418666c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x96>
      default:
        /* DCMIPP_STATEXT_MODULE3 */
        MODIFY_REG(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_BINS | DCMIPP_P1ST3CR_SRC | \
3418664e:	68fb      	ldr	r3, [r7, #12]
34186650:	681b      	ldr	r3, [r3, #0]
34186652:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
34186656:	f023 01fc 	bic.w	r1, r3, #252	@ 0xfc
3418665a:	68fb      	ldr	r3, [r7, #12]
3418665c:	681b      	ldr	r3, [r3, #0]
3418665e:	697a      	ldr	r2, [r7, #20]
34186660:	430a      	orrs	r2, r1
34186662:	f8c3 2858 	str.w	r2, [r3, #2136]	@ 0x858
                   DCMIPP_P1ST3CR_MODE, p1stxcr_reg);
        break;
34186666:	e001      	b.n	3418666c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x96>
    }
  }
  else
  {
    return HAL_ERROR;
34186668:	2301      	movs	r3, #1
3418666a:	e000      	b.n	3418666e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x98>
  }

  return HAL_OK;
3418666c:	2300      	movs	r3, #0
}
3418666e:	4618      	mov	r0, r3
34186670:	371c      	adds	r7, #28
34186672:	46bd      	mov	sp, r7
34186674:	f85d 7b04 	ldr.w	r7, [sp], #4
34186678:	4770      	bx	lr

3418667a <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                      const DCMIPP_StatisticExtractionAreaConfTypeDef
                                                                      *pStatisticExtractionAreaConfig)
{
3418667a:	b480      	push	{r7}
3418667c:	b085      	sub	sp, #20
3418667e:	af00      	add	r7, sp, #0
34186680:	60f8      	str	r0, [r7, #12]
34186682:	60b9      	str	r1, [r7, #8]
34186684:	607a      	str	r2, [r7, #4]
  /* Check handle validity */
  if ((hdcmipp == NULL) || (pStatisticExtractionAreaConfig == NULL))
34186686:	68fb      	ldr	r3, [r7, #12]
34186688:	2b00      	cmp	r3, #0
3418668a:	d002      	beq.n	34186692 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x18>
3418668c:	687b      	ldr	r3, [r7, #4]
3418668e:	2b00      	cmp	r3, #0
34186690:	d101      	bne.n	34186696 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x1c>
  {
    return HAL_ERROR;
34186692:	2301      	movs	r3, #1
34186694:	e027      	b.n	341866e6 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x6c>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->HStart));
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->VStart));
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->HSize));
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->VSize));

  if (Pipe == DCMIPP_PIPE1)
34186696:	68bb      	ldr	r3, [r7, #8]
34186698:	2b01      	cmp	r3, #1
3418669a:	d123      	bne.n	341866e4 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x6a>
  {
    MODIFY_REG(hdcmipp->Instance->P1STSTR, DCMIPP_P1STSTR_HSTART | DCMIPP_P1STSTR_VSTART,
3418669c:	68fb      	ldr	r3, [r7, #12]
3418669e:	681b      	ldr	r3, [r3, #0]
341866a0:	f8d3 385c 	ldr.w	r3, [r3, #2140]	@ 0x85c
341866a4:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
341866a8:	687b      	ldr	r3, [r7, #4]
341866aa:	685a      	ldr	r2, [r3, #4]
341866ac:	687b      	ldr	r3, [r7, #4]
341866ae:	681b      	ldr	r3, [r3, #0]
341866b0:	041b      	lsls	r3, r3, #16
341866b2:	431a      	orrs	r2, r3
341866b4:	68fb      	ldr	r3, [r7, #12]
341866b6:	681b      	ldr	r3, [r3, #0]
341866b8:	430a      	orrs	r2, r1
341866ba:	f8c3 285c 	str.w	r2, [r3, #2140]	@ 0x85c
               (pStatisticExtractionAreaConfig->HStart << DCMIPP_P1STSTR_HSTART_Pos) | \
               (pStatisticExtractionAreaConfig->VStart << DCMIPP_P1STSTR_VSTART_Pos));

    MODIFY_REG(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_HSIZE | DCMIPP_P1STSZR_VSIZE,
341866be:	68fb      	ldr	r3, [r7, #12]
341866c0:	681b      	ldr	r3, [r3, #0]
341866c2:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
341866c6:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
341866ca:	687b      	ldr	r3, [r7, #4]
341866cc:	68da      	ldr	r2, [r3, #12]
341866ce:	687b      	ldr	r3, [r7, #4]
341866d0:	689b      	ldr	r3, [r3, #8]
341866d2:	041b      	lsls	r3, r3, #16
341866d4:	431a      	orrs	r2, r3
341866d6:	68fb      	ldr	r3, [r7, #12]
341866d8:	681b      	ldr	r3, [r3, #0]
341866da:	430a      	orrs	r2, r1
341866dc:	f8c3 2860 	str.w	r2, [r3, #2144]	@ 0x860
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341866e0:	2300      	movs	r3, #0
341866e2:	e000      	b.n	341866e6 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x6c>
    return HAL_ERROR;
341866e4:	2301      	movs	r3, #1
}
341866e6:	4618      	mov	r0, r3
341866e8:	3714      	adds	r7, #20
341866ea:	46bd      	mov	sp, r7
341866ec:	f85d 7b04 	ldr.w	r7, [sp], #4
341866f0:	4770      	bx	lr

341866f2 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>:
  * @param  ModuleID  Specifies the Module ID, can be a value from @ref DCMIPP_Statistics_Extraction_Module_ID.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPStatisticExtraction(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                               uint8_t ModuleID)
{
341866f2:	b480      	push	{r7}
341866f4:	b085      	sub	sp, #20
341866f6:	af00      	add	r7, sp, #0
341866f8:	60f8      	str	r0, [r7, #12]
341866fa:	60b9      	str	r1, [r7, #8]
341866fc:	4613      	mov	r3, r2
341866fe:	71fb      	strb	r3, [r7, #7]
  /* Check handle validity */
  if (hdcmipp == NULL)
34186700:	68fb      	ldr	r3, [r7, #12]
34186702:	2b00      	cmp	r3, #0
34186704:	d101      	bne.n	3418670a <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x18>
  {
    return HAL_ERROR;
34186706:	2301      	movs	r3, #1
34186708:	e02c      	b.n	34186764 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x72>

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));

  if (Pipe == DCMIPP_PIPE1)
3418670a:	68bb      	ldr	r3, [r7, #8]
3418670c:	2b01      	cmp	r3, #1
3418670e:	d126      	bne.n	3418675e <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x6c>
  {
    switch (ModuleID)
34186710:	79fb      	ldrb	r3, [r7, #7]
34186712:	2b01      	cmp	r3, #1
34186714:	d002      	beq.n	3418671c <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x2a>
34186716:	2b02      	cmp	r3, #2
34186718:	d00b      	beq.n	34186732 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x40>
3418671a:	e015      	b.n	34186748 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x56>
    {
      case DCMIPP_STATEXT_MODULE1:
        SET_BIT(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_ENABLE);
3418671c:	68fb      	ldr	r3, [r7, #12]
3418671e:	681b      	ldr	r3, [r3, #0]
34186720:	f8d3 2850 	ldr.w	r2, [r3, #2128]	@ 0x850
34186724:	68fb      	ldr	r3, [r7, #12]
34186726:	681b      	ldr	r3, [r3, #0]
34186728:	f042 0201 	orr.w	r2, r2, #1
3418672c:	f8c3 2850 	str.w	r2, [r3, #2128]	@ 0x850
        break;
34186730:	e017      	b.n	34186762 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x70>
      case DCMIPP_STATEXT_MODULE2:
        SET_BIT(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_ENABLE);
34186732:	68fb      	ldr	r3, [r7, #12]
34186734:	681b      	ldr	r3, [r3, #0]
34186736:	f8d3 2854 	ldr.w	r2, [r3, #2132]	@ 0x854
3418673a:	68fb      	ldr	r3, [r7, #12]
3418673c:	681b      	ldr	r3, [r3, #0]
3418673e:	f042 0201 	orr.w	r2, r2, #1
34186742:	f8c3 2854 	str.w	r2, [r3, #2132]	@ 0x854
        break;
34186746:	e00c      	b.n	34186762 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x70>
      default:
        /* DCMIPP_STATEXT_MODULE3 */
        SET_BIT(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_ENABLE);
34186748:	68fb      	ldr	r3, [r7, #12]
3418674a:	681b      	ldr	r3, [r3, #0]
3418674c:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
34186750:	68fb      	ldr	r3, [r7, #12]
34186752:	681b      	ldr	r3, [r3, #0]
34186754:	f042 0201 	orr.w	r2, r2, #1
34186758:	f8c3 2858 	str.w	r2, [r3, #2136]	@ 0x858
        break;
3418675c:	e001      	b.n	34186762 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x70>
    }
  }
  else
  {
    return HAL_ERROR;
3418675e:	2301      	movs	r3, #1
34186760:	e000      	b.n	34186764 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x72>
  }

  return HAL_OK;
34186762:	2300      	movs	r3, #0
}
34186764:	4618      	mov	r0, r3
34186766:	3714      	adds	r7, #20
34186768:	46bd      	mov	sp, r7
3418676a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418676e:	4770      	bx	lr

34186770 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186770:	b480      	push	{r7}
34186772:	b083      	sub	sp, #12
34186774:	af00      	add	r7, sp, #0
34186776:	6078      	str	r0, [r7, #4]
34186778:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
3418677a:	687b      	ldr	r3, [r7, #4]
3418677c:	2b00      	cmp	r3, #0
3418677e:	d101      	bne.n	34186784 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x14>
  {
    return HAL_ERROR;
34186780:	2301      	movs	r3, #1
34186782:	e00f      	b.n	341867a4 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186784:	683b      	ldr	r3, [r7, #0]
34186786:	2b01      	cmp	r3, #1
34186788:	d10b      	bne.n	341867a2 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x32>
  {
    /* Crop line enable */
    SET_BIT(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_CROPEN);
3418678a:	687b      	ldr	r3, [r7, #4]
3418678c:	681b      	ldr	r3, [r3, #0]
3418678e:	f8d3 2860 	ldr.w	r2, [r3, #2144]	@ 0x860
34186792:	687b      	ldr	r3, [r7, #4]
34186794:	681b      	ldr	r3, [r3, #0]
34186796:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3418679a:	f8c3 2860 	str.w	r2, [r3, #2144]	@ 0x860
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
3418679e:	2300      	movs	r3, #0
341867a0:	e000      	b.n	341867a4 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x34>
    return HAL_ERROR;
341867a2:	2301      	movs	r3, #1
}
341867a4:	4618      	mov	r0, r3
341867a6:	370c      	adds	r7, #12
341867a8:	46bd      	mov	sp, r7
341867aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341867ae:	4770      	bx	lr

341867b0 <HAL_DCMIPP_PIPE_SetISPExposureConfig>:
  * @param  pExposureConfig pointer to the DCMIPP_ExposureConfTypeDef structure that contains the exposure information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPExposureConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                       const DCMIPP_ExposureConfTypeDef *pExposureConfig)
{
341867b0:	b480      	push	{r7}
341867b2:	b085      	sub	sp, #20
341867b4:	af00      	add	r7, sp, #0
341867b6:	60f8      	str	r0, [r7, #12]
341867b8:	60b9      	str	r1, [r7, #8]
341867ba:	607a      	str	r2, [r7, #4]

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pExposureConfig == NULL))
341867bc:	68fb      	ldr	r3, [r7, #12]
341867be:	2b00      	cmp	r3, #0
341867c0:	d002      	beq.n	341867c8 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x18>
341867c2:	687b      	ldr	r3, [r7, #4]
341867c4:	2b00      	cmp	r3, #0
341867c6:	d101      	bne.n	341867cc <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x1c>
  {
    return HAL_ERROR;
341867c8:	2301      	movs	r3, #1
341867ca:	e02d      	b.n	34186828 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x78>
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftRed));
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftGreen));
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftBlue));

  if (Pipe == DCMIPP_PIPE1)
341867cc:	68bb      	ldr	r3, [r7, #8]
341867ce:	2b01      	cmp	r3, #1
341867d0:	d129      	bne.n	34186826 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x76>
  {
    MODIFY_REG(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_SHFR | DCMIPP_P1EXCR1_MULTR,
341867d2:	68fb      	ldr	r3, [r7, #12]
341867d4:	681b      	ldr	r3, [r3, #0]
341867d6:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
341867da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
341867de:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
341867e2:	687a      	ldr	r2, [r7, #4]
341867e4:	7812      	ldrb	r2, [r2, #0]
341867e6:	0711      	lsls	r1, r2, #28
341867e8:	687a      	ldr	r2, [r7, #4]
341867ea:	7852      	ldrb	r2, [r2, #1]
341867ec:	0512      	lsls	r2, r2, #20
341867ee:	4311      	orrs	r1, r2
341867f0:	68fa      	ldr	r2, [r7, #12]
341867f2:	6812      	ldr	r2, [r2, #0]
341867f4:	430b      	orrs	r3, r1
341867f6:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
               (((uint32_t)pExposureConfig->ShiftRed << DCMIPP_P1EXCR1_SHFR_Pos) | \
                ((uint32_t)pExposureConfig->MultiplierRed << DCMIPP_P1EXCR1_MULTR_Pos)));

    WRITE_REG(hdcmipp->Instance->P1EXCR2, (((uint32_t)pExposureConfig->ShiftGreen << DCMIPP_P1EXCR2_SHFG_Pos) | \
341867fa:	687b      	ldr	r3, [r7, #4]
341867fc:	789b      	ldrb	r3, [r3, #2]
341867fe:	071a      	lsls	r2, r3, #28
34186800:	687b      	ldr	r3, [r7, #4]
34186802:	78db      	ldrb	r3, [r3, #3]
34186804:	051b      	lsls	r3, r3, #20
34186806:	431a      	orrs	r2, r3
34186808:	687b      	ldr	r3, [r7, #4]
3418680a:	791b      	ldrb	r3, [r3, #4]
3418680c:	031b      	lsls	r3, r3, #12
3418680e:	ea42 0103 	orr.w	r1, r2, r3
34186812:	687b      	ldr	r3, [r7, #4]
34186814:	795b      	ldrb	r3, [r3, #5]
34186816:	011a      	lsls	r2, r3, #4
34186818:	68fb      	ldr	r3, [r7, #12]
3418681a:	681b      	ldr	r3, [r3, #0]
3418681c:	430a      	orrs	r2, r1
3418681e:	f8c3 2848 	str.w	r2, [r3, #2120]	@ 0x848
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186822:	2300      	movs	r3, #0
34186824:	e000      	b.n	34186828 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x78>
    return HAL_ERROR;
34186826:	2301      	movs	r3, #1
}
34186828:	4618      	mov	r0, r3
3418682a:	3714      	adds	r7, #20
3418682c:	46bd      	mov	sp, r7
3418682e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186832:	4770      	bx	lr

34186834 <HAL_DCMIPP_PIPE_EnableISPExposure>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPExposure(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186834:	b480      	push	{r7}
34186836:	b083      	sub	sp, #12
34186838:	af00      	add	r7, sp, #0
3418683a:	6078      	str	r0, [r7, #4]
3418683c:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
3418683e:	687b      	ldr	r3, [r7, #4]
34186840:	2b00      	cmp	r3, #0
34186842:	d101      	bne.n	34186848 <HAL_DCMIPP_PIPE_EnableISPExposure+0x14>
  {
    return HAL_ERROR;
34186844:	2301      	movs	r3, #1
34186846:	e00f      	b.n	34186868 <HAL_DCMIPP_PIPE_EnableISPExposure+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186848:	683b      	ldr	r3, [r7, #0]
3418684a:	2b01      	cmp	r3, #1
3418684c:	d10b      	bne.n	34186866 <HAL_DCMIPP_PIPE_EnableISPExposure+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
3418684e:	687b      	ldr	r3, [r7, #4]
34186850:	681b      	ldr	r3, [r3, #0]
34186852:	f8d3 2844 	ldr.w	r2, [r3, #2116]	@ 0x844
34186856:	687b      	ldr	r3, [r7, #4]
34186858:	681b      	ldr	r3, [r3, #0]
3418685a:	f042 0201 	orr.w	r2, r2, #1
3418685e:	f8c3 2844 	str.w	r2, [r3, #2116]	@ 0x844
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186862:	2300      	movs	r3, #0
34186864:	e000      	b.n	34186868 <HAL_DCMIPP_PIPE_EnableISPExposure+0x34>
    return HAL_ERROR;
34186866:	2301      	movs	r3, #1
}
34186868:	4618      	mov	r0, r3
3418686a:	370c      	adds	r7, #12
3418686c:	46bd      	mov	sp, r7
3418686e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186872:	4770      	bx	lr

34186874 <HAL_DCMIPP_PIPE_DisableISPExposure>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPExposure(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186874:	b480      	push	{r7}
34186876:	b083      	sub	sp, #12
34186878:	af00      	add	r7, sp, #0
3418687a:	6078      	str	r0, [r7, #4]
3418687c:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
3418687e:	687b      	ldr	r3, [r7, #4]
34186880:	2b00      	cmp	r3, #0
34186882:	d101      	bne.n	34186888 <HAL_DCMIPP_PIPE_DisableISPExposure+0x14>
  {
    return HAL_ERROR;
34186884:	2301      	movs	r3, #1
34186886:	e00f      	b.n	341868a8 <HAL_DCMIPP_PIPE_DisableISPExposure+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186888:	683b      	ldr	r3, [r7, #0]
3418688a:	2b01      	cmp	r3, #1
3418688c:	d10b      	bne.n	341868a6 <HAL_DCMIPP_PIPE_DisableISPExposure+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
3418688e:	687b      	ldr	r3, [r7, #4]
34186890:	681b      	ldr	r3, [r3, #0]
34186892:	f8d3 2844 	ldr.w	r2, [r3, #2116]	@ 0x844
34186896:	687b      	ldr	r3, [r7, #4]
34186898:	681b      	ldr	r3, [r3, #0]
3418689a:	f022 0201 	bic.w	r2, r2, #1
3418689e:	f8c3 2844 	str.w	r2, [r3, #2116]	@ 0x844
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341868a2:	2300      	movs	r3, #0
341868a4:	e000      	b.n	341868a8 <HAL_DCMIPP_PIPE_DisableISPExposure+0x34>
    return HAL_ERROR;
341868a6:	2301      	movs	r3, #1
}
341868a8:	4618      	mov	r0, r3
341868aa:	370c      	adds	r7, #12
341868ac:	46bd      	mov	sp, r7
341868ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341868b2:	4770      	bx	lr

341868b4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>:
  * @param  pContrastConfig pointer to the DCMIPP_ContrastConfTypeDef structure that contains contrast information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                           const DCMIPP_ContrastConfTypeDef *pContrastConfig)
{
341868b4:	b480      	push	{r7}
341868b6:	b085      	sub	sp, #20
341868b8:	af00      	add	r7, sp, #0
341868ba:	60f8      	str	r0, [r7, #12]
341868bc:	60b9      	str	r1, [r7, #8]
341868be:	607a      	str	r2, [r7, #4]
  /* Check handle validity */
  if ((hdcmipp == NULL) || (pContrastConfig == NULL))
341868c0:	68fb      	ldr	r3, [r7, #12]
341868c2:	2b00      	cmp	r3, #0
341868c4:	d002      	beq.n	341868cc <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x18>
341868c6:	687b      	ldr	r3, [r7, #4]
341868c8:	2b00      	cmp	r3, #0
341868ca:	d101      	bne.n	341868d0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x1c>
  {
    return HAL_ERROR;
341868cc:	2301      	movs	r3, #1
341868ce:	e03b      	b.n	34186948 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x94>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_160));
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_192));
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_224));
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_256));

  if (Pipe == DCMIPP_PIPE1)
341868d0:	68bb      	ldr	r3, [r7, #8]
341868d2:	2b01      	cmp	r3, #1
341868d4:	d137      	bne.n	34186946 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x92>
  {

    MODIFY_REG(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_LUM0,
341868d6:	68fb      	ldr	r3, [r7, #12]
341868d8:	681b      	ldr	r3, [r3, #0]
341868da:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
341868de:	f423 41fc 	bic.w	r1, r3, #32256	@ 0x7e00
341868e2:	687b      	ldr	r3, [r7, #4]
341868e4:	781b      	ldrb	r3, [r3, #0]
341868e6:	025a      	lsls	r2, r3, #9
341868e8:	68fb      	ldr	r3, [r7, #12]
341868ea:	681b      	ldr	r3, [r3, #0]
341868ec:	430a      	orrs	r2, r1
341868ee:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
               (uint32_t)pContrastConfig->LUM_0 << DCMIPP_P1CTCR1_LUM0_Pos);

    WRITE_REG(hdcmipp->Instance->P1CTCR2, (((uint32_t)pContrastConfig->LUM_32 << DCMIPP_P1CTCR2_LUM1_Pos) |
341868f2:	687b      	ldr	r3, [r7, #4]
341868f4:	785b      	ldrb	r3, [r3, #1]
341868f6:	065a      	lsls	r2, r3, #25
341868f8:	687b      	ldr	r3, [r7, #4]
341868fa:	789b      	ldrb	r3, [r3, #2]
341868fc:	045b      	lsls	r3, r3, #17
341868fe:	431a      	orrs	r2, r3
34186900:	687b      	ldr	r3, [r7, #4]
34186902:	78db      	ldrb	r3, [r3, #3]
34186904:	025b      	lsls	r3, r3, #9
34186906:	ea42 0103 	orr.w	r1, r2, r3
3418690a:	687b      	ldr	r3, [r7, #4]
3418690c:	791b      	ldrb	r3, [r3, #4]
3418690e:	005a      	lsls	r2, r3, #1
34186910:	68fb      	ldr	r3, [r7, #12]
34186912:	681b      	ldr	r3, [r3, #0]
34186914:	430a      	orrs	r2, r1
34186916:	f8c3 28a4 	str.w	r2, [r3, #2212]	@ 0x8a4
                                           ((uint32_t)pContrastConfig->LUM_64 << DCMIPP_P1CTCR2_LUM2_Pos) |
                                           ((uint32_t)pContrastConfig->LUM_96 << DCMIPP_P1CTCR2_LUM3_Pos) |
                                           ((uint32_t)pContrastConfig->LUM_128 << DCMIPP_P1CTCR2_LUM4_Pos)));

    WRITE_REG(hdcmipp->Instance->P1CTCR3, (((uint32_t)pContrastConfig->LUM_160 << DCMIPP_P1CTCR3_LUM5_Pos) |
3418691a:	687b      	ldr	r3, [r7, #4]
3418691c:	795b      	ldrb	r3, [r3, #5]
3418691e:	065a      	lsls	r2, r3, #25
34186920:	687b      	ldr	r3, [r7, #4]
34186922:	799b      	ldrb	r3, [r3, #6]
34186924:	045b      	lsls	r3, r3, #17
34186926:	431a      	orrs	r2, r3
34186928:	687b      	ldr	r3, [r7, #4]
3418692a:	79db      	ldrb	r3, [r3, #7]
3418692c:	025b      	lsls	r3, r3, #9
3418692e:	ea42 0103 	orr.w	r1, r2, r3
34186932:	687b      	ldr	r3, [r7, #4]
34186934:	7a1b      	ldrb	r3, [r3, #8]
34186936:	005a      	lsls	r2, r3, #1
34186938:	68fb      	ldr	r3, [r7, #12]
3418693a:	681b      	ldr	r3, [r3, #0]
3418693c:	430a      	orrs	r2, r1
3418693e:	f8c3 28a8 	str.w	r2, [r3, #2216]	@ 0x8a8
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186942:	2300      	movs	r3, #0
34186944:	e000      	b.n	34186948 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x94>
    return HAL_ERROR;
34186946:	2301      	movs	r3, #1
}
34186948:	4618      	mov	r0, r3
3418694a:	3714      	adds	r7, #20
3418694c:	46bd      	mov	sp, r7
3418694e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186952:	4770      	bx	lr

34186954 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPCtrlContrast(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186954:	b480      	push	{r7}
34186956:	b083      	sub	sp, #12
34186958:	af00      	add	r7, sp, #0
3418695a:	6078      	str	r0, [r7, #4]
3418695c:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
3418695e:	687b      	ldr	r3, [r7, #4]
34186960:	2b00      	cmp	r3, #0
34186962:	d101      	bne.n	34186968 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x14>
  {
    return HAL_ERROR;
34186964:	2301      	movs	r3, #1
34186966:	e00f      	b.n	34186988 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186968:	683b      	ldr	r3, [r7, #0]
3418696a:	2b01      	cmp	r3, #1
3418696c:	d10b      	bne.n	34186986 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
3418696e:	687b      	ldr	r3, [r7, #4]
34186970:	681b      	ldr	r3, [r3, #0]
34186972:	f8d3 28a0 	ldr.w	r2, [r3, #2208]	@ 0x8a0
34186976:	687b      	ldr	r3, [r7, #4]
34186978:	681b      	ldr	r3, [r3, #0]
3418697a:	f042 0201 	orr.w	r2, r2, #1
3418697e:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186982:	2300      	movs	r3, #0
34186984:	e000      	b.n	34186988 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x34>
    return HAL_ERROR;
34186986:	2301      	movs	r3, #1
}
34186988:	4618      	mov	r0, r3
3418698a:	370c      	adds	r7, #12
3418698c:	46bd      	mov	sp, r7
3418698e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186992:	4770      	bx	lr

34186994 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPCtrlContrast(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186994:	b480      	push	{r7}
34186996:	b083      	sub	sp, #12
34186998:	af00      	add	r7, sp, #0
3418699a:	6078      	str	r0, [r7, #4]
3418699c:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
3418699e:	687b      	ldr	r3, [r7, #4]
341869a0:	2b00      	cmp	r3, #0
341869a2:	d101      	bne.n	341869a8 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x14>
  {
    return HAL_ERROR;
341869a4:	2301      	movs	r3, #1
341869a6:	e00f      	b.n	341869c8 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
341869a8:	683b      	ldr	r3, [r7, #0]
341869aa:	2b01      	cmp	r3, #1
341869ac:	d10b      	bne.n	341869c6 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
341869ae:	687b      	ldr	r3, [r7, #4]
341869b0:	681b      	ldr	r3, [r3, #0]
341869b2:	f8d3 28a0 	ldr.w	r2, [r3, #2208]	@ 0x8a0
341869b6:	687b      	ldr	r3, [r7, #4]
341869b8:	681b      	ldr	r3, [r3, #0]
341869ba:	f022 0201 	bic.w	r2, r2, #1
341869be:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341869c2:	2300      	movs	r3, #0
341869c4:	e000      	b.n	341869c8 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x34>
    return HAL_ERROR;
341869c6:	2301      	movs	r3, #1
}
341869c8:	4618      	mov	r0, r3
341869ca:	370c      	adds	r7, #12
341869cc:	46bd      	mov	sp, r7
341869ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341869d2:	4770      	bx	lr

341869d4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>:
  * @param  pCounter pointer to receive the accumulated value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                     uint8_t ModuleID, uint32_t *pCounter)
{
341869d4:	b480      	push	{r7}
341869d6:	b085      	sub	sp, #20
341869d8:	af00      	add	r7, sp, #0
341869da:	60f8      	str	r0, [r7, #12]
341869dc:	60b9      	str	r1, [r7, #8]
341869de:	603b      	str	r3, [r7, #0]
341869e0:	4613      	mov	r3, r2
341869e2:	71fb      	strb	r3, [r7, #7]

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pCounter == NULL))
341869e4:	68fb      	ldr	r3, [r7, #12]
341869e6:	2b00      	cmp	r3, #0
341869e8:	d002      	beq.n	341869f0 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x1c>
341869ea:	683b      	ldr	r3, [r7, #0]
341869ec:	2b00      	cmp	r3, #0
341869ee:	d101      	bne.n	341869f4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x20>
  {
    return HAL_ERROR;
341869f0:	2301      	movs	r3, #1
341869f2:	e02b      	b.n	34186a4c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x78>

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));

  if (Pipe == DCMIPP_PIPE1)
341869f4:	68bb      	ldr	r3, [r7, #8]
341869f6:	2b01      	cmp	r3, #1
341869f8:	d124      	bne.n	34186a44 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x70>
  {
    switch (ModuleID)
341869fa:	79fb      	ldrb	r3, [r7, #7]
341869fc:	2b03      	cmp	r3, #3
341869fe:	d018      	beq.n	34186a32 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x5e>
34186a00:	2b03      	cmp	r3, #3
34186a02:	dc21      	bgt.n	34186a48 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x74>
34186a04:	2b01      	cmp	r3, #1
34186a06:	d002      	beq.n	34186a0e <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x3a>
34186a08:	2b02      	cmp	r3, #2
34186a0a:	d009      	beq.n	34186a20 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x4c>
        break;
      case DCMIPP_STATEXT_MODULE3:
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST3SR & DCMIPP_P1ST3SR_ACCU));
        break;
      default:
        break;
34186a0c:	e01c      	b.n	34186a48 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x74>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST1SR & DCMIPP_P1ST1SR_ACCU));
34186a0e:	68fb      	ldr	r3, [r7, #12]
34186a10:	681b      	ldr	r3, [r3, #0]
34186a12:	f8d3 3864 	ldr.w	r3, [r3, #2148]	@ 0x864
34186a16:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34186a1a:	683b      	ldr	r3, [r7, #0]
34186a1c:	601a      	str	r2, [r3, #0]
        break;
34186a1e:	e014      	b.n	34186a4a <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x76>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST2SR & DCMIPP_P1ST2SR_ACCU));
34186a20:	68fb      	ldr	r3, [r7, #12]
34186a22:	681b      	ldr	r3, [r3, #0]
34186a24:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
34186a28:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34186a2c:	683b      	ldr	r3, [r7, #0]
34186a2e:	601a      	str	r2, [r3, #0]
        break;
34186a30:	e00b      	b.n	34186a4a <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x76>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST3SR & DCMIPP_P1ST3SR_ACCU));
34186a32:	68fb      	ldr	r3, [r7, #12]
34186a34:	681b      	ldr	r3, [r3, #0]
34186a36:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
34186a3a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34186a3e:	683b      	ldr	r3, [r7, #0]
34186a40:	601a      	str	r2, [r3, #0]
        break;
34186a42:	e002      	b.n	34186a4a <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x76>
    }
  }
  else
  {
    return HAL_ERROR;
34186a44:	2301      	movs	r3, #1
34186a46:	e001      	b.n	34186a4c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x78>
        break;
34186a48:	bf00      	nop
  }

  return HAL_OK;
34186a4a:	2300      	movs	r3, #0
}
34186a4c:	4618      	mov	r0, r3
34186a4e:	3714      	adds	r7, #20
34186a50:	46bd      	mov	sp, r7
34186a52:	f85d 7b04 	ldr.w	r7, [sp], #4
34186a56:	4770      	bx	lr

34186a58 <HAL_DCMIPP_PIPE_GetISPExposureConfig>:
  *                         filled with the exposure configuration of the specified pipe.
  * @retval None
  */
void HAL_DCMIPP_PIPE_GetISPExposureConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                          DCMIPP_ExposureConfTypeDef *pExposureConfig)
{
34186a58:	b480      	push	{r7}
34186a5a:	b087      	sub	sp, #28
34186a5c:	af00      	add	r7, sp, #0
34186a5e:	60f8      	str	r0, [r7, #12]
34186a60:	60b9      	str	r1, [r7, #8]
34186a62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186a64:	68bb      	ldr	r3, [r7, #8]
34186a66:	2b01      	cmp	r3, #1
34186a68:	d130      	bne.n	34186acc <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x74>
  {
    tmp = READ_REG(hdcmipp->Instance->P1EXCR2);
34186a6a:	68fb      	ldr	r3, [r7, #12]
34186a6c:	681b      	ldr	r3, [r3, #0]
34186a6e:	f8d3 3848 	ldr.w	r3, [r3, #2120]	@ 0x848
34186a72:	617b      	str	r3, [r7, #20]

    pExposureConfig->MultiplierBlue  = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTB) >> DCMIPP_P1EXCR2_MULTB_Pos);
34186a74:	697b      	ldr	r3, [r7, #20]
34186a76:	091b      	lsrs	r3, r3, #4
34186a78:	b2da      	uxtb	r2, r3
34186a7a:	687b      	ldr	r3, [r7, #4]
34186a7c:	715a      	strb	r2, [r3, #5]
    pExposureConfig->ShiftBlue       = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFB) >> DCMIPP_P1EXCR2_SHFB_Pos);
34186a7e:	697b      	ldr	r3, [r7, #20]
34186a80:	0b1b      	lsrs	r3, r3, #12
34186a82:	b2db      	uxtb	r3, r3
34186a84:	f003 0307 	and.w	r3, r3, #7
34186a88:	b2da      	uxtb	r2, r3
34186a8a:	687b      	ldr	r3, [r7, #4]
34186a8c:	711a      	strb	r2, [r3, #4]
    pExposureConfig->ShiftGreen      = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFG) >> DCMIPP_P1EXCR2_SHFG_Pos);
34186a8e:	697b      	ldr	r3, [r7, #20]
34186a90:	0f1b      	lsrs	r3, r3, #28
34186a92:	b2db      	uxtb	r3, r3
34186a94:	f003 0307 	and.w	r3, r3, #7
34186a98:	b2da      	uxtb	r2, r3
34186a9a:	687b      	ldr	r3, [r7, #4]
34186a9c:	709a      	strb	r2, [r3, #2]
    pExposureConfig->MultiplierGreen = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTG) >> DCMIPP_P1EXCR2_MULTG_Pos);
34186a9e:	697b      	ldr	r3, [r7, #20]
34186aa0:	0d1b      	lsrs	r3, r3, #20
34186aa2:	b2da      	uxtb	r2, r3
34186aa4:	687b      	ldr	r3, [r7, #4]
34186aa6:	70da      	strb	r2, [r3, #3]

    tmp = READ_REG(hdcmipp->Instance->P1EXCR1);
34186aa8:	68fb      	ldr	r3, [r7, #12]
34186aaa:	681b      	ldr	r3, [r3, #0]
34186aac:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
34186ab0:	617b      	str	r3, [r7, #20]

    pExposureConfig->MultiplierRed   = (uint8_t)((tmp & DCMIPP_P1EXCR1_MULTR) >> DCMIPP_P1EXCR1_MULTR_Pos);
34186ab2:	697b      	ldr	r3, [r7, #20]
34186ab4:	0d1b      	lsrs	r3, r3, #20
34186ab6:	b2da      	uxtb	r2, r3
34186ab8:	687b      	ldr	r3, [r7, #4]
34186aba:	705a      	strb	r2, [r3, #1]
    pExposureConfig->ShiftRed        = (uint8_t)((tmp & DCMIPP_P1EXCR1_SHFR) >> DCMIPP_P1EXCR1_SHFR_Pos);
34186abc:	697b      	ldr	r3, [r7, #20]
34186abe:	0f1b      	lsrs	r3, r3, #28
34186ac0:	b2db      	uxtb	r3, r3
34186ac2:	f003 0307 	and.w	r3, r3, #7
34186ac6:	b2da      	uxtb	r2, r3
34186ac8:	687b      	ldr	r3, [r7, #4]
34186aca:	701a      	strb	r2, [r3, #0]
  }
}
34186acc:	bf00      	nop
34186ace:	371c      	adds	r7, #28
34186ad0:	46bd      	mov	sp, r7
34186ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
34186ad6:	4770      	bx	lr

34186ad8 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>:
  *                                 filled with the color conversion configuration of the specified pipe.
  * @retval None
  */
void HAL_DCMIPP_PIPE_GetISPColorConversionConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                 DCMIPP_ColorConversionConfTypeDef *pColorConversionConfig)
{
34186ad8:	b480      	push	{r7}
34186ada:	b087      	sub	sp, #28
34186adc:	af00      	add	r7, sp, #0
34186ade:	60f8      	str	r0, [r7, #12]
34186ae0:	60b9      	str	r1, [r7, #8]
34186ae2:	607a      	str	r2, [r7, #4]
  uint16_t tmp;

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186ae4:	68bb      	ldr	r3, [r7, #8]
34186ae6:	2b01      	cmp	r3, #1
34186ae8:	f040 8146 	bne.w	34186d78 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x2a0>
  {
    tmp = (uint16_t)READ_REG(hdcmipp->Instance->P1CCCR);
34186aec:	68fb      	ldr	r3, [r7, #12]
34186aee:	681b      	ldr	r3, [r3, #0]
34186af0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
34186af4:	82fb      	strh	r3, [r7, #22]

    UNUSED(tmp);

    pColorConversionConfig->ClampOutputSamples = (((tmp & DCMIPP_P1CCCR_CLAMP) >> DCMIPP_P1YUVCR_CLAMP_Pos) != 0U)
                                                 ? ENABLE : DISABLE;
34186af6:	8afb      	ldrh	r3, [r7, #22]
34186af8:	089b      	lsrs	r3, r3, #2
34186afa:	b2db      	uxtb	r3, r3
34186afc:	f003 0301 	and.w	r3, r3, #1
34186b00:	b2da      	uxtb	r2, r3
    pColorConversionConfig->ClampOutputSamples = (((tmp & DCMIPP_P1CCCR_CLAMP) >> DCMIPP_P1YUVCR_CLAMP_Pos) != 0U)
34186b02:	687b      	ldr	r3, [r7, #4]
34186b04:	701a      	strb	r2, [r3, #0]
    pColorConversionConfig->OutputSamplesType  = (uint8_t)(tmp & DCMIPP_P1CCCR_TYPE);
34186b06:	8afb      	ldrh	r3, [r7, #22]
34186b08:	b2db      	uxtb	r3, r3
34186b0a:	f003 0302 	and.w	r3, r3, #2
34186b0e:	b2da      	uxtb	r2, r3
34186b10:	687b      	ldr	r3, [r7, #4]
34186b12:	705a      	strb	r2, [r3, #1]

    /* Get Coefficient row 1 columns 1 2 3 and the added column of the matrix */
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RG) >> DCMIPP_P1CCRR1_RG_Pos);
34186b14:	68fb      	ldr	r3, [r7, #12]
34186b16:	681b      	ldr	r3, [r3, #0]
34186b18:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
34186b1c:	0c1b      	lsrs	r3, r3, #16
34186b1e:	b29b      	uxth	r3, r3
34186b20:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186b24:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
34186b26:	8afb      	ldrh	r3, [r7, #22]
34186b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186b2c:	2b00      	cmp	r3, #0
34186b2e:	d007      	beq.n	34186b40 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x68>
34186b30:	8afb      	ldrh	r3, [r7, #22]
34186b32:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34186b36:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34186b3a:	b29b      	uxth	r3, r3
34186b3c:	b21b      	sxth	r3, r3
34186b3e:	e001      	b.n	34186b44 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x6c>
34186b40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186b44:	687a      	ldr	r2, [r7, #4]
34186b46:	8093      	strh	r3, [r2, #4]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR) >> DCMIPP_P1CCRR1_RR_Pos);
34186b48:	68fb      	ldr	r3, [r7, #12]
34186b4a:	681b      	ldr	r3, [r3, #0]
34186b4c:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
34186b50:	b29b      	uxth	r3, r3
34186b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186b56:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RR = (int16_t)GET_MATRIX_VALUE11(tmp);
34186b58:	8afb      	ldrh	r3, [r7, #22]
34186b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186b5e:	2b00      	cmp	r3, #0
34186b60:	d007      	beq.n	34186b72 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x9a>
34186b62:	8afb      	ldrh	r3, [r7, #22]
34186b64:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34186b68:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34186b6c:	b29b      	uxth	r3, r3
34186b6e:	b21b      	sxth	r3, r3
34186b70:	e001      	b.n	34186b76 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x9e>
34186b72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186b76:	687a      	ldr	r2, [r7, #4]
34186b78:	8053      	strh	r3, [r2, #2]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RA) >> DCMIPP_P1CCRR2_RA_Pos);
34186b7a:	68fb      	ldr	r3, [r7, #12]
34186b7c:	681b      	ldr	r3, [r3, #0]
34186b7e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
34186b82:	0c1b      	lsrs	r3, r3, #16
34186b84:	b29b      	uxth	r3, r3
34186b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
34186b8a:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34186b8c:	8afb      	ldrh	r3, [r7, #22]
34186b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34186b92:	2b00      	cmp	r3, #0
34186b94:	d007      	beq.n	34186ba6 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0xce>
34186b96:	8afb      	ldrh	r3, [r7, #22]
34186b98:	ea6f 5383 	mvn.w	r3, r3, lsl #22
34186b9c:	ea6f 5393 	mvn.w	r3, r3, lsr #22
34186ba0:	b29b      	uxth	r3, r3
34186ba2:	b21b      	sxth	r3, r3
34186ba4:	e001      	b.n	34186baa <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0xd2>
34186ba6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186baa:	687a      	ldr	r2, [r7, #4]
34186bac:	8113      	strh	r3, [r2, #8]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB) >> DCMIPP_P1CCRR2_RB_Pos);
34186bae:	68fb      	ldr	r3, [r7, #12]
34186bb0:	681b      	ldr	r3, [r3, #0]
34186bb2:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
34186bb6:	b29b      	uxth	r3, r3
34186bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186bbc:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RB = (int16_t)GET_MATRIX_VALUE11(tmp);
34186bbe:	8afb      	ldrh	r3, [r7, #22]
34186bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186bc4:	2b00      	cmp	r3, #0
34186bc6:	d007      	beq.n	34186bd8 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x100>
34186bc8:	8afb      	ldrh	r3, [r7, #22]
34186bca:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34186bce:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34186bd2:	b29b      	uxth	r3, r3
34186bd4:	b21b      	sxth	r3, r3
34186bd6:	e001      	b.n	34186bdc <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x104>
34186bd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186bdc:	687a      	ldr	r2, [r7, #4]
34186bde:	80d3      	strh	r3, [r2, #6]

    /* Get Coefficient row 2 columns 1 2 3 and the added column of the matrix  */
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GG) >> DCMIPP_P1CCGR1_GG_Pos);
34186be0:	68fb      	ldr	r3, [r7, #12]
34186be2:	681b      	ldr	r3, [r3, #0]
34186be4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
34186be8:	0c1b      	lsrs	r3, r3, #16
34186bea:	b29b      	uxth	r3, r3
34186bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186bf0:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GG = (int16_t)GET_MATRIX_VALUE11(tmp);
34186bf2:	8afb      	ldrh	r3, [r7, #22]
34186bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186bf8:	2b00      	cmp	r3, #0
34186bfa:	d007      	beq.n	34186c0c <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x134>
34186bfc:	8afb      	ldrh	r3, [r7, #22]
34186bfe:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34186c02:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34186c06:	b29b      	uxth	r3, r3
34186c08:	b21b      	sxth	r3, r3
34186c0a:	e001      	b.n	34186c10 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x138>
34186c0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186c10:	687a      	ldr	r2, [r7, #4]
34186c12:	8193      	strh	r3, [r2, #12]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR) >> DCMIPP_P1CCGR1_GR_Pos);
34186c14:	68fb      	ldr	r3, [r7, #12]
34186c16:	681b      	ldr	r3, [r3, #0]
34186c18:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
34186c1c:	b29b      	uxth	r3, r3
34186c1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186c22:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GR = (int16_t)GET_MATRIX_VALUE11(tmp);
34186c24:	8afb      	ldrh	r3, [r7, #22]
34186c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186c2a:	2b00      	cmp	r3, #0
34186c2c:	d007      	beq.n	34186c3e <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x166>
34186c2e:	8afb      	ldrh	r3, [r7, #22]
34186c30:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34186c34:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34186c38:	b29b      	uxth	r3, r3
34186c3a:	b21b      	sxth	r3, r3
34186c3c:	e001      	b.n	34186c42 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x16a>
34186c3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186c42:	687a      	ldr	r2, [r7, #4]
34186c44:	8153      	strh	r3, [r2, #10]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GA) >> DCMIPP_P1CCGR2_GA_Pos);
34186c46:	68fb      	ldr	r3, [r7, #12]
34186c48:	681b      	ldr	r3, [r3, #0]
34186c4a:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
34186c4e:	0c1b      	lsrs	r3, r3, #16
34186c50:	b29b      	uxth	r3, r3
34186c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
34186c56:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GA = (int16_t)GET_MATRIX_VALUE10(tmp);
34186c58:	8afb      	ldrh	r3, [r7, #22]
34186c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34186c5e:	2b00      	cmp	r3, #0
34186c60:	d007      	beq.n	34186c72 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x19a>
34186c62:	8afb      	ldrh	r3, [r7, #22]
34186c64:	ea6f 5383 	mvn.w	r3, r3, lsl #22
34186c68:	ea6f 5393 	mvn.w	r3, r3, lsr #22
34186c6c:	b29b      	uxth	r3, r3
34186c6e:	b21b      	sxth	r3, r3
34186c70:	e001      	b.n	34186c76 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x19e>
34186c72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186c76:	687a      	ldr	r2, [r7, #4]
34186c78:	8213      	strh	r3, [r2, #16]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB) >> DCMIPP_P1CCGR2_GB_Pos);
34186c7a:	68fb      	ldr	r3, [r7, #12]
34186c7c:	681b      	ldr	r3, [r3, #0]
34186c7e:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
34186c82:	b29b      	uxth	r3, r3
34186c84:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186c88:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GB = (int16_t)GET_MATRIX_VALUE11(tmp);
34186c8a:	8afb      	ldrh	r3, [r7, #22]
34186c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186c90:	2b00      	cmp	r3, #0
34186c92:	d007      	beq.n	34186ca4 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x1cc>
34186c94:	8afb      	ldrh	r3, [r7, #22]
34186c96:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34186c9a:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34186c9e:	b29b      	uxth	r3, r3
34186ca0:	b21b      	sxth	r3, r3
34186ca2:	e001      	b.n	34186ca8 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x1d0>
34186ca4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186ca8:	687a      	ldr	r2, [r7, #4]
34186caa:	81d3      	strh	r3, [r2, #14]

    /* Get Coefficient row 3 columns 1 2 3 and the added column of the matrix  */
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BA) >> DCMIPP_P1CCBR2_BA_Pos);
34186cac:	68fb      	ldr	r3, [r7, #12]
34186cae:	681b      	ldr	r3, [r3, #0]
34186cb0:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
34186cb4:	0c1b      	lsrs	r3, r3, #16
34186cb6:	b29b      	uxth	r3, r3
34186cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
34186cbc:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BA = (int16_t)GET_MATRIX_VALUE10(tmp);
34186cbe:	8afb      	ldrh	r3, [r7, #22]
34186cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34186cc4:	2b00      	cmp	r3, #0
34186cc6:	d007      	beq.n	34186cd8 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x200>
34186cc8:	8afb      	ldrh	r3, [r7, #22]
34186cca:	ea6f 5383 	mvn.w	r3, r3, lsl #22
34186cce:	ea6f 5393 	mvn.w	r3, r3, lsr #22
34186cd2:	b29b      	uxth	r3, r3
34186cd4:	b21b      	sxth	r3, r3
34186cd6:	e001      	b.n	34186cdc <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x204>
34186cd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186cdc:	687a      	ldr	r2, [r7, #4]
34186cde:	8313      	strh	r3, [r2, #24]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB) >> DCMIPP_P1CCBR2_BB_Pos);
34186ce0:	68fb      	ldr	r3, [r7, #12]
34186ce2:	681b      	ldr	r3, [r3, #0]
34186ce4:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
34186ce8:	b29b      	uxth	r3, r3
34186cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186cee:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BB = (int16_t)GET_MATRIX_VALUE11(tmp);
34186cf0:	8afb      	ldrh	r3, [r7, #22]
34186cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186cf6:	2b00      	cmp	r3, #0
34186cf8:	d007      	beq.n	34186d0a <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x232>
34186cfa:	8afb      	ldrh	r3, [r7, #22]
34186cfc:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34186d00:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34186d04:	b29b      	uxth	r3, r3
34186d06:	b21b      	sxth	r3, r3
34186d08:	e001      	b.n	34186d0e <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x236>
34186d0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186d0e:	687a      	ldr	r2, [r7, #4]
34186d10:	82d3      	strh	r3, [r2, #22]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BG) >> DCMIPP_P1CCBR1_BG_Pos);
34186d12:	68fb      	ldr	r3, [r7, #12]
34186d14:	681b      	ldr	r3, [r3, #0]
34186d16:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
34186d1a:	0c1b      	lsrs	r3, r3, #16
34186d1c:	b29b      	uxth	r3, r3
34186d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186d22:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BG = (int16_t)GET_MATRIX_VALUE11(tmp);
34186d24:	8afb      	ldrh	r3, [r7, #22]
34186d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186d2a:	2b00      	cmp	r3, #0
34186d2c:	d007      	beq.n	34186d3e <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x266>
34186d2e:	8afb      	ldrh	r3, [r7, #22]
34186d30:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34186d34:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34186d38:	b29b      	uxth	r3, r3
34186d3a:	b21b      	sxth	r3, r3
34186d3c:	e001      	b.n	34186d42 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x26a>
34186d3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186d42:	687a      	ldr	r2, [r7, #4]
34186d44:	8293      	strh	r3, [r2, #20]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR) >> DCMIPP_P1CCBR1_BR_Pos);
34186d46:	68fb      	ldr	r3, [r7, #12]
34186d48:	681b      	ldr	r3, [r3, #0]
34186d4a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
34186d4e:	b29b      	uxth	r3, r3
34186d50:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186d54:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BR = (int16_t)GET_MATRIX_VALUE11(tmp);
34186d56:	8afb      	ldrh	r3, [r7, #22]
34186d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186d5c:	2b00      	cmp	r3, #0
34186d5e:	d007      	beq.n	34186d70 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x298>
34186d60:	8afb      	ldrh	r3, [r7, #22]
34186d62:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34186d66:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34186d6a:	b29b      	uxth	r3, r3
34186d6c:	b21b      	sxth	r3, r3
34186d6e:	e001      	b.n	34186d74 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x29c>
34186d70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34186d74:	687a      	ldr	r2, [r7, #4]
34186d76:	8253      	strh	r3, [r2, #18]
  }
}
34186d78:	bf00      	nop
34186d7a:	371c      	adds	r7, #28
34186d7c:	46bd      	mov	sp, r7
34186d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186d82:	4770      	bx	lr

34186d84 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPExposure(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186d84:	b480      	push	{r7}
34186d86:	b083      	sub	sp, #12
34186d88:	af00      	add	r7, sp, #0
34186d8a:	6078      	str	r0, [r7, #4]
34186d8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186d8e:	683b      	ldr	r3, [r7, #0]
34186d90:	2b01      	cmp	r3, #1
34186d92:	d10b      	bne.n	34186dac <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE) == DCMIPP_P1EXCR1_ENABLE) ? 1U : 0U);
34186d94:	687b      	ldr	r3, [r7, #4]
34186d96:	681b      	ldr	r3, [r3, #0]
34186d98:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
34186d9c:	f003 0301 	and.w	r3, r3, #1
34186da0:	2b01      	cmp	r3, #1
34186da2:	d101      	bne.n	34186da8 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x24>
34186da4:	2301      	movs	r3, #1
34186da6:	e002      	b.n	34186dae <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x2a>
34186da8:	2300      	movs	r3, #0
34186daa:	e000      	b.n	34186dae <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x2a>
  }
  else
  {
    /* State Disabled */
    return 0;
34186dac:	2300      	movs	r3, #0
  }
}
34186dae:	4618      	mov	r0, r3
34186db0:	370c      	adds	r7, #12
34186db2:	46bd      	mov	sp, r7
34186db4:	f85d 7b04 	ldr.w	r7, [sp], #4
34186db8:	4770      	bx	lr

34186dba <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Pipe to be checked
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPColorConversion(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186dba:	b480      	push	{r7}
34186dbc:	b083      	sub	sp, #12
34186dbe:	af00      	add	r7, sp, #0
34186dc0:	6078      	str	r0, [r7, #4]
34186dc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34186dc4:	683b      	ldr	r3, [r7, #0]
34186dc6:	2b01      	cmp	r3, #1
34186dc8:	d10b      	bne.n	34186de2 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE) == DCMIPP_P1CCCR_ENABLE) ? 1U : 0U);
34186dca:	687b      	ldr	r3, [r7, #4]
34186dcc:	681b      	ldr	r3, [r3, #0]
34186dce:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
34186dd2:	f003 0301 	and.w	r3, r3, #1
34186dd6:	2b01      	cmp	r3, #1
34186dd8:	d101      	bne.n	34186dde <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x24>
34186dda:	2301      	movs	r3, #1
34186ddc:	e002      	b.n	34186de4 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x2a>
34186dde:	2300      	movs	r3, #0
34186de0:	e000      	b.n	34186de4 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x2a>
  }
  else
  {
    /* State Disabled */
    return 0;
34186de2:	2300      	movs	r3, #0
  }
}
34186de4:	4618      	mov	r0, r3
34186de6:	370c      	adds	r7, #12
34186de8:	46bd      	mov	sp, r7
34186dea:	f85d 7b04 	ldr.w	r7, [sp], #4
34186dee:	4770      	bx	lr

34186df0 <HAL_DCMIPP_GetState>:
  * @brief  Return the DCMIPP state
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval HAL state
  */
HAL_DCMIPP_StateTypeDef HAL_DCMIPP_GetState(const DCMIPP_HandleTypeDef *hdcmipp)
{
34186df0:	b480      	push	{r7}
34186df2:	b083      	sub	sp, #12
34186df4:	af00      	add	r7, sp, #0
34186df6:	6078      	str	r0, [r7, #4]
  return hdcmipp->State;
34186df8:	687b      	ldr	r3, [r7, #4]
34186dfa:	791b      	ldrb	r3, [r3, #4]
34186dfc:	b2db      	uxtb	r3, r3
}
34186dfe:	4618      	mov	r0, r3
34186e00:	370c      	adds	r7, #12
34186e02:	46bd      	mov	sp, r7
34186e04:	f85d 7b04 	ldr.w	r7, [sp], #4
34186e08:	4770      	bx	lr

34186e0a <Pipe_Config>:
  * @param  pPipeConfig pointer to the DCMIPP_PipeConfTypeDef structure that contains
  *                     the configuration information for the pipe.
  * @retval None
  */
static void Pipe_Config(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, const DCMIPP_PipeConfTypeDef *pPipeConfig)
{
34186e0a:	b480      	push	{r7}
34186e0c:	b085      	sub	sp, #20
34186e0e:	af00      	add	r7, sp, #0
34186e10:	60f8      	str	r0, [r7, #12]
34186e12:	60b9      	str	r1, [r7, #8]
34186e14:	607a      	str	r2, [r7, #4]
  if (Pipe == DCMIPP_PIPE0)
34186e16:	68bb      	ldr	r3, [r7, #8]
34186e18:	2b00      	cmp	r3, #0
34186e1a:	d10d      	bne.n	34186e38 <Pipe_Config+0x2e>
  {
    /* Configure Pipe0 */
    /* Configure Frame Rate */
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
34186e1c:	68fb      	ldr	r3, [r7, #12]
34186e1e:	681b      	ldr	r3, [r3, #0]
34186e20:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34186e24:	f023 0103 	bic.w	r1, r3, #3
34186e28:	687b      	ldr	r3, [r7, #4]
34186e2a:	681a      	ldr	r2, [r3, #0]
34186e2c:	68fb      	ldr	r3, [r7, #12]
34186e2e:	681b      	ldr	r3, [r3, #0]
34186e30:	430a      	orrs	r2, r1
34186e32:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    /* Configure Pixel Pipe Pitch */
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH,
               pPipeConfig->PixelPipePitch << DCMIPP_P2PPM0PR_PITCH_Pos);
  }
}
34186e36:	e081      	b.n	34186f3c <Pipe_Config+0x132>
  else if (Pipe == DCMIPP_PIPE1)
34186e38:	68bb      	ldr	r3, [r7, #8]
34186e3a:	2b01      	cmp	r3, #1
34186e3c:	d155      	bne.n	34186eea <Pipe_Config+0xe0>
    MODIFY_REG(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_FRATE, pPipeConfig->FrameRate);
34186e3e:	68fb      	ldr	r3, [r7, #12]
34186e40:	681b      	ldr	r3, [r3, #0]
34186e42:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
34186e46:	f023 0103 	bic.w	r1, r3, #3
34186e4a:	687b      	ldr	r3, [r7, #4]
34186e4c:	681a      	ldr	r2, [r3, #0]
34186e4e:	68fb      	ldr	r3, [r7, #12]
34186e50:	681b      	ldr	r3, [r3, #0]
34186e52:	430a      	orrs	r2, r1
34186e54:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
34186e58:	68fb      	ldr	r3, [r7, #12]
34186e5a:	681b      	ldr	r3, [r3, #0]
34186e5c:	f8d3 39c0 	ldr.w	r3, [r3, #2496]	@ 0x9c0
34186e60:	f023 010f 	bic.w	r1, r3, #15
34186e64:	687b      	ldr	r3, [r7, #4]
34186e66:	689a      	ldr	r2, [r3, #8]
34186e68:	68fb      	ldr	r3, [r7, #12]
34186e6a:	681b      	ldr	r3, [r3, #0]
34186e6c:	430a      	orrs	r2, r1
34186e6e:	f8c3 29c0 	str.w	r2, [r3, #2496]	@ 0x9c0
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
34186e72:	68fb      	ldr	r3, [r7, #12]
34186e74:	681b      	ldr	r3, [r3, #0]
34186e76:	f8d3 39cc 	ldr.w	r3, [r3, #2508]	@ 0x9cc
34186e7a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34186e7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34186e82:	687a      	ldr	r2, [r7, #4]
34186e84:	6851      	ldr	r1, [r2, #4]
34186e86:	68fa      	ldr	r2, [r7, #12]
34186e88:	6812      	ldr	r2, [r2, #0]
34186e8a:	430b      	orrs	r3, r1
34186e8c:	f8c2 39cc 	str.w	r3, [r2, #2508]	@ 0x9cc
    if ((pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV422_2) ||
34186e90:	687b      	ldr	r3, [r7, #4]
34186e92:	689b      	ldr	r3, [r3, #8]
34186e94:	2b07      	cmp	r3, #7
34186e96:	d003      	beq.n	34186ea0 <Pipe_Config+0x96>
        (pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV420_2))
34186e98:	687b      	ldr	r3, [r7, #4]
34186e9a:	689b      	ldr	r3, [r3, #8]
    if ((pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV422_2) ||
34186e9c:	2b08      	cmp	r3, #8
34186e9e:	d10f      	bne.n	34186ec0 <Pipe_Config+0xb6>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
34186ea0:	68fb      	ldr	r3, [r7, #12]
34186ea2:	681b      	ldr	r3, [r3, #0]
34186ea4:	f8d3 39dc 	ldr.w	r3, [r3, #2524]	@ 0x9dc
34186ea8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34186eac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34186eb0:	687a      	ldr	r2, [r7, #4]
34186eb2:	6851      	ldr	r1, [r2, #4]
34186eb4:	68fa      	ldr	r2, [r7, #12]
34186eb6:	6812      	ldr	r2, [r2, #0]
34186eb8:	430b      	orrs	r3, r1
34186eba:	f8c2 39dc 	str.w	r3, [r2, #2524]	@ 0x9dc
}
34186ebe:	e03d      	b.n	34186f3c <Pipe_Config+0x132>
    else if (pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV420_3)
34186ec0:	687b      	ldr	r3, [r7, #4]
34186ec2:	689b      	ldr	r3, [r3, #8]
34186ec4:	2b09      	cmp	r3, #9
34186ec6:	d139      	bne.n	34186f3c <Pipe_Config+0x132>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
34186ec8:	68fb      	ldr	r3, [r7, #12]
34186eca:	681b      	ldr	r3, [r3, #0]
34186ecc:	f8d3 39dc 	ldr.w	r3, [r3, #2524]	@ 0x9dc
34186ed0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34186ed4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34186ed8:	687a      	ldr	r2, [r7, #4]
34186eda:	6852      	ldr	r2, [r2, #4]
34186edc:	0851      	lsrs	r1, r2, #1
34186ede:	68fa      	ldr	r2, [r7, #12]
34186ee0:	6812      	ldr	r2, [r2, #0]
34186ee2:	430b      	orrs	r3, r1
34186ee4:	f8c2 39dc 	str.w	r3, [r2, #2524]	@ 0x9dc
}
34186ee8:	e028      	b.n	34186f3c <Pipe_Config+0x132>
    MODIFY_REG(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_FRATE, pPipeConfig->FrameRate);
34186eea:	68fb      	ldr	r3, [r7, #12]
34186eec:	681b      	ldr	r3, [r3, #0]
34186eee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
34186ef2:	f023 0103 	bic.w	r1, r3, #3
34186ef6:	687b      	ldr	r3, [r7, #4]
34186ef8:	681a      	ldr	r2, [r3, #0]
34186efa:	68fb      	ldr	r3, [r7, #12]
34186efc:	681b      	ldr	r3, [r3, #0]
34186efe:	430a      	orrs	r2, r1
34186f00:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
34186f04:	68fb      	ldr	r3, [r7, #12]
34186f06:	681b      	ldr	r3, [r3, #0]
34186f08:	f8d3 3dc0 	ldr.w	r3, [r3, #3520]	@ 0xdc0
34186f0c:	f023 010f 	bic.w	r1, r3, #15
34186f10:	687b      	ldr	r3, [r7, #4]
34186f12:	689a      	ldr	r2, [r3, #8]
34186f14:	68fb      	ldr	r3, [r7, #12]
34186f16:	681b      	ldr	r3, [r3, #0]
34186f18:	430a      	orrs	r2, r1
34186f1a:	f8c3 2dc0 	str.w	r2, [r3, #3520]	@ 0xdc0
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH,
34186f1e:	68fb      	ldr	r3, [r7, #12]
34186f20:	681b      	ldr	r3, [r3, #0]
34186f22:	f8d3 3dcc 	ldr.w	r3, [r3, #3532]	@ 0xdcc
34186f26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34186f2a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34186f2e:	687a      	ldr	r2, [r7, #4]
34186f30:	6851      	ldr	r1, [r2, #4]
34186f32:	68fa      	ldr	r2, [r7, #12]
34186f34:	6812      	ldr	r2, [r2, #0]
34186f36:	430b      	orrs	r3, r1
34186f38:	f8c2 3dcc 	str.w	r3, [r2, #3532]	@ 0xdcc
}
34186f3c:	bf00      	nop
34186f3e:	3714      	adds	r7, #20
34186f40:	46bd      	mov	sp, r7
34186f42:	f85d 7b04 	ldr.w	r7, [sp], #4
34186f46:	4770      	bx	lr

34186f48 <DCMIPP_CSI_WritePHYReg>:
  * @param  reg_lsb specifies the testcode LSB in testdin
  * @param  val     specifies the page offset in testdin
  * @retval None
  */
static void DCMIPP_CSI_WritePHYReg(CSI_TypeDef *hcsi, uint32_t reg_msb, uint32_t reg_lsb, uint32_t val)
{
34186f48:	b480      	push	{r7}
34186f4a:	b085      	sub	sp, #20
34186f4c:	af00      	add	r7, sp, #0
34186f4e:	60f8      	str	r0, [r7, #12]
34186f50:	60b9      	str	r1, [r7, #8]
34186f52:	607a      	str	r2, [r7, #4]
34186f54:	603b      	str	r3, [r7, #0]
  /* Based on sequence described at section 5.2.3.2 of DesignWave document */
  /* For writing the 4-bit testcode MSBs */
  /* Set testen to high */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
34186f56:	68fb      	ldr	r3, [r7, #12]
34186f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186f5c:	695b      	ldr	r3, [r3, #20]
34186f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34186f62:	68fa      	ldr	r2, [r7, #12]
34186f64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34186f68:	6153      	str	r3, [r2, #20]

  /* Set testclk to high */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34186f6a:	68fb      	ldr	r3, [r7, #12]
34186f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186f70:	691b      	ldr	r3, [r3, #16]
34186f72:	f043 0301 	orr.w	r3, r3, #1
34186f76:	68fa      	ldr	r2, [r7, #12]
34186f78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34186f7c:	6113      	str	r3, [r2, #16]

  /* Place 0x00 in testdin */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
34186f7e:	68fb      	ldr	r3, [r7, #12]
34186f80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186f84:	695b      	ldr	r3, [r3, #20]
34186f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34186f8a:	68fa      	ldr	r2, [r7, #12]
34186f8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34186f90:	6153      	str	r3, [r2, #20]

  /* Set testclk to low (with the falling edge on testclk, the testdin signal content is latched internally) */
  CLEAR_REG(hcsi->PTCR0);
34186f92:	68fb      	ldr	r3, [r7, #12]
34186f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186f98:	461a      	mov	r2, r3
34186f9a:	2300      	movs	r3, #0
34186f9c:	6113      	str	r3, [r2, #16]

  /* Set testen to low */
  CLEAR_REG(hcsi->PTCR1);
34186f9e:	68fb      	ldr	r3, [r7, #12]
34186fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186fa4:	461a      	mov	r2, r3
34186fa6:	2300      	movs	r3, #0
34186fa8:	6153      	str	r3, [r2, #20]

  /* Place the 8-bit word corresponding to the testcode MSBs in testdin */
  SET_BIT(hcsi->PTCR1, reg_msb & 0xFFU);
34186faa:	68fb      	ldr	r3, [r7, #12]
34186fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186fb0:	695a      	ldr	r2, [r3, #20]
34186fb2:	68bb      	ldr	r3, [r7, #8]
34186fb4:	b2db      	uxtb	r3, r3
34186fb6:	4313      	orrs	r3, r2
34186fb8:	68fa      	ldr	r2, [r7, #12]
34186fba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34186fbe:	6153      	str	r3, [r2, #20]

  /* Set testclk to high */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34186fc0:	68fb      	ldr	r3, [r7, #12]
34186fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186fc6:	691b      	ldr	r3, [r3, #16]
34186fc8:	f043 0301 	orr.w	r3, r3, #1
34186fcc:	68fa      	ldr	r2, [r7, #12]
34186fce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34186fd2:	6113      	str	r3, [r2, #16]

  /* For writing the 8-bit testcode LSBs */
  /* Set testclk to low */
  CLEAR_REG(hcsi->PTCR0);
34186fd4:	68fb      	ldr	r3, [r7, #12]
34186fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186fda:	461a      	mov	r2, r3
34186fdc:	2300      	movs	r3, #0
34186fde:	6113      	str	r3, [r2, #16]

  /* Set testen to high */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
34186fe0:	68fb      	ldr	r3, [r7, #12]
34186fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186fe6:	695b      	ldr	r3, [r3, #20]
34186fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34186fec:	68fa      	ldr	r2, [r7, #12]
34186fee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34186ff2:	6153      	str	r3, [r2, #20]

  /* Set testclk to high */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34186ff4:	68fb      	ldr	r3, [r7, #12]
34186ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34186ffa:	691b      	ldr	r3, [r3, #16]
34186ffc:	f043 0301 	orr.w	r3, r3, #1
34187000:	68fa      	ldr	r2, [r7, #12]
34187002:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34187006:	6113      	str	r3, [r2, #16]

  /* Place the 8-bit word test data in testdin */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM | (reg_lsb & 0xFFU));
34187008:	68fb      	ldr	r3, [r7, #12]
3418700a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418700e:	695a      	ldr	r2, [r3, #20]
34187010:	687b      	ldr	r3, [r7, #4]
34187012:	b2db      	uxtb	r3, r3
34187014:	4313      	orrs	r3, r2
34187016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418701a:	68fa      	ldr	r2, [r7, #12]
3418701c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34187020:	6153      	str	r3, [r2, #20]

  /* Set testclk to low (with the falling edge on testclk, the testdin signal content is latched internally) */
  CLEAR_REG(hcsi->PTCR0);
34187022:	68fb      	ldr	r3, [r7, #12]
34187024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34187028:	461a      	mov	r2, r3
3418702a:	2300      	movs	r3, #0
3418702c:	6113      	str	r3, [r2, #16]

  /* Set testen to low */
  CLEAR_REG(hcsi->PTCR1);
3418702e:	68fb      	ldr	r3, [r7, #12]
34187030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34187034:	461a      	mov	r2, r3
34187036:	2300      	movs	r3, #0
34187038:	6153      	str	r3, [r2, #20]

  /* For writing the data */
  /* Place the 8-bit word corresponding to the page offset in testdin */
  SET_BIT(hcsi->PTCR1, val & 0xFFU);
3418703a:	68fb      	ldr	r3, [r7, #12]
3418703c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34187040:	695a      	ldr	r2, [r3, #20]
34187042:	683b      	ldr	r3, [r7, #0]
34187044:	b2db      	uxtb	r3, r3
34187046:	4313      	orrs	r3, r2
34187048:	68fa      	ldr	r2, [r7, #12]
3418704a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418704e:	6153      	str	r3, [r2, #20]

  /* Set testclk to high (test data is programmed internally */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34187050:	68fb      	ldr	r3, [r7, #12]
34187052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34187056:	691b      	ldr	r3, [r3, #16]
34187058:	f043 0301 	orr.w	r3, r3, #1
3418705c:	68fa      	ldr	r2, [r7, #12]
3418705e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34187062:	6113      	str	r3, [r2, #16]

  /* Finish by setting testclk to low */
  CLEAR_REG(hcsi->PTCR0);
34187064:	68fb      	ldr	r3, [r7, #12]
34187066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418706a:	461a      	mov	r2, r3
3418706c:	2300      	movs	r3, #0
3418706e:	6113      	str	r3, [r2, #16]
}
34187070:	bf00      	nop
34187072:	3714      	adds	r7, #20
34187074:	46bd      	mov	sp, r7
34187076:	f85d 7b04 	ldr.w	r7, [sp], #4
3418707a:	4770      	bx	lr

3418707c <DCMIPP_SetConfig>:
  * @param  DstAddress  Specifies the destination memory address for the captured data.
  * @param  CaptureMode Specifies the capture mode to be set for the pipe.
  * @retval None
  */
static void DCMIPP_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t DstAddress, uint32_t CaptureMode)
{
3418707c:	b480      	push	{r7}
3418707e:	b085      	sub	sp, #20
34187080:	af00      	add	r7, sp, #0
34187082:	60f8      	str	r0, [r7, #12]
34187084:	60b9      	str	r1, [r7, #8]
34187086:	607a      	str	r2, [r7, #4]
34187088:	603b      	str	r3, [r7, #0]
  if (Pipe == DCMIPP_PIPE0)
3418708a:	68bb      	ldr	r3, [r7, #8]
3418708c:	2b00      	cmp	r3, #0
3418708e:	d121      	bne.n	341870d4 <DCMIPP_SetConfig+0x58>
  {
    /* Update the DCMIPP pipe State */
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34187090:	68fa      	ldr	r2, [r7, #12]
34187092:	68bb      	ldr	r3, [r7, #8]
34187094:	4413      	add	r3, r2
34187096:	3305      	adds	r3, #5
34187098:	2202      	movs	r2, #2
3418709a:	701a      	strb	r2, [r3, #0]

    /* Set the capture mode */
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
3418709c:	68fb      	ldr	r3, [r7, #12]
3418709e:	681b      	ldr	r3, [r3, #0]
341870a0:	f8d3 1500 	ldr.w	r1, [r3, #1280]	@ 0x500
341870a4:	68fb      	ldr	r3, [r7, #12]
341870a6:	681b      	ldr	r3, [r3, #0]
341870a8:	683a      	ldr	r2, [r7, #0]
341870aa:	430a      	orrs	r2, r1
341870ac:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    /* Set the destination address */
    WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
341870b0:	68fb      	ldr	r3, [r7, #12]
341870b2:	681b      	ldr	r3, [r3, #0]
341870b4:	687a      	ldr	r2, [r7, #4]
341870b6:	f8c3 25c4 	str.w	r2, [r3, #1476]	@ 0x5c4

    /* Enable all required interrupts lines for the PIPE0 */
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
341870ba:	68fb      	ldr	r3, [r7, #12]
341870bc:	681b      	ldr	r3, [r3, #0]
341870be:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
341870c2:	68fa      	ldr	r2, [r7, #12]
341870c4:	6812      	ldr	r2, [r2, #0]
341870c6:	f443 4306 	orr.w	r3, r3, #34304	@ 0x8600
341870ca:	f043 0320 	orr.w	r3, r3, #32
341870ce:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0

    /* Enable all required interrupts lines for the PIPE2 */
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
                           DCMIPP_IT_AXI_TRANSFER_ERROR);
  }
}
341870d2:	e045      	b.n	34187160 <DCMIPP_SetConfig+0xe4>
  else if (Pipe == DCMIPP_PIPE1)
341870d4:	68bb      	ldr	r3, [r7, #8]
341870d6:	2b01      	cmp	r3, #1
341870d8:	d121      	bne.n	3418711e <DCMIPP_SetConfig+0xa2>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
341870da:	68fa      	ldr	r2, [r7, #12]
341870dc:	68bb      	ldr	r3, [r7, #8]
341870de:	4413      	add	r3, r2
341870e0:	3305      	adds	r3, #5
341870e2:	2202      	movs	r2, #2
341870e4:	701a      	strb	r2, [r3, #0]
    hdcmipp->Instance->P1FCTCR |= CaptureMode;
341870e6:	68fb      	ldr	r3, [r7, #12]
341870e8:	681b      	ldr	r3, [r3, #0]
341870ea:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
341870ee:	68fb      	ldr	r3, [r7, #12]
341870f0:	681b      	ldr	r3, [r3, #0]
341870f2:	683a      	ldr	r2, [r7, #0]
341870f4:	430a      	orrs	r2, r1
341870f6:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
    WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
341870fa:	68fb      	ldr	r3, [r7, #12]
341870fc:	681b      	ldr	r3, [r3, #0]
341870fe:	687a      	ldr	r2, [r7, #4]
34187100:	f8c3 29c4 	str.w	r2, [r3, #2500]	@ 0x9c4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME  | DCMIPP_IT_PIPE1_OVR | DCMIPP_IT_PIPE1_VSYNC |
34187104:	68fb      	ldr	r3, [r7, #12]
34187106:	681b      	ldr	r3, [r3, #0]
34187108:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
3418710c:	68fa      	ldr	r2, [r7, #12]
3418710e:	6812      	ldr	r2, [r2, #0]
34187110:	f443 0306 	orr.w	r3, r3, #8781824	@ 0x860000
34187114:	f043 0320 	orr.w	r3, r3, #32
34187118:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
}
3418711c:	e020      	b.n	34187160 <DCMIPP_SetConfig+0xe4>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3418711e:	68fa      	ldr	r2, [r7, #12]
34187120:	68bb      	ldr	r3, [r7, #8]
34187122:	4413      	add	r3, r2
34187124:	3305      	adds	r3, #5
34187126:	2202      	movs	r2, #2
34187128:	701a      	strb	r2, [r3, #0]
    hdcmipp->Instance->P2FCTCR |= CaptureMode;
3418712a:	68fb      	ldr	r3, [r7, #12]
3418712c:	681b      	ldr	r3, [r3, #0]
3418712e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
34187132:	68fb      	ldr	r3, [r7, #12]
34187134:	681b      	ldr	r3, [r3, #0]
34187136:	683a      	ldr	r2, [r7, #0]
34187138:	430a      	orrs	r2, r1
3418713a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
    WRITE_REG(hdcmipp->Instance->P2PPM0AR1, DstAddress);
3418713e:	68fb      	ldr	r3, [r7, #12]
34187140:	681b      	ldr	r3, [r3, #0]
34187142:	687a      	ldr	r2, [r7, #4]
34187144:	f8c3 2dc4 	str.w	r2, [r3, #3524]	@ 0xdc4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
34187148:	68fb      	ldr	r3, [r7, #12]
3418714a:	681b      	ldr	r3, [r3, #0]
3418714c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
34187150:	68fa      	ldr	r2, [r7, #12]
34187152:	6812      	ldr	r2, [r2, #0]
34187154:	f043 4306 	orr.w	r3, r3, #2248146944	@ 0x86000000
34187158:	f043 0320 	orr.w	r3, r3, #32
3418715c:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
}
34187160:	bf00      	nop
34187162:	3714      	adds	r7, #20
34187164:	46bd      	mov	sp, r7
34187166:	f85d 7b04 	ldr.w	r7, [sp], #4
3418716a:	4770      	bx	lr

3418716c <DCMIPP_EnableCapture>:
  * @param  hdcmipp     Pointer to DCMIPP handle
  * @param  Pipe        Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
static void DCMIPP_EnableCapture(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418716c:	b480      	push	{r7}
3418716e:	b083      	sub	sp, #12
34187170:	af00      	add	r7, sp, #0
34187172:	6078      	str	r0, [r7, #4]
34187174:	6039      	str	r1, [r7, #0]
  if (Pipe == DCMIPP_PIPE0)
34187176:	683b      	ldr	r3, [r7, #0]
34187178:	2b00      	cmp	r3, #0
3418717a:	d114      	bne.n	341871a6 <DCMIPP_EnableCapture+0x3a>
  {
    /* Activate the Pipe */
    SET_BIT(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_PIPEN);
3418717c:	687b      	ldr	r3, [r7, #4]
3418717e:	681b      	ldr	r3, [r3, #0]
34187180:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
34187184:	687b      	ldr	r3, [r7, #4]
34187186:	681b      	ldr	r3, [r3, #0]
34187188:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3418718c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

    /* Start the capture */
    SET_BIT(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_CPTREQ);
34187190:	687b      	ldr	r3, [r7, #4]
34187192:	681b      	ldr	r3, [r3, #0]
34187194:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
34187198:	687b      	ldr	r3, [r7, #4]
3418719a:	681b      	ldr	r3, [r3, #0]
3418719c:	f042 0208 	orr.w	r2, r2, #8
341871a0:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
    SET_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);

    /* Start the capture */
    SET_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
  }
}
341871a4:	e031      	b.n	3418720a <DCMIPP_EnableCapture+0x9e>
  else if (Pipe == DCMIPP_PIPE1)
341871a6:	683b      	ldr	r3, [r7, #0]
341871a8:	2b01      	cmp	r3, #1
341871aa:	d11a      	bne.n	341871e2 <DCMIPP_EnableCapture+0x76>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
341871ac:	687a      	ldr	r2, [r7, #4]
341871ae:	683b      	ldr	r3, [r7, #0]
341871b0:	4413      	add	r3, r2
341871b2:	3305      	adds	r3, #5
341871b4:	2202      	movs	r2, #2
341871b6:	701a      	strb	r2, [r3, #0]
    SET_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEN);
341871b8:	687b      	ldr	r3, [r7, #4]
341871ba:	681b      	ldr	r3, [r3, #0]
341871bc:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
341871c0:	687b      	ldr	r3, [r7, #4]
341871c2:	681b      	ldr	r3, [r3, #0]
341871c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
341871c8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    SET_BIT(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_CPTREQ);
341871cc:	687b      	ldr	r3, [r7, #4]
341871ce:	681b      	ldr	r3, [r3, #0]
341871d0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
341871d4:	687b      	ldr	r3, [r7, #4]
341871d6:	681b      	ldr	r3, [r3, #0]
341871d8:	f042 0208 	orr.w	r2, r2, #8
341871dc:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
341871e0:	e013      	b.n	3418720a <DCMIPP_EnableCapture+0x9e>
    SET_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);
341871e2:	687b      	ldr	r3, [r7, #4]
341871e4:	681b      	ldr	r3, [r3, #0]
341871e6:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
341871ea:	687b      	ldr	r3, [r7, #4]
341871ec:	681b      	ldr	r3, [r3, #0]
341871ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
341871f2:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    SET_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
341871f6:	687b      	ldr	r3, [r7, #4]
341871f8:	681b      	ldr	r3, [r3, #0]
341871fa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
341871fe:	687b      	ldr	r3, [r7, #4]
34187200:	681b      	ldr	r3, [r3, #0]
34187202:	f042 0208 	orr.w	r2, r2, #8
34187206:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
}
3418720a:	bf00      	nop
3418720c:	370c      	adds	r7, #12
3418720e:	46bd      	mov	sp, r7
34187210:	f85d 7b04 	ldr.w	r7, [sp], #4
34187214:	4770      	bx	lr
	...

34187218 <DCMIPP_CSI_SetVCConfig>:
  * @param  hdcmipp         Pointer to DCMIPP handle
  * @param  Pipe            Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @param  VirtualChannel  Specifies the virtual channel, can be a value from @ref DCMIPP_Virtual_Channel
  */
static HAL_StatusTypeDef DCMIPP_CSI_SetVCConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel)
{
34187218:	b580      	push	{r7, lr}
3418721a:	b086      	sub	sp, #24
3418721c:	af00      	add	r7, sp, #0
3418721e:	60f8      	str	r0, [r7, #12]
34187220:	60b9      	str	r1, [r7, #8]
34187222:	607a      	str	r2, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34187224:	4b48      	ldr	r3, [pc, #288]	@ (34187348 <DCMIPP_CSI_SetVCConfig+0x130>)
34187226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Set Virtual Channel ID for the selected Pipe */
  if (Pipe == DCMIPP_PIPE0)
34187228:	68bb      	ldr	r3, [r7, #8]
3418722a:	2b00      	cmp	r3, #0
3418722c:	d10d      	bne.n	3418724a <DCMIPP_CSI_SetVCConfig+0x32>
  {
    MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_VC, VirtualChannel << DCMIPP_P0FSCR_VC_Pos);
3418722e:	68fb      	ldr	r3, [r7, #12]
34187230:	681b      	ldr	r3, [r3, #0]
34187232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
34187236:	f423 11c0 	bic.w	r1, r3, #1572864	@ 0x180000
3418723a:	687b      	ldr	r3, [r7, #4]
3418723c:	04da      	lsls	r2, r3, #19
3418723e:	68fb      	ldr	r3, [r7, #12]
34187240:	681b      	ldr	r3, [r3, #0]
34187242:	430a      	orrs	r2, r1
34187244:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
34187248:	e026      	b.n	34187298 <DCMIPP_CSI_SetVCConfig+0x80>
  }
  else if (Pipe == DCMIPP_PIPE1)
3418724a:	68bb      	ldr	r3, [r7, #8]
3418724c:	2b01      	cmp	r3, #1
3418724e:	d10d      	bne.n	3418726c <DCMIPP_CSI_SetVCConfig+0x54>
  {
    MODIFY_REG(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_VC, VirtualChannel << DCMIPP_P1FSCR_VC_Pos);
34187250:	68fb      	ldr	r3, [r7, #12]
34187252:	681b      	ldr	r3, [r3, #0]
34187254:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
34187258:	f423 11c0 	bic.w	r1, r3, #1572864	@ 0x180000
3418725c:	687b      	ldr	r3, [r7, #4]
3418725e:	04da      	lsls	r2, r3, #19
34187260:	68fb      	ldr	r3, [r7, #12]
34187262:	681b      	ldr	r3, [r3, #0]
34187264:	430a      	orrs	r2, r1
34187266:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
3418726a:	e015      	b.n	34187298 <DCMIPP_CSI_SetVCConfig+0x80>
  }
  else
  {
    /* Those bit fields are meaningful when PIPEDIFF = 1: Pipe1, Pipe2 is fully independent */
    if ((hdcmipp->Instance->P1FSCR & DCMIPP_P1FSCR_PIPEDIFF) == DCMIPP_P1FSCR_PIPEDIFF)
3418726c:	68fb      	ldr	r3, [r7, #12]
3418726e:	681b      	ldr	r3, [r3, #0]
34187270:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
34187274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34187278:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418727c:	d10c      	bne.n	34187298 <DCMIPP_CSI_SetVCConfig+0x80>
    {
      /* Set Virtual Channel ID and DTIDA for Pipe2 */
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_VC, VirtualChannel << DCMIPP_P2FSCR_VC_Pos);
3418727e:	68fb      	ldr	r3, [r7, #12]
34187280:	681b      	ldr	r3, [r3, #0]
34187282:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34187286:	f423 11c0 	bic.w	r1, r3, #1572864	@ 0x180000
3418728a:	687b      	ldr	r3, [r7, #4]
3418728c:	04da      	lsls	r2, r3, #19
3418728e:	68fb      	ldr	r3, [r7, #12]
34187290:	681b      	ldr	r3, [r3, #0]
34187292:	430a      	orrs	r2, r1
34187294:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    }
  }

  /* Enable the selected virtual channel */
  switch (VirtualChannel)
34187298:	687b      	ldr	r3, [r7, #4]
3418729a:	2b03      	cmp	r3, #3
3418729c:	d017      	beq.n	341872ce <DCMIPP_CSI_SetVCConfig+0xb6>
3418729e:	687b      	ldr	r3, [r7, #4]
341872a0:	2b03      	cmp	r3, #3
341872a2:	d81b      	bhi.n	341872dc <DCMIPP_CSI_SetVCConfig+0xc4>
341872a4:	687b      	ldr	r3, [r7, #4]
341872a6:	2b01      	cmp	r3, #1
341872a8:	d003      	beq.n	341872b2 <DCMIPP_CSI_SetVCConfig+0x9a>
341872aa:	687b      	ldr	r3, [r7, #4]
341872ac:	2b02      	cmp	r3, #2
341872ae:	d007      	beq.n	341872c0 <DCMIPP_CSI_SetVCConfig+0xa8>
341872b0:	e014      	b.n	341872dc <DCMIPP_CSI_SetVCConfig+0xc4>
  {
    case DCMIPP_VIRTUAL_CHANNEL1:
      SET_BIT(csi_instance->CR, CSI_CR_VC1START);
341872b2:	697b      	ldr	r3, [r7, #20]
341872b4:	681b      	ldr	r3, [r3, #0]
341872b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
341872ba:	697b      	ldr	r3, [r7, #20]
341872bc:	601a      	str	r2, [r3, #0]
      break;
341872be:	e014      	b.n	341872ea <DCMIPP_CSI_SetVCConfig+0xd2>
    case DCMIPP_VIRTUAL_CHANNEL2:
      SET_BIT(csi_instance->CR, CSI_CR_VC2START);
341872c0:	697b      	ldr	r3, [r7, #20]
341872c2:	681b      	ldr	r3, [r3, #0]
341872c4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
341872c8:	697b      	ldr	r3, [r7, #20]
341872ca:	601a      	str	r2, [r3, #0]
      break;
341872cc:	e00d      	b.n	341872ea <DCMIPP_CSI_SetVCConfig+0xd2>
    case DCMIPP_VIRTUAL_CHANNEL3:
      SET_BIT(csi_instance->CR, CSI_CR_VC3START);
341872ce:	697b      	ldr	r3, [r7, #20]
341872d0:	681b      	ldr	r3, [r3, #0]
341872d2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
341872d6:	697b      	ldr	r3, [r7, #20]
341872d8:	601a      	str	r2, [r3, #0]
      break;
341872da:	e006      	b.n	341872ea <DCMIPP_CSI_SetVCConfig+0xd2>
    default:
      /* DCMIPP_VIRTUAL_CHANNEL0: */
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
341872dc:	697b      	ldr	r3, [r7, #20]
341872de:	681b      	ldr	r3, [r3, #0]
341872e0:	f043 0204 	orr.w	r2, r3, #4
341872e4:	697b      	ldr	r3, [r7, #20]
341872e6:	601a      	str	r2, [r3, #0]
      break;
341872e8:	bf00      	nop
  }

  /* wait for the selected virtual channel active state */
  tickstart = HAL_GetTick();
341872ea:	f7fd f8df 	bl	341844ac <HAL_GetTick>
341872ee:	6138      	str	r0, [r7, #16]
  do
  {
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
341872f0:	f7fd f8dc 	bl	341844ac <HAL_GetTick>
341872f4:	4602      	mov	r2, r0
341872f6:	693b      	ldr	r3, [r7, #16]
341872f8:	1ad3      	subs	r3, r2, r3
341872fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
341872fe:	d901      	bls.n	34187304 <DCMIPP_CSI_SetVCConfig+0xec>
    {
      return HAL_ERROR;
34187300:	2301      	movs	r3, #1
34187302:	e01c      	b.n	3418733e <DCMIPP_CSI_SetVCConfig+0x126>
    }
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
34187304:	697b      	ldr	r3, [r7, #20]
34187306:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3418730a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3418730e:	687b      	ldr	r3, [r7, #4]
34187310:	fa01 f303 	lsl.w	r3, r1, r3
34187314:	401a      	ands	r2, r3
34187316:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3418731a:	687b      	ldr	r3, [r7, #4]
3418731c:	fa01 f303 	lsl.w	r3, r1, r3
34187320:	429a      	cmp	r2, r3
34187322:	d1e5      	bne.n	341872f0 <DCMIPP_CSI_SetVCConfig+0xd8>

  /* Enable the SOF and EOF interrupts for the selected virtual channel */
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
34187324:	697b      	ldr	r3, [r7, #20]
34187326:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3418732a:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
3418732e:	687b      	ldr	r3, [r7, #4]
34187330:	fa01 f303 	lsl.w	r3, r1, r3
34187334:	431a      	orrs	r2, r3
34187336:	697b      	ldr	r3, [r7, #20]
34187338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (DCMIPP_CSI_IT_SOF0 << VirtualChannel));
  return HAL_OK;
3418733c:	2300      	movs	r3, #0
}
3418733e:	4618      	mov	r0, r3
34187340:	3718      	adds	r7, #24
34187342:	46bd      	mov	sp, r7
34187344:	bd80      	pop	{r7, pc}
34187346:	bf00      	nop
34187348:	58006000 	.word	0x58006000

3418734c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
3418734c:	b580      	push	{r7, lr}
3418734e:	b082      	sub	sp, #8
34187350:	af00      	add	r7, sp, #0
34187352:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
34187354:	687b      	ldr	r3, [r7, #4]
34187356:	2b00      	cmp	r3, #0
34187358:	d101      	bne.n	3418735e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
3418735a:	2301      	movs	r3, #1
3418735c:	e053      	b.n	34187406 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
3418735e:	687b      	ldr	r3, [r7, #4]
34187360:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
34187364:	b2db      	uxtb	r3, r3
34187366:	2b00      	cmp	r3, #0
34187368:	d106      	bne.n	34187378 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
3418736a:	687b      	ldr	r3, [r7, #4]
3418736c:	2200      	movs	r2, #0
3418736e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
34187372:	6878      	ldr	r0, [r7, #4]
34187374:	f000 f84b 	bl	3418740e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
34187378:	687b      	ldr	r3, [r7, #4]
3418737a:	2202      	movs	r2, #2
3418737c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
34187380:	687b      	ldr	r3, [r7, #4]
34187382:	681b      	ldr	r3, [r3, #0]
34187384:	681b      	ldr	r3, [r3, #0]
34187386:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3418738a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418738e:	687a      	ldr	r2, [r7, #4]
34187390:	6851      	ldr	r1, [r2, #4]
34187392:	687a      	ldr	r2, [r7, #4]
34187394:	69d2      	ldr	r2, [r2, #28]
34187396:	4311      	orrs	r1, r2
34187398:	687a      	ldr	r2, [r7, #4]
3418739a:	6812      	ldr	r2, [r2, #0]
3418739c:	430b      	orrs	r3, r1
3418739e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
341873a0:	687b      	ldr	r3, [r7, #4]
341873a2:	681b      	ldr	r3, [r3, #0]
341873a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
341873a6:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
341873aa:	f023 0301 	bic.w	r3, r3, #1
341873ae:	687a      	ldr	r2, [r7, #4]
341873b0:	6891      	ldr	r1, [r2, #8]
341873b2:	687a      	ldr	r2, [r7, #4]
341873b4:	6992      	ldr	r2, [r2, #24]
341873b6:	4311      	orrs	r1, r2
341873b8:	687a      	ldr	r2, [r7, #4]
341873ba:	6812      	ldr	r2, [r2, #0]
341873bc:	430b      	orrs	r3, r1
341873be:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
341873c0:	687b      	ldr	r3, [r7, #4]
341873c2:	681b      	ldr	r3, [r3, #0]
341873c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341873c6:	0c1b      	lsrs	r3, r3, #16
341873c8:	041b      	lsls	r3, r3, #16
341873ca:	687a      	ldr	r2, [r7, #4]
341873cc:	68d1      	ldr	r1, [r2, #12]
341873ce:	687a      	ldr	r2, [r7, #4]
341873d0:	6812      	ldr	r2, [r2, #0]
341873d2:	430b      	orrs	r3, r1
341873d4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
341873d6:	687b      	ldr	r3, [r7, #4]
341873d8:	681b      	ldr	r3, [r3, #0]
341873da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
341873dc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
341873e0:	687b      	ldr	r3, [r7, #4]
341873e2:	691b      	ldr	r3, [r3, #16]
341873e4:	051a      	lsls	r2, r3, #20
341873e6:	687b      	ldr	r3, [r7, #4]
341873e8:	695b      	ldr	r3, [r3, #20]
341873ea:	055b      	lsls	r3, r3, #21
341873ec:	431a      	orrs	r2, r3
341873ee:	687b      	ldr	r3, [r7, #4]
341873f0:	681b      	ldr	r3, [r3, #0]
341873f2:	430a      	orrs	r2, r1
341873f4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
341873f6:	687b      	ldr	r3, [r7, #4]
341873f8:	2200      	movs	r2, #0
341873fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
341873fc:	687b      	ldr	r3, [r7, #4]
341873fe:	2201      	movs	r2, #1
34187400:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
34187404:	2300      	movs	r3, #0
}
34187406:	4618      	mov	r0, r3
34187408:	3708      	adds	r7, #8
3418740a:	46bd      	mov	sp, r7
3418740c:	bd80      	pop	{r7, pc}

3418740e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
3418740e:	b480      	push	{r7}
34187410:	b083      	sub	sp, #12
34187412:	af00      	add	r7, sp, #0
34187414:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
34187416:	bf00      	nop
34187418:	370c      	adds	r7, #12
3418741a:	46bd      	mov	sp, r7
3418741c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187420:	4770      	bx	lr

34187422 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
34187422:	b580      	push	{r7, lr}
34187424:	b086      	sub	sp, #24
34187426:	af02      	add	r7, sp, #8
34187428:	60f8      	str	r0, [r7, #12]
3418742a:	60b9      	str	r1, [r7, #8]
3418742c:	607a      	str	r2, [r7, #4]
3418742e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
34187430:	68fb      	ldr	r3, [r7, #12]
34187432:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
34187436:	2b01      	cmp	r3, #1
34187438:	d101      	bne.n	3418743e <HAL_DMA2D_Start+0x1c>
3418743a:	2302      	movs	r3, #2
3418743c:	e018      	b.n	34187470 <HAL_DMA2D_Start+0x4e>
3418743e:	68fb      	ldr	r3, [r7, #12]
34187440:	2201      	movs	r2, #1
34187442:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
34187446:	68fb      	ldr	r3, [r7, #12]
34187448:	2202      	movs	r2, #2
3418744a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
3418744e:	69bb      	ldr	r3, [r7, #24]
34187450:	9300      	str	r3, [sp, #0]
34187452:	683b      	ldr	r3, [r7, #0]
34187454:	687a      	ldr	r2, [r7, #4]
34187456:	68b9      	ldr	r1, [r7, #8]
34187458:	68f8      	ldr	r0, [r7, #12]
3418745a:	f000 f9a5 	bl	341877a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
3418745e:	68fb      	ldr	r3, [r7, #12]
34187460:	681b      	ldr	r3, [r3, #0]
34187462:	681a      	ldr	r2, [r3, #0]
34187464:	68fb      	ldr	r3, [r7, #12]
34187466:	681b      	ldr	r3, [r3, #0]
34187468:	f042 0201 	orr.w	r2, r2, #1
3418746c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
3418746e:	2300      	movs	r3, #0
}
34187470:	4618      	mov	r0, r3
34187472:	3710      	adds	r7, #16
34187474:	46bd      	mov	sp, r7
34187476:	bd80      	pop	{r7, pc}

34187478 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
34187478:	b580      	push	{r7, lr}
3418747a:	b086      	sub	sp, #24
3418747c:	af00      	add	r7, sp, #0
3418747e:	6078      	str	r0, [r7, #4]
34187480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
34187482:	2300      	movs	r3, #0
34187484:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
34187486:	687b      	ldr	r3, [r7, #4]
34187488:	681b      	ldr	r3, [r3, #0]
3418748a:	681b      	ldr	r3, [r3, #0]
3418748c:	f003 0301 	and.w	r3, r3, #1
34187490:	2b00      	cmp	r3, #0
34187492:	d056      	beq.n	34187542 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
34187494:	f7fd f80a 	bl	341844ac <HAL_GetTick>
34187498:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
3418749a:	e04b      	b.n	34187534 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
3418749c:	687b      	ldr	r3, [r7, #4]
3418749e:	681b      	ldr	r3, [r3, #0]
341874a0:	685b      	ldr	r3, [r3, #4]
341874a2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
341874a4:	68fb      	ldr	r3, [r7, #12]
341874a6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
341874aa:	2b00      	cmp	r3, #0
341874ac:	d023      	beq.n	341874f6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
341874ae:	68fb      	ldr	r3, [r7, #12]
341874b0:	f003 0320 	and.w	r3, r3, #32
341874b4:	2b00      	cmp	r3, #0
341874b6:	d005      	beq.n	341874c4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
341874b8:	687b      	ldr	r3, [r7, #4]
341874ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
341874bc:	f043 0202 	orr.w	r2, r3, #2
341874c0:	687b      	ldr	r3, [r7, #4]
341874c2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
341874c4:	68fb      	ldr	r3, [r7, #12]
341874c6:	f003 0301 	and.w	r3, r3, #1
341874ca:	2b00      	cmp	r3, #0
341874cc:	d005      	beq.n	341874da <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
341874ce:	687b      	ldr	r3, [r7, #4]
341874d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
341874d2:	f043 0201 	orr.w	r2, r3, #1
341874d6:	687b      	ldr	r3, [r7, #4]
341874d8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
341874da:	687b      	ldr	r3, [r7, #4]
341874dc:	681b      	ldr	r3, [r3, #0]
341874de:	2221      	movs	r2, #33	@ 0x21
341874e0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
341874e2:	687b      	ldr	r3, [r7, #4]
341874e4:	2204      	movs	r2, #4
341874e6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
341874ea:	687b      	ldr	r3, [r7, #4]
341874ec:	2200      	movs	r2, #0
341874ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
341874f2:	2301      	movs	r3, #1
341874f4:	e0a5      	b.n	34187642 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
341874f6:	683b      	ldr	r3, [r7, #0]
341874f8:	f1b3 3fff 	cmp.w	r3, #4294967295
341874fc:	d01a      	beq.n	34187534 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
341874fe:	f7fc ffd5 	bl	341844ac <HAL_GetTick>
34187502:	4602      	mov	r2, r0
34187504:	697b      	ldr	r3, [r7, #20]
34187506:	1ad3      	subs	r3, r2, r3
34187508:	683a      	ldr	r2, [r7, #0]
3418750a:	429a      	cmp	r2, r3
3418750c:	d302      	bcc.n	34187514 <HAL_DMA2D_PollForTransfer+0x9c>
3418750e:	683b      	ldr	r3, [r7, #0]
34187510:	2b00      	cmp	r3, #0
34187512:	d10f      	bne.n	34187534 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
34187514:	687b      	ldr	r3, [r7, #4]
34187516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34187518:	f043 0220 	orr.w	r2, r3, #32
3418751c:	687b      	ldr	r3, [r7, #4]
3418751e:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
34187520:	687b      	ldr	r3, [r7, #4]
34187522:	2203      	movs	r2, #3
34187524:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
34187528:	687b      	ldr	r3, [r7, #4]
3418752a:	2200      	movs	r2, #0
3418752c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
34187530:	2303      	movs	r3, #3
34187532:	e086      	b.n	34187642 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
34187534:	687b      	ldr	r3, [r7, #4]
34187536:	681b      	ldr	r3, [r3, #0]
34187538:	685b      	ldr	r3, [r3, #4]
3418753a:	f003 0302 	and.w	r3, r3, #2
3418753e:	2b00      	cmp	r3, #0
34187540:	d0ac      	beq.n	3418749c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
34187542:	687b      	ldr	r3, [r7, #4]
34187544:	681b      	ldr	r3, [r3, #0]
34187546:	69db      	ldr	r3, [r3, #28]
34187548:	f003 0320 	and.w	r3, r3, #32
3418754c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
3418754e:	687b      	ldr	r3, [r7, #4]
34187550:	681b      	ldr	r3, [r3, #0]
34187552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34187554:	f003 0320 	and.w	r3, r3, #32
34187558:	693a      	ldr	r2, [r7, #16]
3418755a:	4313      	orrs	r3, r2
3418755c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
3418755e:	693b      	ldr	r3, [r7, #16]
34187560:	2b00      	cmp	r3, #0
34187562:	d061      	beq.n	34187628 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
34187564:	f7fc ffa2 	bl	341844ac <HAL_GetTick>
34187568:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
3418756a:	e056      	b.n	3418761a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
3418756c:	687b      	ldr	r3, [r7, #4]
3418756e:	681b      	ldr	r3, [r3, #0]
34187570:	685b      	ldr	r3, [r3, #4]
34187572:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
34187574:	68fb      	ldr	r3, [r7, #12]
34187576:	f003 0329 	and.w	r3, r3, #41	@ 0x29
3418757a:	2b00      	cmp	r3, #0
3418757c:	d02e      	beq.n	341875dc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
3418757e:	68fb      	ldr	r3, [r7, #12]
34187580:	f003 0308 	and.w	r3, r3, #8
34187584:	2b00      	cmp	r3, #0
34187586:	d005      	beq.n	34187594 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
34187588:	687b      	ldr	r3, [r7, #4]
3418758a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418758c:	f043 0204 	orr.w	r2, r3, #4
34187590:	687b      	ldr	r3, [r7, #4]
34187592:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
34187594:	68fb      	ldr	r3, [r7, #12]
34187596:	f003 0320 	and.w	r3, r3, #32
3418759a:	2b00      	cmp	r3, #0
3418759c:	d005      	beq.n	341875aa <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
3418759e:	687b      	ldr	r3, [r7, #4]
341875a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
341875a2:	f043 0202 	orr.w	r2, r3, #2
341875a6:	687b      	ldr	r3, [r7, #4]
341875a8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
341875aa:	68fb      	ldr	r3, [r7, #12]
341875ac:	f003 0301 	and.w	r3, r3, #1
341875b0:	2b00      	cmp	r3, #0
341875b2:	d005      	beq.n	341875c0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
341875b4:	687b      	ldr	r3, [r7, #4]
341875b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
341875b8:	f043 0201 	orr.w	r2, r3, #1
341875bc:	687b      	ldr	r3, [r7, #4]
341875be:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
341875c0:	687b      	ldr	r3, [r7, #4]
341875c2:	681b      	ldr	r3, [r3, #0]
341875c4:	2229      	movs	r2, #41	@ 0x29
341875c6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
341875c8:	687b      	ldr	r3, [r7, #4]
341875ca:	2204      	movs	r2, #4
341875cc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
341875d0:	687b      	ldr	r3, [r7, #4]
341875d2:	2200      	movs	r2, #0
341875d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
341875d8:	2301      	movs	r3, #1
341875da:	e032      	b.n	34187642 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
341875dc:	683b      	ldr	r3, [r7, #0]
341875de:	f1b3 3fff 	cmp.w	r3, #4294967295
341875e2:	d01a      	beq.n	3418761a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
341875e4:	f7fc ff62 	bl	341844ac <HAL_GetTick>
341875e8:	4602      	mov	r2, r0
341875ea:	697b      	ldr	r3, [r7, #20]
341875ec:	1ad3      	subs	r3, r2, r3
341875ee:	683a      	ldr	r2, [r7, #0]
341875f0:	429a      	cmp	r2, r3
341875f2:	d302      	bcc.n	341875fa <HAL_DMA2D_PollForTransfer+0x182>
341875f4:	683b      	ldr	r3, [r7, #0]
341875f6:	2b00      	cmp	r3, #0
341875f8:	d10f      	bne.n	3418761a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
341875fa:	687b      	ldr	r3, [r7, #4]
341875fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
341875fe:	f043 0220 	orr.w	r2, r3, #32
34187602:	687b      	ldr	r3, [r7, #4]
34187604:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
34187606:	687b      	ldr	r3, [r7, #4]
34187608:	2203      	movs	r2, #3
3418760a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
3418760e:	687b      	ldr	r3, [r7, #4]
34187610:	2200      	movs	r2, #0
34187612:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
34187616:	2303      	movs	r3, #3
34187618:	e013      	b.n	34187642 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
3418761a:	687b      	ldr	r3, [r7, #4]
3418761c:	681b      	ldr	r3, [r3, #0]
3418761e:	685b      	ldr	r3, [r3, #4]
34187620:	f003 0310 	and.w	r3, r3, #16
34187624:	2b00      	cmp	r3, #0
34187626:	d0a1      	beq.n	3418756c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
34187628:	687b      	ldr	r3, [r7, #4]
3418762a:	681b      	ldr	r3, [r3, #0]
3418762c:	2212      	movs	r2, #18
3418762e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
34187630:	687b      	ldr	r3, [r7, #4]
34187632:	2201      	movs	r2, #1
34187634:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
34187638:	687b      	ldr	r3, [r7, #4]
3418763a:	2200      	movs	r2, #0
3418763c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
34187640:	2300      	movs	r3, #0
}
34187642:	4618      	mov	r0, r3
34187644:	3718      	adds	r7, #24
34187646:	46bd      	mov	sp, r7
34187648:	bd80      	pop	{r7, pc}
	...

3418764c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
3418764c:	b480      	push	{r7}
3418764e:	b087      	sub	sp, #28
34187650:	af00      	add	r7, sp, #0
34187652:	6078      	str	r0, [r7, #4]
34187654:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
34187656:	687b      	ldr	r3, [r7, #4]
34187658:	685b      	ldr	r3, [r3, #4]
3418765a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
3418765e:	683b      	ldr	r3, [r7, #0]
34187660:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
34187662:	687b      	ldr	r3, [r7, #4]
34187664:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
34187668:	2b01      	cmp	r3, #1
3418766a:	d101      	bne.n	34187670 <HAL_DMA2D_ConfigLayer+0x24>
3418766c:	2302      	movs	r3, #2
3418766e:	e092      	b.n	34187796 <HAL_DMA2D_ConfigLayer+0x14a>
34187670:	687b      	ldr	r3, [r7, #4]
34187672:	2201      	movs	r2, #1
34187674:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
34187678:	687b      	ldr	r3, [r7, #4]
3418767a:	2202      	movs	r2, #2
3418767c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
34187680:	683a      	ldr	r2, [r7, #0]
34187682:	4613      	mov	r3, r2
34187684:	00db      	lsls	r3, r3, #3
34187686:	1a9b      	subs	r3, r3, r2
34187688:	009b      	lsls	r3, r3, #2
3418768a:	3328      	adds	r3, #40	@ 0x28
3418768c:	687a      	ldr	r2, [r7, #4]
3418768e:	4413      	add	r3, r2
34187690:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
34187692:	68fb      	ldr	r3, [r7, #12]
34187694:	685a      	ldr	r2, [r3, #4]
34187696:	68fb      	ldr	r3, [r7, #12]
34187698:	689b      	ldr	r3, [r3, #8]
3418769a:	041b      	lsls	r3, r3, #16
3418769c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
3418769e:	68fb      	ldr	r3, [r7, #12]
341876a0:	691b      	ldr	r3, [r3, #16]
341876a2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
341876a4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
341876a6:	68fb      	ldr	r3, [r7, #12]
341876a8:	695b      	ldr	r3, [r3, #20]
341876aa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
341876ac:	4313      	orrs	r3, r2
341876ae:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
341876b0:	4b3c      	ldr	r3, [pc, #240]	@ (341877a4 <HAL_DMA2D_ConfigLayer+0x158>)
341876b2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
341876b4:	68fb      	ldr	r3, [r7, #12]
341876b6:	685b      	ldr	r3, [r3, #4]
341876b8:	2b0a      	cmp	r3, #10
341876ba:	d003      	beq.n	341876c4 <HAL_DMA2D_ConfigLayer+0x78>
341876bc:	68fb      	ldr	r3, [r7, #12]
341876be:	685b      	ldr	r3, [r3, #4]
341876c0:	2b09      	cmp	r3, #9
341876c2:	d107      	bne.n	341876d4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
341876c4:	68fb      	ldr	r3, [r7, #12]
341876c6:	68db      	ldr	r3, [r3, #12]
341876c8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
341876cc:	693a      	ldr	r2, [r7, #16]
341876ce:	4313      	orrs	r3, r2
341876d0:	613b      	str	r3, [r7, #16]
341876d2:	e005      	b.n	341876e0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
341876d4:	68fb      	ldr	r3, [r7, #12]
341876d6:	68db      	ldr	r3, [r3, #12]
341876d8:	061b      	lsls	r3, r3, #24
341876da:	693a      	ldr	r2, [r7, #16]
341876dc:	4313      	orrs	r3, r2
341876de:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
341876e0:	683b      	ldr	r3, [r7, #0]
341876e2:	2b00      	cmp	r3, #0
341876e4:	d120      	bne.n	34187728 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
341876e6:	687b      	ldr	r3, [r7, #4]
341876e8:	681b      	ldr	r3, [r3, #0]
341876ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
341876ec:	697b      	ldr	r3, [r7, #20]
341876ee:	43db      	mvns	r3, r3
341876f0:	ea02 0103 	and.w	r1, r2, r3
341876f4:	687b      	ldr	r3, [r7, #4]
341876f6:	681b      	ldr	r3, [r3, #0]
341876f8:	693a      	ldr	r2, [r7, #16]
341876fa:	430a      	orrs	r2, r1
341876fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
341876fe:	687b      	ldr	r3, [r7, #4]
34187700:	681b      	ldr	r3, [r3, #0]
34187702:	68fa      	ldr	r2, [r7, #12]
34187704:	6812      	ldr	r2, [r2, #0]
34187706:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
34187708:	68fb      	ldr	r3, [r7, #12]
3418770a:	685b      	ldr	r3, [r3, #4]
3418770c:	2b0a      	cmp	r3, #10
3418770e:	d003      	beq.n	34187718 <HAL_DMA2D_ConfigLayer+0xcc>
34187710:	68fb      	ldr	r3, [r7, #12]
34187712:	685b      	ldr	r3, [r3, #4]
34187714:	2b09      	cmp	r3, #9
34187716:	d135      	bne.n	34187784 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
34187718:	68fb      	ldr	r3, [r7, #12]
3418771a:	68da      	ldr	r2, [r3, #12]
3418771c:	687b      	ldr	r3, [r7, #4]
3418771e:	681b      	ldr	r3, [r3, #0]
34187720:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
34187724:	629a      	str	r2, [r3, #40]	@ 0x28
34187726:	e02d      	b.n	34187784 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
34187728:	68fb      	ldr	r3, [r7, #12]
3418772a:	685b      	ldr	r3, [r3, #4]
3418772c:	2b0b      	cmp	r3, #11
3418772e:	d109      	bne.n	34187744 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
34187730:	68fb      	ldr	r3, [r7, #12]
34187732:	699b      	ldr	r3, [r3, #24]
34187734:	049b      	lsls	r3, r3, #18
34187736:	693a      	ldr	r2, [r7, #16]
34187738:	4313      	orrs	r3, r2
3418773a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
3418773c:	697b      	ldr	r3, [r7, #20]
3418773e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
34187742:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
34187744:	687b      	ldr	r3, [r7, #4]
34187746:	681b      	ldr	r3, [r3, #0]
34187748:	69da      	ldr	r2, [r3, #28]
3418774a:	697b      	ldr	r3, [r7, #20]
3418774c:	43db      	mvns	r3, r3
3418774e:	ea02 0103 	and.w	r1, r2, r3
34187752:	687b      	ldr	r3, [r7, #4]
34187754:	681b      	ldr	r3, [r3, #0]
34187756:	693a      	ldr	r2, [r7, #16]
34187758:	430a      	orrs	r2, r1
3418775a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
3418775c:	687b      	ldr	r3, [r7, #4]
3418775e:	681b      	ldr	r3, [r3, #0]
34187760:	68fa      	ldr	r2, [r7, #12]
34187762:	6812      	ldr	r2, [r2, #0]
34187764:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
34187766:	68fb      	ldr	r3, [r7, #12]
34187768:	685b      	ldr	r3, [r3, #4]
3418776a:	2b0a      	cmp	r3, #10
3418776c:	d003      	beq.n	34187776 <HAL_DMA2D_ConfigLayer+0x12a>
3418776e:	68fb      	ldr	r3, [r7, #12]
34187770:	685b      	ldr	r3, [r3, #4]
34187772:	2b09      	cmp	r3, #9
34187774:	d106      	bne.n	34187784 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
34187776:	68fb      	ldr	r3, [r7, #12]
34187778:	68da      	ldr	r2, [r3, #12]
3418777a:	687b      	ldr	r3, [r7, #4]
3418777c:	681b      	ldr	r3, [r3, #0]
3418777e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
34187782:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
34187784:	687b      	ldr	r3, [r7, #4]
34187786:	2201      	movs	r2, #1
34187788:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
3418778c:	687b      	ldr	r3, [r7, #4]
3418778e:	2200      	movs	r2, #0
34187790:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
34187794:	2300      	movs	r3, #0
}
34187796:	4618      	mov	r0, r3
34187798:	371c      	adds	r7, #28
3418779a:	46bd      	mov	sp, r7
3418779c:	f85d 7b04 	ldr.w	r7, [sp], #4
341877a0:	4770      	bx	lr
341877a2:	bf00      	nop
341877a4:	ff33000f 	.word	0xff33000f

341877a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
341877a8:	b480      	push	{r7}
341877aa:	b08b      	sub	sp, #44	@ 0x2c
341877ac:	af00      	add	r7, sp, #0
341877ae:	60f8      	str	r0, [r7, #12]
341877b0:	60b9      	str	r1, [r7, #8]
341877b2:	607a      	str	r2, [r7, #4]
341877b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
341877b6:	68fb      	ldr	r3, [r7, #12]
341877b8:	681b      	ldr	r3, [r3, #0]
341877ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341877bc:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
341877c0:	683b      	ldr	r3, [r7, #0]
341877c2:	041a      	lsls	r2, r3, #16
341877c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341877c6:	431a      	orrs	r2, r3
341877c8:	68fb      	ldr	r3, [r7, #12]
341877ca:	681b      	ldr	r3, [r3, #0]
341877cc:	430a      	orrs	r2, r1
341877ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
341877d0:	68fb      	ldr	r3, [r7, #12]
341877d2:	681b      	ldr	r3, [r3, #0]
341877d4:	687a      	ldr	r2, [r7, #4]
341877d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
341877d8:	68fb      	ldr	r3, [r7, #12]
341877da:	685b      	ldr	r3, [r3, #4]
341877dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
341877e0:	d174      	bne.n	341878cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
341877e2:	68bb      	ldr	r3, [r7, #8]
341877e4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
341877e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
341877ea:	68bb      	ldr	r3, [r7, #8]
341877ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
341877f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
341877f2:	68bb      	ldr	r3, [r7, #8]
341877f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
341877f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
341877fa:	68bb      	ldr	r3, [r7, #8]
341877fc:	b2db      	uxtb	r3, r3
341877fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
34187800:	68fb      	ldr	r3, [r7, #12]
34187802:	689b      	ldr	r3, [r3, #8]
34187804:	2b00      	cmp	r3, #0
34187806:	d108      	bne.n	3418781a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
34187808:	69ba      	ldr	r2, [r7, #24]
3418780a:	69fb      	ldr	r3, [r7, #28]
3418780c:	431a      	orrs	r2, r3
3418780e:	6a3b      	ldr	r3, [r7, #32]
34187810:	4313      	orrs	r3, r2
34187812:	697a      	ldr	r2, [r7, #20]
34187814:	4313      	orrs	r3, r2
34187816:	627b      	str	r3, [r7, #36]	@ 0x24
34187818:	e053      	b.n	341878c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
3418781a:	68fb      	ldr	r3, [r7, #12]
3418781c:	689b      	ldr	r3, [r3, #8]
3418781e:	2b01      	cmp	r3, #1
34187820:	d106      	bne.n	34187830 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
34187822:	69ba      	ldr	r2, [r7, #24]
34187824:	69fb      	ldr	r3, [r7, #28]
34187826:	4313      	orrs	r3, r2
34187828:	697a      	ldr	r2, [r7, #20]
3418782a:	4313      	orrs	r3, r2
3418782c:	627b      	str	r3, [r7, #36]	@ 0x24
3418782e:	e048      	b.n	341878c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
34187830:	68fb      	ldr	r3, [r7, #12]
34187832:	689b      	ldr	r3, [r3, #8]
34187834:	2b02      	cmp	r3, #2
34187836:	d111      	bne.n	3418785c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
34187838:	69fb      	ldr	r3, [r7, #28]
3418783a:	0cdb      	lsrs	r3, r3, #19
3418783c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
3418783e:	69bb      	ldr	r3, [r7, #24]
34187840:	0a9b      	lsrs	r3, r3, #10
34187842:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
34187844:	697b      	ldr	r3, [r7, #20]
34187846:	08db      	lsrs	r3, r3, #3
34187848:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
3418784a:	69bb      	ldr	r3, [r7, #24]
3418784c:	015a      	lsls	r2, r3, #5
3418784e:	69fb      	ldr	r3, [r7, #28]
34187850:	02db      	lsls	r3, r3, #11
34187852:	4313      	orrs	r3, r2
34187854:	697a      	ldr	r2, [r7, #20]
34187856:	4313      	orrs	r3, r2
34187858:	627b      	str	r3, [r7, #36]	@ 0x24
3418785a:	e032      	b.n	341878c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
3418785c:	68fb      	ldr	r3, [r7, #12]
3418785e:	689b      	ldr	r3, [r3, #8]
34187860:	2b03      	cmp	r3, #3
34187862:	d117      	bne.n	34187894 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
34187864:	6a3b      	ldr	r3, [r7, #32]
34187866:	0fdb      	lsrs	r3, r3, #31
34187868:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
3418786a:	69fb      	ldr	r3, [r7, #28]
3418786c:	0cdb      	lsrs	r3, r3, #19
3418786e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
34187870:	69bb      	ldr	r3, [r7, #24]
34187872:	0adb      	lsrs	r3, r3, #11
34187874:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
34187876:	697b      	ldr	r3, [r7, #20]
34187878:	08db      	lsrs	r3, r3, #3
3418787a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
3418787c:	69bb      	ldr	r3, [r7, #24]
3418787e:	015a      	lsls	r2, r3, #5
34187880:	69fb      	ldr	r3, [r7, #28]
34187882:	029b      	lsls	r3, r3, #10
34187884:	431a      	orrs	r2, r3
34187886:	6a3b      	ldr	r3, [r7, #32]
34187888:	03db      	lsls	r3, r3, #15
3418788a:	4313      	orrs	r3, r2
3418788c:	697a      	ldr	r2, [r7, #20]
3418788e:	4313      	orrs	r3, r2
34187890:	627b      	str	r3, [r7, #36]	@ 0x24
34187892:	e016      	b.n	341878c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
34187894:	6a3b      	ldr	r3, [r7, #32]
34187896:	0f1b      	lsrs	r3, r3, #28
34187898:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
3418789a:	69fb      	ldr	r3, [r7, #28]
3418789c:	0d1b      	lsrs	r3, r3, #20
3418789e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
341878a0:	69bb      	ldr	r3, [r7, #24]
341878a2:	0b1b      	lsrs	r3, r3, #12
341878a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
341878a6:	697b      	ldr	r3, [r7, #20]
341878a8:	091b      	lsrs	r3, r3, #4
341878aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
341878ac:	69bb      	ldr	r3, [r7, #24]
341878ae:	011a      	lsls	r2, r3, #4
341878b0:	69fb      	ldr	r3, [r7, #28]
341878b2:	021b      	lsls	r3, r3, #8
341878b4:	431a      	orrs	r2, r3
341878b6:	6a3b      	ldr	r3, [r7, #32]
341878b8:	031b      	lsls	r3, r3, #12
341878ba:	4313      	orrs	r3, r2
341878bc:	697a      	ldr	r2, [r7, #20]
341878be:	4313      	orrs	r3, r2
341878c0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
341878c2:	68fb      	ldr	r3, [r7, #12]
341878c4:	681b      	ldr	r3, [r3, #0]
341878c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
341878c8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
341878ca:	e00d      	b.n	341878e8 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
341878cc:	68fb      	ldr	r3, [r7, #12]
341878ce:	685b      	ldr	r3, [r3, #4]
341878d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
341878d4:	d104      	bne.n	341878e0 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
341878d6:	68fb      	ldr	r3, [r7, #12]
341878d8:	681b      	ldr	r3, [r3, #0]
341878da:	68ba      	ldr	r2, [r7, #8]
341878dc:	615a      	str	r2, [r3, #20]
}
341878de:	e003      	b.n	341878e8 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
341878e0:	68fb      	ldr	r3, [r7, #12]
341878e2:	681b      	ldr	r3, [r3, #0]
341878e4:	68ba      	ldr	r2, [r7, #8]
341878e6:	60da      	str	r2, [r3, #12]
}
341878e8:	bf00      	nop
341878ea:	372c      	adds	r7, #44	@ 0x2c
341878ec:	46bd      	mov	sp, r7
341878ee:	f85d 7b04 	ldr.w	r7, [sp], #4
341878f2:	4770      	bx	lr

341878f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
341878f4:	b480      	push	{r7}
341878f6:	b087      	sub	sp, #28
341878f8:	af00      	add	r7, sp, #0
341878fa:	6078      	str	r0, [r7, #4]
341878fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
341878fe:	2300      	movs	r3, #0
34187900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34187902:	e180      	b.n	34187c06 <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34187904:	683b      	ldr	r3, [r7, #0]
34187906:	681a      	ldr	r2, [r3, #0]
34187908:	2101      	movs	r1, #1
3418790a:	697b      	ldr	r3, [r7, #20]
3418790c:	fa01 f303 	lsl.w	r3, r1, r3
34187910:	4013      	ands	r3, r2
34187912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34187914:	68fb      	ldr	r3, [r7, #12]
34187916:	2b00      	cmp	r3, #0
34187918:	f000 8172 	beq.w	34187c00 <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
3418791c:	683b      	ldr	r3, [r7, #0]
3418791e:	685b      	ldr	r3, [r3, #4]
34187920:	f003 0303 	and.w	r3, r3, #3
34187924:	2b01      	cmp	r3, #1
34187926:	d005      	beq.n	34187934 <HAL_GPIO_Init+0x40>
34187928:	683b      	ldr	r3, [r7, #0]
3418792a:	685b      	ldr	r3, [r3, #4]
3418792c:	f003 0303 	and.w	r3, r3, #3
34187930:	2b02      	cmp	r3, #2
34187932:	d130      	bne.n	34187996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34187934:	687b      	ldr	r3, [r7, #4]
34187936:	689b      	ldr	r3, [r3, #8]
34187938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3418793a:	697b      	ldr	r3, [r7, #20]
3418793c:	005b      	lsls	r3, r3, #1
3418793e:	2203      	movs	r2, #3
34187940:	fa02 f303 	lsl.w	r3, r2, r3
34187944:	43db      	mvns	r3, r3
34187946:	693a      	ldr	r2, [r7, #16]
34187948:	4013      	ands	r3, r2
3418794a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3418794c:	683b      	ldr	r3, [r7, #0]
3418794e:	68da      	ldr	r2, [r3, #12]
34187950:	697b      	ldr	r3, [r7, #20]
34187952:	005b      	lsls	r3, r3, #1
34187954:	fa02 f303 	lsl.w	r3, r2, r3
34187958:	693a      	ldr	r2, [r7, #16]
3418795a:	4313      	orrs	r3, r2
3418795c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
3418795e:	687b      	ldr	r3, [r7, #4]
34187960:	693a      	ldr	r2, [r7, #16]
34187962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34187964:	687b      	ldr	r3, [r7, #4]
34187966:	685b      	ldr	r3, [r3, #4]
34187968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
3418796a:	2201      	movs	r2, #1
3418796c:	697b      	ldr	r3, [r7, #20]
3418796e:	fa02 f303 	lsl.w	r3, r2, r3
34187972:	43db      	mvns	r3, r3
34187974:	693a      	ldr	r2, [r7, #16]
34187976:	4013      	ands	r3, r2
34187978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3418797a:	683b      	ldr	r3, [r7, #0]
3418797c:	685b      	ldr	r3, [r3, #4]
3418797e:	091b      	lsrs	r3, r3, #4
34187980:	f003 0201 	and.w	r2, r3, #1
34187984:	697b      	ldr	r3, [r7, #20]
34187986:	fa02 f303 	lsl.w	r3, r2, r3
3418798a:	693a      	ldr	r2, [r7, #16]
3418798c:	4313      	orrs	r3, r2
3418798e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34187990:	687b      	ldr	r3, [r7, #4]
34187992:	693a      	ldr	r2, [r7, #16]
34187994:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34187996:	683b      	ldr	r3, [r7, #0]
34187998:	685b      	ldr	r3, [r3, #4]
3418799a:	f003 0303 	and.w	r3, r3, #3
3418799e:	2b03      	cmp	r3, #3
341879a0:	d109      	bne.n	341879b6 <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
341879a2:	683b      	ldr	r3, [r7, #0]
341879a4:	685b      	ldr	r3, [r3, #4]
341879a6:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
341879aa:	2b03      	cmp	r3, #3
341879ac:	d11b      	bne.n	341879e6 <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
341879ae:	683b      	ldr	r3, [r7, #0]
341879b0:	689b      	ldr	r3, [r3, #8]
341879b2:	2b01      	cmp	r3, #1
341879b4:	d017      	beq.n	341879e6 <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
341879b6:	687b      	ldr	r3, [r7, #4]
341879b8:	68db      	ldr	r3, [r3, #12]
341879ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
341879bc:	697b      	ldr	r3, [r7, #20]
341879be:	005b      	lsls	r3, r3, #1
341879c0:	2203      	movs	r2, #3
341879c2:	fa02 f303 	lsl.w	r3, r2, r3
341879c6:	43db      	mvns	r3, r3
341879c8:	693a      	ldr	r2, [r7, #16]
341879ca:	4013      	ands	r3, r2
341879cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
341879ce:	683b      	ldr	r3, [r7, #0]
341879d0:	689a      	ldr	r2, [r3, #8]
341879d2:	697b      	ldr	r3, [r7, #20]
341879d4:	005b      	lsls	r3, r3, #1
341879d6:	fa02 f303 	lsl.w	r3, r2, r3
341879da:	693a      	ldr	r2, [r7, #16]
341879dc:	4313      	orrs	r3, r2
341879de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
341879e0:	687b      	ldr	r3, [r7, #4]
341879e2:	693a      	ldr	r2, [r7, #16]
341879e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
341879e6:	683b      	ldr	r3, [r7, #0]
341879e8:	685b      	ldr	r3, [r3, #4]
341879ea:	f003 0303 	and.w	r3, r3, #3
341879ee:	2b02      	cmp	r3, #2
341879f0:	d123      	bne.n	34187a3a <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
341879f2:	697b      	ldr	r3, [r7, #20]
341879f4:	08da      	lsrs	r2, r3, #3
341879f6:	687b      	ldr	r3, [r7, #4]
341879f8:	3208      	adds	r2, #8
341879fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
341879fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34187a00:	697b      	ldr	r3, [r7, #20]
34187a02:	f003 0307 	and.w	r3, r3, #7
34187a06:	009b      	lsls	r3, r3, #2
34187a08:	220f      	movs	r2, #15
34187a0a:	fa02 f303 	lsl.w	r3, r2, r3
34187a0e:	43db      	mvns	r3, r3
34187a10:	693a      	ldr	r2, [r7, #16]
34187a12:	4013      	ands	r3, r2
34187a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34187a16:	683b      	ldr	r3, [r7, #0]
34187a18:	691a      	ldr	r2, [r3, #16]
34187a1a:	697b      	ldr	r3, [r7, #20]
34187a1c:	f003 0307 	and.w	r3, r3, #7
34187a20:	009b      	lsls	r3, r3, #2
34187a22:	fa02 f303 	lsl.w	r3, r2, r3
34187a26:	693a      	ldr	r2, [r7, #16]
34187a28:	4313      	orrs	r3, r2
34187a2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34187a2c:	697b      	ldr	r3, [r7, #20]
34187a2e:	08da      	lsrs	r2, r3, #3
34187a30:	687b      	ldr	r3, [r7, #4]
34187a32:	3208      	adds	r2, #8
34187a34:	6939      	ldr	r1, [r7, #16]
34187a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34187a3a:	687b      	ldr	r3, [r7, #4]
34187a3c:	681b      	ldr	r3, [r3, #0]
34187a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34187a40:	697b      	ldr	r3, [r7, #20]
34187a42:	005b      	lsls	r3, r3, #1
34187a44:	2203      	movs	r2, #3
34187a46:	fa02 f303 	lsl.w	r3, r2, r3
34187a4a:	43db      	mvns	r3, r3
34187a4c:	693a      	ldr	r2, [r7, #16]
34187a4e:	4013      	ands	r3, r2
34187a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34187a52:	683b      	ldr	r3, [r7, #0]
34187a54:	685b      	ldr	r3, [r3, #4]
34187a56:	f003 0203 	and.w	r2, r3, #3
34187a5a:	697b      	ldr	r3, [r7, #20]
34187a5c:	005b      	lsls	r3, r3, #1
34187a5e:	fa02 f303 	lsl.w	r3, r2, r3
34187a62:	693a      	ldr	r2, [r7, #16]
34187a64:	4313      	orrs	r3, r2
34187a66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34187a68:	687b      	ldr	r3, [r7, #4]
34187a6a:	693a      	ldr	r2, [r7, #16]
34187a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34187a6e:	683b      	ldr	r3, [r7, #0]
34187a70:	685b      	ldr	r3, [r3, #4]
34187a72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34187a76:	2b00      	cmp	r3, #0
34187a78:	f000 80c2 	beq.w	34187c00 <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34187a7c:	4a69      	ldr	r2, [pc, #420]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187a7e:	697b      	ldr	r3, [r7, #20]
34187a80:	089b      	lsrs	r3, r3, #2
34187a82:	3318      	adds	r3, #24
34187a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34187a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34187a8a:	697b      	ldr	r3, [r7, #20]
34187a8c:	f003 0303 	and.w	r3, r3, #3
34187a90:	00db      	lsls	r3, r3, #3
34187a92:	220f      	movs	r2, #15
34187a94:	fa02 f303 	lsl.w	r3, r2, r3
34187a98:	43db      	mvns	r3, r3
34187a9a:	693a      	ldr	r2, [r7, #16]
34187a9c:	4013      	ands	r3, r2
34187a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34187aa0:	687b      	ldr	r3, [r7, #4]
34187aa2:	4a61      	ldr	r2, [pc, #388]	@ (34187c28 <HAL_GPIO_Init+0x334>)
34187aa4:	4293      	cmp	r3, r2
34187aa6:	d043      	beq.n	34187b30 <HAL_GPIO_Init+0x23c>
34187aa8:	687b      	ldr	r3, [r7, #4]
34187aaa:	4a60      	ldr	r2, [pc, #384]	@ (34187c2c <HAL_GPIO_Init+0x338>)
34187aac:	4293      	cmp	r3, r2
34187aae:	d03d      	beq.n	34187b2c <HAL_GPIO_Init+0x238>
34187ab0:	687b      	ldr	r3, [r7, #4]
34187ab2:	4a5f      	ldr	r2, [pc, #380]	@ (34187c30 <HAL_GPIO_Init+0x33c>)
34187ab4:	4293      	cmp	r3, r2
34187ab6:	d037      	beq.n	34187b28 <HAL_GPIO_Init+0x234>
34187ab8:	687b      	ldr	r3, [r7, #4]
34187aba:	4a5e      	ldr	r2, [pc, #376]	@ (34187c34 <HAL_GPIO_Init+0x340>)
34187abc:	4293      	cmp	r3, r2
34187abe:	d031      	beq.n	34187b24 <HAL_GPIO_Init+0x230>
34187ac0:	687b      	ldr	r3, [r7, #4]
34187ac2:	4a5d      	ldr	r2, [pc, #372]	@ (34187c38 <HAL_GPIO_Init+0x344>)
34187ac4:	4293      	cmp	r3, r2
34187ac6:	d02b      	beq.n	34187b20 <HAL_GPIO_Init+0x22c>
34187ac8:	687b      	ldr	r3, [r7, #4]
34187aca:	4a5c      	ldr	r2, [pc, #368]	@ (34187c3c <HAL_GPIO_Init+0x348>)
34187acc:	4293      	cmp	r3, r2
34187ace:	d025      	beq.n	34187b1c <HAL_GPIO_Init+0x228>
34187ad0:	687b      	ldr	r3, [r7, #4]
34187ad2:	4a5b      	ldr	r2, [pc, #364]	@ (34187c40 <HAL_GPIO_Init+0x34c>)
34187ad4:	4293      	cmp	r3, r2
34187ad6:	d01f      	beq.n	34187b18 <HAL_GPIO_Init+0x224>
34187ad8:	687b      	ldr	r3, [r7, #4]
34187ada:	4a5a      	ldr	r2, [pc, #360]	@ (34187c44 <HAL_GPIO_Init+0x350>)
34187adc:	4293      	cmp	r3, r2
34187ade:	d019      	beq.n	34187b14 <HAL_GPIO_Init+0x220>
34187ae0:	687b      	ldr	r3, [r7, #4]
34187ae2:	4a59      	ldr	r2, [pc, #356]	@ (34187c48 <HAL_GPIO_Init+0x354>)
34187ae4:	4293      	cmp	r3, r2
34187ae6:	d013      	beq.n	34187b10 <HAL_GPIO_Init+0x21c>
34187ae8:	687b      	ldr	r3, [r7, #4]
34187aea:	4a58      	ldr	r2, [pc, #352]	@ (34187c4c <HAL_GPIO_Init+0x358>)
34187aec:	4293      	cmp	r3, r2
34187aee:	d00d      	beq.n	34187b0c <HAL_GPIO_Init+0x218>
34187af0:	687b      	ldr	r3, [r7, #4]
34187af2:	4a57      	ldr	r2, [pc, #348]	@ (34187c50 <HAL_GPIO_Init+0x35c>)
34187af4:	4293      	cmp	r3, r2
34187af6:	d007      	beq.n	34187b08 <HAL_GPIO_Init+0x214>
34187af8:	687b      	ldr	r3, [r7, #4]
34187afa:	4a56      	ldr	r2, [pc, #344]	@ (34187c54 <HAL_GPIO_Init+0x360>)
34187afc:	4293      	cmp	r3, r2
34187afe:	d101      	bne.n	34187b04 <HAL_GPIO_Init+0x210>
34187b00:	230b      	movs	r3, #11
34187b02:	e016      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b04:	2310      	movs	r3, #16
34187b06:	e014      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b08:	230a      	movs	r3, #10
34187b0a:	e012      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b0c:	2309      	movs	r3, #9
34187b0e:	e010      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b10:	2308      	movs	r3, #8
34187b12:	e00e      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b14:	2307      	movs	r3, #7
34187b16:	e00c      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b18:	2306      	movs	r3, #6
34187b1a:	e00a      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b1c:	2305      	movs	r3, #5
34187b1e:	e008      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b20:	2304      	movs	r3, #4
34187b22:	e006      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b24:	2303      	movs	r3, #3
34187b26:	e004      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b28:	2302      	movs	r3, #2
34187b2a:	e002      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b2c:	2301      	movs	r3, #1
34187b2e:	e000      	b.n	34187b32 <HAL_GPIO_Init+0x23e>
34187b30:	2300      	movs	r3, #0
34187b32:	697a      	ldr	r2, [r7, #20]
34187b34:	f002 0203 	and.w	r2, r2, #3
34187b38:	00d2      	lsls	r2, r2, #3
34187b3a:	4093      	lsls	r3, r2
34187b3c:	693a      	ldr	r2, [r7, #16]
34187b3e:	4313      	orrs	r3, r2
34187b40:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34187b42:	4938      	ldr	r1, [pc, #224]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187b44:	697b      	ldr	r3, [r7, #20]
34187b46:	089b      	lsrs	r3, r3, #2
34187b48:	3318      	adds	r3, #24
34187b4a:	693a      	ldr	r2, [r7, #16]
34187b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34187b50:	4b34      	ldr	r3, [pc, #208]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34187b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34187b58:	68fb      	ldr	r3, [r7, #12]
34187b5a:	43db      	mvns	r3, r3
34187b5c:	693a      	ldr	r2, [r7, #16]
34187b5e:	4013      	ands	r3, r2
34187b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34187b62:	683b      	ldr	r3, [r7, #0]
34187b64:	685b      	ldr	r3, [r3, #4]
34187b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34187b6a:	2b00      	cmp	r3, #0
34187b6c:	d003      	beq.n	34187b76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
34187b6e:	693a      	ldr	r2, [r7, #16]
34187b70:	68fb      	ldr	r3, [r7, #12]
34187b72:	4313      	orrs	r3, r2
34187b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34187b76:	4a2b      	ldr	r2, [pc, #172]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187b78:	693b      	ldr	r3, [r7, #16]
34187b7a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34187b7e:	4b29      	ldr	r3, [pc, #164]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34187b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34187b86:	68fb      	ldr	r3, [r7, #12]
34187b88:	43db      	mvns	r3, r3
34187b8a:	693a      	ldr	r2, [r7, #16]
34187b8c:	4013      	ands	r3, r2
34187b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34187b90:	683b      	ldr	r3, [r7, #0]
34187b92:	685b      	ldr	r3, [r3, #4]
34187b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34187b98:	2b00      	cmp	r3, #0
34187b9a:	d003      	beq.n	34187ba4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
34187b9c:	693a      	ldr	r2, [r7, #16]
34187b9e:	68fb      	ldr	r3, [r7, #12]
34187ba0:	4313      	orrs	r3, r2
34187ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34187ba4:	4a1f      	ldr	r2, [pc, #124]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187ba6:	693b      	ldr	r3, [r7, #16]
34187ba8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34187bac:	4b1d      	ldr	r3, [pc, #116]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187bae:	681b      	ldr	r3, [r3, #0]
34187bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34187bb2:	68fb      	ldr	r3, [r7, #12]
34187bb4:	43db      	mvns	r3, r3
34187bb6:	693a      	ldr	r2, [r7, #16]
34187bb8:	4013      	ands	r3, r2
34187bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34187bbc:	683b      	ldr	r3, [r7, #0]
34187bbe:	685b      	ldr	r3, [r3, #4]
34187bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34187bc4:	2b00      	cmp	r3, #0
34187bc6:	d003      	beq.n	34187bd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
34187bc8:	693a      	ldr	r2, [r7, #16]
34187bca:	68fb      	ldr	r3, [r7, #12]
34187bcc:	4313      	orrs	r3, r2
34187bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34187bd0:	4a14      	ldr	r2, [pc, #80]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187bd2:	693b      	ldr	r3, [r7, #16]
34187bd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34187bd6:	4b13      	ldr	r3, [pc, #76]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187bd8:	685b      	ldr	r3, [r3, #4]
34187bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34187bdc:	68fb      	ldr	r3, [r7, #12]
34187bde:	43db      	mvns	r3, r3
34187be0:	693a      	ldr	r2, [r7, #16]
34187be2:	4013      	ands	r3, r2
34187be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34187be6:	683b      	ldr	r3, [r7, #0]
34187be8:	685b      	ldr	r3, [r3, #4]
34187bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34187bee:	2b00      	cmp	r3, #0
34187bf0:	d003      	beq.n	34187bfa <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
34187bf2:	693a      	ldr	r2, [r7, #16]
34187bf4:	68fb      	ldr	r3, [r7, #12]
34187bf6:	4313      	orrs	r3, r2
34187bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
34187bfa:	4a0a      	ldr	r2, [pc, #40]	@ (34187c24 <HAL_GPIO_Init+0x330>)
34187bfc:	693b      	ldr	r3, [r7, #16]
34187bfe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34187c00:	697b      	ldr	r3, [r7, #20]
34187c02:	3301      	adds	r3, #1
34187c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34187c06:	683b      	ldr	r3, [r7, #0]
34187c08:	681a      	ldr	r2, [r3, #0]
34187c0a:	697b      	ldr	r3, [r7, #20]
34187c0c:	fa22 f303 	lsr.w	r3, r2, r3
34187c10:	2b00      	cmp	r3, #0
34187c12:	f47f ae77 	bne.w	34187904 <HAL_GPIO_Init+0x10>
  }
}
34187c16:	bf00      	nop
34187c18:	bf00      	nop
34187c1a:	371c      	adds	r7, #28
34187c1c:	46bd      	mov	sp, r7
34187c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187c22:	4770      	bx	lr
34187c24:	56025000 	.word	0x56025000
34187c28:	56020000 	.word	0x56020000
34187c2c:	56020400 	.word	0x56020400
34187c30:	56020800 	.word	0x56020800
34187c34:	56020c00 	.word	0x56020c00
34187c38:	56021000 	.word	0x56021000
34187c3c:	56021400 	.word	0x56021400
34187c40:	56021800 	.word	0x56021800
34187c44:	56021c00 	.word	0x56021c00
34187c48:	56023400 	.word	0x56023400
34187c4c:	56023800 	.word	0x56023800
34187c50:	56023c00 	.word	0x56023c00
34187c54:	56024000 	.word	0x56024000

34187c58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
34187c58:	b480      	push	{r7}
34187c5a:	b087      	sub	sp, #28
34187c5c:	af00      	add	r7, sp, #0
34187c5e:	6078      	str	r0, [r7, #4]
34187c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34187c62:	2300      	movs	r3, #0
34187c64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
34187c66:	e10f      	b.n	34187e88 <HAL_GPIO_DeInit+0x230>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
34187c68:	2201      	movs	r2, #1
34187c6a:	697b      	ldr	r3, [r7, #20]
34187c6c:	fa02 f303 	lsl.w	r3, r2, r3
34187c70:	683a      	ldr	r2, [r7, #0]
34187c72:	4013      	ands	r3, r2
34187c74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
34187c76:	693b      	ldr	r3, [r7, #16]
34187c78:	2b00      	cmp	r3, #0
34187c7a:	f000 8102 	beq.w	34187e82 <HAL_GPIO_DeInit+0x22a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
34187c7e:	4a89      	ldr	r2, [pc, #548]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187c80:	697b      	ldr	r3, [r7, #20]
34187c82:	089b      	lsrs	r3, r3, #2
34187c84:	3318      	adds	r3, #24
34187c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34187c8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34187c8c:	697b      	ldr	r3, [r7, #20]
34187c8e:	f003 0303 	and.w	r3, r3, #3
34187c92:	00db      	lsls	r3, r3, #3
34187c94:	220f      	movs	r2, #15
34187c96:	fa02 f303 	lsl.w	r3, r2, r3
34187c9a:	68fa      	ldr	r2, [r7, #12]
34187c9c:	4013      	ands	r3, r2
34187c9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34187ca0:	687b      	ldr	r3, [r7, #4]
34187ca2:	4a81      	ldr	r2, [pc, #516]	@ (34187ea8 <HAL_GPIO_DeInit+0x250>)
34187ca4:	4293      	cmp	r3, r2
34187ca6:	d043      	beq.n	34187d30 <HAL_GPIO_DeInit+0xd8>
34187ca8:	687b      	ldr	r3, [r7, #4]
34187caa:	4a80      	ldr	r2, [pc, #512]	@ (34187eac <HAL_GPIO_DeInit+0x254>)
34187cac:	4293      	cmp	r3, r2
34187cae:	d03d      	beq.n	34187d2c <HAL_GPIO_DeInit+0xd4>
34187cb0:	687b      	ldr	r3, [r7, #4]
34187cb2:	4a7f      	ldr	r2, [pc, #508]	@ (34187eb0 <HAL_GPIO_DeInit+0x258>)
34187cb4:	4293      	cmp	r3, r2
34187cb6:	d037      	beq.n	34187d28 <HAL_GPIO_DeInit+0xd0>
34187cb8:	687b      	ldr	r3, [r7, #4]
34187cba:	4a7e      	ldr	r2, [pc, #504]	@ (34187eb4 <HAL_GPIO_DeInit+0x25c>)
34187cbc:	4293      	cmp	r3, r2
34187cbe:	d031      	beq.n	34187d24 <HAL_GPIO_DeInit+0xcc>
34187cc0:	687b      	ldr	r3, [r7, #4]
34187cc2:	4a7d      	ldr	r2, [pc, #500]	@ (34187eb8 <HAL_GPIO_DeInit+0x260>)
34187cc4:	4293      	cmp	r3, r2
34187cc6:	d02b      	beq.n	34187d20 <HAL_GPIO_DeInit+0xc8>
34187cc8:	687b      	ldr	r3, [r7, #4]
34187cca:	4a7c      	ldr	r2, [pc, #496]	@ (34187ebc <HAL_GPIO_DeInit+0x264>)
34187ccc:	4293      	cmp	r3, r2
34187cce:	d025      	beq.n	34187d1c <HAL_GPIO_DeInit+0xc4>
34187cd0:	687b      	ldr	r3, [r7, #4]
34187cd2:	4a7b      	ldr	r2, [pc, #492]	@ (34187ec0 <HAL_GPIO_DeInit+0x268>)
34187cd4:	4293      	cmp	r3, r2
34187cd6:	d01f      	beq.n	34187d18 <HAL_GPIO_DeInit+0xc0>
34187cd8:	687b      	ldr	r3, [r7, #4]
34187cda:	4a7a      	ldr	r2, [pc, #488]	@ (34187ec4 <HAL_GPIO_DeInit+0x26c>)
34187cdc:	4293      	cmp	r3, r2
34187cde:	d019      	beq.n	34187d14 <HAL_GPIO_DeInit+0xbc>
34187ce0:	687b      	ldr	r3, [r7, #4]
34187ce2:	4a79      	ldr	r2, [pc, #484]	@ (34187ec8 <HAL_GPIO_DeInit+0x270>)
34187ce4:	4293      	cmp	r3, r2
34187ce6:	d013      	beq.n	34187d10 <HAL_GPIO_DeInit+0xb8>
34187ce8:	687b      	ldr	r3, [r7, #4]
34187cea:	4a78      	ldr	r2, [pc, #480]	@ (34187ecc <HAL_GPIO_DeInit+0x274>)
34187cec:	4293      	cmp	r3, r2
34187cee:	d00d      	beq.n	34187d0c <HAL_GPIO_DeInit+0xb4>
34187cf0:	687b      	ldr	r3, [r7, #4]
34187cf2:	4a77      	ldr	r2, [pc, #476]	@ (34187ed0 <HAL_GPIO_DeInit+0x278>)
34187cf4:	4293      	cmp	r3, r2
34187cf6:	d007      	beq.n	34187d08 <HAL_GPIO_DeInit+0xb0>
34187cf8:	687b      	ldr	r3, [r7, #4]
34187cfa:	4a76      	ldr	r2, [pc, #472]	@ (34187ed4 <HAL_GPIO_DeInit+0x27c>)
34187cfc:	4293      	cmp	r3, r2
34187cfe:	d101      	bne.n	34187d04 <HAL_GPIO_DeInit+0xac>
34187d00:	230b      	movs	r3, #11
34187d02:	e016      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d04:	2310      	movs	r3, #16
34187d06:	e014      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d08:	230a      	movs	r3, #10
34187d0a:	e012      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d0c:	2309      	movs	r3, #9
34187d0e:	e010      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d10:	2308      	movs	r3, #8
34187d12:	e00e      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d14:	2307      	movs	r3, #7
34187d16:	e00c      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d18:	2306      	movs	r3, #6
34187d1a:	e00a      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d1c:	2305      	movs	r3, #5
34187d1e:	e008      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d20:	2304      	movs	r3, #4
34187d22:	e006      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d24:	2303      	movs	r3, #3
34187d26:	e004      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d28:	2302      	movs	r3, #2
34187d2a:	e002      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d2c:	2301      	movs	r3, #1
34187d2e:	e000      	b.n	34187d32 <HAL_GPIO_DeInit+0xda>
34187d30:	2300      	movs	r3, #0
34187d32:	697a      	ldr	r2, [r7, #20]
34187d34:	f002 0203 	and.w	r2, r2, #3
34187d38:	00d2      	lsls	r2, r2, #3
34187d3a:	4093      	lsls	r3, r2
34187d3c:	68fa      	ldr	r2, [r7, #12]
34187d3e:	429a      	cmp	r2, r3
34187d40:	d136      	bne.n	34187db0 <HAL_GPIO_DeInit+0x158>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
34187d42:	4b58      	ldr	r3, [pc, #352]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187d44:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34187d48:	693b      	ldr	r3, [r7, #16]
34187d4a:	43db      	mvns	r3, r3
34187d4c:	4955      	ldr	r1, [pc, #340]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187d4e:	4013      	ands	r3, r2
34187d50:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
34187d54:	4b53      	ldr	r3, [pc, #332]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187d56:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
34187d5a:	693b      	ldr	r3, [r7, #16]
34187d5c:	43db      	mvns	r3, r3
34187d5e:	4951      	ldr	r1, [pc, #324]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187d60:	4013      	ands	r3, r2
34187d62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
34187d66:	4b4f      	ldr	r3, [pc, #316]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187d68:	681a      	ldr	r2, [r3, #0]
34187d6a:	693b      	ldr	r3, [r7, #16]
34187d6c:	43db      	mvns	r3, r3
34187d6e:	494d      	ldr	r1, [pc, #308]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187d70:	4013      	ands	r3, r2
34187d72:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
34187d74:	4b4b      	ldr	r3, [pc, #300]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187d76:	685a      	ldr	r2, [r3, #4]
34187d78:	693b      	ldr	r3, [r7, #16]
34187d7a:	43db      	mvns	r3, r3
34187d7c:	4949      	ldr	r1, [pc, #292]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187d7e:	4013      	ands	r3, r2
34187d80:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos);
34187d82:	697b      	ldr	r3, [r7, #20]
34187d84:	f003 0303 	and.w	r3, r3, #3
34187d88:	00db      	lsls	r3, r3, #3
34187d8a:	220f      	movs	r2, #15
34187d8c:	fa02 f303 	lsl.w	r3, r2, r3
34187d90:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
34187d92:	4a44      	ldr	r2, [pc, #272]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187d94:	697b      	ldr	r3, [r7, #20]
34187d96:	089b      	lsrs	r3, r3, #2
34187d98:	3318      	adds	r3, #24
34187d9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
34187d9e:	68fb      	ldr	r3, [r7, #12]
34187da0:	43da      	mvns	r2, r3
34187da2:	4840      	ldr	r0, [pc, #256]	@ (34187ea4 <HAL_GPIO_DeInit+0x24c>)
34187da4:	697b      	ldr	r3, [r7, #20]
34187da6:	089b      	lsrs	r3, r3, #2
34187da8:	400a      	ands	r2, r1
34187daa:	3318      	adds	r3, #24
34187dac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34187db0:	687b      	ldr	r3, [r7, #4]
34187db2:	681a      	ldr	r2, [r3, #0]
34187db4:	697b      	ldr	r3, [r7, #20]
34187db6:	005b      	lsls	r3, r3, #1
34187db8:	2103      	movs	r1, #3
34187dba:	fa01 f303 	lsl.w	r3, r1, r3
34187dbe:	431a      	orrs	r2, r3
34187dc0:	687b      	ldr	r3, [r7, #4]
34187dc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
34187dc4:	697b      	ldr	r3, [r7, #20]
34187dc6:	08da      	lsrs	r2, r3, #3
34187dc8:	687b      	ldr	r3, [r7, #4]
34187dca:	3208      	adds	r2, #8
34187dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
34187dd0:	697b      	ldr	r3, [r7, #20]
34187dd2:	f003 0307 	and.w	r3, r3, #7
34187dd6:	009b      	lsls	r3, r3, #2
34187dd8:	220f      	movs	r2, #15
34187dda:	fa02 f303 	lsl.w	r3, r2, r3
34187dde:	43db      	mvns	r3, r3
34187de0:	697a      	ldr	r2, [r7, #20]
34187de2:	08d2      	lsrs	r2, r2, #3
34187de4:	4019      	ands	r1, r3
34187de6:	687b      	ldr	r3, [r7, #4]
34187de8:	3208      	adds	r2, #8
34187dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34187dee:	687b      	ldr	r3, [r7, #4]
34187df0:	689a      	ldr	r2, [r3, #8]
34187df2:	697b      	ldr	r3, [r7, #20]
34187df4:	005b      	lsls	r3, r3, #1
34187df6:	2103      	movs	r1, #3
34187df8:	fa01 f303 	lsl.w	r3, r1, r3
34187dfc:	43db      	mvns	r3, r3
34187dfe:	401a      	ands	r2, r3
34187e00:	687b      	ldr	r3, [r7, #4]
34187e02:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
34187e04:	687b      	ldr	r3, [r7, #4]
34187e06:	685a      	ldr	r2, [r3, #4]
34187e08:	2101      	movs	r1, #1
34187e0a:	697b      	ldr	r3, [r7, #20]
34187e0c:	fa01 f303 	lsl.w	r3, r1, r3
34187e10:	43db      	mvns	r3, r3
34187e12:	401a      	ands	r2, r3
34187e14:	687b      	ldr	r3, [r7, #4]
34187e16:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34187e18:	687b      	ldr	r3, [r7, #4]
34187e1a:	68da      	ldr	r2, [r3, #12]
34187e1c:	697b      	ldr	r3, [r7, #20]
34187e1e:	005b      	lsls	r3, r3, #1
34187e20:	2103      	movs	r1, #3
34187e22:	fa01 f303 	lsl.w	r3, r1, r3
34187e26:	43db      	mvns	r3, r3
34187e28:	401a      	ands	r2, r3
34187e2a:	687b      	ldr	r3, [r7, #4]
34187e2c:	60da      	str	r2, [r3, #12]

      /* Reset delay settings for the current IO */
      GPIOx->DELAYR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_DELAYRL_DLY1_Pos)) ;
34187e2e:	697b      	ldr	r3, [r7, #20]
34187e30:	08da      	lsrs	r2, r3, #3
34187e32:	687b      	ldr	r3, [r7, #4]
34187e34:	3210      	adds	r2, #16
34187e36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
34187e3a:	697b      	ldr	r3, [r7, #20]
34187e3c:	f003 0307 	and.w	r3, r3, #7
34187e40:	009b      	lsls	r3, r3, #2
34187e42:	220f      	movs	r2, #15
34187e44:	fa02 f303 	lsl.w	r3, r2, r3
34187e48:	43db      	mvns	r3, r3
34187e4a:	697a      	ldr	r2, [r7, #20]
34187e4c:	08d2      	lsrs	r2, r2, #3
34187e4e:	4019      	ands	r1, r3
34187e50:	687b      	ldr	r3, [r7, #4]
34187e52:	3210      	adds	r2, #16
34187e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Reset control settings for the current IO */
      GPIOx->ADVCFGR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_ADVCFGRL_1_Pos)) ;
34187e58:	697b      	ldr	r3, [r7, #20]
34187e5a:	08da      	lsrs	r2, r3, #3
34187e5c:	687b      	ldr	r3, [r7, #4]
34187e5e:	3212      	adds	r2, #18
34187e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
34187e64:	697b      	ldr	r3, [r7, #20]
34187e66:	f003 0307 	and.w	r3, r3, #7
34187e6a:	009b      	lsls	r3, r3, #2
34187e6c:	220f      	movs	r2, #15
34187e6e:	fa02 f303 	lsl.w	r3, r2, r3
34187e72:	43db      	mvns	r3, r3
34187e74:	697a      	ldr	r2, [r7, #20]
34187e76:	08d2      	lsrs	r2, r2, #3
34187e78:	4019      	ands	r1, r3
34187e7a:	687b      	ldr	r3, [r7, #4]
34187e7c:	3212      	adds	r2, #18
34187e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    position++;
34187e82:	697b      	ldr	r3, [r7, #20]
34187e84:	3301      	adds	r3, #1
34187e86:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
34187e88:	683a      	ldr	r2, [r7, #0]
34187e8a:	697b      	ldr	r3, [r7, #20]
34187e8c:	fa22 f303 	lsr.w	r3, r2, r3
34187e90:	2b00      	cmp	r3, #0
34187e92:	f47f aee9 	bne.w	34187c68 <HAL_GPIO_DeInit+0x10>
  }
}
34187e96:	bf00      	nop
34187e98:	bf00      	nop
34187e9a:	371c      	adds	r7, #28
34187e9c:	46bd      	mov	sp, r7
34187e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187ea2:	4770      	bx	lr
34187ea4:	56025000 	.word	0x56025000
34187ea8:	56020000 	.word	0x56020000
34187eac:	56020400 	.word	0x56020400
34187eb0:	56020800 	.word	0x56020800
34187eb4:	56020c00 	.word	0x56020c00
34187eb8:	56021000 	.word	0x56021000
34187ebc:	56021400 	.word	0x56021400
34187ec0:	56021800 	.word	0x56021800
34187ec4:	56021c00 	.word	0x56021c00
34187ec8:	56023400 	.word	0x56023400
34187ecc:	56023800 	.word	0x56023800
34187ed0:	56023c00 	.word	0x56023c00
34187ed4:	56024000 	.word	0x56024000

34187ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34187ed8:	b480      	push	{r7}
34187eda:	b083      	sub	sp, #12
34187edc:	af00      	add	r7, sp, #0
34187ede:	6078      	str	r0, [r7, #4]
34187ee0:	460b      	mov	r3, r1
34187ee2:	807b      	strh	r3, [r7, #2]
34187ee4:	4613      	mov	r3, r2
34187ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
34187ee8:	787b      	ldrb	r3, [r7, #1]
34187eea:	2b00      	cmp	r3, #0
34187eec:	d003      	beq.n	34187ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34187eee:	887a      	ldrh	r2, [r7, #2]
34187ef0:	687b      	ldr	r3, [r7, #4]
34187ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34187ef4:	e002      	b.n	34187efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34187ef6:	887a      	ldrh	r2, [r7, #2]
34187ef8:	687b      	ldr	r3, [r7, #4]
34187efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
34187efc:	bf00      	nop
34187efe:	370c      	adds	r7, #12
34187f00:	46bd      	mov	sp, r7
34187f02:	f85d 7b04 	ldr.w	r7, [sp], #4
34187f06:	4770      	bx	lr

34187f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
34187f08:	b580      	push	{r7, lr}
34187f0a:	b082      	sub	sp, #8
34187f0c:	af00      	add	r7, sp, #0
34187f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
34187f10:	687b      	ldr	r3, [r7, #4]
34187f12:	2b00      	cmp	r3, #0
34187f14:	d101      	bne.n	34187f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
34187f16:	2301      	movs	r3, #1
34187f18:	e08d      	b.n	34188036 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
34187f1a:	687b      	ldr	r3, [r7, #4]
34187f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34187f20:	b2db      	uxtb	r3, r3
34187f22:	2b00      	cmp	r3, #0
34187f24:	d106      	bne.n	34187f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
34187f26:	687b      	ldr	r3, [r7, #4]
34187f28:	2200      	movs	r2, #0
34187f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
34187f2e:	6878      	ldr	r0, [r7, #4]
34187f30:	f000 f8b4 	bl	3418809c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
34187f34:	687b      	ldr	r3, [r7, #4]
34187f36:	2224      	movs	r2, #36	@ 0x24
34187f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
34187f3c:	687b      	ldr	r3, [r7, #4]
34187f3e:	681b      	ldr	r3, [r3, #0]
34187f40:	681a      	ldr	r2, [r3, #0]
34187f42:	687b      	ldr	r3, [r7, #4]
34187f44:	681b      	ldr	r3, [r3, #0]
34187f46:	f022 0201 	bic.w	r2, r2, #1
34187f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
34187f4c:	687b      	ldr	r3, [r7, #4]
34187f4e:	685a      	ldr	r2, [r3, #4]
34187f50:	687b      	ldr	r3, [r7, #4]
34187f52:	681b      	ldr	r3, [r3, #0]
34187f54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
34187f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
34187f5a:	687b      	ldr	r3, [r7, #4]
34187f5c:	681b      	ldr	r3, [r3, #0]
34187f5e:	689a      	ldr	r2, [r3, #8]
34187f60:	687b      	ldr	r3, [r7, #4]
34187f62:	681b      	ldr	r3, [r3, #0]
34187f64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34187f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
34187f6a:	687b      	ldr	r3, [r7, #4]
34187f6c:	68db      	ldr	r3, [r3, #12]
34187f6e:	2b01      	cmp	r3, #1
34187f70:	d107      	bne.n	34187f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
34187f72:	687b      	ldr	r3, [r7, #4]
34187f74:	689a      	ldr	r2, [r3, #8]
34187f76:	687b      	ldr	r3, [r7, #4]
34187f78:	681b      	ldr	r3, [r3, #0]
34187f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34187f7e:	609a      	str	r2, [r3, #8]
34187f80:	e006      	b.n	34187f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
34187f82:	687b      	ldr	r3, [r7, #4]
34187f84:	689a      	ldr	r2, [r3, #8]
34187f86:	687b      	ldr	r3, [r7, #4]
34187f88:	681b      	ldr	r3, [r3, #0]
34187f8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
34187f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
34187f90:	687b      	ldr	r3, [r7, #4]
34187f92:	68db      	ldr	r3, [r3, #12]
34187f94:	2b02      	cmp	r3, #2
34187f96:	d108      	bne.n	34187faa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34187f98:	687b      	ldr	r3, [r7, #4]
34187f9a:	681b      	ldr	r3, [r3, #0]
34187f9c:	685a      	ldr	r2, [r3, #4]
34187f9e:	687b      	ldr	r3, [r7, #4]
34187fa0:	681b      	ldr	r3, [r3, #0]
34187fa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34187fa6:	605a      	str	r2, [r3, #4]
34187fa8:	e007      	b.n	34187fba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34187faa:	687b      	ldr	r3, [r7, #4]
34187fac:	681b      	ldr	r3, [r3, #0]
34187fae:	685a      	ldr	r2, [r3, #4]
34187fb0:	687b      	ldr	r3, [r7, #4]
34187fb2:	681b      	ldr	r3, [r3, #0]
34187fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34187fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
34187fba:	687b      	ldr	r3, [r7, #4]
34187fbc:	681b      	ldr	r3, [r3, #0]
34187fbe:	685b      	ldr	r3, [r3, #4]
34187fc0:	687a      	ldr	r2, [r7, #4]
34187fc2:	6812      	ldr	r2, [r2, #0]
34187fc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
34187fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34187fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
34187fce:	687b      	ldr	r3, [r7, #4]
34187fd0:	681b      	ldr	r3, [r3, #0]
34187fd2:	68da      	ldr	r2, [r3, #12]
34187fd4:	687b      	ldr	r3, [r7, #4]
34187fd6:	681b      	ldr	r3, [r3, #0]
34187fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34187fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34187fde:	687b      	ldr	r3, [r7, #4]
34187fe0:	691a      	ldr	r2, [r3, #16]
34187fe2:	687b      	ldr	r3, [r7, #4]
34187fe4:	695b      	ldr	r3, [r3, #20]
34187fe6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
34187fea:	687b      	ldr	r3, [r7, #4]
34187fec:	699b      	ldr	r3, [r3, #24]
34187fee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34187ff0:	687b      	ldr	r3, [r7, #4]
34187ff2:	681b      	ldr	r3, [r3, #0]
34187ff4:	430a      	orrs	r2, r1
34187ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
34187ff8:	687b      	ldr	r3, [r7, #4]
34187ffa:	69d9      	ldr	r1, [r3, #28]
34187ffc:	687b      	ldr	r3, [r7, #4]
34187ffe:	6a1a      	ldr	r2, [r3, #32]
34188000:	687b      	ldr	r3, [r7, #4]
34188002:	681b      	ldr	r3, [r3, #0]
34188004:	430a      	orrs	r2, r1
34188006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
34188008:	687b      	ldr	r3, [r7, #4]
3418800a:	681b      	ldr	r3, [r3, #0]
3418800c:	681a      	ldr	r2, [r3, #0]
3418800e:	687b      	ldr	r3, [r7, #4]
34188010:	681b      	ldr	r3, [r3, #0]
34188012:	f042 0201 	orr.w	r2, r2, #1
34188016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
34188018:	687b      	ldr	r3, [r7, #4]
3418801a:	2200      	movs	r2, #0
3418801c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
3418801e:	687b      	ldr	r3, [r7, #4]
34188020:	2220      	movs	r2, #32
34188022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
34188026:	687b      	ldr	r3, [r7, #4]
34188028:	2200      	movs	r2, #0
3418802a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
3418802c:	687b      	ldr	r3, [r7, #4]
3418802e:	2200      	movs	r2, #0
34188030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
34188034:	2300      	movs	r3, #0
}
34188036:	4618      	mov	r0, r3
34188038:	3708      	adds	r7, #8
3418803a:	46bd      	mov	sp, r7
3418803c:	bd80      	pop	{r7, pc}

3418803e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
3418803e:	b580      	push	{r7, lr}
34188040:	b082      	sub	sp, #8
34188042:	af00      	add	r7, sp, #0
34188044:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
34188046:	687b      	ldr	r3, [r7, #4]
34188048:	2b00      	cmp	r3, #0
3418804a:	d101      	bne.n	34188050 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
3418804c:	2301      	movs	r3, #1
3418804e:	e021      	b.n	34188094 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
34188050:	687b      	ldr	r3, [r7, #4]
34188052:	2224      	movs	r2, #36	@ 0x24
34188054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
34188058:	687b      	ldr	r3, [r7, #4]
3418805a:	681b      	ldr	r3, [r3, #0]
3418805c:	681a      	ldr	r2, [r3, #0]
3418805e:	687b      	ldr	r3, [r7, #4]
34188060:	681b      	ldr	r3, [r3, #0]
34188062:	f022 0201 	bic.w	r2, r2, #1
34188066:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
34188068:	6878      	ldr	r0, [r7, #4]
3418806a:	f000 f821 	bl	341880b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3418806e:	687b      	ldr	r3, [r7, #4]
34188070:	2200      	movs	r2, #0
34188072:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
34188074:	687b      	ldr	r3, [r7, #4]
34188076:	2200      	movs	r2, #0
34188078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
3418807c:	687b      	ldr	r3, [r7, #4]
3418807e:	2200      	movs	r2, #0
34188080:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
34188082:	687b      	ldr	r3, [r7, #4]
34188084:	2200      	movs	r2, #0
34188086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
3418808a:	687b      	ldr	r3, [r7, #4]
3418808c:	2200      	movs	r2, #0
3418808e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
34188092:	2300      	movs	r3, #0
}
34188094:	4618      	mov	r0, r3
34188096:	3708      	adds	r7, #8
34188098:	46bd      	mov	sp, r7
3418809a:	bd80      	pop	{r7, pc}

3418809c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
3418809c:	b480      	push	{r7}
3418809e:	b083      	sub	sp, #12
341880a0:	af00      	add	r7, sp, #0
341880a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
341880a4:	bf00      	nop
341880a6:	370c      	adds	r7, #12
341880a8:	46bd      	mov	sp, r7
341880aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341880ae:	4770      	bx	lr

341880b0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
341880b0:	b480      	push	{r7}
341880b2:	b083      	sub	sp, #12
341880b4:	af00      	add	r7, sp, #0
341880b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
341880b8:	bf00      	nop
341880ba:	370c      	adds	r7, #12
341880bc:	46bd      	mov	sp, r7
341880be:	f85d 7b04 	ldr.w	r7, [sp], #4
341880c2:	4770      	bx	lr

341880c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
341880c4:	b580      	push	{r7, lr}
341880c6:	b088      	sub	sp, #32
341880c8:	af02      	add	r7, sp, #8
341880ca:	60f8      	str	r0, [r7, #12]
341880cc:	4608      	mov	r0, r1
341880ce:	4611      	mov	r1, r2
341880d0:	461a      	mov	r2, r3
341880d2:	4603      	mov	r3, r0
341880d4:	817b      	strh	r3, [r7, #10]
341880d6:	460b      	mov	r3, r1
341880d8:	813b      	strh	r3, [r7, #8]
341880da:	4613      	mov	r3, r2
341880dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
341880de:	68fb      	ldr	r3, [r7, #12]
341880e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
341880e4:	b2db      	uxtb	r3, r3
341880e6:	2b20      	cmp	r3, #32
341880e8:	f040 80f9 	bne.w	341882de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
341880ec:	6a3b      	ldr	r3, [r7, #32]
341880ee:	2b00      	cmp	r3, #0
341880f0:	d002      	beq.n	341880f8 <HAL_I2C_Mem_Write+0x34>
341880f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
341880f4:	2b00      	cmp	r3, #0
341880f6:	d105      	bne.n	34188104 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
341880f8:	68fb      	ldr	r3, [r7, #12]
341880fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
341880fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
34188100:	2301      	movs	r3, #1
34188102:	e0ed      	b.n	341882e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
34188104:	68fb      	ldr	r3, [r7, #12]
34188106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418810a:	2b01      	cmp	r3, #1
3418810c:	d101      	bne.n	34188112 <HAL_I2C_Mem_Write+0x4e>
3418810e:	2302      	movs	r3, #2
34188110:	e0e6      	b.n	341882e0 <HAL_I2C_Mem_Write+0x21c>
34188112:	68fb      	ldr	r3, [r7, #12]
34188114:	2201      	movs	r2, #1
34188116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
3418811a:	f7fc f9c7 	bl	341844ac <HAL_GetTick>
3418811e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34188120:	697b      	ldr	r3, [r7, #20]
34188122:	9300      	str	r3, [sp, #0]
34188124:	2319      	movs	r3, #25
34188126:	2201      	movs	r2, #1
34188128:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3418812c:	68f8      	ldr	r0, [r7, #12]
3418812e:	f000 fadd 	bl	341886ec <I2C_WaitOnFlagUntilTimeout>
34188132:	4603      	mov	r3, r0
34188134:	2b00      	cmp	r3, #0
34188136:	d001      	beq.n	3418813c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
34188138:	2301      	movs	r3, #1
3418813a:	e0d1      	b.n	341882e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
3418813c:	68fb      	ldr	r3, [r7, #12]
3418813e:	2221      	movs	r2, #33	@ 0x21
34188140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
34188144:	68fb      	ldr	r3, [r7, #12]
34188146:	2240      	movs	r2, #64	@ 0x40
34188148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3418814c:	68fb      	ldr	r3, [r7, #12]
3418814e:	2200      	movs	r2, #0
34188150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
34188152:	68fb      	ldr	r3, [r7, #12]
34188154:	6a3a      	ldr	r2, [r7, #32]
34188156:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
34188158:	68fb      	ldr	r3, [r7, #12]
3418815a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
3418815c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
3418815e:	68fb      	ldr	r3, [r7, #12]
34188160:	2200      	movs	r2, #0
34188162:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
34188164:	88f8      	ldrh	r0, [r7, #6]
34188166:	893a      	ldrh	r2, [r7, #8]
34188168:	8979      	ldrh	r1, [r7, #10]
3418816a:	697b      	ldr	r3, [r7, #20]
3418816c:	9301      	str	r3, [sp, #4]
3418816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188170:	9300      	str	r3, [sp, #0]
34188172:	4603      	mov	r3, r0
34188174:	68f8      	ldr	r0, [r7, #12]
34188176:	f000 f9ed 	bl	34188554 <I2C_RequestMemoryWrite>
3418817a:	4603      	mov	r3, r0
3418817c:	2b00      	cmp	r3, #0
3418817e:	d005      	beq.n	3418818c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
34188180:	68fb      	ldr	r3, [r7, #12]
34188182:	2200      	movs	r2, #0
34188184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
34188188:	2301      	movs	r3, #1
3418818a:	e0a9      	b.n	341882e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
3418818c:	68fb      	ldr	r3, [r7, #12]
3418818e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34188190:	b29b      	uxth	r3, r3
34188192:	2bff      	cmp	r3, #255	@ 0xff
34188194:	d90e      	bls.n	341881b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
34188196:	68fb      	ldr	r3, [r7, #12]
34188198:	22ff      	movs	r2, #255	@ 0xff
3418819a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
3418819c:	68fb      	ldr	r3, [r7, #12]
3418819e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341881a0:	b2da      	uxtb	r2, r3
341881a2:	8979      	ldrh	r1, [r7, #10]
341881a4:	2300      	movs	r3, #0
341881a6:	9300      	str	r3, [sp, #0]
341881a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341881ac:	68f8      	ldr	r0, [r7, #12]
341881ae:	f000 fc61 	bl	34188a74 <I2C_TransferConfig>
341881b2:	e00f      	b.n	341881d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
341881b4:	68fb      	ldr	r3, [r7, #12]
341881b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341881b8:	b29a      	uxth	r2, r3
341881ba:	68fb      	ldr	r3, [r7, #12]
341881bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
341881be:	68fb      	ldr	r3, [r7, #12]
341881c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341881c2:	b2da      	uxtb	r2, r3
341881c4:	8979      	ldrh	r1, [r7, #10]
341881c6:	2300      	movs	r3, #0
341881c8:	9300      	str	r3, [sp, #0]
341881ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
341881ce:	68f8      	ldr	r0, [r7, #12]
341881d0:	f000 fc50 	bl	34188a74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
341881d4:	697a      	ldr	r2, [r7, #20]
341881d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341881d8:	68f8      	ldr	r0, [r7, #12]
341881da:	f000 fae0 	bl	3418879e <I2C_WaitOnTXISFlagUntilTimeout>
341881de:	4603      	mov	r3, r0
341881e0:	2b00      	cmp	r3, #0
341881e2:	d001      	beq.n	341881e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
341881e4:	2301      	movs	r3, #1
341881e6:	e07b      	b.n	341882e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
341881e8:	68fb      	ldr	r3, [r7, #12]
341881ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341881ec:	781a      	ldrb	r2, [r3, #0]
341881ee:	68fb      	ldr	r3, [r7, #12]
341881f0:	681b      	ldr	r3, [r3, #0]
341881f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
341881f4:	68fb      	ldr	r3, [r7, #12]
341881f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341881f8:	1c5a      	adds	r2, r3, #1
341881fa:	68fb      	ldr	r3, [r7, #12]
341881fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
341881fe:	68fb      	ldr	r3, [r7, #12]
34188200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34188202:	b29b      	uxth	r3, r3
34188204:	3b01      	subs	r3, #1
34188206:	b29a      	uxth	r2, r3
34188208:	68fb      	ldr	r3, [r7, #12]
3418820a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
3418820c:	68fb      	ldr	r3, [r7, #12]
3418820e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34188210:	3b01      	subs	r3, #1
34188212:	b29a      	uxth	r2, r3
34188214:	68fb      	ldr	r3, [r7, #12]
34188216:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34188218:	68fb      	ldr	r3, [r7, #12]
3418821a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
3418821c:	b29b      	uxth	r3, r3
3418821e:	2b00      	cmp	r3, #0
34188220:	d034      	beq.n	3418828c <HAL_I2C_Mem_Write+0x1c8>
34188222:	68fb      	ldr	r3, [r7, #12]
34188224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34188226:	2b00      	cmp	r3, #0
34188228:	d130      	bne.n	3418828c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
3418822a:	697b      	ldr	r3, [r7, #20]
3418822c:	9300      	str	r3, [sp, #0]
3418822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188230:	2200      	movs	r2, #0
34188232:	2180      	movs	r1, #128	@ 0x80
34188234:	68f8      	ldr	r0, [r7, #12]
34188236:	f000 fa59 	bl	341886ec <I2C_WaitOnFlagUntilTimeout>
3418823a:	4603      	mov	r3, r0
3418823c:	2b00      	cmp	r3, #0
3418823e:	d001      	beq.n	34188244 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
34188240:	2301      	movs	r3, #1
34188242:	e04d      	b.n	341882e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
34188244:	68fb      	ldr	r3, [r7, #12]
34188246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34188248:	b29b      	uxth	r3, r3
3418824a:	2bff      	cmp	r3, #255	@ 0xff
3418824c:	d90e      	bls.n	3418826c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
3418824e:	68fb      	ldr	r3, [r7, #12]
34188250:	22ff      	movs	r2, #255	@ 0xff
34188252:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
34188254:	68fb      	ldr	r3, [r7, #12]
34188256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34188258:	b2da      	uxtb	r2, r3
3418825a:	8979      	ldrh	r1, [r7, #10]
3418825c:	2300      	movs	r3, #0
3418825e:	9300      	str	r3, [sp, #0]
34188260:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34188264:	68f8      	ldr	r0, [r7, #12]
34188266:	f000 fc05 	bl	34188a74 <I2C_TransferConfig>
3418826a:	e00f      	b.n	3418828c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
3418826c:	68fb      	ldr	r3, [r7, #12]
3418826e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34188270:	b29a      	uxth	r2, r3
34188272:	68fb      	ldr	r3, [r7, #12]
34188274:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34188276:	68fb      	ldr	r3, [r7, #12]
34188278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418827a:	b2da      	uxtb	r2, r3
3418827c:	8979      	ldrh	r1, [r7, #10]
3418827e:	2300      	movs	r3, #0
34188280:	9300      	str	r3, [sp, #0]
34188282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34188286:	68f8      	ldr	r0, [r7, #12]
34188288:	f000 fbf4 	bl	34188a74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
3418828c:	68fb      	ldr	r3, [r7, #12]
3418828e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34188290:	b29b      	uxth	r3, r3
34188292:	2b00      	cmp	r3, #0
34188294:	d19e      	bne.n	341881d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
34188296:	697a      	ldr	r2, [r7, #20]
34188298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418829a:	68f8      	ldr	r0, [r7, #12]
3418829c:	f000 fac6 	bl	3418882c <I2C_WaitOnSTOPFlagUntilTimeout>
341882a0:	4603      	mov	r3, r0
341882a2:	2b00      	cmp	r3, #0
341882a4:	d001      	beq.n	341882aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
341882a6:	2301      	movs	r3, #1
341882a8:	e01a      	b.n	341882e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
341882aa:	68fb      	ldr	r3, [r7, #12]
341882ac:	681b      	ldr	r3, [r3, #0]
341882ae:	2220      	movs	r2, #32
341882b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
341882b2:	68fb      	ldr	r3, [r7, #12]
341882b4:	681b      	ldr	r3, [r3, #0]
341882b6:	6859      	ldr	r1, [r3, #4]
341882b8:	68fb      	ldr	r3, [r7, #12]
341882ba:	681a      	ldr	r2, [r3, #0]
341882bc:	4b0a      	ldr	r3, [pc, #40]	@ (341882e8 <HAL_I2C_Mem_Write+0x224>)
341882be:	400b      	ands	r3, r1
341882c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
341882c2:	68fb      	ldr	r3, [r7, #12]
341882c4:	2220      	movs	r2, #32
341882c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
341882ca:	68fb      	ldr	r3, [r7, #12]
341882cc:	2200      	movs	r2, #0
341882ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
341882d2:	68fb      	ldr	r3, [r7, #12]
341882d4:	2200      	movs	r2, #0
341882d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
341882da:	2300      	movs	r3, #0
341882dc:	e000      	b.n	341882e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
341882de:	2302      	movs	r3, #2
  }
}
341882e0:	4618      	mov	r0, r3
341882e2:	3718      	adds	r7, #24
341882e4:	46bd      	mov	sp, r7
341882e6:	bd80      	pop	{r7, pc}
341882e8:	fe00e800 	.word	0xfe00e800

341882ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
341882ec:	b580      	push	{r7, lr}
341882ee:	b088      	sub	sp, #32
341882f0:	af02      	add	r7, sp, #8
341882f2:	60f8      	str	r0, [r7, #12]
341882f4:	4608      	mov	r0, r1
341882f6:	4611      	mov	r1, r2
341882f8:	461a      	mov	r2, r3
341882fa:	4603      	mov	r3, r0
341882fc:	817b      	strh	r3, [r7, #10]
341882fe:	460b      	mov	r3, r1
34188300:	813b      	strh	r3, [r7, #8]
34188302:	4613      	mov	r3, r2
34188304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
34188306:	68fb      	ldr	r3, [r7, #12]
34188308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418830c:	b2db      	uxtb	r3, r3
3418830e:	2b20      	cmp	r3, #32
34188310:	f040 80fd 	bne.w	3418850e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
34188314:	6a3b      	ldr	r3, [r7, #32]
34188316:	2b00      	cmp	r3, #0
34188318:	d002      	beq.n	34188320 <HAL_I2C_Mem_Read+0x34>
3418831a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
3418831c:	2b00      	cmp	r3, #0
3418831e:	d105      	bne.n	3418832c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
34188320:	68fb      	ldr	r3, [r7, #12]
34188322:	f44f 7200 	mov.w	r2, #512	@ 0x200
34188326:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
34188328:	2301      	movs	r3, #1
3418832a:	e0f1      	b.n	34188510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
3418832c:	68fb      	ldr	r3, [r7, #12]
3418832e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34188332:	2b01      	cmp	r3, #1
34188334:	d101      	bne.n	3418833a <HAL_I2C_Mem_Read+0x4e>
34188336:	2302      	movs	r3, #2
34188338:	e0ea      	b.n	34188510 <HAL_I2C_Mem_Read+0x224>
3418833a:	68fb      	ldr	r3, [r7, #12]
3418833c:	2201      	movs	r2, #1
3418833e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
34188342:	f7fc f8b3 	bl	341844ac <HAL_GetTick>
34188346:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34188348:	697b      	ldr	r3, [r7, #20]
3418834a:	9300      	str	r3, [sp, #0]
3418834c:	2319      	movs	r3, #25
3418834e:	2201      	movs	r2, #1
34188350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
34188354:	68f8      	ldr	r0, [r7, #12]
34188356:	f000 f9c9 	bl	341886ec <I2C_WaitOnFlagUntilTimeout>
3418835a:	4603      	mov	r3, r0
3418835c:	2b00      	cmp	r3, #0
3418835e:	d001      	beq.n	34188364 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
34188360:	2301      	movs	r3, #1
34188362:	e0d5      	b.n	34188510 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
34188364:	68fb      	ldr	r3, [r7, #12]
34188366:	2222      	movs	r2, #34	@ 0x22
34188368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
3418836c:	68fb      	ldr	r3, [r7, #12]
3418836e:	2240      	movs	r2, #64	@ 0x40
34188370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
34188374:	68fb      	ldr	r3, [r7, #12]
34188376:	2200      	movs	r2, #0
34188378:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
3418837a:	68fb      	ldr	r3, [r7, #12]
3418837c:	6a3a      	ldr	r2, [r7, #32]
3418837e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
34188380:	68fb      	ldr	r3, [r7, #12]
34188382:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
34188384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
34188386:	68fb      	ldr	r3, [r7, #12]
34188388:	2200      	movs	r2, #0
3418838a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
3418838c:	88f8      	ldrh	r0, [r7, #6]
3418838e:	893a      	ldrh	r2, [r7, #8]
34188390:	8979      	ldrh	r1, [r7, #10]
34188392:	697b      	ldr	r3, [r7, #20]
34188394:	9301      	str	r3, [sp, #4]
34188396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188398:	9300      	str	r3, [sp, #0]
3418839a:	4603      	mov	r3, r0
3418839c:	68f8      	ldr	r0, [r7, #12]
3418839e:	f000 f92d 	bl	341885fc <I2C_RequestMemoryRead>
341883a2:	4603      	mov	r3, r0
341883a4:	2b00      	cmp	r3, #0
341883a6:	d005      	beq.n	341883b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
341883a8:	68fb      	ldr	r3, [r7, #12]
341883aa:	2200      	movs	r2, #0
341883ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
341883b0:	2301      	movs	r3, #1
341883b2:	e0ad      	b.n	34188510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
341883b4:	68fb      	ldr	r3, [r7, #12]
341883b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341883b8:	b29b      	uxth	r3, r3
341883ba:	2bff      	cmp	r3, #255	@ 0xff
341883bc:	d90e      	bls.n	341883dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
341883be:	68fb      	ldr	r3, [r7, #12]
341883c0:	22ff      	movs	r2, #255	@ 0xff
341883c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
341883c4:	68fb      	ldr	r3, [r7, #12]
341883c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341883c8:	b2da      	uxtb	r2, r3
341883ca:	8979      	ldrh	r1, [r7, #10]
341883cc:	4b52      	ldr	r3, [pc, #328]	@ (34188518 <HAL_I2C_Mem_Read+0x22c>)
341883ce:	9300      	str	r3, [sp, #0]
341883d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341883d4:	68f8      	ldr	r0, [r7, #12]
341883d6:	f000 fb4d 	bl	34188a74 <I2C_TransferConfig>
341883da:	e00f      	b.n	341883fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
341883dc:	68fb      	ldr	r3, [r7, #12]
341883de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341883e0:	b29a      	uxth	r2, r3
341883e2:	68fb      	ldr	r3, [r7, #12]
341883e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
341883e6:	68fb      	ldr	r3, [r7, #12]
341883e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341883ea:	b2da      	uxtb	r2, r3
341883ec:	8979      	ldrh	r1, [r7, #10]
341883ee:	4b4a      	ldr	r3, [pc, #296]	@ (34188518 <HAL_I2C_Mem_Read+0x22c>)
341883f0:	9300      	str	r3, [sp, #0]
341883f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
341883f6:	68f8      	ldr	r0, [r7, #12]
341883f8:	f000 fb3c 	bl	34188a74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
341883fc:	697b      	ldr	r3, [r7, #20]
341883fe:	9300      	str	r3, [sp, #0]
34188400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188402:	2200      	movs	r2, #0
34188404:	2104      	movs	r1, #4
34188406:	68f8      	ldr	r0, [r7, #12]
34188408:	f000 f970 	bl	341886ec <I2C_WaitOnFlagUntilTimeout>
3418840c:	4603      	mov	r3, r0
3418840e:	2b00      	cmp	r3, #0
34188410:	d001      	beq.n	34188416 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
34188412:	2301      	movs	r3, #1
34188414:	e07c      	b.n	34188510 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
34188416:	68fb      	ldr	r3, [r7, #12]
34188418:	681b      	ldr	r3, [r3, #0]
3418841a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418841c:	68fb      	ldr	r3, [r7, #12]
3418841e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188420:	b2d2      	uxtb	r2, r2
34188422:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
34188424:	68fb      	ldr	r3, [r7, #12]
34188426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188428:	1c5a      	adds	r2, r3, #1
3418842a:	68fb      	ldr	r3, [r7, #12]
3418842c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
3418842e:	68fb      	ldr	r3, [r7, #12]
34188430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34188432:	3b01      	subs	r3, #1
34188434:	b29a      	uxth	r2, r3
34188436:	68fb      	ldr	r3, [r7, #12]
34188438:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
3418843a:	68fb      	ldr	r3, [r7, #12]
3418843c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
3418843e:	b29b      	uxth	r3, r3
34188440:	3b01      	subs	r3, #1
34188442:	b29a      	uxth	r2, r3
34188444:	68fb      	ldr	r3, [r7, #12]
34188446:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34188448:	68fb      	ldr	r3, [r7, #12]
3418844a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
3418844c:	b29b      	uxth	r3, r3
3418844e:	2b00      	cmp	r3, #0
34188450:	d034      	beq.n	341884bc <HAL_I2C_Mem_Read+0x1d0>
34188452:	68fb      	ldr	r3, [r7, #12]
34188454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34188456:	2b00      	cmp	r3, #0
34188458:	d130      	bne.n	341884bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
3418845a:	697b      	ldr	r3, [r7, #20]
3418845c:	9300      	str	r3, [sp, #0]
3418845e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188460:	2200      	movs	r2, #0
34188462:	2180      	movs	r1, #128	@ 0x80
34188464:	68f8      	ldr	r0, [r7, #12]
34188466:	f000 f941 	bl	341886ec <I2C_WaitOnFlagUntilTimeout>
3418846a:	4603      	mov	r3, r0
3418846c:	2b00      	cmp	r3, #0
3418846e:	d001      	beq.n	34188474 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
34188470:	2301      	movs	r3, #1
34188472:	e04d      	b.n	34188510 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
34188474:	68fb      	ldr	r3, [r7, #12]
34188476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34188478:	b29b      	uxth	r3, r3
3418847a:	2bff      	cmp	r3, #255	@ 0xff
3418847c:	d90e      	bls.n	3418849c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
3418847e:	68fb      	ldr	r3, [r7, #12]
34188480:	22ff      	movs	r2, #255	@ 0xff
34188482:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
34188484:	68fb      	ldr	r3, [r7, #12]
34188486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34188488:	b2da      	uxtb	r2, r3
3418848a:	8979      	ldrh	r1, [r7, #10]
3418848c:	2300      	movs	r3, #0
3418848e:	9300      	str	r3, [sp, #0]
34188490:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34188494:	68f8      	ldr	r0, [r7, #12]
34188496:	f000 faed 	bl	34188a74 <I2C_TransferConfig>
3418849a:	e00f      	b.n	341884bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
3418849c:	68fb      	ldr	r3, [r7, #12]
3418849e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341884a0:	b29a      	uxth	r2, r3
341884a2:	68fb      	ldr	r3, [r7, #12]
341884a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
341884a6:	68fb      	ldr	r3, [r7, #12]
341884a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341884aa:	b2da      	uxtb	r2, r3
341884ac:	8979      	ldrh	r1, [r7, #10]
341884ae:	2300      	movs	r3, #0
341884b0:	9300      	str	r3, [sp, #0]
341884b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
341884b6:	68f8      	ldr	r0, [r7, #12]
341884b8:	f000 fadc 	bl	34188a74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
341884bc:	68fb      	ldr	r3, [r7, #12]
341884be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341884c0:	b29b      	uxth	r3, r3
341884c2:	2b00      	cmp	r3, #0
341884c4:	d19a      	bne.n	341883fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
341884c6:	697a      	ldr	r2, [r7, #20]
341884c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341884ca:	68f8      	ldr	r0, [r7, #12]
341884cc:	f000 f9ae 	bl	3418882c <I2C_WaitOnSTOPFlagUntilTimeout>
341884d0:	4603      	mov	r3, r0
341884d2:	2b00      	cmp	r3, #0
341884d4:	d001      	beq.n	341884da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
341884d6:	2301      	movs	r3, #1
341884d8:	e01a      	b.n	34188510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
341884da:	68fb      	ldr	r3, [r7, #12]
341884dc:	681b      	ldr	r3, [r3, #0]
341884de:	2220      	movs	r2, #32
341884e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
341884e2:	68fb      	ldr	r3, [r7, #12]
341884e4:	681b      	ldr	r3, [r3, #0]
341884e6:	6859      	ldr	r1, [r3, #4]
341884e8:	68fb      	ldr	r3, [r7, #12]
341884ea:	681a      	ldr	r2, [r3, #0]
341884ec:	4b0b      	ldr	r3, [pc, #44]	@ (3418851c <HAL_I2C_Mem_Read+0x230>)
341884ee:	400b      	ands	r3, r1
341884f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
341884f2:	68fb      	ldr	r3, [r7, #12]
341884f4:	2220      	movs	r2, #32
341884f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
341884fa:	68fb      	ldr	r3, [r7, #12]
341884fc:	2200      	movs	r2, #0
341884fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34188502:	68fb      	ldr	r3, [r7, #12]
34188504:	2200      	movs	r2, #0
34188506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
3418850a:	2300      	movs	r3, #0
3418850c:	e000      	b.n	34188510 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
3418850e:	2302      	movs	r3, #2
  }
}
34188510:	4618      	mov	r0, r3
34188512:	3718      	adds	r7, #24
34188514:	46bd      	mov	sp, r7
34188516:	bd80      	pop	{r7, pc}
34188518:	80002400 	.word	0x80002400
3418851c:	fe00e800 	.word	0xfe00e800

34188520 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
34188520:	b480      	push	{r7}
34188522:	b083      	sub	sp, #12
34188524:	af00      	add	r7, sp, #0
34188526:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
34188528:	687b      	ldr	r3, [r7, #4]
3418852a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418852e:	b2db      	uxtb	r3, r3
}
34188530:	4618      	mov	r0, r3
34188532:	370c      	adds	r7, #12
34188534:	46bd      	mov	sp, r7
34188536:	f85d 7b04 	ldr.w	r7, [sp], #4
3418853a:	4770      	bx	lr

3418853c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
3418853c:	b480      	push	{r7}
3418853e:	b083      	sub	sp, #12
34188540:	af00      	add	r7, sp, #0
34188542:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
34188544:	687b      	ldr	r3, [r7, #4]
34188546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
34188548:	4618      	mov	r0, r3
3418854a:	370c      	adds	r7, #12
3418854c:	46bd      	mov	sp, r7
3418854e:	f85d 7b04 	ldr.w	r7, [sp], #4
34188552:	4770      	bx	lr

34188554 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
34188554:	b580      	push	{r7, lr}
34188556:	b086      	sub	sp, #24
34188558:	af02      	add	r7, sp, #8
3418855a:	60f8      	str	r0, [r7, #12]
3418855c:	4608      	mov	r0, r1
3418855e:	4611      	mov	r1, r2
34188560:	461a      	mov	r2, r3
34188562:	4603      	mov	r3, r0
34188564:	817b      	strh	r3, [r7, #10]
34188566:	460b      	mov	r3, r1
34188568:	813b      	strh	r3, [r7, #8]
3418856a:	4613      	mov	r3, r2
3418856c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
3418856e:	88fb      	ldrh	r3, [r7, #6]
34188570:	b2da      	uxtb	r2, r3
34188572:	8979      	ldrh	r1, [r7, #10]
34188574:	4b20      	ldr	r3, [pc, #128]	@ (341885f8 <I2C_RequestMemoryWrite+0xa4>)
34188576:	9300      	str	r3, [sp, #0]
34188578:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418857c:	68f8      	ldr	r0, [r7, #12]
3418857e:	f000 fa79 	bl	34188a74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34188582:	69fa      	ldr	r2, [r7, #28]
34188584:	69b9      	ldr	r1, [r7, #24]
34188586:	68f8      	ldr	r0, [r7, #12]
34188588:	f000 f909 	bl	3418879e <I2C_WaitOnTXISFlagUntilTimeout>
3418858c:	4603      	mov	r3, r0
3418858e:	2b00      	cmp	r3, #0
34188590:	d001      	beq.n	34188596 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
34188592:	2301      	movs	r3, #1
34188594:	e02c      	b.n	341885f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
34188596:	88fb      	ldrh	r3, [r7, #6]
34188598:	2b01      	cmp	r3, #1
3418859a:	d105      	bne.n	341885a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3418859c:	893b      	ldrh	r3, [r7, #8]
3418859e:	b2da      	uxtb	r2, r3
341885a0:	68fb      	ldr	r3, [r7, #12]
341885a2:	681b      	ldr	r3, [r3, #0]
341885a4:	629a      	str	r2, [r3, #40]	@ 0x28
341885a6:	e015      	b.n	341885d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
341885a8:	893b      	ldrh	r3, [r7, #8]
341885aa:	0a1b      	lsrs	r3, r3, #8
341885ac:	b29b      	uxth	r3, r3
341885ae:	b2da      	uxtb	r2, r3
341885b0:	68fb      	ldr	r3, [r7, #12]
341885b2:	681b      	ldr	r3, [r3, #0]
341885b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
341885b6:	69fa      	ldr	r2, [r7, #28]
341885b8:	69b9      	ldr	r1, [r7, #24]
341885ba:	68f8      	ldr	r0, [r7, #12]
341885bc:	f000 f8ef 	bl	3418879e <I2C_WaitOnTXISFlagUntilTimeout>
341885c0:	4603      	mov	r3, r0
341885c2:	2b00      	cmp	r3, #0
341885c4:	d001      	beq.n	341885ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
341885c6:	2301      	movs	r3, #1
341885c8:	e012      	b.n	341885f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
341885ca:	893b      	ldrh	r3, [r7, #8]
341885cc:	b2da      	uxtb	r2, r3
341885ce:	68fb      	ldr	r3, [r7, #12]
341885d0:	681b      	ldr	r3, [r3, #0]
341885d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
341885d4:	69fb      	ldr	r3, [r7, #28]
341885d6:	9300      	str	r3, [sp, #0]
341885d8:	69bb      	ldr	r3, [r7, #24]
341885da:	2200      	movs	r2, #0
341885dc:	2180      	movs	r1, #128	@ 0x80
341885de:	68f8      	ldr	r0, [r7, #12]
341885e0:	f000 f884 	bl	341886ec <I2C_WaitOnFlagUntilTimeout>
341885e4:	4603      	mov	r3, r0
341885e6:	2b00      	cmp	r3, #0
341885e8:	d001      	beq.n	341885ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
341885ea:	2301      	movs	r3, #1
341885ec:	e000      	b.n	341885f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
341885ee:	2300      	movs	r3, #0
}
341885f0:	4618      	mov	r0, r3
341885f2:	3710      	adds	r7, #16
341885f4:	46bd      	mov	sp, r7
341885f6:	bd80      	pop	{r7, pc}
341885f8:	80002000 	.word	0x80002000

341885fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
341885fc:	b580      	push	{r7, lr}
341885fe:	b086      	sub	sp, #24
34188600:	af02      	add	r7, sp, #8
34188602:	60f8      	str	r0, [r7, #12]
34188604:	4608      	mov	r0, r1
34188606:	4611      	mov	r1, r2
34188608:	461a      	mov	r2, r3
3418860a:	4603      	mov	r3, r0
3418860c:	817b      	strh	r3, [r7, #10]
3418860e:	460b      	mov	r3, r1
34188610:	813b      	strh	r3, [r7, #8]
34188612:	4613      	mov	r3, r2
34188614:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
34188616:	88fb      	ldrh	r3, [r7, #6]
34188618:	b2da      	uxtb	r2, r3
3418861a:	8979      	ldrh	r1, [r7, #10]
3418861c:	4b20      	ldr	r3, [pc, #128]	@ (341886a0 <I2C_RequestMemoryRead+0xa4>)
3418861e:	9300      	str	r3, [sp, #0]
34188620:	2300      	movs	r3, #0
34188622:	68f8      	ldr	r0, [r7, #12]
34188624:	f000 fa26 	bl	34188a74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34188628:	69fa      	ldr	r2, [r7, #28]
3418862a:	69b9      	ldr	r1, [r7, #24]
3418862c:	68f8      	ldr	r0, [r7, #12]
3418862e:	f000 f8b6 	bl	3418879e <I2C_WaitOnTXISFlagUntilTimeout>
34188632:	4603      	mov	r3, r0
34188634:	2b00      	cmp	r3, #0
34188636:	d001      	beq.n	3418863c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
34188638:	2301      	movs	r3, #1
3418863a:	e02c      	b.n	34188696 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
3418863c:	88fb      	ldrh	r3, [r7, #6]
3418863e:	2b01      	cmp	r3, #1
34188640:	d105      	bne.n	3418864e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34188642:	893b      	ldrh	r3, [r7, #8]
34188644:	b2da      	uxtb	r2, r3
34188646:	68fb      	ldr	r3, [r7, #12]
34188648:	681b      	ldr	r3, [r3, #0]
3418864a:	629a      	str	r2, [r3, #40]	@ 0x28
3418864c:	e015      	b.n	3418867a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
3418864e:	893b      	ldrh	r3, [r7, #8]
34188650:	0a1b      	lsrs	r3, r3, #8
34188652:	b29b      	uxth	r3, r3
34188654:	b2da      	uxtb	r2, r3
34188656:	68fb      	ldr	r3, [r7, #12]
34188658:	681b      	ldr	r3, [r3, #0]
3418865a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
3418865c:	69fa      	ldr	r2, [r7, #28]
3418865e:	69b9      	ldr	r1, [r7, #24]
34188660:	68f8      	ldr	r0, [r7, #12]
34188662:	f000 f89c 	bl	3418879e <I2C_WaitOnTXISFlagUntilTimeout>
34188666:	4603      	mov	r3, r0
34188668:	2b00      	cmp	r3, #0
3418866a:	d001      	beq.n	34188670 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
3418866c:	2301      	movs	r3, #1
3418866e:	e012      	b.n	34188696 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34188670:	893b      	ldrh	r3, [r7, #8]
34188672:	b2da      	uxtb	r2, r3
34188674:	68fb      	ldr	r3, [r7, #12]
34188676:	681b      	ldr	r3, [r3, #0]
34188678:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
3418867a:	69fb      	ldr	r3, [r7, #28]
3418867c:	9300      	str	r3, [sp, #0]
3418867e:	69bb      	ldr	r3, [r7, #24]
34188680:	2200      	movs	r2, #0
34188682:	2140      	movs	r1, #64	@ 0x40
34188684:	68f8      	ldr	r0, [r7, #12]
34188686:	f000 f831 	bl	341886ec <I2C_WaitOnFlagUntilTimeout>
3418868a:	4603      	mov	r3, r0
3418868c:	2b00      	cmp	r3, #0
3418868e:	d001      	beq.n	34188694 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
34188690:	2301      	movs	r3, #1
34188692:	e000      	b.n	34188696 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
34188694:	2300      	movs	r3, #0
}
34188696:	4618      	mov	r0, r3
34188698:	3710      	adds	r7, #16
3418869a:	46bd      	mov	sp, r7
3418869c:	bd80      	pop	{r7, pc}
3418869e:	bf00      	nop
341886a0:	80002000 	.word	0x80002000

341886a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
341886a4:	b480      	push	{r7}
341886a6:	b083      	sub	sp, #12
341886a8:	af00      	add	r7, sp, #0
341886aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
341886ac:	687b      	ldr	r3, [r7, #4]
341886ae:	681b      	ldr	r3, [r3, #0]
341886b0:	699b      	ldr	r3, [r3, #24]
341886b2:	f003 0302 	and.w	r3, r3, #2
341886b6:	2b02      	cmp	r3, #2
341886b8:	d103      	bne.n	341886c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
341886ba:	687b      	ldr	r3, [r7, #4]
341886bc:	681b      	ldr	r3, [r3, #0]
341886be:	2200      	movs	r2, #0
341886c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
341886c2:	687b      	ldr	r3, [r7, #4]
341886c4:	681b      	ldr	r3, [r3, #0]
341886c6:	699b      	ldr	r3, [r3, #24]
341886c8:	f003 0301 	and.w	r3, r3, #1
341886cc:	2b01      	cmp	r3, #1
341886ce:	d007      	beq.n	341886e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
341886d0:	687b      	ldr	r3, [r7, #4]
341886d2:	681b      	ldr	r3, [r3, #0]
341886d4:	699a      	ldr	r2, [r3, #24]
341886d6:	687b      	ldr	r3, [r7, #4]
341886d8:	681b      	ldr	r3, [r3, #0]
341886da:	f042 0201 	orr.w	r2, r2, #1
341886de:	619a      	str	r2, [r3, #24]
  }
}
341886e0:	bf00      	nop
341886e2:	370c      	adds	r7, #12
341886e4:	46bd      	mov	sp, r7
341886e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341886ea:	4770      	bx	lr

341886ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
341886ec:	b580      	push	{r7, lr}
341886ee:	b084      	sub	sp, #16
341886f0:	af00      	add	r7, sp, #0
341886f2:	60f8      	str	r0, [r7, #12]
341886f4:	60b9      	str	r1, [r7, #8]
341886f6:	603b      	str	r3, [r7, #0]
341886f8:	4613      	mov	r3, r2
341886fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
341886fc:	e03b      	b.n	34188776 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
341886fe:	69ba      	ldr	r2, [r7, #24]
34188700:	6839      	ldr	r1, [r7, #0]
34188702:	68f8      	ldr	r0, [r7, #12]
34188704:	f000 f8d6 	bl	341888b4 <I2C_IsErrorOccurred>
34188708:	4603      	mov	r3, r0
3418870a:	2b00      	cmp	r3, #0
3418870c:	d001      	beq.n	34188712 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
3418870e:	2301      	movs	r3, #1
34188710:	e041      	b.n	34188796 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34188712:	683b      	ldr	r3, [r7, #0]
34188714:	f1b3 3fff 	cmp.w	r3, #4294967295
34188718:	d02d      	beq.n	34188776 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418871a:	f7fb fec7 	bl	341844ac <HAL_GetTick>
3418871e:	4602      	mov	r2, r0
34188720:	69bb      	ldr	r3, [r7, #24]
34188722:	1ad3      	subs	r3, r2, r3
34188724:	683a      	ldr	r2, [r7, #0]
34188726:	429a      	cmp	r2, r3
34188728:	d302      	bcc.n	34188730 <I2C_WaitOnFlagUntilTimeout+0x44>
3418872a:	683b      	ldr	r3, [r7, #0]
3418872c:	2b00      	cmp	r3, #0
3418872e:	d122      	bne.n	34188776 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34188730:	68fb      	ldr	r3, [r7, #12]
34188732:	681b      	ldr	r3, [r3, #0]
34188734:	699a      	ldr	r2, [r3, #24]
34188736:	68bb      	ldr	r3, [r7, #8]
34188738:	4013      	ands	r3, r2
3418873a:	68ba      	ldr	r2, [r7, #8]
3418873c:	429a      	cmp	r2, r3
3418873e:	bf0c      	ite	eq
34188740:	2301      	moveq	r3, #1
34188742:	2300      	movne	r3, #0
34188744:	b2db      	uxtb	r3, r3
34188746:	461a      	mov	r2, r3
34188748:	79fb      	ldrb	r3, [r7, #7]
3418874a:	429a      	cmp	r2, r3
3418874c:	d113      	bne.n	34188776 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
3418874e:	68fb      	ldr	r3, [r7, #12]
34188750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34188752:	f043 0220 	orr.w	r2, r3, #32
34188756:	68fb      	ldr	r3, [r7, #12]
34188758:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
3418875a:	68fb      	ldr	r3, [r7, #12]
3418875c:	2220      	movs	r2, #32
3418875e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
34188762:	68fb      	ldr	r3, [r7, #12]
34188764:	2200      	movs	r2, #0
34188766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
3418876a:	68fb      	ldr	r3, [r7, #12]
3418876c:	2200      	movs	r2, #0
3418876e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
34188772:	2301      	movs	r3, #1
34188774:	e00f      	b.n	34188796 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34188776:	68fb      	ldr	r3, [r7, #12]
34188778:	681b      	ldr	r3, [r3, #0]
3418877a:	699a      	ldr	r2, [r3, #24]
3418877c:	68bb      	ldr	r3, [r7, #8]
3418877e:	4013      	ands	r3, r2
34188780:	68ba      	ldr	r2, [r7, #8]
34188782:	429a      	cmp	r2, r3
34188784:	bf0c      	ite	eq
34188786:	2301      	moveq	r3, #1
34188788:	2300      	movne	r3, #0
3418878a:	b2db      	uxtb	r3, r3
3418878c:	461a      	mov	r2, r3
3418878e:	79fb      	ldrb	r3, [r7, #7]
34188790:	429a      	cmp	r2, r3
34188792:	d0b4      	beq.n	341886fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
34188794:	2300      	movs	r3, #0
}
34188796:	4618      	mov	r0, r3
34188798:	3710      	adds	r7, #16
3418879a:	46bd      	mov	sp, r7
3418879c:	bd80      	pop	{r7, pc}

3418879e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
3418879e:	b580      	push	{r7, lr}
341887a0:	b084      	sub	sp, #16
341887a2:	af00      	add	r7, sp, #0
341887a4:	60f8      	str	r0, [r7, #12]
341887a6:	60b9      	str	r1, [r7, #8]
341887a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
341887aa:	e033      	b.n	34188814 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
341887ac:	687a      	ldr	r2, [r7, #4]
341887ae:	68b9      	ldr	r1, [r7, #8]
341887b0:	68f8      	ldr	r0, [r7, #12]
341887b2:	f000 f87f 	bl	341888b4 <I2C_IsErrorOccurred>
341887b6:	4603      	mov	r3, r0
341887b8:	2b00      	cmp	r3, #0
341887ba:	d001      	beq.n	341887c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
341887bc:	2301      	movs	r3, #1
341887be:	e031      	b.n	34188824 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
341887c0:	68bb      	ldr	r3, [r7, #8]
341887c2:	f1b3 3fff 	cmp.w	r3, #4294967295
341887c6:	d025      	beq.n	34188814 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
341887c8:	f7fb fe70 	bl	341844ac <HAL_GetTick>
341887cc:	4602      	mov	r2, r0
341887ce:	687b      	ldr	r3, [r7, #4]
341887d0:	1ad3      	subs	r3, r2, r3
341887d2:	68ba      	ldr	r2, [r7, #8]
341887d4:	429a      	cmp	r2, r3
341887d6:	d302      	bcc.n	341887de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
341887d8:	68bb      	ldr	r3, [r7, #8]
341887da:	2b00      	cmp	r3, #0
341887dc:	d11a      	bne.n	34188814 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
341887de:	68fb      	ldr	r3, [r7, #12]
341887e0:	681b      	ldr	r3, [r3, #0]
341887e2:	699b      	ldr	r3, [r3, #24]
341887e4:	f003 0302 	and.w	r3, r3, #2
341887e8:	2b02      	cmp	r3, #2
341887ea:	d013      	beq.n	34188814 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
341887ec:	68fb      	ldr	r3, [r7, #12]
341887ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341887f0:	f043 0220 	orr.w	r2, r3, #32
341887f4:	68fb      	ldr	r3, [r7, #12]
341887f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
341887f8:	68fb      	ldr	r3, [r7, #12]
341887fa:	2220      	movs	r2, #32
341887fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
34188800:	68fb      	ldr	r3, [r7, #12]
34188802:	2200      	movs	r2, #0
34188804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
34188808:	68fb      	ldr	r3, [r7, #12]
3418880a:	2200      	movs	r2, #0
3418880c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
34188810:	2301      	movs	r3, #1
34188812:	e007      	b.n	34188824 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
34188814:	68fb      	ldr	r3, [r7, #12]
34188816:	681b      	ldr	r3, [r3, #0]
34188818:	699b      	ldr	r3, [r3, #24]
3418881a:	f003 0302 	and.w	r3, r3, #2
3418881e:	2b02      	cmp	r3, #2
34188820:	d1c4      	bne.n	341887ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
34188822:	2300      	movs	r3, #0
}
34188824:	4618      	mov	r0, r3
34188826:	3710      	adds	r7, #16
34188828:	46bd      	mov	sp, r7
3418882a:	bd80      	pop	{r7, pc}

3418882c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
3418882c:	b580      	push	{r7, lr}
3418882e:	b084      	sub	sp, #16
34188830:	af00      	add	r7, sp, #0
34188832:	60f8      	str	r0, [r7, #12]
34188834:	60b9      	str	r1, [r7, #8]
34188836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34188838:	e02f      	b.n	3418889a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
3418883a:	687a      	ldr	r2, [r7, #4]
3418883c:	68b9      	ldr	r1, [r7, #8]
3418883e:	68f8      	ldr	r0, [r7, #12]
34188840:	f000 f838 	bl	341888b4 <I2C_IsErrorOccurred>
34188844:	4603      	mov	r3, r0
34188846:	2b00      	cmp	r3, #0
34188848:	d001      	beq.n	3418884e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
3418884a:	2301      	movs	r3, #1
3418884c:	e02d      	b.n	341888aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418884e:	f7fb fe2d 	bl	341844ac <HAL_GetTick>
34188852:	4602      	mov	r2, r0
34188854:	687b      	ldr	r3, [r7, #4]
34188856:	1ad3      	subs	r3, r2, r3
34188858:	68ba      	ldr	r2, [r7, #8]
3418885a:	429a      	cmp	r2, r3
3418885c:	d302      	bcc.n	34188864 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
3418885e:	68bb      	ldr	r3, [r7, #8]
34188860:	2b00      	cmp	r3, #0
34188862:	d11a      	bne.n	3418889a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34188864:	68fb      	ldr	r3, [r7, #12]
34188866:	681b      	ldr	r3, [r3, #0]
34188868:	699b      	ldr	r3, [r3, #24]
3418886a:	f003 0320 	and.w	r3, r3, #32
3418886e:	2b20      	cmp	r3, #32
34188870:	d013      	beq.n	3418889a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34188872:	68fb      	ldr	r3, [r7, #12]
34188874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34188876:	f043 0220 	orr.w	r2, r3, #32
3418887a:	68fb      	ldr	r3, [r7, #12]
3418887c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
3418887e:	68fb      	ldr	r3, [r7, #12]
34188880:	2220      	movs	r2, #32
34188882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
34188886:	68fb      	ldr	r3, [r7, #12]
34188888:	2200      	movs	r2, #0
3418888a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
3418888e:	68fb      	ldr	r3, [r7, #12]
34188890:	2200      	movs	r2, #0
34188892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
34188896:	2301      	movs	r3, #1
34188898:	e007      	b.n	341888aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
3418889a:	68fb      	ldr	r3, [r7, #12]
3418889c:	681b      	ldr	r3, [r3, #0]
3418889e:	699b      	ldr	r3, [r3, #24]
341888a0:	f003 0320 	and.w	r3, r3, #32
341888a4:	2b20      	cmp	r3, #32
341888a6:	d1c8      	bne.n	3418883a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
341888a8:	2300      	movs	r3, #0
}
341888aa:	4618      	mov	r0, r3
341888ac:	3710      	adds	r7, #16
341888ae:	46bd      	mov	sp, r7
341888b0:	bd80      	pop	{r7, pc}
	...

341888b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
341888b4:	b580      	push	{r7, lr}
341888b6:	b08a      	sub	sp, #40	@ 0x28
341888b8:	af00      	add	r7, sp, #0
341888ba:	60f8      	str	r0, [r7, #12]
341888bc:	60b9      	str	r1, [r7, #8]
341888be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
341888c0:	2300      	movs	r3, #0
341888c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
341888c6:	68fb      	ldr	r3, [r7, #12]
341888c8:	681b      	ldr	r3, [r3, #0]
341888ca:	699b      	ldr	r3, [r3, #24]
341888cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
341888ce:	2300      	movs	r3, #0
341888d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
341888d2:	687b      	ldr	r3, [r7, #4]
341888d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
341888d6:	69bb      	ldr	r3, [r7, #24]
341888d8:	f003 0310 	and.w	r3, r3, #16
341888dc:	2b00      	cmp	r3, #0
341888de:	d068      	beq.n	341889b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
341888e0:	68fb      	ldr	r3, [r7, #12]
341888e2:	681b      	ldr	r3, [r3, #0]
341888e4:	2210      	movs	r2, #16
341888e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
341888e8:	e049      	b.n	3418897e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
341888ea:	68bb      	ldr	r3, [r7, #8]
341888ec:	f1b3 3fff 	cmp.w	r3, #4294967295
341888f0:	d045      	beq.n	3418897e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
341888f2:	f7fb fddb 	bl	341844ac <HAL_GetTick>
341888f6:	4602      	mov	r2, r0
341888f8:	69fb      	ldr	r3, [r7, #28]
341888fa:	1ad3      	subs	r3, r2, r3
341888fc:	68ba      	ldr	r2, [r7, #8]
341888fe:	429a      	cmp	r2, r3
34188900:	d302      	bcc.n	34188908 <I2C_IsErrorOccurred+0x54>
34188902:	68bb      	ldr	r3, [r7, #8]
34188904:	2b00      	cmp	r3, #0
34188906:	d13a      	bne.n	3418897e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
34188908:	68fb      	ldr	r3, [r7, #12]
3418890a:	681b      	ldr	r3, [r3, #0]
3418890c:	685b      	ldr	r3, [r3, #4]
3418890e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34188912:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
34188914:	68fb      	ldr	r3, [r7, #12]
34188916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
3418891a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
3418891c:	68fb      	ldr	r3, [r7, #12]
3418891e:	681b      	ldr	r3, [r3, #0]
34188920:	699b      	ldr	r3, [r3, #24]
34188922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34188926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3418892a:	d121      	bne.n	34188970 <I2C_IsErrorOccurred+0xbc>
3418892c:	697b      	ldr	r3, [r7, #20]
3418892e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34188932:	d01d      	beq.n	34188970 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
34188934:	7cfb      	ldrb	r3, [r7, #19]
34188936:	2b20      	cmp	r3, #32
34188938:	d01a      	beq.n	34188970 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
3418893a:	68fb      	ldr	r3, [r7, #12]
3418893c:	681b      	ldr	r3, [r3, #0]
3418893e:	685a      	ldr	r2, [r3, #4]
34188940:	68fb      	ldr	r3, [r7, #12]
34188942:	681b      	ldr	r3, [r3, #0]
34188944:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
34188948:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
3418894a:	f7fb fdaf 	bl	341844ac <HAL_GetTick>
3418894e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34188950:	e00e      	b.n	34188970 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
34188952:	f7fb fdab 	bl	341844ac <HAL_GetTick>
34188956:	4602      	mov	r2, r0
34188958:	69fb      	ldr	r3, [r7, #28]
3418895a:	1ad3      	subs	r3, r2, r3
3418895c:	2b19      	cmp	r3, #25
3418895e:	d907      	bls.n	34188970 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
34188960:	6a3b      	ldr	r3, [r7, #32]
34188962:	f043 0320 	orr.w	r3, r3, #32
34188966:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
34188968:	2301      	movs	r3, #1
3418896a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
3418896e:	e006      	b.n	3418897e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34188970:	68fb      	ldr	r3, [r7, #12]
34188972:	681b      	ldr	r3, [r3, #0]
34188974:	699b      	ldr	r3, [r3, #24]
34188976:	f003 0320 	and.w	r3, r3, #32
3418897a:	2b20      	cmp	r3, #32
3418897c:	d1e9      	bne.n	34188952 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
3418897e:	68fb      	ldr	r3, [r7, #12]
34188980:	681b      	ldr	r3, [r3, #0]
34188982:	699b      	ldr	r3, [r3, #24]
34188984:	f003 0320 	and.w	r3, r3, #32
34188988:	2b20      	cmp	r3, #32
3418898a:	d003      	beq.n	34188994 <I2C_IsErrorOccurred+0xe0>
3418898c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34188990:	2b00      	cmp	r3, #0
34188992:	d0aa      	beq.n	341888ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
34188994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34188998:	2b00      	cmp	r3, #0
3418899a:	d103      	bne.n	341889a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
3418899c:	68fb      	ldr	r3, [r7, #12]
3418899e:	681b      	ldr	r3, [r3, #0]
341889a0:	2220      	movs	r2, #32
341889a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
341889a4:	6a3b      	ldr	r3, [r7, #32]
341889a6:	f043 0304 	orr.w	r3, r3, #4
341889aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
341889ac:	2301      	movs	r3, #1
341889ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
341889b2:	68fb      	ldr	r3, [r7, #12]
341889b4:	681b      	ldr	r3, [r3, #0]
341889b6:	699b      	ldr	r3, [r3, #24]
341889b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
341889ba:	69bb      	ldr	r3, [r7, #24]
341889bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341889c0:	2b00      	cmp	r3, #0
341889c2:	d00b      	beq.n	341889dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
341889c4:	6a3b      	ldr	r3, [r7, #32]
341889c6:	f043 0301 	orr.w	r3, r3, #1
341889ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
341889cc:	68fb      	ldr	r3, [r7, #12]
341889ce:	681b      	ldr	r3, [r3, #0]
341889d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
341889d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
341889d6:	2301      	movs	r3, #1
341889d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
341889dc:	69bb      	ldr	r3, [r7, #24]
341889de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341889e2:	2b00      	cmp	r3, #0
341889e4:	d00b      	beq.n	341889fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
341889e6:	6a3b      	ldr	r3, [r7, #32]
341889e8:	f043 0308 	orr.w	r3, r3, #8
341889ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
341889ee:	68fb      	ldr	r3, [r7, #12]
341889f0:	681b      	ldr	r3, [r3, #0]
341889f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
341889f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
341889f8:	2301      	movs	r3, #1
341889fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
341889fe:	69bb      	ldr	r3, [r7, #24]
34188a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34188a04:	2b00      	cmp	r3, #0
34188a06:	d00b      	beq.n	34188a20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
34188a08:	6a3b      	ldr	r3, [r7, #32]
34188a0a:	f043 0302 	orr.w	r3, r3, #2
34188a0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
34188a10:	68fb      	ldr	r3, [r7, #12]
34188a12:	681b      	ldr	r3, [r3, #0]
34188a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
34188a18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
34188a1a:	2301      	movs	r3, #1
34188a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
34188a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34188a24:	2b00      	cmp	r3, #0
34188a26:	d01c      	beq.n	34188a62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
34188a28:	68f8      	ldr	r0, [r7, #12]
34188a2a:	f7ff fe3b 	bl	341886a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
34188a2e:	68fb      	ldr	r3, [r7, #12]
34188a30:	681b      	ldr	r3, [r3, #0]
34188a32:	6859      	ldr	r1, [r3, #4]
34188a34:	68fb      	ldr	r3, [r7, #12]
34188a36:	681a      	ldr	r2, [r3, #0]
34188a38:	4b0d      	ldr	r3, [pc, #52]	@ (34188a70 <I2C_IsErrorOccurred+0x1bc>)
34188a3a:	400b      	ands	r3, r1
34188a3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
34188a3e:	68fb      	ldr	r3, [r7, #12]
34188a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
34188a42:	6a3b      	ldr	r3, [r7, #32]
34188a44:	431a      	orrs	r2, r3
34188a46:	68fb      	ldr	r3, [r7, #12]
34188a48:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
34188a4a:	68fb      	ldr	r3, [r7, #12]
34188a4c:	2220      	movs	r2, #32
34188a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
34188a52:	68fb      	ldr	r3, [r7, #12]
34188a54:	2200      	movs	r2, #0
34188a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34188a5a:	68fb      	ldr	r3, [r7, #12]
34188a5c:	2200      	movs	r2, #0
34188a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
34188a62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
34188a66:	4618      	mov	r0, r3
34188a68:	3728      	adds	r7, #40	@ 0x28
34188a6a:	46bd      	mov	sp, r7
34188a6c:	bd80      	pop	{r7, pc}
34188a6e:	bf00      	nop
34188a70:	fe00e800 	.word	0xfe00e800

34188a74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
34188a74:	b480      	push	{r7}
34188a76:	b087      	sub	sp, #28
34188a78:	af00      	add	r7, sp, #0
34188a7a:	60f8      	str	r0, [r7, #12]
34188a7c:	607b      	str	r3, [r7, #4]
34188a7e:	460b      	mov	r3, r1
34188a80:	817b      	strh	r3, [r7, #10]
34188a82:	4613      	mov	r3, r2
34188a84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34188a86:	897b      	ldrh	r3, [r7, #10]
34188a88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
34188a8c:	7a7b      	ldrb	r3, [r7, #9]
34188a8e:	041b      	lsls	r3, r3, #16
34188a90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34188a94:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
34188a96:	687b      	ldr	r3, [r7, #4]
34188a98:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34188a9a:	6a3b      	ldr	r3, [r7, #32]
34188a9c:	4313      	orrs	r3, r2
34188a9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34188aa2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
34188aa4:	68fb      	ldr	r3, [r7, #12]
34188aa6:	681b      	ldr	r3, [r3, #0]
34188aa8:	685a      	ldr	r2, [r3, #4]
34188aaa:	6a3b      	ldr	r3, [r7, #32]
34188aac:	0d5b      	lsrs	r3, r3, #21
34188aae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
34188ab2:	4b08      	ldr	r3, [pc, #32]	@ (34188ad4 <I2C_TransferConfig+0x60>)
34188ab4:	430b      	orrs	r3, r1
34188ab6:	43db      	mvns	r3, r3
34188ab8:	ea02 0103 	and.w	r1, r2, r3
34188abc:	68fb      	ldr	r3, [r7, #12]
34188abe:	681b      	ldr	r3, [r3, #0]
34188ac0:	697a      	ldr	r2, [r7, #20]
34188ac2:	430a      	orrs	r2, r1
34188ac4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
34188ac6:	bf00      	nop
34188ac8:	371c      	adds	r7, #28
34188aca:	46bd      	mov	sp, r7
34188acc:	f85d 7b04 	ldr.w	r7, [sp], #4
34188ad0:	4770      	bx	lr
34188ad2:	bf00      	nop
34188ad4:	03ff63ff 	.word	0x03ff63ff

34188ad8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
34188ad8:	b480      	push	{r7}
34188ada:	b083      	sub	sp, #12
34188adc:	af00      	add	r7, sp, #0
34188ade:	6078      	str	r0, [r7, #4]
34188ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
34188ae2:	687b      	ldr	r3, [r7, #4]
34188ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34188ae8:	b2db      	uxtb	r3, r3
34188aea:	2b20      	cmp	r3, #32
34188aec:	d138      	bne.n	34188b60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
34188aee:	687b      	ldr	r3, [r7, #4]
34188af0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34188af4:	2b01      	cmp	r3, #1
34188af6:	d101      	bne.n	34188afc <HAL_I2CEx_ConfigAnalogFilter+0x24>
34188af8:	2302      	movs	r3, #2
34188afa:	e032      	b.n	34188b62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
34188afc:	687b      	ldr	r3, [r7, #4]
34188afe:	2201      	movs	r2, #1
34188b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
34188b04:	687b      	ldr	r3, [r7, #4]
34188b06:	2224      	movs	r2, #36	@ 0x24
34188b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
34188b0c:	687b      	ldr	r3, [r7, #4]
34188b0e:	681b      	ldr	r3, [r3, #0]
34188b10:	681a      	ldr	r2, [r3, #0]
34188b12:	687b      	ldr	r3, [r7, #4]
34188b14:	681b      	ldr	r3, [r3, #0]
34188b16:	f022 0201 	bic.w	r2, r2, #1
34188b1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
34188b1c:	687b      	ldr	r3, [r7, #4]
34188b1e:	681b      	ldr	r3, [r3, #0]
34188b20:	681a      	ldr	r2, [r3, #0]
34188b22:	687b      	ldr	r3, [r7, #4]
34188b24:	681b      	ldr	r3, [r3, #0]
34188b26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34188b2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
34188b2c:	687b      	ldr	r3, [r7, #4]
34188b2e:	681b      	ldr	r3, [r3, #0]
34188b30:	6819      	ldr	r1, [r3, #0]
34188b32:	687b      	ldr	r3, [r7, #4]
34188b34:	681b      	ldr	r3, [r3, #0]
34188b36:	683a      	ldr	r2, [r7, #0]
34188b38:	430a      	orrs	r2, r1
34188b3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
34188b3c:	687b      	ldr	r3, [r7, #4]
34188b3e:	681b      	ldr	r3, [r3, #0]
34188b40:	681a      	ldr	r2, [r3, #0]
34188b42:	687b      	ldr	r3, [r7, #4]
34188b44:	681b      	ldr	r3, [r3, #0]
34188b46:	f042 0201 	orr.w	r2, r2, #1
34188b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
34188b4c:	687b      	ldr	r3, [r7, #4]
34188b4e:	2220      	movs	r2, #32
34188b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34188b54:	687b      	ldr	r3, [r7, #4]
34188b56:	2200      	movs	r2, #0
34188b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
34188b5c:	2300      	movs	r3, #0
34188b5e:	e000      	b.n	34188b62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
34188b60:	2302      	movs	r3, #2
  }
}
34188b62:	4618      	mov	r0, r3
34188b64:	370c      	adds	r7, #12
34188b66:	46bd      	mov	sp, r7
34188b68:	f85d 7b04 	ldr.w	r7, [sp], #4
34188b6c:	4770      	bx	lr

34188b6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
34188b6e:	b480      	push	{r7}
34188b70:	b085      	sub	sp, #20
34188b72:	af00      	add	r7, sp, #0
34188b74:	6078      	str	r0, [r7, #4]
34188b76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
34188b78:	687b      	ldr	r3, [r7, #4]
34188b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34188b7e:	b2db      	uxtb	r3, r3
34188b80:	2b20      	cmp	r3, #32
34188b82:	d139      	bne.n	34188bf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
34188b84:	687b      	ldr	r3, [r7, #4]
34188b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34188b8a:	2b01      	cmp	r3, #1
34188b8c:	d101      	bne.n	34188b92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
34188b8e:	2302      	movs	r3, #2
34188b90:	e033      	b.n	34188bfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
34188b92:	687b      	ldr	r3, [r7, #4]
34188b94:	2201      	movs	r2, #1
34188b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
34188b9a:	687b      	ldr	r3, [r7, #4]
34188b9c:	2224      	movs	r2, #36	@ 0x24
34188b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
34188ba2:	687b      	ldr	r3, [r7, #4]
34188ba4:	681b      	ldr	r3, [r3, #0]
34188ba6:	681a      	ldr	r2, [r3, #0]
34188ba8:	687b      	ldr	r3, [r7, #4]
34188baa:	681b      	ldr	r3, [r3, #0]
34188bac:	f022 0201 	bic.w	r2, r2, #1
34188bb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
34188bb2:	687b      	ldr	r3, [r7, #4]
34188bb4:	681b      	ldr	r3, [r3, #0]
34188bb6:	681b      	ldr	r3, [r3, #0]
34188bb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
34188bba:	68fb      	ldr	r3, [r7, #12]
34188bbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
34188bc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
34188bc2:	683b      	ldr	r3, [r7, #0]
34188bc4:	021b      	lsls	r3, r3, #8
34188bc6:	68fa      	ldr	r2, [r7, #12]
34188bc8:	4313      	orrs	r3, r2
34188bca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
34188bcc:	687b      	ldr	r3, [r7, #4]
34188bce:	681b      	ldr	r3, [r3, #0]
34188bd0:	68fa      	ldr	r2, [r7, #12]
34188bd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
34188bd4:	687b      	ldr	r3, [r7, #4]
34188bd6:	681b      	ldr	r3, [r3, #0]
34188bd8:	681a      	ldr	r2, [r3, #0]
34188bda:	687b      	ldr	r3, [r7, #4]
34188bdc:	681b      	ldr	r3, [r3, #0]
34188bde:	f042 0201 	orr.w	r2, r2, #1
34188be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
34188be4:	687b      	ldr	r3, [r7, #4]
34188be6:	2220      	movs	r2, #32
34188be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34188bec:	687b      	ldr	r3, [r7, #4]
34188bee:	2200      	movs	r2, #0
34188bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
34188bf4:	2300      	movs	r3, #0
34188bf6:	e000      	b.n	34188bfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
34188bf8:	2302      	movs	r3, #2
  }
}
34188bfa:	4618      	mov	r0, r3
34188bfc:	3714      	adds	r7, #20
34188bfe:	46bd      	mov	sp, r7
34188c00:	f85d 7b04 	ldr.w	r7, [sp], #4
34188c04:	4770      	bx	lr

34188c06 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
34188c06:	b580      	push	{r7, lr}
34188c08:	b084      	sub	sp, #16
34188c0a:	af00      	add	r7, sp, #0
34188c0c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
34188c0e:	687b      	ldr	r3, [r7, #4]
34188c10:	2b00      	cmp	r3, #0
34188c12:	d101      	bne.n	34188c18 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
34188c14:	2301      	movs	r3, #1
34188c16:	e09d      	b.n	34188d54 <HAL_LTDC_Init+0x14e>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
34188c18:	687b      	ldr	r3, [r7, #4]
34188c1a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
34188c1e:	b2db      	uxtb	r3, r3
34188c20:	2b00      	cmp	r3, #0
34188c22:	d106      	bne.n	34188c32 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
34188c24:	687b      	ldr	r3, [r7, #4]
34188c26:	2200      	movs	r2, #0
34188c28:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
34188c2c:	6878      	ldr	r0, [r7, #4]
34188c2e:	f000 f895 	bl	34188d5c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
34188c32:	687b      	ldr	r3, [r7, #4]
34188c34:	2202      	movs	r2, #2
34188c36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
34188c3a:	687b      	ldr	r3, [r7, #4]
34188c3c:	681b      	ldr	r3, [r3, #0]
34188c3e:	699a      	ldr	r2, [r3, #24]
34188c40:	687b      	ldr	r3, [r7, #4]
34188c42:	681b      	ldr	r3, [r3, #0]
34188c44:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
34188c48:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34188c4a:	687b      	ldr	r3, [r7, #4]
34188c4c:	681b      	ldr	r3, [r3, #0]
34188c4e:	6999      	ldr	r1, [r3, #24]
34188c50:	687b      	ldr	r3, [r7, #4]
34188c52:	685a      	ldr	r2, [r3, #4]
34188c54:	687b      	ldr	r3, [r7, #4]
34188c56:	689b      	ldr	r3, [r3, #8]
34188c58:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
34188c5a:	687b      	ldr	r3, [r7, #4]
34188c5c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34188c5e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
34188c60:	687b      	ldr	r3, [r7, #4]
34188c62:	691b      	ldr	r3, [r3, #16]
34188c64:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34188c66:	687b      	ldr	r3, [r7, #4]
34188c68:	681b      	ldr	r3, [r3, #0]
34188c6a:	430a      	orrs	r2, r1
34188c6c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
34188c6e:	687b      	ldr	r3, [r7, #4]
34188c70:	695b      	ldr	r3, [r3, #20]
34188c72:	041b      	lsls	r3, r3, #16
34188c74:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
34188c76:	687b      	ldr	r3, [r7, #4]
34188c78:	6999      	ldr	r1, [r3, #24]
34188c7a:	687b      	ldr	r3, [r7, #4]
34188c7c:	681b      	ldr	r3, [r3, #0]
34188c7e:	68fa      	ldr	r2, [r7, #12]
34188c80:	430a      	orrs	r2, r1
34188c82:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
34188c84:	687b      	ldr	r3, [r7, #4]
34188c86:	69db      	ldr	r3, [r3, #28]
34188c88:	041b      	lsls	r3, r3, #16
34188c8a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
34188c8c:	687b      	ldr	r3, [r7, #4]
34188c8e:	6a19      	ldr	r1, [r3, #32]
34188c90:	687b      	ldr	r3, [r7, #4]
34188c92:	681b      	ldr	r3, [r3, #0]
34188c94:	68fa      	ldr	r2, [r7, #12]
34188c96:	430a      	orrs	r2, r1
34188c98:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
34188c9a:	687b      	ldr	r3, [r7, #4]
34188c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188c9e:	041b      	lsls	r3, r3, #16
34188ca0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
34188ca2:	687b      	ldr	r3, [r7, #4]
34188ca4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
34188ca6:	687b      	ldr	r3, [r7, #4]
34188ca8:	681b      	ldr	r3, [r3, #0]
34188caa:	68fa      	ldr	r2, [r7, #12]
34188cac:	430a      	orrs	r2, r1
34188cae:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
34188cb0:	687b      	ldr	r3, [r7, #4]
34188cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34188cb4:	041b      	lsls	r3, r3, #16
34188cb6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
34188cb8:	687b      	ldr	r3, [r7, #4]
34188cba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
34188cbc:	687b      	ldr	r3, [r7, #4]
34188cbe:	681b      	ldr	r3, [r3, #0]
34188cc0:	68fa      	ldr	r2, [r7, #12]
34188cc2:	430a      	orrs	r2, r1
34188cc4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
34188cc6:	687b      	ldr	r3, [r7, #4]
34188cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
34188ccc:	021b      	lsls	r3, r3, #8
34188cce:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
34188cd0:	687b      	ldr	r3, [r7, #4]
34188cd2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
34188cd6:	041b      	lsls	r3, r3, #16
34188cd8:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34188cda:	687b      	ldr	r3, [r7, #4]
34188cdc:	681b      	ldr	r3, [r3, #0]
34188cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34188ce0:	687b      	ldr	r3, [r7, #4]
34188ce2:	681b      	ldr	r3, [r3, #0]
34188ce4:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
34188ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
34188cea:	687b      	ldr	r3, [r7, #4]
34188cec:	681b      	ldr	r3, [r3, #0]
34188cee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
34188cf0:	68ba      	ldr	r2, [r7, #8]
34188cf2:	68fb      	ldr	r3, [r7, #12]
34188cf4:	4313      	orrs	r3, r2
34188cf6:	687a      	ldr	r2, [r7, #4]
34188cf8:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
34188cfc:	431a      	orrs	r2, r3
34188cfe:	687b      	ldr	r3, [r7, #4]
34188d00:	681b      	ldr	r3, [r3, #0]
34188d02:	430a      	orrs	r2, r1
34188d04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Activate Global Reload for Layer 1 and Layer 2 */
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_1)->RCR, LTDC_LxRCR_GRMSK);
34188d06:	687b      	ldr	r3, [r7, #4]
34188d08:	681b      	ldr	r3, [r3, #0]
34188d0a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34188d0e:	461a      	mov	r2, r3
34188d10:	2304      	movs	r3, #4
34188d12:	6093      	str	r3, [r2, #8]
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_2)->RCR, LTDC_LxRCR_GRMSK);
34188d14:	687b      	ldr	r3, [r7, #4]
34188d16:	681b      	ldr	r3, [r3, #0]
34188d18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
34188d1c:	461a      	mov	r2, r3
34188d1e:	2304      	movs	r3, #4
34188d20:	6093      	str	r3, [r2, #8]

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
34188d22:	687b      	ldr	r3, [r7, #4]
34188d24:	681b      	ldr	r3, [r3, #0]
34188d26:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
34188d28:	687b      	ldr	r3, [r7, #4]
34188d2a:	681b      	ldr	r3, [r3, #0]
34188d2c:	f042 0244 	orr.w	r2, r2, #68	@ 0x44
34188d30:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
34188d32:	687b      	ldr	r3, [r7, #4]
34188d34:	681b      	ldr	r3, [r3, #0]
34188d36:	699a      	ldr	r2, [r3, #24]
34188d38:	687b      	ldr	r3, [r7, #4]
34188d3a:	681b      	ldr	r3, [r3, #0]
34188d3c:	f042 0201 	orr.w	r2, r2, #1
34188d40:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
34188d42:	687b      	ldr	r3, [r7, #4]
34188d44:	2200      	movs	r2, #0
34188d46:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
34188d4a:	687b      	ldr	r3, [r7, #4]
34188d4c:	2201      	movs	r2, #1
34188d4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
34188d52:	2300      	movs	r3, #0
}
34188d54:	4618      	mov	r0, r3
34188d56:	3710      	adds	r7, #16
34188d58:	46bd      	mov	sp, r7
34188d5a:	bd80      	pop	{r7, pc}

34188d5c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
34188d5c:	b480      	push	{r7}
34188d5e:	b083      	sub	sp, #12
34188d60:	af00      	add	r7, sp, #0
34188d62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
34188d64:	bf00      	nop
34188d66:	370c      	adds	r7, #12
34188d68:	46bd      	mov	sp, r7
34188d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34188d6e:	4770      	bx	lr

34188d70 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
34188d70:	b5b0      	push	{r4, r5, r7, lr}
34188d72:	b086      	sub	sp, #24
34188d74:	af02      	add	r7, sp, #8
34188d76:	60f8      	str	r0, [r7, #12]
34188d78:	60b9      	str	r1, [r7, #8]
34188d7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
34188d7c:	68fb      	ldr	r3, [r7, #12]
34188d7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
34188d82:	2b01      	cmp	r3, #1
34188d84:	d101      	bne.n	34188d8a <HAL_LTDC_ConfigLayer+0x1a>
34188d86:	2302      	movs	r3, #2
34188d88:	e052      	b.n	34188e30 <HAL_LTDC_ConfigLayer+0xc0>
34188d8a:	68fb      	ldr	r3, [r7, #12]
34188d8c:	2201      	movs	r2, #1
34188d8e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
34188d92:	68fb      	ldr	r3, [r7, #12]
34188d94:	2202      	movs	r2, #2
34188d96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
34188d9a:	68fa      	ldr	r2, [r7, #12]
34188d9c:	687b      	ldr	r3, [r7, #4]
34188d9e:	2134      	movs	r1, #52	@ 0x34
34188da0:	fb01 f303 	mul.w	r3, r1, r3
34188da4:	4413      	add	r3, r2
34188da6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
34188daa:	68bb      	ldr	r3, [r7, #8]
34188dac:	4614      	mov	r4, r2
34188dae:	461d      	mov	r5, r3
34188db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34188db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34188db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34188db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34188db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34188dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34188dbc:	682b      	ldr	r3, [r5, #0]
34188dbe:	6023      	str	r3, [r4, #0]

  /* Configure Predefined format */
  LTDC_SetPredefFormat(hltdc, LayerIdx);
34188dc0:	6879      	ldr	r1, [r7, #4]
34188dc2:	68f8      	ldr	r0, [r7, #12]
34188dc4:	f000 ff6c 	bl	34189ca0 <LTDC_SetPredefFormat>

  /* Configure composition and blending*/
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
34188dc8:	6879      	ldr	r1, [r7, #4]
34188dca:	68f8      	ldr	r0, [r7, #12]
34188dcc:	f000 fec0 	bl	34189b50 <LTDC_SetCompositionConfig>

  /* Disable YUV format */
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
34188dd0:	68fb      	ldr	r3, [r7, #12]
34188dd2:	681b      	ldr	r3, [r3, #0]
34188dd4:	461a      	mov	r2, r3
34188dd6:	687b      	ldr	r3, [r7, #4]
34188dd8:	021b      	lsls	r3, r3, #8
34188dda:	4413      	add	r3, r2
34188ddc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34188de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34188de2:	68fa      	ldr	r2, [r7, #12]
34188de4:	6812      	ldr	r2, [r2, #0]
34188de6:	4611      	mov	r1, r2
34188de8:	687a      	ldr	r2, [r7, #4]
34188dea:	0212      	lsls	r2, r2, #8
34188dec:	440a      	add	r2, r1
34188dee:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34188df2:	f023 0308 	bic.w	r3, r3, #8
34188df6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
34188df8:	687b      	ldr	r3, [r7, #4]
34188dfa:	9300      	str	r3, [sp, #0]
34188dfc:	2303      	movs	r3, #3
34188dfe:	2200      	movs	r2, #0
34188e00:	2100      	movs	r1, #0
34188e02:	68f8      	ldr	r0, [r7, #12]
34188e04:	f000 f818 	bl	34188e38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34188e08:	68fb      	ldr	r3, [r7, #12]
34188e0a:	681b      	ldr	r3, [r3, #0]
34188e0c:	461a      	mov	r2, r3
34188e0e:	687b      	ldr	r3, [r7, #4]
34188e10:	021b      	lsls	r3, r3, #8
34188e12:	4413      	add	r3, r2
34188e14:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34188e18:	461a      	mov	r2, r3
34188e1a:	2305      	movs	r3, #5
34188e1c:	6093      	str	r3, [r2, #8]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
34188e1e:	68fb      	ldr	r3, [r7, #12]
34188e20:	2201      	movs	r2, #1
34188e22:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
34188e26:	68fb      	ldr	r3, [r7, #12]
34188e28:	2200      	movs	r2, #0
34188e2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
34188e2e:	2300      	movs	r3, #0
}
34188e30:	4618      	mov	r0, r3
34188e32:	3710      	adds	r7, #16
34188e34:	46bd      	mov	sp, r7
34188e36:	bdb0      	pop	{r4, r5, r7, pc}

34188e38 <LTDC_SetConfig>:
  *       This function does not return a value as it is a static function used internally within the
  *        driver.
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, uint32_t Aux0Addr, uint32_t Aux1Addr, uint32_t Mirror,
                           uint32_t LayerIdx)
{
34188e38:	b4b0      	push	{r4, r5, r7}
34188e3a:	b087      	sub	sp, #28
34188e3c:	af00      	add	r7, sp, #0
34188e3e:	60f8      	str	r0, [r7, #12]
34188e40:	60b9      	str	r1, [r7, #8]
34188e42:	607a      	str	r2, [r7, #4]
34188e44:	603b      	str	r3, [r7, #0]
  uint32_t stride;
  uint32_t tmp;

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
34188e46:	68fb      	ldr	r3, [r7, #12]
34188e48:	681b      	ldr	r3, [r3, #0]
34188e4a:	461a      	mov	r2, r3
34188e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188e4e:	021b      	lsls	r3, r3, #8
34188e50:	4413      	add	r3, r2
34188e52:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34188e56:	4618      	mov	r0, r3
34188e58:	68fa      	ldr	r2, [r7, #12]
34188e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188e5c:	2134      	movs	r1, #52	@ 0x34
34188e5e:	fb01 f303 	mul.w	r3, r1, r3
34188e62:	4413      	add	r3, r2
34188e64:	3364      	adds	r3, #100	@ 0x64
34188e66:	681b      	ldr	r3, [r3, #0]
34188e68:	63c3      	str	r3, [r0, #60]	@ 0x3c

  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34188e6a:	68fa      	ldr	r2, [r7, #12]
34188e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188e6e:	2134      	movs	r1, #52	@ 0x34
34188e70:	fb01 f303 	mul.w	r3, r1, r3
34188e74:	4413      	add	r3, r2
34188e76:	3348      	adds	r3, #72	@ 0x48
34188e78:	681b      	ldr	r3, [r3, #0]
34188e7a:	2b03      	cmp	r3, #3
34188e7c:	d821      	bhi.n	34188ec2 <LTDC_SetConfig+0x8a>
34188e7e:	e025      	b.n	34188ecc <LTDC_SetConfig+0x94>
34188e80:	3b04      	subs	r3, #4
34188e82:	2201      	movs	r2, #1
34188e84:	fa02 f303 	lsl.w	r3, r2, r3
34188e88:	f240 229b 	movw	r2, #667	@ 0x29b
34188e8c:	401a      	ands	r2, r3
34188e8e:	2a00      	cmp	r2, #0
34188e90:	bf14      	ite	ne
34188e92:	2201      	movne	r2, #1
34188e94:	2200      	moveq	r2, #0
34188e96:	b2d2      	uxtb	r2, r2
34188e98:	2a00      	cmp	r2, #0
34188e9a:	d11d      	bne.n	34188ed8 <LTDC_SetConfig+0xa0>
34188e9c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
34188ea0:	2a00      	cmp	r2, #0
34188ea2:	bf14      	ite	ne
34188ea4:	2201      	movne	r2, #1
34188ea6:	2200      	moveq	r2, #0
34188ea8:	b2d2      	uxtb	r2, r2
34188eaa:	2a00      	cmp	r2, #0
34188eac:	d117      	bne.n	34188ede <LTDC_SetConfig+0xa6>
34188eae:	f003 0304 	and.w	r3, r3, #4
34188eb2:	2b00      	cmp	r3, #0
34188eb4:	bf14      	ite	ne
34188eb6:	2301      	movne	r3, #1
34188eb8:	2300      	moveq	r3, #0
34188eba:	b2db      	uxtb	r3, r3
34188ebc:	2b00      	cmp	r3, #0
34188ebe:	d108      	bne.n	34188ed2 <LTDC_SetConfig+0x9a>
34188ec0:	e01b      	b.n	34188efa <LTDC_SetConfig+0xc2>
34188ec2:	2b0d      	cmp	r3, #13
34188ec4:	d819      	bhi.n	34188efa <LTDC_SetConfig+0xc2>
34188ec6:	2b04      	cmp	r3, #4
34188ec8:	d2da      	bcs.n	34188e80 <LTDC_SetConfig+0x48>
34188eca:	e016      	b.n	34188efa <LTDC_SetConfig+0xc2>
  {
    case LTDC_PIXEL_FORMAT_ARGB8888:
    case LTDC_PIXEL_FORMAT_BGRA8888:
    case LTDC_PIXEL_FORMAT_ABGR8888:
    case LTDC_PIXEL_FORMAT_RGBA8888:
      stride = 4U;
34188ecc:	2304      	movs	r3, #4
34188ece:	617b      	str	r3, [r7, #20]
      break;
34188ed0:	e016      	b.n	34188f00 <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_RGB888:
      stride = 3U;
34188ed2:	2303      	movs	r3, #3
34188ed4:	617b      	str	r3, [r7, #20]
      break;
34188ed6:	e013      	b.n	34188f00 <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_BGR565:
    case LTDC_PIXEL_FORMAT_ARGB1555:
    case LTDC_PIXEL_FORMAT_ARGB4444:
    case LTDC_PIXEL_FORMAT_AL88:
    case LTDC_PIXEL_FORMAT_FLEX_YUV_COPLANAR:
      stride = 2U;
34188ed8:	2302      	movs	r3, #2
34188eda:	617b      	str	r3, [r7, #20]
      break;
34188edc:	e010      	b.n	34188f00 <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_FLEX_ARGB:
      stride = (((LTDC_LAYER(hltdc, LayerIdx)->FPF1R) & LTDC_LxFPF1R_PSIZE_Msk) >> LTDC_LxFPF1R_PSIZE_Pos);
34188ede:	68fb      	ldr	r3, [r7, #12]
34188ee0:	681b      	ldr	r3, [r3, #0]
34188ee2:	461a      	mov	r2, r3
34188ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188ee6:	021b      	lsls	r3, r3, #8
34188ee8:	4413      	add	r3, r2
34188eea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34188eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34188ef0:	0c9b      	lsrs	r3, r3, #18
34188ef2:	f003 0307 	and.w	r3, r3, #7
34188ef6:	617b      	str	r3, [r7, #20]
      break;
34188ef8:	e002      	b.n	34188f00 <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_L8:
    case LTDC_PIXEL_FORMAT_AL44:
    case LTDC_PIXEL_FORMAT_FLEX_YUV_SEMIPLANAR:
    default:
      stride = 1U;
34188efa:	2301      	movs	r3, #1
34188efc:	617b      	str	r3, [r7, #20]
      break;
34188efe:	bf00      	nop
  }

  /* Configure the horizontal start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
34188f00:	68fa      	ldr	r2, [r7, #12]
34188f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188f04:	2134      	movs	r1, #52	@ 0x34
34188f06:	fb01 f303 	mul.w	r3, r1, r3
34188f0a:	4413      	add	r3, r2
34188f0c:	333c      	adds	r3, #60	@ 0x3c
34188f0e:	681a      	ldr	r2, [r3, #0]
34188f10:	68fb      	ldr	r3, [r7, #12]
34188f12:	681b      	ldr	r3, [r3, #0]
34188f14:	68db      	ldr	r3, [r3, #12]
34188f16:	0c1b      	lsrs	r3, r3, #16
34188f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
34188f1c:	4413      	add	r3, r2
34188f1e:	041b      	lsls	r3, r3, #16
34188f20:	613b      	str	r3, [r7, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34188f22:	68fa      	ldr	r2, [r7, #12]
34188f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188f26:	2134      	movs	r1, #52	@ 0x34
34188f28:	fb01 f303 	mul.w	r3, r1, r3
34188f2c:	4413      	add	r3, r2
34188f2e:	3338      	adds	r3, #56	@ 0x38
34188f30:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
34188f32:	68fb      	ldr	r3, [r7, #12]
34188f34:	681b      	ldr	r3, [r3, #0]
34188f36:	68db      	ldr	r3, [r3, #12]
34188f38:	0c1b      	lsrs	r3, r3, #16
34188f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34188f3e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
34188f40:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34188f42:	68fb      	ldr	r3, [r7, #12]
34188f44:	681b      	ldr	r3, [r3, #0]
34188f46:	4619      	mov	r1, r3
34188f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188f4a:	021b      	lsls	r3, r3, #8
34188f4c:	440b      	add	r3, r1
34188f4e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34188f52:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
34188f54:	693b      	ldr	r3, [r7, #16]
34188f56:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34188f58:	610b      	str	r3, [r1, #16]

  /* Configure the vertical start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
34188f5a:	68fa      	ldr	r2, [r7, #12]
34188f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188f5e:	2134      	movs	r1, #52	@ 0x34
34188f60:	fb01 f303 	mul.w	r3, r1, r3
34188f64:	4413      	add	r3, r2
34188f66:	3344      	adds	r3, #68	@ 0x44
34188f68:	681a      	ldr	r2, [r3, #0]
34188f6a:	68fb      	ldr	r3, [r7, #12]
34188f6c:	681b      	ldr	r3, [r3, #0]
34188f6e:	68db      	ldr	r3, [r3, #12]
34188f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
34188f74:	4413      	add	r3, r2
34188f76:	041b      	lsls	r3, r3, #16
34188f78:	613b      	str	r3, [r7, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34188f7a:	68fa      	ldr	r2, [r7, #12]
34188f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188f7e:	2134      	movs	r1, #52	@ 0x34
34188f80:	fb01 f303 	mul.w	r3, r1, r3
34188f84:	4413      	add	r3, r2
34188f86:	3340      	adds	r3, #64	@ 0x40
34188f88:	681a      	ldr	r2, [r3, #0]
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34188f8a:	68fb      	ldr	r3, [r7, #12]
34188f8c:	681b      	ldr	r3, [r3, #0]
34188f8e:	68db      	ldr	r3, [r3, #12]
34188f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34188f94:	4413      	add	r3, r2
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34188f96:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34188f98:	68fb      	ldr	r3, [r7, #12]
34188f9a:	681b      	ldr	r3, [r3, #0]
34188f9c:	4619      	mov	r1, r3
34188f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188fa0:	021b      	lsls	r3, r3, #8
34188fa2:	440b      	add	r3, r1
34188fa4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34188fa8:	4619      	mov	r1, r3
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34188faa:	693b      	ldr	r3, [r7, #16]
34188fac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34188fae:	614b      	str	r3, [r1, #20]

  if (Mirror == LTDC_MIRROR_NONE)
34188fb0:	683b      	ldr	r3, [r7, #0]
34188fb2:	2b03      	cmp	r3, #3
34188fb4:	f040 80fb 	bne.w	341891ae <LTDC_SetConfig+0x376>
  {
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34188fb8:	68fb      	ldr	r3, [r7, #12]
34188fba:	681b      	ldr	r3, [r3, #0]
34188fbc:	461a      	mov	r2, r3
34188fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188fc0:	021b      	lsls	r3, r3, #8
34188fc2:	4413      	add	r3, r2
34188fc4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34188fc8:	4618      	mov	r0, r3
34188fca:	68fa      	ldr	r2, [r7, #12]
34188fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188fce:	2134      	movs	r1, #52	@ 0x34
34188fd0:	fb01 f303 	mul.w	r3, r1, r3
34188fd4:	4413      	add	r3, r2
34188fd6:	335c      	adds	r3, #92	@ 0x5c
34188fd8:	681b      	ldr	r3, [r3, #0]
34188fda:	6343      	str	r3, [r0, #52]	@ 0x34

    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34188fdc:	68fa      	ldr	r2, [r7, #12]
34188fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188fe0:	2134      	movs	r1, #52	@ 0x34
34188fe2:	fb01 f303 	mul.w	r3, r1, r3
34188fe6:	4413      	add	r3, r2
34188fe8:	3348      	adds	r3, #72	@ 0x48
34188fea:	681b      	ldr	r3, [r3, #0]
34188fec:	f240 120d 	movw	r2, #269	@ 0x10d
34188ff0:	4293      	cmp	r3, r2
34188ff2:	d004      	beq.n	34188ffe <LTDC_SetConfig+0x1c6>
34188ff4:	f240 220d 	movw	r2, #525	@ 0x20d
34188ff8:	4293      	cmp	r3, r2
34188ffa:	d043      	beq.n	34189084 <LTDC_SetConfig+0x24c>
        /* Configure the frame buffer line number */
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
        break;
      default:
        /* Nothing to do */
        break;
34188ffc:	e092      	b.n	34189124 <LTDC_SetConfig+0x2ec>
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
34188ffe:	68fb      	ldr	r3, [r7, #12]
34189000:	681b      	ldr	r3, [r3, #0]
34189002:	461a      	mov	r2, r3
34189004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189006:	021b      	lsls	r3, r3, #8
34189008:	4413      	add	r3, r2
3418900a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418900e:	461a      	mov	r2, r3
34189010:	68bb      	ldr	r3, [r7, #8]
34189012:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
34189014:	68fa      	ldr	r2, [r7, #12]
34189016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189018:	2134      	movs	r1, #52	@ 0x34
3418901a:	fb01 f303 	mul.w	r3, r1, r3
3418901e:	4413      	add	r3, r2
34189020:	3360      	adds	r3, #96	@ 0x60
34189022:	681b      	ldr	r3, [r3, #0]
34189024:	041a      	lsls	r2, r3, #16
                                             (hltdc->LayerCfg[LayerIdx].WindowX1 -
34189026:	68f9      	ldr	r1, [r7, #12]
34189028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418902a:	2034      	movs	r0, #52	@ 0x34
3418902c:	fb00 f303 	mul.w	r3, r0, r3
34189030:	440b      	add	r3, r1
34189032:	333c      	adds	r3, #60	@ 0x3c
34189034:	6819      	ldr	r1, [r3, #0]
                                              hltdc->LayerCfg[LayerIdx].WindowX0 + 7U);
34189036:	68f8      	ldr	r0, [r7, #12]
34189038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418903a:	2434      	movs	r4, #52	@ 0x34
3418903c:	fb04 f303 	mul.w	r3, r4, r3
34189040:	4403      	add	r3, r0
34189042:	3338      	adds	r3, #56	@ 0x38
34189044:	681b      	ldr	r3, [r3, #0]
                                             (hltdc->LayerCfg[LayerIdx].WindowX1 -
34189046:	1acb      	subs	r3, r1, r3
                                              hltdc->LayerCfg[LayerIdx].WindowX0 + 7U);
34189048:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
3418904a:	68f9      	ldr	r1, [r7, #12]
3418904c:	6809      	ldr	r1, [r1, #0]
3418904e:	4608      	mov	r0, r1
34189050:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34189052:	0209      	lsls	r1, r1, #8
34189054:	4401      	add	r1, r0
34189056:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418905a:	4313      	orrs	r3, r2
3418905c:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
3418905e:	68fa      	ldr	r2, [r7, #12]
34189060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189062:	2134      	movs	r1, #52	@ 0x34
34189064:	fb01 f303 	mul.w	r3, r1, r3
34189068:	4413      	add	r3, r2
3418906a:	3364      	adds	r3, #100	@ 0x64
3418906c:	681b      	ldr	r3, [r3, #0]
3418906e:	68fa      	ldr	r2, [r7, #12]
34189070:	6812      	ldr	r2, [r2, #0]
34189072:	4611      	mov	r1, r2
34189074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189076:	0212      	lsls	r2, r2, #8
34189078:	440a      	add	r2, r1
3418907a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418907e:	085b      	lsrs	r3, r3, #1
34189080:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34189082:	e04f      	b.n	34189124 <LTDC_SetConfig+0x2ec>
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
34189084:	68fb      	ldr	r3, [r7, #12]
34189086:	681b      	ldr	r3, [r3, #0]
34189088:	461a      	mov	r2, r3
3418908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418908c:	021b      	lsls	r3, r3, #8
3418908e:	4413      	add	r3, r2
34189090:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189094:	461a      	mov	r2, r3
34189096:	68bb      	ldr	r3, [r7, #8]
34189098:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;
3418909a:	68fb      	ldr	r3, [r7, #12]
3418909c:	681b      	ldr	r3, [r3, #0]
3418909e:	461a      	mov	r2, r3
341890a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341890a2:	021b      	lsls	r3, r3, #8
341890a4:	4413      	add	r3, r2
341890a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
341890aa:	461a      	mov	r2, r3
341890ac:	687b      	ldr	r3, [r7, #4]
341890ae:	6453      	str	r3, [r2, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
341890b0:	68fa      	ldr	r2, [r7, #12]
341890b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341890b4:	2134      	movs	r1, #52	@ 0x34
341890b6:	fb01 f303 	mul.w	r3, r1, r3
341890ba:	4413      	add	r3, r2
341890bc:	3360      	adds	r3, #96	@ 0x60
341890be:	681b      	ldr	r3, [r3, #0]
341890c0:	085b      	lsrs	r3, r3, #1
341890c2:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341890c4:	68f9      	ldr	r1, [r7, #12]
341890c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341890c8:	2034      	movs	r0, #52	@ 0x34
341890ca:	fb00 f303 	mul.w	r3, r0, r3
341890ce:	440b      	add	r3, r1
341890d0:	333c      	adds	r3, #60	@ 0x3c
341890d2:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
341890d4:	68f8      	ldr	r0, [r7, #12]
341890d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341890d8:	2434      	movs	r4, #52	@ 0x34
341890da:	fb04 f303 	mul.w	r3, r4, r3
341890de:	4403      	add	r3, r0
341890e0:	3338      	adds	r3, #56	@ 0x38
341890e2:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341890e4:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
341890e6:	085b      	lsrs	r3, r3, #1
341890e8:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
341890ea:	68f9      	ldr	r1, [r7, #12]
341890ec:	6809      	ldr	r1, [r1, #0]
341890ee:	4608      	mov	r0, r1
341890f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341890f2:	0209      	lsls	r1, r1, #8
341890f4:	4401      	add	r1, r0
341890f6:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341890fa:	4313      	orrs	r3, r2
341890fc:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
341890fe:	68fa      	ldr	r2, [r7, #12]
34189100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189102:	2134      	movs	r1, #52	@ 0x34
34189104:	fb01 f303 	mul.w	r3, r1, r3
34189108:	4413      	add	r3, r2
3418910a:	3364      	adds	r3, #100	@ 0x64
3418910c:	681b      	ldr	r3, [r3, #0]
3418910e:	68fa      	ldr	r2, [r7, #12]
34189110:	6812      	ldr	r2, [r2, #0]
34189112:	4611      	mov	r1, r2
34189114:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189116:	0212      	lsls	r2, r2, #8
34189118:	440a      	add	r2, r1
3418911a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418911e:	085b      	lsrs	r3, r3, #1
34189120:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34189122:	bf00      	nop
    }

    /* Configure the color frame buffer pitch in byte */
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34189124:	68fa      	ldr	r2, [r7, #12]
34189126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189128:	2134      	movs	r1, #52	@ 0x34
3418912a:	fb01 f303 	mul.w	r3, r1, r3
3418912e:	4413      	add	r3, r2
34189130:	3360      	adds	r3, #96	@ 0x60
34189132:	681b      	ldr	r3, [r3, #0]
34189134:	697a      	ldr	r2, [r7, #20]
34189136:	fb02 f303 	mul.w	r3, r2, r3
3418913a:	041a      	lsls	r2, r3, #16
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 - hltdc->LayerCfg[LayerIdx].WindowX0) *
3418913c:	68f9      	ldr	r1, [r7, #12]
3418913e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189140:	2034      	movs	r0, #52	@ 0x34
34189142:	fb00 f303 	mul.w	r3, r0, r3
34189146:	440b      	add	r3, r1
34189148:	333c      	adds	r3, #60	@ 0x3c
3418914a:	6819      	ldr	r1, [r3, #0]
3418914c:	68f8      	ldr	r0, [r7, #12]
3418914e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189150:	2434      	movs	r4, #52	@ 0x34
34189152:	fb04 f303 	mul.w	r3, r4, r3
34189156:	4403      	add	r3, r0
34189158:	3338      	adds	r3, #56	@ 0x38
3418915a:	681b      	ldr	r3, [r3, #0]
3418915c:	1acb      	subs	r3, r1, r3
3418915e:	6979      	ldr	r1, [r7, #20]
34189160:	fb01 f303 	mul.w	r3, r1, r3
                                            stride)  + 7U));
34189164:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34189166:	68f9      	ldr	r1, [r7, #12]
34189168:	6809      	ldr	r1, [r1, #0]
3418916a:	4608      	mov	r0, r1
3418916c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418916e:	0209      	lsls	r1, r1, #8
34189170:	4401      	add	r1, r0
34189172:	f501 7180 	add.w	r1, r1, #256	@ 0x100
34189176:	4313      	orrs	r3, r2
34189178:	638b      	str	r3, [r1, #56]	@ 0x38

    /* Enable LTDC_Layer by setting LEN bit */
    MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->CR,LTDC_LxCR_HMEN, LTDC_LxCR_LEN);
3418917a:	68fb      	ldr	r3, [r7, #12]
3418917c:	681b      	ldr	r3, [r3, #0]
3418917e:	461a      	mov	r2, r3
34189180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189182:	021b      	lsls	r3, r3, #8
34189184:	4413      	add	r3, r2
34189186:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418918a:	68db      	ldr	r3, [r3, #12]
3418918c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
34189190:	f023 0301 	bic.w	r3, r3, #1
34189194:	68fa      	ldr	r2, [r7, #12]
34189196:	6812      	ldr	r2, [r2, #0]
34189198:	4611      	mov	r1, r2
3418919a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418919c:	0212      	lsls	r2, r2, #8
3418919e:	440a      	add	r2, r1
341891a0:	f502 7280 	add.w	r2, r2, #256	@ 0x100
341891a4:	f043 0301 	orr.w	r3, r3, #1
341891a8:	60d3      	str	r3, [r2, #12]
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));

    /* Enable horizontal mirroring bit & LTDC_Layer by setting LEN bit */
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
  }
}
341891aa:	f000 bccc 	b.w	34189b46 <LTDC_SetConfig+0xd0e>
  else if (Mirror == LTDC_MIRROR_HORIZONTAL)
341891ae:	683b      	ldr	r3, [r7, #0]
341891b0:	2b00      	cmp	r3, #0
341891b2:	f040 814e 	bne.w	34189452 <LTDC_SetConfig+0x61a>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
341891b6:	68fa      	ldr	r2, [r7, #12]
341891b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341891ba:	2134      	movs	r1, #52	@ 0x34
341891bc:	fb01 f303 	mul.w	r3, r1, r3
341891c0:	4413      	add	r3, r2
341891c2:	335c      	adds	r3, #92	@ 0x5c
341891c4:	681a      	ldr	r2, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
341891c6:	68f9      	ldr	r1, [r7, #12]
341891c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341891ca:	2034      	movs	r0, #52	@ 0x34
341891cc:	fb00 f303 	mul.w	r3, r0, r3
341891d0:	440b      	add	r3, r1
341891d2:	333c      	adds	r3, #60	@ 0x3c
341891d4:	6819      	ldr	r1, [r3, #0]
                                                    hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
341891d6:	68f8      	ldr	r0, [r7, #12]
341891d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341891da:	2434      	movs	r4, #52	@ 0x34
341891dc:	fb04 f303 	mul.w	r3, r4, r3
341891e0:	4403      	add	r3, r0
341891e2:	3338      	adds	r3, #56	@ 0x38
341891e4:	681b      	ldr	r3, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
341891e6:	1acb      	subs	r3, r1, r3
341891e8:	6979      	ldr	r1, [r7, #20]
341891ea:	fb01 f303 	mul.w	r3, r1, r3
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
341891ee:	4413      	add	r3, r2
341891f0:	68fa      	ldr	r2, [r7, #12]
341891f2:	6812      	ldr	r2, [r2, #0]
341891f4:	4611      	mov	r1, r2
341891f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341891f8:	0212      	lsls	r2, r2, #8
341891fa:	440a      	add	r2, r1
341891fc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                    hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34189200:	3b01      	subs	r3, #1
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34189202:	6353      	str	r3, [r2, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34189204:	68fa      	ldr	r2, [r7, #12]
34189206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189208:	2134      	movs	r1, #52	@ 0x34
3418920a:	fb01 f303 	mul.w	r3, r1, r3
3418920e:	4413      	add	r3, r2
34189210:	3348      	adds	r3, #72	@ 0x48
34189212:	681b      	ldr	r3, [r3, #0]
34189214:	f240 120d 	movw	r2, #269	@ 0x10d
34189218:	4293      	cmp	r3, r2
3418921a:	d004      	beq.n	34189226 <LTDC_SetConfig+0x3ee>
3418921c:	f240 220d 	movw	r2, #525	@ 0x20d
34189220:	4293      	cmp	r3, r2
34189222:	d058      	beq.n	341892d6 <LTDC_SetConfig+0x49e>
        break;
34189224:	e0d3      	b.n	341893ce <LTDC_SetConfig+0x596>
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
34189226:	68fa      	ldr	r2, [r7, #12]
34189228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418922a:	2134      	movs	r1, #52	@ 0x34
3418922c:	fb01 f303 	mul.w	r3, r1, r3
34189230:	4413      	add	r3, r2
34189232:	333c      	adds	r3, #60	@ 0x3c
34189234:	681a      	ldr	r2, [r3, #0]
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34189236:	68f9      	ldr	r1, [r7, #12]
34189238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418923a:	2034      	movs	r0, #52	@ 0x34
3418923c:	fb00 f303 	mul.w	r3, r0, r3
34189240:	440b      	add	r3, r1
34189242:	3338      	adds	r3, #56	@ 0x38
34189244:	681b      	ldr	r3, [r3, #0]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
34189246:	1ad3      	subs	r3, r2, r3
34189248:	697a      	ldr	r2, [r7, #20]
3418924a:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418924e:	68bb      	ldr	r3, [r7, #8]
34189250:	4413      	add	r3, r2
34189252:	68fa      	ldr	r2, [r7, #12]
34189254:	6812      	ldr	r2, [r2, #0]
34189256:	4611      	mov	r1, r2
34189258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418925a:	0212      	lsls	r2, r2, #8
3418925c:	440a      	add	r2, r1
3418925e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34189262:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34189264:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
34189266:	68fa      	ldr	r2, [r7, #12]
34189268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418926a:	2134      	movs	r1, #52	@ 0x34
3418926c:	fb01 f303 	mul.w	r3, r1, r3
34189270:	4413      	add	r3, r2
34189272:	3360      	adds	r3, #96	@ 0x60
34189274:	681b      	ldr	r3, [r3, #0]
34189276:	041a      	lsls	r2, r3, #16
                                             (hltdc->LayerCfg[LayerIdx].WindowX1 - hltdc->LayerCfg[LayerIdx].WindowX0 +
34189278:	68f9      	ldr	r1, [r7, #12]
3418927a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418927c:	2034      	movs	r0, #52	@ 0x34
3418927e:	fb00 f303 	mul.w	r3, r0, r3
34189282:	440b      	add	r3, r1
34189284:	333c      	adds	r3, #60	@ 0x3c
34189286:	6819      	ldr	r1, [r3, #0]
34189288:	68f8      	ldr	r0, [r7, #12]
3418928a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418928c:	2434      	movs	r4, #52	@ 0x34
3418928e:	fb04 f303 	mul.w	r3, r4, r3
34189292:	4403      	add	r3, r0
34189294:	3338      	adds	r3, #56	@ 0x38
34189296:	681b      	ldr	r3, [r3, #0]
34189298:	1acb      	subs	r3, r1, r3
3418929a:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
3418929c:	68f9      	ldr	r1, [r7, #12]
3418929e:	6809      	ldr	r1, [r1, #0]
341892a0:	4608      	mov	r0, r1
341892a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341892a4:	0209      	lsls	r1, r1, #8
341892a6:	4401      	add	r1, r0
341892a8:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341892ac:	4313      	orrs	r3, r2
341892ae:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U ;
341892b0:	68fa      	ldr	r2, [r7, #12]
341892b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341892b4:	2134      	movs	r1, #52	@ 0x34
341892b6:	fb01 f303 	mul.w	r3, r1, r3
341892ba:	4413      	add	r3, r2
341892bc:	3364      	adds	r3, #100	@ 0x64
341892be:	681b      	ldr	r3, [r3, #0]
341892c0:	68fa      	ldr	r2, [r7, #12]
341892c2:	6812      	ldr	r2, [r2, #0]
341892c4:	4611      	mov	r1, r2
341892c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341892c8:	0212      	lsls	r2, r2, #8
341892ca:	440a      	add	r2, r1
341892cc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
341892d0:	085b      	lsrs	r3, r3, #1
341892d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
341892d4:	e07b      	b.n	341893ce <LTDC_SetConfig+0x596>
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341892d6:	68fa      	ldr	r2, [r7, #12]
341892d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341892da:	2134      	movs	r1, #52	@ 0x34
341892dc:	fb01 f303 	mul.w	r3, r1, r3
341892e0:	4413      	add	r3, r2
341892e2:	333c      	adds	r3, #60	@ 0x3c
341892e4:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
341892e6:	68f9      	ldr	r1, [r7, #12]
341892e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341892ea:	2034      	movs	r0, #52	@ 0x34
341892ec:	fb00 f303 	mul.w	r3, r0, r3
341892f0:	440b      	add	r3, r1
341892f2:	3338      	adds	r3, #56	@ 0x38
341892f4:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341892f6:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
341892f8:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341892fa:	697a      	ldr	r2, [r7, #20]
341892fc:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34189300:	68bb      	ldr	r3, [r7, #8]
34189302:	4413      	add	r3, r2
34189304:	68fa      	ldr	r2, [r7, #12]
34189306:	6812      	ldr	r2, [r2, #0]
34189308:	4611      	mov	r1, r2
3418930a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418930c:	0212      	lsls	r2, r2, #8
3418930e:	440a      	add	r2, r1
34189310:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34189314:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34189316:	6413      	str	r3, [r2, #64]	@ 0x40
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189318:	68fa      	ldr	r2, [r7, #12]
3418931a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418931c:	2134      	movs	r1, #52	@ 0x34
3418931e:	fb01 f303 	mul.w	r3, r1, r3
34189322:	4413      	add	r3, r2
34189324:	333c      	adds	r3, #60	@ 0x3c
34189326:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34189328:	68f9      	ldr	r1, [r7, #12]
3418932a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418932c:	2034      	movs	r0, #52	@ 0x34
3418932e:	fb00 f303 	mul.w	r3, r0, r3
34189332:	440b      	add	r3, r1
34189334:	3338      	adds	r3, #56	@ 0x38
34189336:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189338:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418933a:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418933c:	697a      	ldr	r2, [r7, #20]
3418933e:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34189342:	687b      	ldr	r3, [r7, #4]
34189344:	4413      	add	r3, r2
34189346:	68fa      	ldr	r2, [r7, #12]
34189348:	6812      	ldr	r2, [r2, #0]
3418934a:	4611      	mov	r1, r2
3418934c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418934e:	0212      	lsls	r2, r2, #8
34189350:	440a      	add	r2, r1
34189352:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34189356:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34189358:	6453      	str	r3, [r2, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
3418935a:	68fa      	ldr	r2, [r7, #12]
3418935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418935e:	2134      	movs	r1, #52	@ 0x34
34189360:	fb01 f303 	mul.w	r3, r1, r3
34189364:	4413      	add	r3, r2
34189366:	3360      	adds	r3, #96	@ 0x60
34189368:	681b      	ldr	r3, [r3, #0]
3418936a:	085b      	lsrs	r3, r3, #1
3418936c:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418936e:	68f9      	ldr	r1, [r7, #12]
34189370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189372:	2034      	movs	r0, #52	@ 0x34
34189374:	fb00 f303 	mul.w	r3, r0, r3
34189378:	440b      	add	r3, r1
3418937a:	333c      	adds	r3, #60	@ 0x3c
3418937c:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
3418937e:	68f8      	ldr	r0, [r7, #12]
34189380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189382:	2434      	movs	r4, #52	@ 0x34
34189384:	fb04 f303 	mul.w	r3, r4, r3
34189388:	4403      	add	r3, r0
3418938a:	3338      	adds	r3, #56	@ 0x38
3418938c:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418938e:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
34189390:	085b      	lsrs	r3, r3, #1
34189392:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34189394:	68f9      	ldr	r1, [r7, #12]
34189396:	6809      	ldr	r1, [r1, #0]
34189398:	4608      	mov	r0, r1
3418939a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418939c:	0209      	lsls	r1, r1, #8
3418939e:	4401      	add	r1, r0
341893a0:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341893a4:	4313      	orrs	r3, r2
341893a6:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
341893a8:	68fa      	ldr	r2, [r7, #12]
341893aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341893ac:	2134      	movs	r1, #52	@ 0x34
341893ae:	fb01 f303 	mul.w	r3, r1, r3
341893b2:	4413      	add	r3, r2
341893b4:	3364      	adds	r3, #100	@ 0x64
341893b6:	681b      	ldr	r3, [r3, #0]
341893b8:	68fa      	ldr	r2, [r7, #12]
341893ba:	6812      	ldr	r2, [r2, #0]
341893bc:	4611      	mov	r1, r2
341893be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341893c0:	0212      	lsls	r2, r2, #8
341893c2:	440a      	add	r2, r1
341893c4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
341893c8:	085b      	lsrs	r3, r3, #1
341893ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
341893cc:	bf00      	nop
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
341893ce:	68fa      	ldr	r2, [r7, #12]
341893d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341893d2:	2134      	movs	r1, #52	@ 0x34
341893d4:	fb01 f303 	mul.w	r3, r1, r3
341893d8:	4413      	add	r3, r2
341893da:	3360      	adds	r3, #96	@ 0x60
341893dc:	681b      	ldr	r3, [r3, #0]
341893de:	697a      	ldr	r2, [r7, #20]
341893e0:	fb02 f303 	mul.w	r3, r2, r3
341893e4:	041a      	lsls	r2, r3, #16
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341893e6:	68f9      	ldr	r1, [r7, #12]
341893e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341893ea:	2034      	movs	r0, #52	@ 0x34
341893ec:	fb00 f303 	mul.w	r3, r0, r3
341893f0:	440b      	add	r3, r1
341893f2:	333c      	adds	r3, #60	@ 0x3c
341893f4:	6819      	ldr	r1, [r3, #0]
                                             hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U));
341893f6:	68f8      	ldr	r0, [r7, #12]
341893f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341893fa:	2434      	movs	r4, #52	@ 0x34
341893fc:	fb04 f303 	mul.w	r3, r4, r3
34189400:	4403      	add	r3, r0
34189402:	3338      	adds	r3, #56	@ 0x38
34189404:	681b      	ldr	r3, [r3, #0]
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189406:	1acb      	subs	r3, r1, r3
                                             hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U));
34189408:	6979      	ldr	r1, [r7, #20]
3418940a:	fb01 f303 	mul.w	r3, r1, r3
3418940e:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34189410:	68f9      	ldr	r1, [r7, #12]
34189412:	6809      	ldr	r1, [r1, #0]
34189414:	4608      	mov	r0, r1
34189416:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34189418:	0209      	lsls	r1, r1, #8
3418941a:	4401      	add	r1, r0
3418941c:	f501 7180 	add.w	r1, r1, #256	@ 0x100
34189420:	4313      	orrs	r3, r2
34189422:	638b      	str	r3, [r1, #56]	@ 0x38
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34189424:	68fb      	ldr	r3, [r7, #12]
34189426:	681b      	ldr	r3, [r3, #0]
34189428:	461a      	mov	r2, r3
3418942a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418942c:	021b      	lsls	r3, r3, #8
3418942e:	4413      	add	r3, r2
34189430:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189434:	68db      	ldr	r3, [r3, #12]
34189436:	68fa      	ldr	r2, [r7, #12]
34189438:	6812      	ldr	r2, [r2, #0]
3418943a:	4611      	mov	r1, r2
3418943c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418943e:	0212      	lsls	r2, r2, #8
34189440:	440a      	add	r2, r1
34189442:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34189446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3418944a:	f043 0301 	orr.w	r3, r3, #1
3418944e:	60d3      	str	r3, [r2, #12]
}
34189450:	e379      	b.n	34189b46 <LTDC_SetConfig+0xd0e>
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34189452:	683b      	ldr	r3, [r7, #0]
34189454:	2b01      	cmp	r3, #1
34189456:	f040 81b4 	bne.w	341897c2 <LTDC_SetConfig+0x98a>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418945a:	68fa      	ldr	r2, [r7, #12]
3418945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418945e:	2134      	movs	r1, #52	@ 0x34
34189460:	fb01 f303 	mul.w	r3, r1, r3
34189464:	4413      	add	r3, r2
34189466:	335c      	adds	r3, #92	@ 0x5c
34189468:	681a      	ldr	r2, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418946a:	68f9      	ldr	r1, [r7, #12]
3418946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418946e:	2034      	movs	r0, #52	@ 0x34
34189470:	fb00 f303 	mul.w	r3, r0, r3
34189474:	440b      	add	r3, r1
34189476:	333c      	adds	r3, #60	@ 0x3c
34189478:	6819      	ldr	r1, [r3, #0]
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
3418947a:	68f8      	ldr	r0, [r7, #12]
3418947c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418947e:	2434      	movs	r4, #52	@ 0x34
34189480:	fb04 f303 	mul.w	r3, r4, r3
34189484:	4403      	add	r3, r0
34189486:	3338      	adds	r3, #56	@ 0x38
34189488:	681b      	ldr	r3, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418948a:	1acb      	subs	r3, r1, r3
3418948c:	6979      	ldr	r1, [r7, #20]
3418948e:	fb01 f303 	mul.w	r3, r1, r3
                                          ((hltdc->LayerCfg[LayerIdx].WindowY1 -
34189492:	68f8      	ldr	r0, [r7, #12]
34189494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34189496:	2434      	movs	r4, #52	@ 0x34
34189498:	fb04 f101 	mul.w	r1, r4, r1
3418949c:	4401      	add	r1, r0
3418949e:	3144      	adds	r1, #68	@ 0x44
341894a0:	6808      	ldr	r0, [r1, #0]
                                            hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
341894a2:	68fc      	ldr	r4, [r7, #12]
341894a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341894a6:	2534      	movs	r5, #52	@ 0x34
341894a8:	fb05 f101 	mul.w	r1, r5, r1
341894ac:	4421      	add	r1, r4
341894ae:	3140      	adds	r1, #64	@ 0x40
341894b0:	6809      	ldr	r1, [r1, #0]
                                          ((hltdc->LayerCfg[LayerIdx].WindowY1 -
341894b2:	1a41      	subs	r1, r0, r1
                                            hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
341894b4:	3901      	subs	r1, #1
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
341894b6:	fb01 f303 	mul.w	r3, r1, r3
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
341894ba:	68f9      	ldr	r1, [r7, #12]
341894bc:	6809      	ldr	r1, [r1, #0]
341894be:	4608      	mov	r0, r1
341894c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341894c2:	0209      	lsls	r1, r1, #8
341894c4:	4401      	add	r1, r0
341894c6:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341894ca:	4413      	add	r3, r2
341894cc:	634b      	str	r3, [r1, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
341894ce:	68fa      	ldr	r2, [r7, #12]
341894d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341894d2:	2134      	movs	r1, #52	@ 0x34
341894d4:	fb01 f303 	mul.w	r3, r1, r3
341894d8:	4413      	add	r3, r2
341894da:	3348      	adds	r3, #72	@ 0x48
341894dc:	681b      	ldr	r3, [r3, #0]
341894de:	f240 120d 	movw	r2, #269	@ 0x10d
341894e2:	4293      	cmp	r3, r2
341894e4:	d004      	beq.n	341894f0 <LTDC_SetConfig+0x6b8>
341894e6:	f240 220d 	movw	r2, #525	@ 0x20d
341894ea:	4293      	cmp	r3, r2
341894ec:	d075      	beq.n	341895da <LTDC_SetConfig+0x7a2>
        break;
341894ee:	e122      	b.n	34189736 <LTDC_SetConfig+0x8fe>
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
341894f0:	68fa      	ldr	r2, [r7, #12]
341894f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341894f4:	2134      	movs	r1, #52	@ 0x34
341894f6:	fb01 f303 	mul.w	r3, r1, r3
341894fa:	4413      	add	r3, r2
341894fc:	333c      	adds	r3, #60	@ 0x3c
341894fe:	681a      	ldr	r2, [r3, #0]
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
34189500:	68f9      	ldr	r1, [r7, #12]
34189502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189504:	2034      	movs	r0, #52	@ 0x34
34189506:	fb00 f303 	mul.w	r3, r0, r3
3418950a:	440b      	add	r3, r1
3418950c:	3338      	adds	r3, #56	@ 0x38
3418950e:	681b      	ldr	r3, [r3, #0]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
34189510:	1ad3      	subs	r3, r2, r3
34189512:	697a      	ldr	r2, [r7, #20]
34189514:	fb02 f303 	mul.w	r3, r2, r3
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
34189518:	68f9      	ldr	r1, [r7, #12]
3418951a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418951c:	2034      	movs	r0, #52	@ 0x34
3418951e:	fb00 f202 	mul.w	r2, r0, r2
34189522:	440a      	add	r2, r1
34189524:	3244      	adds	r2, #68	@ 0x44
34189526:	6811      	ldr	r1, [r2, #0]
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34189528:	68f8      	ldr	r0, [r7, #12]
3418952a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418952c:	2434      	movs	r4, #52	@ 0x34
3418952e:	fb04 f202 	mul.w	r2, r4, r2
34189532:	4402      	add	r2, r0
34189534:	3240      	adds	r2, #64	@ 0x40
34189536:	6812      	ldr	r2, [r2, #0]
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
34189538:	1a8a      	subs	r2, r1, r2
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418953a:	0852      	lsrs	r2, r2, #1
3418953c:	3a01      	subs	r2, #1
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
3418953e:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34189542:	68fb      	ldr	r3, [r7, #12]
34189544:	681b      	ldr	r3, [r3, #0]
34189546:	4619      	mov	r1, r3
34189548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418954a:	021b      	lsls	r3, r3, #8
3418954c:	440b      	add	r3, r1
3418954e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189552:	4619      	mov	r1, r3
34189554:	68bb      	ldr	r3, [r7, #8]
34189556:	4413      	add	r3, r2
34189558:	640b      	str	r3, [r1, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
3418955a:	68fa      	ldr	r2, [r7, #12]
3418955c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418955e:	2134      	movs	r1, #52	@ 0x34
34189560:	fb01 f303 	mul.w	r3, r1, r3
34189564:	4413      	add	r3, r2
34189566:	3360      	adds	r3, #96	@ 0x60
34189568:	681b      	ldr	r3, [r3, #0]
3418956a:	697a      	ldr	r2, [r7, #20]
3418956c:	fb02 f303 	mul.w	r3, r2, r3
34189570:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
34189574:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189576:	68f9      	ldr	r1, [r7, #12]
34189578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418957a:	2034      	movs	r0, #52	@ 0x34
3418957c:	fb00 f303 	mul.w	r3, r0, r3
34189580:	440b      	add	r3, r1
34189582:	333c      	adds	r3, #60	@ 0x3c
34189584:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U);
34189586:	68f8      	ldr	r0, [r7, #12]
34189588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418958a:	2434      	movs	r4, #52	@ 0x34
3418958c:	fb04 f303 	mul.w	r3, r4, r3
34189590:	4403      	add	r3, r0
34189592:	3338      	adds	r3, #56	@ 0x38
34189594:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189596:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U);
34189598:	6979      	ldr	r1, [r7, #20]
3418959a:	fb01 f303 	mul.w	r3, r1, r3
3418959e:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
341895a0:	68f9      	ldr	r1, [r7, #12]
341895a2:	6809      	ldr	r1, [r1, #0]
341895a4:	4608      	mov	r0, r1
341895a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341895a8:	0209      	lsls	r1, r1, #8
341895aa:	4401      	add	r1, r0
341895ac:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341895b0:	4313      	orrs	r3, r2
341895b2:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
341895b4:	68fa      	ldr	r2, [r7, #12]
341895b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341895b8:	2134      	movs	r1, #52	@ 0x34
341895ba:	fb01 f303 	mul.w	r3, r1, r3
341895be:	4413      	add	r3, r2
341895c0:	3364      	adds	r3, #100	@ 0x64
341895c2:	681b      	ldr	r3, [r3, #0]
341895c4:	68fa      	ldr	r2, [r7, #12]
341895c6:	6812      	ldr	r2, [r2, #0]
341895c8:	4611      	mov	r1, r2
341895ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341895cc:	0212      	lsls	r2, r2, #8
341895ce:	440a      	add	r2, r1
341895d0:	f502 7280 	add.w	r2, r2, #256	@ 0x100
341895d4:	085b      	lsrs	r3, r3, #1
341895d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
341895d8:	e0ad      	b.n	34189736 <LTDC_SetConfig+0x8fe>
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341895da:	68fa      	ldr	r2, [r7, #12]
341895dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341895de:	2134      	movs	r1, #52	@ 0x34
341895e0:	fb01 f303 	mul.w	r3, r1, r3
341895e4:	4413      	add	r3, r2
341895e6:	333c      	adds	r3, #60	@ 0x3c
341895e8:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
341895ea:	68f9      	ldr	r1, [r7, #12]
341895ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341895ee:	2034      	movs	r0, #52	@ 0x34
341895f0:	fb00 f303 	mul.w	r3, r0, r3
341895f4:	440b      	add	r3, r1
341895f6:	3338      	adds	r3, #56	@ 0x38
341895f8:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341895fa:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
341895fc:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341895fe:	697a      	ldr	r2, [r7, #20]
34189600:	fb02 f303 	mul.w	r3, r2, r3
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
34189604:	68f9      	ldr	r1, [r7, #12]
34189606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189608:	2034      	movs	r0, #52	@ 0x34
3418960a:	fb00 f202 	mul.w	r2, r0, r2
3418960e:	440a      	add	r2, r1
34189610:	3244      	adds	r2, #68	@ 0x44
34189612:	6811      	ldr	r1, [r2, #0]
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34189614:	68f8      	ldr	r0, [r7, #12]
34189616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189618:	2434      	movs	r4, #52	@ 0x34
3418961a:	fb04 f202 	mul.w	r2, r4, r2
3418961e:	4402      	add	r2, r0
34189620:	3240      	adds	r2, #64	@ 0x40
34189622:	6812      	ldr	r2, [r2, #0]
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
34189624:	1a8a      	subs	r2, r1, r2
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34189626:	0852      	lsrs	r2, r2, #1
34189628:	3a01      	subs	r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418962a:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418962e:	68fb      	ldr	r3, [r7, #12]
34189630:	681b      	ldr	r3, [r3, #0]
34189632:	4619      	mov	r1, r3
34189634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189636:	021b      	lsls	r3, r3, #8
34189638:	440b      	add	r3, r1
3418963a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418963e:	4619      	mov	r1, r3
34189640:	68bb      	ldr	r3, [r7, #8]
34189642:	4413      	add	r3, r2
34189644:	640b      	str	r3, [r1, #64]	@ 0x40
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189646:	68fa      	ldr	r2, [r7, #12]
34189648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418964a:	2134      	movs	r1, #52	@ 0x34
3418964c:	fb01 f303 	mul.w	r3, r1, r3
34189650:	4413      	add	r3, r2
34189652:	333c      	adds	r3, #60	@ 0x3c
34189654:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34189656:	68f9      	ldr	r1, [r7, #12]
34189658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418965a:	2034      	movs	r0, #52	@ 0x34
3418965c:	fb00 f303 	mul.w	r3, r0, r3
34189660:	440b      	add	r3, r1
34189662:	3338      	adds	r3, #56	@ 0x38
34189664:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189666:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34189668:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418966a:	697a      	ldr	r2, [r7, #20]
3418966c:	fb02 f303 	mul.w	r3, r2, r3
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
34189670:	68f9      	ldr	r1, [r7, #12]
34189672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189674:	2034      	movs	r0, #52	@ 0x34
34189676:	fb00 f202 	mul.w	r2, r0, r2
3418967a:	440a      	add	r2, r1
3418967c:	3244      	adds	r2, #68	@ 0x44
3418967e:	6811      	ldr	r1, [r2, #0]
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34189680:	68f8      	ldr	r0, [r7, #12]
34189682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189684:	2434      	movs	r4, #52	@ 0x34
34189686:	fb04 f202 	mul.w	r2, r4, r2
3418968a:	4402      	add	r2, r0
3418968c:	3240      	adds	r2, #64	@ 0x40
3418968e:	6812      	ldr	r2, [r2, #0]
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
34189690:	1a8a      	subs	r2, r1, r2
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34189692:	0852      	lsrs	r2, r2, #1
34189694:	3a01      	subs	r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34189696:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
3418969a:	68fb      	ldr	r3, [r7, #12]
3418969c:	681b      	ldr	r3, [r3, #0]
3418969e:	4619      	mov	r1, r3
341896a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341896a2:	021b      	lsls	r3, r3, #8
341896a4:	440b      	add	r3, r1
341896a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
341896aa:	4619      	mov	r1, r3
341896ac:	687b      	ldr	r3, [r7, #4]
341896ae:	4413      	add	r3, r2
341896b0:	644b      	str	r3, [r1, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
341896b2:	68fa      	ldr	r2, [r7, #12]
341896b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341896b6:	2134      	movs	r1, #52	@ 0x34
341896b8:	fb01 f303 	mul.w	r3, r1, r3
341896bc:	4413      	add	r3, r2
341896be:	3360      	adds	r3, #96	@ 0x60
341896c0:	681b      	ldr	r3, [r3, #0]
341896c2:	085b      	lsrs	r3, r3, #1
341896c4:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
341896c8:	697a      	ldr	r2, [r7, #20]
341896ca:	fb02 f303 	mul.w	r3, r2, r3
                                               stride) << 16U) |
341896ce:	041a      	lsls	r2, r3, #16
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
341896d0:	68f9      	ldr	r1, [r7, #12]
341896d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341896d4:	2034      	movs	r0, #52	@ 0x34
341896d6:	fb00 f303 	mul.w	r3, r0, r3
341896da:	440b      	add	r3, r1
341896dc:	333c      	adds	r3, #60	@ 0x3c
341896de:	6819      	ldr	r1, [r3, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
341896e0:	68f8      	ldr	r0, [r7, #12]
341896e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341896e4:	2434      	movs	r4, #52	@ 0x34
341896e6:	fb04 f303 	mul.w	r3, r4, r3
341896ea:	4403      	add	r3, r0
341896ec:	3338      	adds	r3, #56	@ 0x38
341896ee:	681b      	ldr	r3, [r3, #0]
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
341896f0:	1acb      	subs	r3, r1, r3
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
341896f2:	085b      	lsrs	r3, r3, #1
341896f4:	6979      	ldr	r1, [r7, #20]
341896f6:	fb01 f303 	mul.w	r3, r1, r3
341896fa:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
341896fc:	68f9      	ldr	r1, [r7, #12]
341896fe:	6809      	ldr	r1, [r1, #0]
34189700:	4608      	mov	r0, r1
34189702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34189704:	0209      	lsls	r1, r1, #8
34189706:	4401      	add	r1, r0
34189708:	f501 7180 	add.w	r1, r1, #256	@ 0x100
                                               stride) << 16U) |
3418970c:	4313      	orrs	r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
3418970e:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34189710:	68fa      	ldr	r2, [r7, #12]
34189712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189714:	2134      	movs	r1, #52	@ 0x34
34189716:	fb01 f303 	mul.w	r3, r1, r3
3418971a:	4413      	add	r3, r2
3418971c:	3364      	adds	r3, #100	@ 0x64
3418971e:	681b      	ldr	r3, [r3, #0]
34189720:	68fa      	ldr	r2, [r7, #12]
34189722:	6812      	ldr	r2, [r2, #0]
34189724:	4611      	mov	r1, r2
34189726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189728:	0212      	lsls	r2, r2, #8
3418972a:	440a      	add	r2, r1
3418972c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34189730:	085b      	lsrs	r3, r3, #1
34189732:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34189734:	bf00      	nop
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34189736:	68fa      	ldr	r2, [r7, #12]
34189738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418973a:	2134      	movs	r1, #52	@ 0x34
3418973c:	fb01 f303 	mul.w	r3, r1, r3
34189740:	4413      	add	r3, r2
34189742:	3360      	adds	r3, #96	@ 0x60
34189744:	681b      	ldr	r3, [r3, #0]
34189746:	697a      	ldr	r2, [r7, #20]
34189748:	fb02 f303 	mul.w	r3, r2, r3
3418974c:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
34189750:	041a      	lsls	r2, r3, #16
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189752:	68f9      	ldr	r1, [r7, #12]
34189754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189756:	2034      	movs	r0, #52	@ 0x34
34189758:	fb00 f303 	mul.w	r3, r0, r3
3418975c:	440b      	add	r3, r1
3418975e:	333c      	adds	r3, #60	@ 0x3c
34189760:	6819      	ldr	r1, [r3, #0]
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
34189762:	68f8      	ldr	r0, [r7, #12]
34189764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189766:	2434      	movs	r4, #52	@ 0x34
34189768:	fb04 f303 	mul.w	r3, r4, r3
3418976c:	4403      	add	r3, r0
3418976e:	3338      	adds	r3, #56	@ 0x38
34189770:	681b      	ldr	r3, [r3, #0]
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189772:	1acb      	subs	r3, r1, r3
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
34189774:	6979      	ldr	r1, [r7, #20]
34189776:	fb01 f303 	mul.w	r3, r1, r3
3418977a:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
3418977c:	68f9      	ldr	r1, [r7, #12]
3418977e:	6809      	ldr	r1, [r1, #0]
34189780:	4608      	mov	r0, r1
34189782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34189784:	0209      	lsls	r1, r1, #8
34189786:	4401      	add	r1, r0
34189788:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418978c:	4313      	orrs	r3, r2
3418978e:	638b      	str	r3, [r1, #56]	@ 0x38
    MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN, LTDC_LxCR_LEN);
34189790:	68fb      	ldr	r3, [r7, #12]
34189792:	681b      	ldr	r3, [r3, #0]
34189794:	461a      	mov	r2, r3
34189796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189798:	021b      	lsls	r3, r3, #8
3418979a:	4413      	add	r3, r2
3418979c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
341897a0:	68db      	ldr	r3, [r3, #12]
341897a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
341897a6:	f023 0301 	bic.w	r3, r3, #1
341897aa:	68fa      	ldr	r2, [r7, #12]
341897ac:	6812      	ldr	r2, [r2, #0]
341897ae:	4611      	mov	r1, r2
341897b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341897b2:	0212      	lsls	r2, r2, #8
341897b4:	440a      	add	r2, r1
341897b6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
341897ba:	f043 0301 	orr.w	r3, r3, #1
341897be:	60d3      	str	r3, [r2, #12]
}
341897c0:	e1c1      	b.n	34189b46 <LTDC_SetConfig+0xd0e>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
341897c2:	68fa      	ldr	r2, [r7, #12]
341897c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341897c6:	2134      	movs	r1, #52	@ 0x34
341897c8:	fb01 f303 	mul.w	r3, r1, r3
341897cc:	4413      	add	r3, r2
341897ce:	335c      	adds	r3, #92	@ 0x5c
341897d0:	681a      	ldr	r2, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
341897d2:	68f9      	ldr	r1, [r7, #12]
341897d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341897d6:	2034      	movs	r0, #52	@ 0x34
341897d8:	fb00 f303 	mul.w	r3, r0, r3
341897dc:	440b      	add	r3, r1
341897de:	333c      	adds	r3, #60	@ 0x3c
341897e0:	6819      	ldr	r1, [r3, #0]
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
341897e2:	68f8      	ldr	r0, [r7, #12]
341897e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341897e6:	2434      	movs	r4, #52	@ 0x34
341897e8:	fb04 f303 	mul.w	r3, r4, r3
341897ec:	4403      	add	r3, r0
341897ee:	3338      	adds	r3, #56	@ 0x38
341897f0:	681b      	ldr	r3, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
341897f2:	1acb      	subs	r3, r1, r3
341897f4:	6979      	ldr	r1, [r7, #20]
341897f6:	fb01 f303 	mul.w	r3, r1, r3
                                          (hltdc->LayerCfg[LayerIdx].WindowY1 - \
341897fa:	68f8      	ldr	r0, [r7, #12]
341897fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341897fe:	2434      	movs	r4, #52	@ 0x34
34189800:	fb04 f101 	mul.w	r1, r4, r1
34189804:	4401      	add	r1, r0
34189806:	3144      	adds	r1, #68	@ 0x44
34189808:	6808      	ldr	r0, [r1, #0]
                                           hltdc->LayerCfg[LayerIdx].WindowY0)) - 1U;
3418980a:	68fc      	ldr	r4, [r7, #12]
3418980c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418980e:	2534      	movs	r5, #52	@ 0x34
34189810:	fb05 f101 	mul.w	r1, r5, r1
34189814:	4421      	add	r1, r4
34189816:	3140      	adds	r1, #64	@ 0x40
34189818:	6809      	ldr	r1, [r1, #0]
                                          (hltdc->LayerCfg[LayerIdx].WindowY1 - \
3418981a:	1a41      	subs	r1, r0, r1
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
3418981c:	fb01 f303 	mul.w	r3, r1, r3
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34189820:	4413      	add	r3, r2
34189822:	68fa      	ldr	r2, [r7, #12]
34189824:	6812      	ldr	r2, [r2, #0]
34189826:	4611      	mov	r1, r2
34189828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418982a:	0212      	lsls	r2, r2, #8
3418982c:	440a      	add	r2, r1
3418982e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                           hltdc->LayerCfg[LayerIdx].WindowY0)) - 1U;
34189832:	3b01      	subs	r3, #1
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34189834:	6353      	str	r3, [r2, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34189836:	68fa      	ldr	r2, [r7, #12]
34189838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418983a:	2134      	movs	r1, #52	@ 0x34
3418983c:	fb01 f303 	mul.w	r3, r1, r3
34189840:	4413      	add	r3, r2
34189842:	3348      	adds	r3, #72	@ 0x48
34189844:	681b      	ldr	r3, [r3, #0]
34189846:	f240 120d 	movw	r2, #269	@ 0x10d
3418984a:	4293      	cmp	r3, r2
3418984c:	d004      	beq.n	34189858 <LTDC_SetConfig+0xa20>
3418984e:	f240 220d 	movw	r2, #525	@ 0x20d
34189852:	4293      	cmp	r3, r2
34189854:	d074      	beq.n	34189940 <LTDC_SetConfig+0xb08>
        break;
34189856:	e133      	b.n	34189ac0 <LTDC_SetConfig+0xc88>
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
34189858:	68fa      	ldr	r2, [r7, #12]
3418985a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418985c:	2134      	movs	r1, #52	@ 0x34
3418985e:	fb01 f303 	mul.w	r3, r1, r3
34189862:	4413      	add	r3, r2
34189864:	333c      	adds	r3, #60	@ 0x3c
34189866:	681a      	ldr	r2, [r3, #0]
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
34189868:	68f9      	ldr	r1, [r7, #12]
3418986a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418986c:	2034      	movs	r0, #52	@ 0x34
3418986e:	fb00 f303 	mul.w	r3, r0, r3
34189872:	440b      	add	r3, r1
34189874:	3338      	adds	r3, #56	@ 0x38
34189876:	681b      	ldr	r3, [r3, #0]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
34189878:	1ad3      	subs	r3, r2, r3
3418987a:	697a      	ldr	r2, [r7, #20]
3418987c:	fb02 f303 	mul.w	r3, r2, r3
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
34189880:	68f9      	ldr	r1, [r7, #12]
34189882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189884:	2034      	movs	r0, #52	@ 0x34
34189886:	fb00 f202 	mul.w	r2, r0, r2
3418988a:	440a      	add	r2, r1
3418988c:	3244      	adds	r2, #68	@ 0x44
3418988e:	6811      	ldr	r1, [r2, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34189890:	68f8      	ldr	r0, [r7, #12]
34189892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189894:	2434      	movs	r4, #52	@ 0x34
34189896:	fb04 f202 	mul.w	r2, r4, r2
3418989a:	4402      	add	r2, r0
3418989c:	3240      	adds	r2, #64	@ 0x40
3418989e:	6812      	ldr	r2, [r2, #0]
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
341898a0:	1a8a      	subs	r2, r1, r2
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341898a2:	0852      	lsrs	r2, r2, #1
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
341898a4:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
341898a8:	68bb      	ldr	r3, [r7, #8]
341898aa:	4413      	add	r3, r2
341898ac:	68fa      	ldr	r2, [r7, #12]
341898ae:	6812      	ldr	r2, [r2, #0]
341898b0:	4611      	mov	r1, r2
341898b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341898b4:	0212      	lsls	r2, r2, #8
341898b6:	440a      	add	r2, r1
341898b8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341898bc:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
341898be:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
341898c0:	68fa      	ldr	r2, [r7, #12]
341898c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341898c4:	2134      	movs	r1, #52	@ 0x34
341898c6:	fb01 f303 	mul.w	r3, r1, r3
341898ca:	4413      	add	r3, r2
341898cc:	3360      	adds	r3, #96	@ 0x60
341898ce:	681b      	ldr	r3, [r3, #0]
341898d0:	697a      	ldr	r2, [r7, #20]
341898d2:	fb02 f303 	mul.w	r3, r2, r3
341898d6:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
341898da:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341898dc:	68f9      	ldr	r1, [r7, #12]
341898de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341898e0:	2034      	movs	r0, #52	@ 0x34
341898e2:	fb00 f303 	mul.w	r3, r0, r3
341898e6:	440b      	add	r3, r1
341898e8:	333c      	adds	r3, #60	@ 0x3c
341898ea:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U);
341898ec:	68f8      	ldr	r0, [r7, #12]
341898ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341898f0:	2434      	movs	r4, #52	@ 0x34
341898f2:	fb04 f303 	mul.w	r3, r4, r3
341898f6:	4403      	add	r3, r0
341898f8:	3338      	adds	r3, #56	@ 0x38
341898fa:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341898fc:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U);
341898fe:	6979      	ldr	r1, [r7, #20]
34189900:	fb01 f303 	mul.w	r3, r1, r3
34189904:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34189906:	68f9      	ldr	r1, [r7, #12]
34189908:	6809      	ldr	r1, [r1, #0]
3418990a:	4608      	mov	r0, r1
3418990c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418990e:	0209      	lsls	r1, r1, #8
34189910:	4401      	add	r1, r0
34189912:	f501 7180 	add.w	r1, r1, #256	@ 0x100
34189916:	4313      	orrs	r3, r2
34189918:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
3418991a:	68fa      	ldr	r2, [r7, #12]
3418991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418991e:	2134      	movs	r1, #52	@ 0x34
34189920:	fb01 f303 	mul.w	r3, r1, r3
34189924:	4413      	add	r3, r2
34189926:	3364      	adds	r3, #100	@ 0x64
34189928:	681b      	ldr	r3, [r3, #0]
3418992a:	68fa      	ldr	r2, [r7, #12]
3418992c:	6812      	ldr	r2, [r2, #0]
3418992e:	4611      	mov	r1, r2
34189930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189932:	0212      	lsls	r2, r2, #8
34189934:	440a      	add	r2, r1
34189936:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418993a:	085b      	lsrs	r3, r3, #1
3418993c:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418993e:	e0bf      	b.n	34189ac0 <LTDC_SetConfig+0xc88>
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189940:	68fa      	ldr	r2, [r7, #12]
34189942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189944:	2134      	movs	r1, #52	@ 0x34
34189946:	fb01 f303 	mul.w	r3, r1, r3
3418994a:	4413      	add	r3, r2
3418994c:	333c      	adds	r3, #60	@ 0x3c
3418994e:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34189950:	68f9      	ldr	r1, [r7, #12]
34189952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189954:	2034      	movs	r0, #52	@ 0x34
34189956:	fb00 f303 	mul.w	r3, r0, r3
3418995a:	440b      	add	r3, r1
3418995c:	3338      	adds	r3, #56	@ 0x38
3418995e:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189960:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34189962:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189964:	697a      	ldr	r2, [r7, #20]
34189966:	fb02 f303 	mul.w	r3, r2, r3
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418996a:	68f9      	ldr	r1, [r7, #12]
3418996c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418996e:	2034      	movs	r0, #52	@ 0x34
34189970:	fb00 f202 	mul.w	r2, r0, r2
34189974:	440a      	add	r2, r1
34189976:	3244      	adds	r2, #68	@ 0x44
34189978:	6811      	ldr	r1, [r2, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418997a:	68f8      	ldr	r0, [r7, #12]
3418997c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418997e:	2434      	movs	r4, #52	@ 0x34
34189980:	fb04 f202 	mul.w	r2, r4, r2
34189984:	4402      	add	r2, r0
34189986:	3240      	adds	r2, #64	@ 0x40
34189988:	6812      	ldr	r2, [r2, #0]
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418998a:	1a8a      	subs	r2, r1, r2
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418998c:	0852      	lsrs	r2, r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418998e:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34189992:	68bb      	ldr	r3, [r7, #8]
34189994:	4413      	add	r3, r2
34189996:	68fa      	ldr	r2, [r7, #12]
34189998:	6812      	ldr	r2, [r2, #0]
3418999a:	4611      	mov	r1, r2
3418999c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418999e:	0212      	lsls	r2, r2, #8
341899a0:	440a      	add	r2, r1
341899a2:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341899a6:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
341899a8:	6413      	str	r3, [r2, #64]	@ 0x40
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341899aa:	68fa      	ldr	r2, [r7, #12]
341899ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341899ae:	2134      	movs	r1, #52	@ 0x34
341899b0:	fb01 f303 	mul.w	r3, r1, r3
341899b4:	4413      	add	r3, r2
341899b6:	333c      	adds	r3, #60	@ 0x3c
341899b8:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
341899ba:	68f9      	ldr	r1, [r7, #12]
341899bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341899be:	2034      	movs	r0, #52	@ 0x34
341899c0:	fb00 f303 	mul.w	r3, r0, r3
341899c4:	440b      	add	r3, r1
341899c6:	3338      	adds	r3, #56	@ 0x38
341899c8:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341899ca:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
341899cc:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341899ce:	697a      	ldr	r2, [r7, #20]
341899d0:	fb02 f303 	mul.w	r3, r2, r3
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
341899d4:	68f9      	ldr	r1, [r7, #12]
341899d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341899d8:	2034      	movs	r0, #52	@ 0x34
341899da:	fb00 f202 	mul.w	r2, r0, r2
341899de:	440a      	add	r2, r1
341899e0:	3244      	adds	r2, #68	@ 0x44
341899e2:	6811      	ldr	r1, [r2, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341899e4:	68f8      	ldr	r0, [r7, #12]
341899e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341899e8:	2434      	movs	r4, #52	@ 0x34
341899ea:	fb04 f202 	mul.w	r2, r4, r2
341899ee:	4402      	add	r2, r0
341899f0:	3240      	adds	r2, #64	@ 0x40
341899f2:	6812      	ldr	r2, [r2, #0]
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
341899f4:	1a8a      	subs	r2, r1, r2
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341899f6:	0852      	lsrs	r2, r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
341899f8:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
341899fc:	687b      	ldr	r3, [r7, #4]
341899fe:	4413      	add	r3, r2
34189a00:	68fa      	ldr	r2, [r7, #12]
34189a02:	6812      	ldr	r2, [r2, #0]
34189a04:	4611      	mov	r1, r2
34189a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189a08:	0212      	lsls	r2, r2, #8
34189a0a:	440a      	add	r2, r1
34189a0c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34189a10:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34189a12:	6453      	str	r3, [r2, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34189a14:	68fa      	ldr	r2, [r7, #12]
34189a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189a18:	2134      	movs	r1, #52	@ 0x34
34189a1a:	fb01 f303 	mul.w	r3, r1, r3
34189a1e:	4413      	add	r3, r2
34189a20:	3360      	adds	r3, #96	@ 0x60
34189a22:	681b      	ldr	r3, [r3, #0]
34189a24:	085b      	lsrs	r3, r3, #1
34189a26:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
34189a2a:	697a      	ldr	r2, [r7, #20]
34189a2c:	fb02 f303 	mul.w	r3, r2, r3
                                              << 16U) |
34189a30:	041a      	lsls	r2, r3, #16
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189a32:	68f9      	ldr	r1, [r7, #12]
34189a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189a36:	2034      	movs	r0, #52	@ 0x34
34189a38:	fb00 f303 	mul.w	r3, r0, r3
34189a3c:	440b      	add	r3, r1
34189a3e:	333c      	adds	r3, #60	@ 0x3c
34189a40:	6819      	ldr	r1, [r3, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34189a42:	68f8      	ldr	r0, [r7, #12]
34189a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189a46:	2434      	movs	r4, #52	@ 0x34
34189a48:	fb04 f303 	mul.w	r3, r4, r3
34189a4c:	4403      	add	r3, r0
34189a4e:	3338      	adds	r3, #56	@ 0x38
34189a50:	681b      	ldr	r3, [r3, #0]
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189a52:	1acb      	subs	r3, r1, r3
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34189a54:	085b      	lsrs	r3, r3, #1
34189a56:	6979      	ldr	r1, [r7, #20]
34189a58:	fb01 f303 	mul.w	r3, r1, r3
34189a5c:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34189a5e:	68f9      	ldr	r1, [r7, #12]
34189a60:	6809      	ldr	r1, [r1, #0]
34189a62:	4608      	mov	r0, r1
34189a64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34189a66:	0209      	lsls	r1, r1, #8
34189a68:	4401      	add	r1, r0
34189a6a:	f501 7180 	add.w	r1, r1, #256	@ 0x100
                                              << 16U) |
34189a6e:	4313      	orrs	r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34189a70:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR &= ~(LTDC_L1AFBLNR_AFBLNBR);
34189a72:	68fb      	ldr	r3, [r7, #12]
34189a74:	681b      	ldr	r3, [r3, #0]
34189a76:	461a      	mov	r2, r3
34189a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189a7a:	021b      	lsls	r3, r3, #8
34189a7c:	4413      	add	r3, r2
34189a7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189a84:	68fa      	ldr	r2, [r7, #12]
34189a86:	6812      	ldr	r2, [r2, #0]
34189a88:	4611      	mov	r1, r2
34189a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189a8c:	0212      	lsls	r2, r2, #8
34189a8e:	440a      	add	r2, r1
34189a90:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34189a94:	0c1b      	lsrs	r3, r3, #16
34189a96:	041b      	lsls	r3, r3, #16
34189a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34189a9a:	68fa      	ldr	r2, [r7, #12]
34189a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189a9e:	2134      	movs	r1, #52	@ 0x34
34189aa0:	fb01 f303 	mul.w	r3, r1, r3
34189aa4:	4413      	add	r3, r2
34189aa6:	3364      	adds	r3, #100	@ 0x64
34189aa8:	681b      	ldr	r3, [r3, #0]
34189aaa:	68fa      	ldr	r2, [r7, #12]
34189aac:	6812      	ldr	r2, [r2, #0]
34189aae:	4611      	mov	r1, r2
34189ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189ab2:	0212      	lsls	r2, r2, #8
34189ab4:	440a      	add	r2, r1
34189ab6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34189aba:	085b      	lsrs	r3, r3, #1
34189abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34189abe:	bf00      	nop
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34189ac0:	68fa      	ldr	r2, [r7, #12]
34189ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189ac4:	2134      	movs	r1, #52	@ 0x34
34189ac6:	fb01 f303 	mul.w	r3, r1, r3
34189aca:	4413      	add	r3, r2
34189acc:	3360      	adds	r3, #96	@ 0x60
34189ace:	681b      	ldr	r3, [r3, #0]
34189ad0:	697a      	ldr	r2, [r7, #20]
34189ad2:	fb02 f303 	mul.w	r3, r2, r3
34189ad6:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
34189ada:	041a      	lsls	r2, r3, #16
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189adc:	68f9      	ldr	r1, [r7, #12]
34189ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189ae0:	2034      	movs	r0, #52	@ 0x34
34189ae2:	fb00 f303 	mul.w	r3, r0, r3
34189ae6:	440b      	add	r3, r1
34189ae8:	333c      	adds	r3, #60	@ 0x3c
34189aea:	6819      	ldr	r1, [r3, #0]
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
34189aec:	68f8      	ldr	r0, [r7, #12]
34189aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189af0:	2434      	movs	r4, #52	@ 0x34
34189af2:	fb04 f303 	mul.w	r3, r4, r3
34189af6:	4403      	add	r3, r0
34189af8:	3338      	adds	r3, #56	@ 0x38
34189afa:	681b      	ldr	r3, [r3, #0]
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34189afc:	1acb      	subs	r3, r1, r3
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
34189afe:	6979      	ldr	r1, [r7, #20]
34189b00:	fb01 f303 	mul.w	r3, r1, r3
34189b04:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34189b06:	68f9      	ldr	r1, [r7, #12]
34189b08:	6809      	ldr	r1, [r1, #0]
34189b0a:	4608      	mov	r0, r1
34189b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34189b0e:	0209      	lsls	r1, r1, #8
34189b10:	4401      	add	r1, r0
34189b12:	f501 7180 	add.w	r1, r1, #256	@ 0x100
34189b16:	4313      	orrs	r3, r2
34189b18:	638b      	str	r3, [r1, #56]	@ 0x38
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34189b1a:	68fb      	ldr	r3, [r7, #12]
34189b1c:	681b      	ldr	r3, [r3, #0]
34189b1e:	461a      	mov	r2, r3
34189b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189b22:	021b      	lsls	r3, r3, #8
34189b24:	4413      	add	r3, r2
34189b26:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189b2a:	68db      	ldr	r3, [r3, #12]
34189b2c:	68fa      	ldr	r2, [r7, #12]
34189b2e:	6812      	ldr	r2, [r2, #0]
34189b30:	4611      	mov	r1, r2
34189b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34189b34:	0212      	lsls	r2, r2, #8
34189b36:	440a      	add	r2, r1
34189b38:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34189b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34189b40:	f043 0301 	orr.w	r3, r3, #1
34189b44:	60d3      	str	r3, [r2, #12]
}
34189b46:	bf00      	nop
34189b48:	371c      	adds	r7, #28
34189b4a:	46bd      	mov	sp, r7
34189b4c:	bcb0      	pop	{r4, r5, r7}
34189b4e:	4770      	bx	lr

34189b50 <LTDC_SetCompositionConfig>:
  *                 - Other layer indices as defined by the hardware and used within the driver.
  *
  * @note This function is intended for internal use within the LTDC driver and does not return a value.
 */
static void LTDC_SetCompositionConfig(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
34189b50:	b480      	push	{r7}
34189b52:	b087      	sub	sp, #28
34189b54:	af00      	add	r7, sp, #0
34189b56:	6078      	str	r0, [r7, #4]
34189b58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the default color values */
  tmp = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Green) << 8U);
34189b5a:	687a      	ldr	r2, [r7, #4]
34189b5c:	683b      	ldr	r3, [r7, #0]
34189b5e:	2134      	movs	r1, #52	@ 0x34
34189b60:	fb01 f303 	mul.w	r3, r1, r3
34189b64:	4413      	add	r3, r2
34189b66:	3369      	adds	r3, #105	@ 0x69
34189b68:	781b      	ldrb	r3, [r3, #0]
34189b6a:	021b      	lsls	r3, r3, #8
34189b6c:	617b      	str	r3, [r7, #20]
  tmp1 = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Red) << 16U);
34189b6e:	687a      	ldr	r2, [r7, #4]
34189b70:	683b      	ldr	r3, [r7, #0]
34189b72:	2134      	movs	r1, #52	@ 0x34
34189b74:	fb01 f303 	mul.w	r3, r1, r3
34189b78:	4413      	add	r3, r2
34189b7a:	336a      	adds	r3, #106	@ 0x6a
34189b7c:	781b      	ldrb	r3, [r3, #0]
34189b7e:	041b      	lsls	r3, r3, #16
34189b80:	613b      	str	r3, [r7, #16]
  tmp2 = (hltdc->LayerCfg[LayerIdx].Alpha0 << 24U);
34189b82:	687a      	ldr	r2, [r7, #4]
34189b84:	683b      	ldr	r3, [r7, #0]
34189b86:	2134      	movs	r1, #52	@ 0x34
34189b88:	fb01 f303 	mul.w	r3, r1, r3
34189b8c:	4413      	add	r3, r2
34189b8e:	3350      	adds	r3, #80	@ 0x50
34189b90:	681b      	ldr	r3, [r3, #0]
34189b92:	061b      	lsls	r3, r3, #24
34189b94:	60fb      	str	r3, [r7, #12]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34189b96:	687a      	ldr	r2, [r7, #4]
34189b98:	683b      	ldr	r3, [r7, #0]
34189b9a:	2134      	movs	r1, #52	@ 0x34
34189b9c:	fb01 f303 	mul.w	r3, r1, r3
34189ba0:	4413      	add	r3, r2
34189ba2:	3368      	adds	r3, #104	@ 0x68
34189ba4:	781b      	ldrb	r3, [r3, #0]
34189ba6:	461a      	mov	r2, r3
34189ba8:	697b      	ldr	r3, [r7, #20]
34189baa:	431a      	orrs	r2, r3
34189bac:	693b      	ldr	r3, [r7, #16]
34189bae:	431a      	orrs	r2, r3
34189bb0:	687b      	ldr	r3, [r7, #4]
34189bb2:	681b      	ldr	r3, [r3, #0]
34189bb4:	4619      	mov	r1, r3
34189bb6:	683b      	ldr	r3, [r7, #0]
34189bb8:	021b      	lsls	r3, r3, #8
34189bba:	440b      	add	r3, r1
34189bbc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189bc0:	4619      	mov	r1, r3
34189bc2:	68fb      	ldr	r3, [r7, #12]
34189bc4:	4313      	orrs	r3, r2
34189bc6:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
34189bc8:	687b      	ldr	r3, [r7, #4]
34189bca:	681b      	ldr	r3, [r3, #0]
34189bcc:	461a      	mov	r2, r3
34189bce:	683b      	ldr	r3, [r7, #0]
34189bd0:	021b      	lsls	r3, r3, #8
34189bd2:	4413      	add	r3, r2
34189bd4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189bd8:	6a1b      	ldr	r3, [r3, #32]
34189bda:	687a      	ldr	r2, [r7, #4]
34189bdc:	6812      	ldr	r2, [r2, #0]
34189bde:	4611      	mov	r1, r2
34189be0:	683a      	ldr	r2, [r7, #0]
34189be2:	0212      	lsls	r2, r2, #8
34189be4:	440a      	add	r2, r1
34189be6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34189bea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34189bee:	6213      	str	r3, [r2, #32]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (hltdc->LayerCfg[LayerIdx].Alpha);
34189bf0:	687b      	ldr	r3, [r7, #4]
34189bf2:	681b      	ldr	r3, [r3, #0]
34189bf4:	461a      	mov	r2, r3
34189bf6:	683b      	ldr	r3, [r7, #0]
34189bf8:	021b      	lsls	r3, r3, #8
34189bfa:	4413      	add	r3, r2
34189bfc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189c00:	4618      	mov	r0, r3
34189c02:	687a      	ldr	r2, [r7, #4]
34189c04:	683b      	ldr	r3, [r7, #0]
34189c06:	2134      	movs	r1, #52	@ 0x34
34189c08:	fb01 f303 	mul.w	r3, r1, r3
34189c0c:	4413      	add	r3, r2
34189c0e:	334c      	adds	r3, #76	@ 0x4c
34189c10:	681b      	ldr	r3, [r3, #0]
34189c12:	6203      	str	r3, [r0, #32]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BOR | LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
34189c14:	687b      	ldr	r3, [r7, #4]
34189c16:	681b      	ldr	r3, [r3, #0]
34189c18:	461a      	mov	r2, r3
34189c1a:	683b      	ldr	r3, [r7, #0]
34189c1c:	021b      	lsls	r3, r3, #8
34189c1e:	4413      	add	r3, r2
34189c20:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34189c26:	687b      	ldr	r3, [r7, #4]
34189c28:	681b      	ldr	r3, [r3, #0]
34189c2a:	4619      	mov	r1, r3
34189c2c:	683b      	ldr	r3, [r7, #0]
34189c2e:	021b      	lsls	r3, r3, #8
34189c30:	440b      	add	r3, r1
34189c32:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189c36:	4619      	mov	r1, r3
34189c38:	4b18      	ldr	r3, [pc, #96]	@ (34189c9c <LTDC_SetCompositionConfig+0x14c>)
34189c3a:	4013      	ands	r3, r2
34189c3c:	628b      	str	r3, [r1, #40]	@ 0x28
  tmp = ((uint32_t)(LTDC_LAYER(hltdc, LayerIdx)->BFCR & LTDC_LxBFCR_BOR_Msk) >> LTDC_LxBFCR_BOR_Pos) << 16U;
34189c3e:	687b      	ldr	r3, [r7, #4]
34189c40:	681b      	ldr	r3, [r3, #0]
34189c42:	461a      	mov	r2, r3
34189c44:	683b      	ldr	r3, [r7, #0]
34189c46:	021b      	lsls	r3, r3, #8
34189c48:	4413      	add	r3, r2
34189c4a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34189c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34189c54:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34189c56:	687a      	ldr	r2, [r7, #4]
34189c58:	683b      	ldr	r3, [r7, #0]
34189c5a:	2134      	movs	r1, #52	@ 0x34
34189c5c:	fb01 f303 	mul.w	r3, r1, r3
34189c60:	4413      	add	r3, r2
34189c62:	3354      	adds	r3, #84	@ 0x54
34189c64:	681a      	ldr	r2, [r3, #0]
                                       hltdc->LayerCfg[LayerIdx].BlendingFactor2 | tmp);
34189c66:	6879      	ldr	r1, [r7, #4]
34189c68:	683b      	ldr	r3, [r7, #0]
34189c6a:	2034      	movs	r0, #52	@ 0x34
34189c6c:	fb00 f303 	mul.w	r3, r0, r3
34189c70:	440b      	add	r3, r1
34189c72:	3358      	adds	r3, #88	@ 0x58
34189c74:	681b      	ldr	r3, [r3, #0]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34189c76:	431a      	orrs	r2, r3
34189c78:	687b      	ldr	r3, [r7, #4]
34189c7a:	681b      	ldr	r3, [r3, #0]
34189c7c:	4619      	mov	r1, r3
34189c7e:	683b      	ldr	r3, [r7, #0]
34189c80:	021b      	lsls	r3, r3, #8
34189c82:	440b      	add	r3, r1
34189c84:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189c88:	4619      	mov	r1, r3
                                       hltdc->LayerCfg[LayerIdx].BlendingFactor2 | tmp);
34189c8a:	697b      	ldr	r3, [r7, #20]
34189c8c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34189c8e:	628b      	str	r3, [r1, #40]	@ 0x28
}
34189c90:	bf00      	nop
34189c92:	371c      	adds	r7, #28
34189c94:	46bd      	mov	sp, r7
34189c96:	f85d 7b04 	ldr.w	r7, [sp], #4
34189c9a:	4770      	bx	lr
34189c9c:	fffef8f8 	.word	0xfffef8f8

34189ca0 <LTDC_SetPredefFormat>:
  *
  *  @note This function does not return a value as it is a static function used internally within the
  *        driver.
  */
static void LTDC_SetPredefFormat(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
34189ca0:	b480      	push	{r7}
34189ca2:	b08d      	sub	sp, #52	@ 0x34
34189ca4:	af00      	add	r7, sp, #0
34189ca6:	6078      	str	r0, [r7, #4]
34189ca8:	6039      	str	r1, [r7, #0]
  uint32_t PSIZE = 0U;
34189caa:	2300      	movs	r3, #0
34189cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t ALEN = 0U;
34189cae:	2300      	movs	r3, #0
34189cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t APOS = 0U;
34189cb2:	2300      	movs	r3, #0
34189cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t RLEN = 0U;
34189cb6:	2300      	movs	r3, #0
34189cb8:	623b      	str	r3, [r7, #32]
  uint32_t RPOS = 0U;
34189cba:	2300      	movs	r3, #0
34189cbc:	61fb      	str	r3, [r7, #28]
  uint32_t BLEN = 0U;
34189cbe:	2300      	movs	r3, #0
34189cc0:	61bb      	str	r3, [r7, #24]
  uint32_t BPOS = 0U;
34189cc2:	2300      	movs	r3, #0
34189cc4:	617b      	str	r3, [r7, #20]
  uint32_t GLEN = 0U;
34189cc6:	2300      	movs	r3, #0
34189cc8:	613b      	str	r3, [r7, #16]
  uint32_t GPOS = 0U;
34189cca:	2300      	movs	r3, #0
34189ccc:	60fb      	str	r3, [r7, #12]

  /* Specify Flex ARGB parameters according to pixel format */
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34189cce:	687a      	ldr	r2, [r7, #4]
34189cd0:	683b      	ldr	r3, [r7, #0]
34189cd2:	2134      	movs	r1, #52	@ 0x34
34189cd4:	fb01 f303 	mul.w	r3, r1, r3
34189cd8:	4413      	add	r3, r2
34189cda:	3348      	adds	r3, #72	@ 0x48
34189cdc:	681b      	ldr	r3, [r3, #0]
34189cde:	3b07      	subs	r3, #7
34189ce0:	2b04      	cmp	r3, #4
34189ce2:	d86c      	bhi.n	34189dbe <LTDC_SetPredefFormat+0x11e>
34189ce4:	a201      	add	r2, pc, #4	@ (adr r2, 34189cec <LTDC_SetPredefFormat+0x4c>)
34189ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34189cea:	bf00      	nop
34189cec:	34189d01 	.word	0x34189d01
34189cf0:	34189d27 	.word	0x34189d27
34189cf4:	34189d4d 	.word	0x34189d4d
34189cf8:	34189d73 	.word	0x34189d73
34189cfc:	34189d99 	.word	0x34189d99
  {
    case LTDC_PIXEL_FORMAT_ARGB1555:
      PSIZE = 2U;
34189d00:	2302      	movs	r3, #2
34189d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 1U;
34189d04:	2301      	movs	r3, #1
34189d06:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 15U;
34189d08:	230f      	movs	r3, #15
34189d0a:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 5U;
34189d0c:	2305      	movs	r3, #5
34189d0e:	623b      	str	r3, [r7, #32]
      RPOS = 10U;
34189d10:	230a      	movs	r3, #10
34189d12:	61fb      	str	r3, [r7, #28]
      GLEN = 5U;
34189d14:	2305      	movs	r3, #5
34189d16:	613b      	str	r3, [r7, #16]
      GPOS = 5U;
34189d18:	2305      	movs	r3, #5
34189d1a:	60fb      	str	r3, [r7, #12]
      BLEN = 5U;
34189d1c:	2305      	movs	r3, #5
34189d1e:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34189d20:	2300      	movs	r3, #0
34189d22:	617b      	str	r3, [r7, #20]
      break;
34189d24:	e04c      	b.n	34189dc0 <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_ARGB4444:
      PSIZE = 2U;
34189d26:	2302      	movs	r3, #2
34189d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 4U;
34189d2a:	2304      	movs	r3, #4
34189d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 12U;
34189d2e:	230c      	movs	r3, #12
34189d30:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 4U;
34189d32:	2304      	movs	r3, #4
34189d34:	623b      	str	r3, [r7, #32]
      RPOS = 8U;
34189d36:	2308      	movs	r3, #8
34189d38:	61fb      	str	r3, [r7, #28]
      GLEN = 4U;
34189d3a:	2304      	movs	r3, #4
34189d3c:	613b      	str	r3, [r7, #16]
      GPOS = 4U;
34189d3e:	2304      	movs	r3, #4
34189d40:	60fb      	str	r3, [r7, #12]
      BLEN = 4U;
34189d42:	2304      	movs	r3, #4
34189d44:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34189d46:	2300      	movs	r3, #0
34189d48:	617b      	str	r3, [r7, #20]
      break;
34189d4a:	e039      	b.n	34189dc0 <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_L8:
      PSIZE = 1U;
34189d4c:	2301      	movs	r3, #1
34189d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 0U;
34189d50:	2300      	movs	r3, #0
34189d52:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 0U;
34189d54:	2300      	movs	r3, #0
34189d56:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 8U;
34189d58:	2308      	movs	r3, #8
34189d5a:	623b      	str	r3, [r7, #32]
      RPOS = 0U;
34189d5c:	2300      	movs	r3, #0
34189d5e:	61fb      	str	r3, [r7, #28]
      GLEN = 8U;
34189d60:	2308      	movs	r3, #8
34189d62:	613b      	str	r3, [r7, #16]
      GPOS = 0U;
34189d64:	2300      	movs	r3, #0
34189d66:	60fb      	str	r3, [r7, #12]
      BLEN = 8U;
34189d68:	2308      	movs	r3, #8
34189d6a:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34189d6c:	2300      	movs	r3, #0
34189d6e:	617b      	str	r3, [r7, #20]
      break;
34189d70:	e026      	b.n	34189dc0 <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_AL44:
      PSIZE = 1U;
34189d72:	2301      	movs	r3, #1
34189d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 4U;
34189d76:	2304      	movs	r3, #4
34189d78:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 4U;
34189d7a:	2304      	movs	r3, #4
34189d7c:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 4U;
34189d7e:	2304      	movs	r3, #4
34189d80:	623b      	str	r3, [r7, #32]
      RPOS = 0U;
34189d82:	2300      	movs	r3, #0
34189d84:	61fb      	str	r3, [r7, #28]
      GLEN = 4U;
34189d86:	2304      	movs	r3, #4
34189d88:	613b      	str	r3, [r7, #16]
      GPOS = 0U;
34189d8a:	2300      	movs	r3, #0
34189d8c:	60fb      	str	r3, [r7, #12]
      BLEN = 4U;
34189d8e:	2304      	movs	r3, #4
34189d90:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34189d92:	2300      	movs	r3, #0
34189d94:	617b      	str	r3, [r7, #20]
      break;
34189d96:	e013      	b.n	34189dc0 <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_AL88:
      PSIZE = 2U;
34189d98:	2302      	movs	r3, #2
34189d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 8U;
34189d9c:	2308      	movs	r3, #8
34189d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 8U;
34189da0:	2308      	movs	r3, #8
34189da2:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 8U;
34189da4:	2308      	movs	r3, #8
34189da6:	623b      	str	r3, [r7, #32]
      RPOS = 0U;
34189da8:	2300      	movs	r3, #0
34189daa:	61fb      	str	r3, [r7, #28]
      GLEN = 8U;
34189dac:	2308      	movs	r3, #8
34189dae:	613b      	str	r3, [r7, #16]
      GPOS = 0U;
34189db0:	2300      	movs	r3, #0
34189db2:	60fb      	str	r3, [r7, #12]
      BLEN = 8U;
34189db4:	2308      	movs	r3, #8
34189db6:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34189db8:	2300      	movs	r3, #0
34189dba:	617b      	str	r3, [r7, #20]
      break;
34189dbc:	e000      	b.n	34189dc0 <LTDC_SetPredefFormat+0x120>
    default:
      break;
34189dbe:	bf00      	nop
  }

  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34189dc0:	687a      	ldr	r2, [r7, #4]
34189dc2:	683b      	ldr	r3, [r7, #0]
34189dc4:	2134      	movs	r1, #52	@ 0x34
34189dc6:	fb01 f303 	mul.w	r3, r1, r3
34189dca:	4413      	add	r3, r2
34189dcc:	3348      	adds	r3, #72	@ 0x48
34189dce:	681b      	ldr	r3, [r3, #0]
34189dd0:	2b06      	cmp	r3, #6
34189dd2:	d903      	bls.n	34189ddc <LTDC_SetPredefFormat+0x13c>
34189dd4:	3b07      	subs	r3, #7
34189dd6:	2b04      	cmp	r3, #4
34189dd8:	d860      	bhi.n	34189e9c <LTDC_SetPredefFormat+0x1fc>
34189dda:	e028      	b.n	34189e2e <LTDC_SetPredefFormat+0x18e>
    case LTDC_PIXEL_FORMAT_RGBA8888:
    case LTDC_PIXEL_FORMAT_BGRA8888:
    case LTDC_PIXEL_FORMAT_RGB565:
    case LTDC_PIXEL_FORMAT_BGR565:
    case LTDC_PIXEL_FORMAT_RGB888:
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = (hltdc->LayerCfg[LayerIdx].PixelFormat);
34189ddc:	687b      	ldr	r3, [r7, #4]
34189dde:	681b      	ldr	r3, [r3, #0]
34189de0:	461a      	mov	r2, r3
34189de2:	683b      	ldr	r3, [r7, #0]
34189de4:	021b      	lsls	r3, r3, #8
34189de6:	4413      	add	r3, r2
34189de8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189dec:	4618      	mov	r0, r3
34189dee:	687a      	ldr	r2, [r7, #4]
34189df0:	683b      	ldr	r3, [r7, #0]
34189df2:	2134      	movs	r1, #52	@ 0x34
34189df4:	fb01 f303 	mul.w	r3, r1, r3
34189df8:	4413      	add	r3, r2
34189dfa:	3348      	adds	r3, #72	@ 0x48
34189dfc:	681b      	ldr	r3, [r3, #0]
34189dfe:	61c3      	str	r3, [r0, #28]
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = 0U;
34189e00:	687b      	ldr	r3, [r7, #4]
34189e02:	681b      	ldr	r3, [r3, #0]
34189e04:	461a      	mov	r2, r3
34189e06:	683b      	ldr	r3, [r7, #0]
34189e08:	021b      	lsls	r3, r3, #8
34189e0a:	4413      	add	r3, r2
34189e0c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189e10:	461a      	mov	r2, r3
34189e12:	2300      	movs	r3, #0
34189e14:	6753      	str	r3, [r2, #116]	@ 0x74
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = 0U;
34189e16:	687b      	ldr	r3, [r7, #4]
34189e18:	681b      	ldr	r3, [r3, #0]
34189e1a:	461a      	mov	r2, r3
34189e1c:	683b      	ldr	r3, [r7, #0]
34189e1e:	021b      	lsls	r3, r3, #8
34189e20:	4413      	add	r3, r2
34189e22:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189e26:	461a      	mov	r2, r3
34189e28:	2300      	movs	r3, #0
34189e2a:	6793      	str	r3, [r2, #120]	@ 0x78
      break;
34189e2c:	e037      	b.n	34189e9e <LTDC_SetPredefFormat+0x1fe>
    case LTDC_PIXEL_FORMAT_ARGB1555:
    case LTDC_PIXEL_FORMAT_ARGB4444:
    case LTDC_PIXEL_FORMAT_L8:
    case LTDC_PIXEL_FORMAT_AL44:
    case LTDC_PIXEL_FORMAT_AL88:
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
34189e2e:	687b      	ldr	r3, [r7, #4]
34189e30:	681b      	ldr	r3, [r3, #0]
34189e32:	461a      	mov	r2, r3
34189e34:	683b      	ldr	r3, [r7, #0]
34189e36:	021b      	lsls	r3, r3, #8
34189e38:	4413      	add	r3, r2
34189e3a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189e3e:	461a      	mov	r2, r3
34189e40:	2307      	movs	r3, #7
34189e42:	61d3      	str	r3, [r2, #28]
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34189e44:	6a3b      	ldr	r3, [r7, #32]
34189e46:	039a      	lsls	r2, r3, #14
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
34189e48:	69fb      	ldr	r3, [r7, #28]
34189e4a:	025b      	lsls	r3, r3, #9
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34189e4c:	441a      	add	r2, r3
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
34189e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189e50:	015b      	lsls	r3, r3, #5
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
34189e52:	441a      	add	r2, r3
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34189e54:	687b      	ldr	r3, [r7, #4]
34189e56:	681b      	ldr	r3, [r3, #0]
34189e58:	4619      	mov	r1, r3
34189e5a:	683b      	ldr	r3, [r7, #0]
34189e5c:	021b      	lsls	r3, r3, #8
34189e5e:	440b      	add	r3, r1
34189e60:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189e64:	4619      	mov	r1, r3
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
34189e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34189e68:	4413      	add	r3, r2
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34189e6a:	674b      	str	r3, [r1, #116]	@ 0x74
                                           APOS;
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34189e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34189e6e:	049a      	lsls	r2, r3, #18
                                           (BLEN << LTDC_LxFPF1R_BLEN_Pos)  +
34189e70:	69bb      	ldr	r3, [r7, #24]
34189e72:	039b      	lsls	r3, r3, #14
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34189e74:	441a      	add	r2, r3
                                           (BPOS << LTDC_LxFPF1R_BPOS_Pos) +
34189e76:	697b      	ldr	r3, [r7, #20]
34189e78:	025b      	lsls	r3, r3, #9
                                           (BLEN << LTDC_LxFPF1R_BLEN_Pos)  +
34189e7a:	441a      	add	r2, r3
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
34189e7c:	693b      	ldr	r3, [r7, #16]
34189e7e:	015b      	lsls	r3, r3, #5
                                           (BPOS << LTDC_LxFPF1R_BPOS_Pos) +
34189e80:	441a      	add	r2, r3
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34189e82:	687b      	ldr	r3, [r7, #4]
34189e84:	681b      	ldr	r3, [r3, #0]
34189e86:	4619      	mov	r1, r3
34189e88:	683b      	ldr	r3, [r7, #0]
34189e8a:	021b      	lsls	r3, r3, #8
34189e8c:	440b      	add	r3, r1
34189e8e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34189e92:	4619      	mov	r1, r3
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
34189e94:	68fb      	ldr	r3, [r7, #12]
34189e96:	4413      	add	r3, r2
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34189e98:	678b      	str	r3, [r1, #120]	@ 0x78
                                           GPOS;
      break;
34189e9a:	e000      	b.n	34189e9e <LTDC_SetPredefFormat+0x1fe>
    default:
      break;
34189e9c:	bf00      	nop
  }
}
34189e9e:	bf00      	nop
34189ea0:	3734      	adds	r7, #52	@ 0x34
34189ea2:	46bd      	mov	sp, r7
34189ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
34189ea8:	4770      	bx	lr
34189eaa:	bf00      	nop

34189eac <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
34189eac:	b580      	push	{r7, lr}
34189eae:	b084      	sub	sp, #16
34189eb0:	af00      	add	r7, sp, #0
34189eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
34189eb4:	4b10      	ldr	r3, [pc, #64]	@ (34189ef8 <HAL_PWREx_ConfigSupply+0x4c>)
34189eb6:	681b      	ldr	r3, [r3, #0]
34189eb8:	f023 0204 	bic.w	r2, r3, #4
34189ebc:	490e      	ldr	r1, [pc, #56]	@ (34189ef8 <HAL_PWREx_ConfigSupply+0x4c>)
34189ebe:	687b      	ldr	r3, [r7, #4]
34189ec0:	4313      	orrs	r3, r2
34189ec2:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34189ec4:	f7fa faf2 	bl	341844ac <HAL_GetTick>
34189ec8:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34189eca:	e009      	b.n	34189ee0 <HAL_PWREx_ConfigSupply+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
34189ecc:	f7fa faee 	bl	341844ac <HAL_GetTick>
34189ed0:	4602      	mov	r2, r0
34189ed2:	68fb      	ldr	r3, [r7, #12]
34189ed4:	1ad3      	subs	r3, r2, r3
34189ed6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34189eda:	d901      	bls.n	34189ee0 <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_ERROR;
34189edc:	2301      	movs	r3, #1
34189ede:	e006      	b.n	34189eee <HAL_PWREx_ConfigSupply+0x42>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34189ee0:	4b05      	ldr	r3, [pc, #20]	@ (34189ef8 <HAL_PWREx_ConfigSupply+0x4c>)
34189ee2:	6a1b      	ldr	r3, [r3, #32]
34189ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34189ee8:	2b00      	cmp	r3, #0
34189eea:	d0ef      	beq.n	34189ecc <HAL_PWREx_ConfigSupply+0x20>
    }
  }

  return HAL_OK;
34189eec:	2300      	movs	r3, #0
}
34189eee:	4618      	mov	r0, r3
34189ef0:	3710      	adds	r7, #16
34189ef2:	46bd      	mov	sp, r7
34189ef4:	bd80      	pop	{r7, pc}
34189ef6:	bf00      	nop
34189ef8:	56024800 	.word	0x56024800

34189efc <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
34189efc:	b480      	push	{r7}
34189efe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34189f00:	4b05      	ldr	r3, [pc, #20]	@ (34189f18 <HAL_PWREx_EnableVddIO2+0x1c>)
34189f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34189f04:	4a04      	ldr	r2, [pc, #16]	@ (34189f18 <HAL_PWREx_EnableVddIO2+0x1c>)
34189f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34189f0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34189f0c:	bf00      	nop
34189f0e:	46bd      	mov	sp, r7
34189f10:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f14:	4770      	bx	lr
34189f16:	bf00      	nop
34189f18:	56024800 	.word	0x56024800

34189f1c <HAL_PWREx_EnableVddIO4>:
  * @brief  Enable VDDIO4 supply valid.
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
34189f1c:	b480      	push	{r7}
34189f1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
34189f20:	4b05      	ldr	r3, [pc, #20]	@ (34189f38 <HAL_PWREx_EnableVddIO4+0x1c>)
34189f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34189f24:	4a04      	ldr	r2, [pc, #16]	@ (34189f38 <HAL_PWREx_EnableVddIO4+0x1c>)
34189f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34189f2a:	6353      	str	r3, [r2, #52]	@ 0x34
}
34189f2c:	bf00      	nop
34189f2e:	46bd      	mov	sp, r7
34189f30:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f34:	4770      	bx	lr
34189f36:	bf00      	nop
34189f38:	56024800 	.word	0x56024800

34189f3c <HAL_RAMCFG_EnableAXISRAM>:
  *                   contains the configuration information for the
  *                   specified RAMCFG instance.
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
34189f3c:	b480      	push	{r7}
34189f3e:	b083      	sub	sp, #12
34189f40:	af00      	add	r7, sp, #0
34189f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34189f44:	687b      	ldr	r3, [r7, #4]
34189f46:	681b      	ldr	r3, [r3, #0]
34189f48:	681a      	ldr	r2, [r3, #0]
34189f4a:	687b      	ldr	r3, [r7, #4]
34189f4c:	681b      	ldr	r3, [r3, #0]
34189f4e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
34189f52:	601a      	str	r2, [r3, #0]
}
34189f54:	bf00      	nop
34189f56:	370c      	adds	r7, #12
34189f58:	46bd      	mov	sp, r7
34189f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f5e:	4770      	bx	lr

34189f60 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
34189f60:	b480      	push	{r7}
34189f62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34189f64:	4b06      	ldr	r3, [pc, #24]	@ (34189f80 <LL_RCC_HSE_IsReady+0x20>)
34189f66:	685b      	ldr	r3, [r3, #4]
34189f68:	f003 0310 	and.w	r3, r3, #16
34189f6c:	2b00      	cmp	r3, #0
34189f6e:	d001      	beq.n	34189f74 <LL_RCC_HSE_IsReady+0x14>
34189f70:	2301      	movs	r3, #1
34189f72:	e000      	b.n	34189f76 <LL_RCC_HSE_IsReady+0x16>
34189f74:	2300      	movs	r3, #0
}
34189f76:	4618      	mov	r0, r3
34189f78:	46bd      	mov	sp, r7
34189f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f7e:	4770      	bx	lr
34189f80:	56028000 	.word	0x56028000

34189f84 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
34189f84:	b480      	push	{r7}
34189f86:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34189f88:	4b04      	ldr	r3, [pc, #16]	@ (34189f9c <LL_RCC_HSI_Enable+0x18>)
34189f8a:	2208      	movs	r2, #8
34189f8c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34189f90:	bf00      	nop
34189f92:	46bd      	mov	sp, r7
34189f94:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f98:	4770      	bx	lr
34189f9a:	bf00      	nop
34189f9c:	56028000 	.word	0x56028000

34189fa0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
34189fa0:	b480      	push	{r7}
34189fa2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34189fa4:	4b05      	ldr	r3, [pc, #20]	@ (34189fbc <LL_RCC_HSI_Disable+0x1c>)
34189fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34189faa:	461a      	mov	r2, r3
34189fac:	2308      	movs	r3, #8
34189fae:	6013      	str	r3, [r2, #0]
}
34189fb0:	bf00      	nop
34189fb2:	46bd      	mov	sp, r7
34189fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
34189fb8:	4770      	bx	lr
34189fba:	bf00      	nop
34189fbc:	56028000 	.word	0x56028000

34189fc0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
34189fc0:	b480      	push	{r7}
34189fc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34189fc4:	4b06      	ldr	r3, [pc, #24]	@ (34189fe0 <LL_RCC_HSI_IsReady+0x20>)
34189fc6:	685b      	ldr	r3, [r3, #4]
34189fc8:	f003 0308 	and.w	r3, r3, #8
34189fcc:	2b00      	cmp	r3, #0
34189fce:	d001      	beq.n	34189fd4 <LL_RCC_HSI_IsReady+0x14>
34189fd0:	2301      	movs	r3, #1
34189fd2:	e000      	b.n	34189fd6 <LL_RCC_HSI_IsReady+0x16>
34189fd4:	2300      	movs	r3, #0
}
34189fd6:	4618      	mov	r0, r3
34189fd8:	46bd      	mov	sp, r7
34189fda:	f85d 7b04 	ldr.w	r7, [sp], #4
34189fde:	4770      	bx	lr
34189fe0:	56028000 	.word	0x56028000

34189fe4 <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
34189fe4:	b480      	push	{r7}
34189fe6:	b083      	sub	sp, #12
34189fe8:	af00      	add	r7, sp, #0
34189fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34189fec:	4b06      	ldr	r3, [pc, #24]	@ (3418a008 <LL_RCC_HSI_SetDivider+0x24>)
34189fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34189ff0:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34189ff4:	4904      	ldr	r1, [pc, #16]	@ (3418a008 <LL_RCC_HSI_SetDivider+0x24>)
34189ff6:	687b      	ldr	r3, [r7, #4]
34189ff8:	4313      	orrs	r3, r2
34189ffa:	648b      	str	r3, [r1, #72]	@ 0x48
}
34189ffc:	bf00      	nop
34189ffe:	370c      	adds	r7, #12
3418a000:	46bd      	mov	sp, r7
3418a002:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a006:	4770      	bx	lr
3418a008:	56028000 	.word	0x56028000

3418a00c <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
3418a00c:	b480      	push	{r7}
3418a00e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3418a010:	4b04      	ldr	r3, [pc, #16]	@ (3418a024 <LL_RCC_HSI_GetDivider+0x18>)
3418a012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418a014:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
3418a018:	4618      	mov	r0, r3
3418a01a:	46bd      	mov	sp, r7
3418a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a020:	4770      	bx	lr
3418a022:	bf00      	nop
3418a024:	56028000 	.word	0x56028000

3418a028 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
3418a028:	b480      	push	{r7}
3418a02a:	b083      	sub	sp, #12
3418a02c:	af00      	add	r7, sp, #0
3418a02e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
3418a030:	4b07      	ldr	r3, [pc, #28]	@ (3418a050 <LL_RCC_HSI_SetCalibTrimming+0x28>)
3418a032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418a034:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
3418a038:	687b      	ldr	r3, [r7, #4]
3418a03a:	041b      	lsls	r3, r3, #16
3418a03c:	4904      	ldr	r1, [pc, #16]	@ (3418a050 <LL_RCC_HSI_SetCalibTrimming+0x28>)
3418a03e:	4313      	orrs	r3, r2
3418a040:	648b      	str	r3, [r1, #72]	@ 0x48
}
3418a042:	bf00      	nop
3418a044:	370c      	adds	r7, #12
3418a046:	46bd      	mov	sp, r7
3418a048:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a04c:	4770      	bx	lr
3418a04e:	bf00      	nop
3418a050:	56028000 	.word	0x56028000

3418a054 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
3418a054:	b480      	push	{r7}
3418a056:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
3418a058:	4b04      	ldr	r3, [pc, #16]	@ (3418a06c <LL_RCC_MSI_Enable+0x18>)
3418a05a:	2204      	movs	r2, #4
3418a05c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
3418a060:	bf00      	nop
3418a062:	46bd      	mov	sp, r7
3418a064:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a068:	4770      	bx	lr
3418a06a:	bf00      	nop
3418a06c:	56028000 	.word	0x56028000

3418a070 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
3418a070:	b480      	push	{r7}
3418a072:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
3418a074:	4b05      	ldr	r3, [pc, #20]	@ (3418a08c <LL_RCC_MSI_Disable+0x1c>)
3418a076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418a07a:	461a      	mov	r2, r3
3418a07c:	2304      	movs	r3, #4
3418a07e:	6013      	str	r3, [r2, #0]
}
3418a080:	bf00      	nop
3418a082:	46bd      	mov	sp, r7
3418a084:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a088:	4770      	bx	lr
3418a08a:	bf00      	nop
3418a08c:	56028000 	.word	0x56028000

3418a090 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
3418a090:	b480      	push	{r7}
3418a092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3418a094:	4b06      	ldr	r3, [pc, #24]	@ (3418a0b0 <LL_RCC_MSI_IsReady+0x20>)
3418a096:	685b      	ldr	r3, [r3, #4]
3418a098:	f003 0304 	and.w	r3, r3, #4
3418a09c:	2b00      	cmp	r3, #0
3418a09e:	d001      	beq.n	3418a0a4 <LL_RCC_MSI_IsReady+0x14>
3418a0a0:	2301      	movs	r3, #1
3418a0a2:	e000      	b.n	3418a0a6 <LL_RCC_MSI_IsReady+0x16>
3418a0a4:	2300      	movs	r3, #0
}
3418a0a6:	4618      	mov	r0, r3
3418a0a8:	46bd      	mov	sp, r7
3418a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a0ae:	4770      	bx	lr
3418a0b0:	56028000 	.word	0x56028000

3418a0b4 <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
3418a0b4:	b480      	push	{r7}
3418a0b6:	b083      	sub	sp, #12
3418a0b8:	af00      	add	r7, sp, #0
3418a0ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
3418a0bc:	4b06      	ldr	r3, [pc, #24]	@ (3418a0d8 <LL_RCC_MSI_SetFrequency+0x24>)
3418a0be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418a0c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3418a0c4:	4904      	ldr	r1, [pc, #16]	@ (3418a0d8 <LL_RCC_MSI_SetFrequency+0x24>)
3418a0c6:	687b      	ldr	r3, [r7, #4]
3418a0c8:	4313      	orrs	r3, r2
3418a0ca:	644b      	str	r3, [r1, #68]	@ 0x44
}
3418a0cc:	bf00      	nop
3418a0ce:	370c      	adds	r7, #12
3418a0d0:	46bd      	mov	sp, r7
3418a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a0d6:	4770      	bx	lr
3418a0d8:	56028000 	.word	0x56028000

3418a0dc <LL_RCC_MSI_GetFrequency>:
  * @retval can be one of the following values:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetFrequency(void)
{
3418a0dc:	b480      	push	{r7}
3418a0de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3418a0e0:	4b04      	ldr	r3, [pc, #16]	@ (3418a0f4 <LL_RCC_MSI_GetFrequency+0x18>)
3418a0e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418a0e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3418a0e8:	4618      	mov	r0, r3
3418a0ea:	46bd      	mov	sp, r7
3418a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a0f0:	4770      	bx	lr
3418a0f2:	bf00      	nop
3418a0f4:	56028000 	.word	0x56028000

3418a0f8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
3418a0f8:	b480      	push	{r7}
3418a0fa:	b083      	sub	sp, #12
3418a0fc:	af00      	add	r7, sp, #0
3418a0fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
3418a100:	4b07      	ldr	r3, [pc, #28]	@ (3418a120 <LL_RCC_MSI_SetCalibTrimming+0x28>)
3418a102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418a104:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
3418a108:	687b      	ldr	r3, [r7, #4]
3418a10a:	041b      	lsls	r3, r3, #16
3418a10c:	4904      	ldr	r1, [pc, #16]	@ (3418a120 <LL_RCC_MSI_SetCalibTrimming+0x28>)
3418a10e:	4313      	orrs	r3, r2
3418a110:	644b      	str	r3, [r1, #68]	@ 0x44
}
3418a112:	bf00      	nop
3418a114:	370c      	adds	r7, #12
3418a116:	46bd      	mov	sp, r7
3418a118:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a11c:	4770      	bx	lr
3418a11e:	bf00      	nop
3418a120:	56028000 	.word	0x56028000

3418a124 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
3418a124:	b480      	push	{r7}
3418a126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3418a128:	4b06      	ldr	r3, [pc, #24]	@ (3418a144 <LL_RCC_LSE_IsReady+0x20>)
3418a12a:	685b      	ldr	r3, [r3, #4]
3418a12c:	f003 0302 	and.w	r3, r3, #2
3418a130:	2b00      	cmp	r3, #0
3418a132:	d001      	beq.n	3418a138 <LL_RCC_LSE_IsReady+0x14>
3418a134:	2301      	movs	r3, #1
3418a136:	e000      	b.n	3418a13a <LL_RCC_LSE_IsReady+0x16>
3418a138:	2300      	movs	r3, #0
}
3418a13a:	4618      	mov	r0, r3
3418a13c:	46bd      	mov	sp, r7
3418a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a142:	4770      	bx	lr
3418a144:	56028000 	.word	0x56028000

3418a148 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
3418a148:	b480      	push	{r7}
3418a14a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
3418a14c:	4b04      	ldr	r3, [pc, #16]	@ (3418a160 <LL_RCC_LSI_Enable+0x18>)
3418a14e:	2201      	movs	r2, #1
3418a150:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
3418a154:	bf00      	nop
3418a156:	46bd      	mov	sp, r7
3418a158:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a15c:	4770      	bx	lr
3418a15e:	bf00      	nop
3418a160:	56028000 	.word	0x56028000

3418a164 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
3418a164:	b480      	push	{r7}
3418a166:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
3418a168:	4b05      	ldr	r3, [pc, #20]	@ (3418a180 <LL_RCC_LSI_Disable+0x1c>)
3418a16a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418a16e:	461a      	mov	r2, r3
3418a170:	2301      	movs	r3, #1
3418a172:	6013      	str	r3, [r2, #0]
}
3418a174:	bf00      	nop
3418a176:	46bd      	mov	sp, r7
3418a178:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a17c:	4770      	bx	lr
3418a17e:	bf00      	nop
3418a180:	56028000 	.word	0x56028000

3418a184 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
3418a184:	b480      	push	{r7}
3418a186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3418a188:	4b04      	ldr	r3, [pc, #16]	@ (3418a19c <LL_RCC_LSI_IsReady+0x18>)
3418a18a:	685b      	ldr	r3, [r3, #4]
3418a18c:	f003 0301 	and.w	r3, r3, #1
}
3418a190:	4618      	mov	r0, r3
3418a192:	46bd      	mov	sp, r7
3418a194:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a198:	4770      	bx	lr
3418a19a:	bf00      	nop
3418a19c:	56028000 	.word	0x56028000

3418a1a0 <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
3418a1a0:	b480      	push	{r7}
3418a1a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3418a1a4:	4b04      	ldr	r3, [pc, #16]	@ (3418a1b8 <LL_RCC_GetCpuClkSource+0x18>)
3418a1a6:	6a1b      	ldr	r3, [r3, #32]
3418a1a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
3418a1ac:	4618      	mov	r0, r3
3418a1ae:	46bd      	mov	sp, r7
3418a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a1b4:	4770      	bx	lr
3418a1b6:	bf00      	nop
3418a1b8:	56028000 	.word	0x56028000

3418a1bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
3418a1bc:	b480      	push	{r7}
3418a1be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3418a1c0:	4b04      	ldr	r3, [pc, #16]	@ (3418a1d4 <LL_RCC_GetSysClkSource+0x18>)
3418a1c2:	6a1b      	ldr	r3, [r3, #32]
3418a1c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418a1c8:	4618      	mov	r0, r3
3418a1ca:	46bd      	mov	sp, r7
3418a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a1d0:	4770      	bx	lr
3418a1d2:	bf00      	nop
3418a1d4:	56028000 	.word	0x56028000

3418a1d8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_32
  *         @arg @ref LL_RCC_AHB_DIV_64
  *         @arg @ref LL_RCC_AHB_DIV_128
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
3418a1d8:	b480      	push	{r7}
3418a1da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3418a1dc:	4b04      	ldr	r3, [pc, #16]	@ (3418a1f0 <LL_RCC_GetAHBPrescaler+0x18>)
3418a1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418a1e0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
3418a1e4:	4618      	mov	r0, r3
3418a1e6:	46bd      	mov	sp, r7
3418a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a1ec:	4770      	bx	lr
3418a1ee:	bf00      	nop
3418a1f0:	56028000 	.word	0x56028000

3418a1f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_32
  *         @arg @ref LL_RCC_APB1_DIV_64
  *         @arg @ref LL_RCC_APB1_DIV_128
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
3418a1f4:	b480      	push	{r7}
3418a1f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3418a1f8:	4b04      	ldr	r3, [pc, #16]	@ (3418a20c <LL_RCC_GetAPB1Prescaler+0x18>)
3418a1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418a1fc:	f003 0307 	and.w	r3, r3, #7
}
3418a200:	4618      	mov	r0, r3
3418a202:	46bd      	mov	sp, r7
3418a204:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a208:	4770      	bx	lr
3418a20a:	bf00      	nop
3418a20c:	56028000 	.word	0x56028000

3418a210 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
3418a210:	b480      	push	{r7}
3418a212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
3418a214:	4b04      	ldr	r3, [pc, #16]	@ (3418a228 <LL_RCC_PLL1_GetSource+0x18>)
3418a216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418a21a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418a21e:	4618      	mov	r0, r3
3418a220:	46bd      	mov	sp, r7
3418a222:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a226:	4770      	bx	lr
3418a228:	56028000 	.word	0x56028000

3418a22c <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
3418a22c:	b480      	push	{r7}
3418a22e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3418a230:	4b07      	ldr	r3, [pc, #28]	@ (3418a250 <LL_RCC_PLL1_IsReady+0x24>)
3418a232:	685b      	ldr	r3, [r3, #4]
3418a234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418a238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418a23c:	d101      	bne.n	3418a242 <LL_RCC_PLL1_IsReady+0x16>
3418a23e:	2301      	movs	r3, #1
3418a240:	e000      	b.n	3418a244 <LL_RCC_PLL1_IsReady+0x18>
3418a242:	2300      	movs	r3, #0
}
3418a244:	4618      	mov	r0, r3
3418a246:	46bd      	mov	sp, r7
3418a248:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a24c:	4770      	bx	lr
3418a24e:	bf00      	nop
3418a250:	56028000 	.word	0x56028000

3418a254 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
3418a254:	b480      	push	{r7}
3418a256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3418a258:	4b07      	ldr	r3, [pc, #28]	@ (3418a278 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3418a25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418a25e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418a262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418a266:	d101      	bne.n	3418a26c <LL_RCC_PLL1_IsEnabledBypass+0x18>
3418a268:	2301      	movs	r3, #1
3418a26a:	e000      	b.n	3418a26e <LL_RCC_PLL1_IsEnabledBypass+0x1a>
3418a26c:	2300      	movs	r3, #0
}
3418a26e:	4618      	mov	r0, r3
3418a270:	46bd      	mov	sp, r7
3418a272:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a276:	4770      	bx	lr
3418a278:	56028000 	.word	0x56028000

3418a27c <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
3418a27c:	b480      	push	{r7}
3418a27e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3418a280:	4b04      	ldr	r3, [pc, #16]	@ (3418a294 <LL_RCC_PLL2_GetSource+0x18>)
3418a282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418a286:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418a28a:	4618      	mov	r0, r3
3418a28c:	46bd      	mov	sp, r7
3418a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a292:	4770      	bx	lr
3418a294:	56028000 	.word	0x56028000

3418a298 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
3418a298:	b480      	push	{r7}
3418a29a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3418a29c:	4b07      	ldr	r3, [pc, #28]	@ (3418a2bc <LL_RCC_PLL2_IsReady+0x24>)
3418a29e:	685b      	ldr	r3, [r3, #4]
3418a2a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418a2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418a2a8:	d101      	bne.n	3418a2ae <LL_RCC_PLL2_IsReady+0x16>
3418a2aa:	2301      	movs	r3, #1
3418a2ac:	e000      	b.n	3418a2b0 <LL_RCC_PLL2_IsReady+0x18>
3418a2ae:	2300      	movs	r3, #0
}
3418a2b0:	4618      	mov	r0, r3
3418a2b2:	46bd      	mov	sp, r7
3418a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a2b8:	4770      	bx	lr
3418a2ba:	bf00      	nop
3418a2bc:	56028000 	.word	0x56028000

3418a2c0 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
3418a2c0:	b480      	push	{r7}
3418a2c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3418a2c4:	4b07      	ldr	r3, [pc, #28]	@ (3418a2e4 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
3418a2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418a2ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418a2ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418a2d2:	d101      	bne.n	3418a2d8 <LL_RCC_PLL2_IsEnabledBypass+0x18>
3418a2d4:	2301      	movs	r3, #1
3418a2d6:	e000      	b.n	3418a2da <LL_RCC_PLL2_IsEnabledBypass+0x1a>
3418a2d8:	2300      	movs	r3, #0
}
3418a2da:	4618      	mov	r0, r3
3418a2dc:	46bd      	mov	sp, r7
3418a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a2e2:	4770      	bx	lr
3418a2e4:	56028000 	.word	0x56028000

3418a2e8 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
3418a2e8:	b480      	push	{r7}
3418a2ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3418a2ec:	4b04      	ldr	r3, [pc, #16]	@ (3418a300 <LL_RCC_PLL3_GetSource+0x18>)
3418a2ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418a2f2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418a2f6:	4618      	mov	r0, r3
3418a2f8:	46bd      	mov	sp, r7
3418a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a2fe:	4770      	bx	lr
3418a300:	56028000 	.word	0x56028000

3418a304 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
3418a304:	b480      	push	{r7}
3418a306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418a308:	4b07      	ldr	r3, [pc, #28]	@ (3418a328 <LL_RCC_PLL3_IsReady+0x24>)
3418a30a:	685b      	ldr	r3, [r3, #4]
3418a30c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418a310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418a314:	d101      	bne.n	3418a31a <LL_RCC_PLL3_IsReady+0x16>
3418a316:	2301      	movs	r3, #1
3418a318:	e000      	b.n	3418a31c <LL_RCC_PLL3_IsReady+0x18>
3418a31a:	2300      	movs	r3, #0
}
3418a31c:	4618      	mov	r0, r3
3418a31e:	46bd      	mov	sp, r7
3418a320:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a324:	4770      	bx	lr
3418a326:	bf00      	nop
3418a328:	56028000 	.word	0x56028000

3418a32c <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
3418a32c:	b480      	push	{r7}
3418a32e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3418a330:	4b07      	ldr	r3, [pc, #28]	@ (3418a350 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3418a332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418a336:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418a33a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418a33e:	d101      	bne.n	3418a344 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3418a340:	2301      	movs	r3, #1
3418a342:	e000      	b.n	3418a346 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
3418a344:	2300      	movs	r3, #0
}
3418a346:	4618      	mov	r0, r3
3418a348:	46bd      	mov	sp, r7
3418a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a34e:	4770      	bx	lr
3418a350:	56028000 	.word	0x56028000

3418a354 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
3418a354:	b480      	push	{r7}
3418a356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3418a358:	4b04      	ldr	r3, [pc, #16]	@ (3418a36c <LL_RCC_PLL4_GetSource+0x18>)
3418a35a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418a35e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418a362:	4618      	mov	r0, r3
3418a364:	46bd      	mov	sp, r7
3418a366:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a36a:	4770      	bx	lr
3418a36c:	56028000 	.word	0x56028000

3418a370 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
3418a370:	b480      	push	{r7}
3418a372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418a374:	4b07      	ldr	r3, [pc, #28]	@ (3418a394 <LL_RCC_PLL4_IsReady+0x24>)
3418a376:	685b      	ldr	r3, [r3, #4]
3418a378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418a37c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418a380:	d101      	bne.n	3418a386 <LL_RCC_PLL4_IsReady+0x16>
3418a382:	2301      	movs	r3, #1
3418a384:	e000      	b.n	3418a388 <LL_RCC_PLL4_IsReady+0x18>
3418a386:	2300      	movs	r3, #0
}
3418a388:	4618      	mov	r0, r3
3418a38a:	46bd      	mov	sp, r7
3418a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a390:	4770      	bx	lr
3418a392:	bf00      	nop
3418a394:	56028000 	.word	0x56028000

3418a398 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
3418a398:	b480      	push	{r7}
3418a39a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418a39c:	4b07      	ldr	r3, [pc, #28]	@ (3418a3bc <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418a39e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418a3a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418a3a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418a3aa:	d101      	bne.n	3418a3b0 <LL_RCC_PLL4_IsEnabledBypass+0x18>
3418a3ac:	2301      	movs	r3, #1
3418a3ae:	e000      	b.n	3418a3b2 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
3418a3b0:	2300      	movs	r3, #0
}
3418a3b2:	4618      	mov	r0, r3
3418a3b4:	46bd      	mov	sp, r7
3418a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a3ba:	4770      	bx	lr
3418a3bc:	56028000 	.word	0x56028000

3418a3c0 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
3418a3c0:	b480      	push	{r7}
3418a3c2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
3418a3c4:	4b04      	ldr	r3, [pc, #16]	@ (3418a3d8 <LL_RCC_IC1_Enable+0x18>)
3418a3c6:	2201      	movs	r2, #1
3418a3c8:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a3cc:	bf00      	nop
3418a3ce:	46bd      	mov	sp, r7
3418a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a3d4:	4770      	bx	lr
3418a3d6:	bf00      	nop
3418a3d8:	56028000 	.word	0x56028000

3418a3dc <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
3418a3dc:	b480      	push	{r7}
3418a3de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3418a3e0:	4b04      	ldr	r3, [pc, #16]	@ (3418a3f4 <LL_RCC_IC1_GetSource+0x18>)
3418a3e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418a3e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418a3ea:	4618      	mov	r0, r3
3418a3ec:	46bd      	mov	sp, r7
3418a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a3f2:	4770      	bx	lr
3418a3f4:	56028000 	.word	0x56028000

3418a3f8 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
3418a3f8:	b480      	push	{r7}
3418a3fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
3418a3fc:	4b05      	ldr	r3, [pc, #20]	@ (3418a414 <LL_RCC_IC1_GetDivider+0x1c>)
3418a3fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418a402:	0c1b      	lsrs	r3, r3, #16
3418a404:	b2db      	uxtb	r3, r3
3418a406:	3301      	adds	r3, #1
}
3418a408:	4618      	mov	r0, r3
3418a40a:	46bd      	mov	sp, r7
3418a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a410:	4770      	bx	lr
3418a412:	bf00      	nop
3418a414:	56028000 	.word	0x56028000

3418a418 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
3418a418:	b480      	push	{r7}
3418a41a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3418a41c:	4b04      	ldr	r3, [pc, #16]	@ (3418a430 <LL_RCC_IC2_GetSource+0x18>)
3418a41e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418a422:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418a426:	4618      	mov	r0, r3
3418a428:	46bd      	mov	sp, r7
3418a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a42e:	4770      	bx	lr
3418a430:	56028000 	.word	0x56028000

3418a434 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
3418a434:	b480      	push	{r7}
3418a436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3418a438:	4b05      	ldr	r3, [pc, #20]	@ (3418a450 <LL_RCC_IC2_GetDivider+0x1c>)
3418a43a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418a43e:	0c1b      	lsrs	r3, r3, #16
3418a440:	b2db      	uxtb	r3, r3
3418a442:	3301      	adds	r3, #1
}
3418a444:	4618      	mov	r0, r3
3418a446:	46bd      	mov	sp, r7
3418a448:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a44c:	4770      	bx	lr
3418a44e:	bf00      	nop
3418a450:	56028000 	.word	0x56028000

3418a454 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
3418a454:	b480      	push	{r7}
3418a456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3418a458:	4b04      	ldr	r3, [pc, #16]	@ (3418a46c <LL_RCC_IC6_GetSource+0x18>)
3418a45a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418a45e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418a462:	4618      	mov	r0, r3
3418a464:	46bd      	mov	sp, r7
3418a466:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a46a:	4770      	bx	lr
3418a46c:	56028000 	.word	0x56028000

3418a470 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
3418a470:	b480      	push	{r7}
3418a472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3418a474:	4b04      	ldr	r3, [pc, #16]	@ (3418a488 <LL_RCC_IC11_GetSource+0x18>)
3418a476:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418a47a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418a47e:	4618      	mov	r0, r3
3418a480:	46bd      	mov	sp, r7
3418a482:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a486:	4770      	bx	lr
3418a488:	56028000 	.word	0x56028000

3418a48c <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
3418a48c:	b580      	push	{r7, lr}
3418a48e:	b0a2      	sub	sp, #136	@ 0x88
3418a490:	af00      	add	r7, sp, #0
3418a492:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
3418a494:	687b      	ldr	r3, [r7, #4]
3418a496:	2b00      	cmp	r3, #0
3418a498:	d101      	bne.n	3418a49e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
3418a49a:	2301      	movs	r3, #1
3418a49c:	e3d1      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  cpuclksrc = LL_RCC_GetCpuClkSource();
3418a49e:	f7ff fe7f 	bl	3418a1a0 <LL_RCC_GetCpuClkSource>
3418a4a2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
3418a4a6:	f7ff fe89 	bl	3418a1bc <LL_RCC_GetSysClkSource>
3418a4aa:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
3418a4ae:	f7ff feaf 	bl	3418a210 <LL_RCC_PLL1_GetSource>
3418a4b2:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
3418a4b4:	f7ff fee2 	bl	3418a27c <LL_RCC_PLL2_GetSource>
3418a4b8:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
3418a4ba:	f7ff ff15 	bl	3418a2e8 <LL_RCC_PLL3_GetSource>
3418a4be:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
3418a4c0:	f7ff ff48 	bl	3418a354 <LL_RCC_PLL4_GetSource>
3418a4c4:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
3418a4c6:	4b91      	ldr	r3, [pc, #580]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a4c8:	685b      	ldr	r3, [r3, #4]
3418a4ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
3418a4cc:	687b      	ldr	r3, [r7, #4]
3418a4ce:	681b      	ldr	r3, [r3, #0]
3418a4d0:	f003 0301 	and.w	r3, r3, #1
3418a4d4:	2b00      	cmp	r3, #0
3418a4d6:	f000 80a8 	beq.w	3418a62a <HAL_RCC_OscConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3418a4da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418a4de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418a4e2:	d028      	beq.n	3418a536 <HAL_RCC_OscConfig+0xaa>
3418a4e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418a4e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a4ec:	d023      	beq.n	3418a536 <HAL_RCC_OscConfig+0xaa>
3418a4ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418a4f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a4f4:	d104      	bne.n	3418a500 <HAL_RCC_OscConfig+0x74>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418a4f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a4f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418a4fc:	2b00      	cmp	r3, #0
3418a4fe:	d11a      	bne.n	3418a536 <HAL_RCC_OscConfig+0xaa>
3418a500:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418a502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a506:	d104      	bne.n	3418a512 <HAL_RCC_OscConfig+0x86>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418a508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a50a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418a50e:	2b00      	cmp	r3, #0
3418a510:	d111      	bne.n	3418a536 <HAL_RCC_OscConfig+0xaa>
3418a512:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418a514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a518:	d104      	bne.n	3418a524 <HAL_RCC_OscConfig+0x98>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418a51a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a51c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418a520:	2b00      	cmp	r3, #0
3418a522:	d108      	bne.n	3418a536 <HAL_RCC_OscConfig+0xaa>
3418a524:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418a526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a52a:	d10a      	bne.n	3418a542 <HAL_RCC_OscConfig+0xb6>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418a52c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a52e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418a532:	2b00      	cmp	r3, #0
3418a534:	d005      	beq.n	3418a542 <HAL_RCC_OscConfig+0xb6>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
3418a536:	687b      	ldr	r3, [r7, #4]
3418a538:	685b      	ldr	r3, [r3, #4]
3418a53a:	2b00      	cmp	r3, #0
3418a53c:	d175      	bne.n	3418a62a <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
3418a53e:	2301      	movs	r3, #1
3418a540:	e37f      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3418a542:	687b      	ldr	r3, [r7, #4]
3418a544:	685b      	ldr	r3, [r3, #4]
3418a546:	2b10      	cmp	r3, #16
3418a548:	d104      	bne.n	3418a554 <HAL_RCC_OscConfig+0xc8>
3418a54a:	4b70      	ldr	r3, [pc, #448]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a54c:	2210      	movs	r2, #16
3418a54e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418a552:	e043      	b.n	3418a5dc <HAL_RCC_OscConfig+0x150>
3418a554:	687b      	ldr	r3, [r7, #4]
3418a556:	685b      	ldr	r3, [r3, #4]
3418a558:	2b00      	cmp	r3, #0
3418a55a:	d10c      	bne.n	3418a576 <HAL_RCC_OscConfig+0xea>
3418a55c:	4b6b      	ldr	r3, [pc, #428]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a55e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418a562:	461a      	mov	r2, r3
3418a564:	2310      	movs	r3, #16
3418a566:	6013      	str	r3, [r2, #0]
3418a568:	4b68      	ldr	r3, [pc, #416]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a56a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418a56c:	4a67      	ldr	r2, [pc, #412]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a56e:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
3418a572:	6553      	str	r3, [r2, #84]	@ 0x54
3418a574:	e032      	b.n	3418a5dc <HAL_RCC_OscConfig+0x150>
3418a576:	687b      	ldr	r3, [r7, #4]
3418a578:	685b      	ldr	r3, [r3, #4]
3418a57a:	f248 0210 	movw	r2, #32784	@ 0x8010
3418a57e:	4293      	cmp	r3, r2
3418a580:	d110      	bne.n	3418a5a4 <HAL_RCC_OscConfig+0x118>
3418a582:	4b62      	ldr	r3, [pc, #392]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418a586:	4a61      	ldr	r2, [pc, #388]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418a58c:	6553      	str	r3, [r2, #84]	@ 0x54
3418a58e:	4b5f      	ldr	r3, [pc, #380]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418a592:	4a5e      	ldr	r2, [pc, #376]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a594:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418a598:	6553      	str	r3, [r2, #84]	@ 0x54
3418a59a:	4b5c      	ldr	r3, [pc, #368]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a59c:	2210      	movs	r2, #16
3418a59e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418a5a2:	e01b      	b.n	3418a5dc <HAL_RCC_OscConfig+0x150>
3418a5a4:	687b      	ldr	r3, [r7, #4]
3418a5a6:	685b      	ldr	r3, [r3, #4]
3418a5a8:	4a59      	ldr	r2, [pc, #356]	@ (3418a710 <HAL_RCC_OscConfig+0x284>)
3418a5aa:	4293      	cmp	r3, r2
3418a5ac:	d10a      	bne.n	3418a5c4 <HAL_RCC_OscConfig+0x138>
3418a5ae:	4b57      	ldr	r3, [pc, #348]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a5b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418a5b2:	4a56      	ldr	r2, [pc, #344]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a5b4:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
3418a5b8:	6553      	str	r3, [r2, #84]	@ 0x54
3418a5ba:	4b54      	ldr	r3, [pc, #336]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a5bc:	2210      	movs	r2, #16
3418a5be:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418a5c2:	e00b      	b.n	3418a5dc <HAL_RCC_OscConfig+0x150>
3418a5c4:	4b51      	ldr	r3, [pc, #324]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a5c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418a5ca:	461a      	mov	r2, r3
3418a5cc:	2310      	movs	r3, #16
3418a5ce:	6013      	str	r3, [r2, #0]
3418a5d0:	4b4e      	ldr	r3, [pc, #312]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a5d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418a5d4:	4a4d      	ldr	r2, [pc, #308]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a5d6:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
3418a5da:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418a5dc:	f7f9 ff66 	bl	341844ac <HAL_GetTick>
3418a5e0:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
3418a5e2:	687b      	ldr	r3, [r7, #4]
3418a5e4:	685b      	ldr	r3, [r3, #4]
3418a5e6:	2b00      	cmp	r3, #0
3418a5e8:	d019      	beq.n	3418a61e <HAL_RCC_OscConfig+0x192>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418a5ea:	e008      	b.n	3418a5fe <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3418a5ec:	f7f9 ff5e 	bl	341844ac <HAL_GetTick>
3418a5f0:	4602      	mov	r2, r0
3418a5f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a5f4:	1ad3      	subs	r3, r2, r3
3418a5f6:	2b64      	cmp	r3, #100	@ 0x64
3418a5f8:	d901      	bls.n	3418a5fe <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
3418a5fa:	2303      	movs	r3, #3
3418a5fc:	e321      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418a5fe:	4b43      	ldr	r3, [pc, #268]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a600:	685b      	ldr	r3, [r3, #4]
3418a602:	f003 0310 	and.w	r3, r3, #16
3418a606:	2b00      	cmp	r3, #0
3418a608:	d0f0      	beq.n	3418a5ec <HAL_RCC_OscConfig+0x160>
3418a60a:	e00e      	b.n	3418a62a <HAL_RCC_OscConfig+0x19e>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3418a60c:	f7f9 ff4e 	bl	341844ac <HAL_GetTick>
3418a610:	4602      	mov	r2, r0
3418a612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a614:	1ad3      	subs	r3, r2, r3
3418a616:	2b64      	cmp	r3, #100	@ 0x64
3418a618:	d901      	bls.n	3418a61e <HAL_RCC_OscConfig+0x192>
          {
            return HAL_TIMEOUT;
3418a61a:	2303      	movs	r3, #3
3418a61c:	e311      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
3418a61e:	4b3b      	ldr	r3, [pc, #236]	@ (3418a70c <HAL_RCC_OscConfig+0x280>)
3418a620:	685b      	ldr	r3, [r3, #4]
3418a622:	f003 0310 	and.w	r3, r3, #16
3418a626:	2b00      	cmp	r3, #0
3418a628:	d1f0      	bne.n	3418a60c <HAL_RCC_OscConfig+0x180>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
3418a62a:	687b      	ldr	r3, [r7, #4]
3418a62c:	681b      	ldr	r3, [r3, #0]
3418a62e:	f003 0302 	and.w	r3, r3, #2
3418a632:	2b00      	cmp	r3, #0
3418a634:	d073      	beq.n	3418a71e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
3418a636:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418a63a:	2b00      	cmp	r3, #0
3418a63c:	d023      	beq.n	3418a686 <HAL_RCC_OscConfig+0x1fa>
3418a63e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418a642:	2b00      	cmp	r3, #0
3418a644:	d01f      	beq.n	3418a686 <HAL_RCC_OscConfig+0x1fa>
3418a646:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418a648:	2b00      	cmp	r3, #0
3418a64a:	d104      	bne.n	3418a656 <HAL_RCC_OscConfig+0x1ca>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418a64c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a64e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418a652:	2b00      	cmp	r3, #0
3418a654:	d117      	bne.n	3418a686 <HAL_RCC_OscConfig+0x1fa>
3418a656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418a658:	2b00      	cmp	r3, #0
3418a65a:	d104      	bne.n	3418a666 <HAL_RCC_OscConfig+0x1da>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418a65c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a65e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418a662:	2b00      	cmp	r3, #0
3418a664:	d10f      	bne.n	3418a686 <HAL_RCC_OscConfig+0x1fa>
3418a666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418a668:	2b00      	cmp	r3, #0
3418a66a:	d104      	bne.n	3418a676 <HAL_RCC_OscConfig+0x1ea>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418a66c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a66e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418a672:	2b00      	cmp	r3, #0
3418a674:	d107      	bne.n	3418a686 <HAL_RCC_OscConfig+0x1fa>
3418a676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418a678:	2b00      	cmp	r3, #0
3418a67a:	d115      	bne.n	3418a6a8 <HAL_RCC_OscConfig+0x21c>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418a67c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a67e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418a682:	2b00      	cmp	r3, #0
3418a684:	d010      	beq.n	3418a6a8 <HAL_RCC_OscConfig+0x21c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
3418a686:	687b      	ldr	r3, [r7, #4]
3418a688:	68db      	ldr	r3, [r3, #12]
3418a68a:	2b00      	cmp	r3, #0
3418a68c:	d101      	bne.n	3418a692 <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
3418a68e:	2301      	movs	r3, #1
3418a690:	e2d7      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
3418a692:	687b      	ldr	r3, [r7, #4]
3418a694:	691b      	ldr	r3, [r3, #16]
3418a696:	4618      	mov	r0, r3
3418a698:	f7ff fca4 	bl	34189fe4 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
3418a69c:	687b      	ldr	r3, [r7, #4]
3418a69e:	695b      	ldr	r3, [r3, #20]
3418a6a0:	4618      	mov	r0, r3
3418a6a2:	f7ff fcc1 	bl	3418a028 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
3418a6a6:	e03a      	b.n	3418a71e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
3418a6a8:	687b      	ldr	r3, [r7, #4]
3418a6aa:	68db      	ldr	r3, [r3, #12]
3418a6ac:	2b00      	cmp	r3, #0
3418a6ae:	d01e      	beq.n	3418a6ee <HAL_RCC_OscConfig+0x262>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
3418a6b0:	f7ff fc68 	bl	34189f84 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418a6b4:	f7f9 fefa 	bl	341844ac <HAL_GetTick>
3418a6b8:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
3418a6ba:	e008      	b.n	3418a6ce <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3418a6bc:	f7f9 fef6 	bl	341844ac <HAL_GetTick>
3418a6c0:	4602      	mov	r2, r0
3418a6c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a6c4:	1ad3      	subs	r3, r2, r3
3418a6c6:	2b01      	cmp	r3, #1
3418a6c8:	d901      	bls.n	3418a6ce <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
3418a6ca:	2303      	movs	r3, #3
3418a6cc:	e2b9      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_HSI_IsReady() == 0U)
3418a6ce:	f7ff fc77 	bl	34189fc0 <LL_RCC_HSI_IsReady>
3418a6d2:	4603      	mov	r3, r0
3418a6d4:	2b00      	cmp	r3, #0
3418a6d6:	d0f1      	beq.n	3418a6bc <HAL_RCC_OscConfig+0x230>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
3418a6d8:	687b      	ldr	r3, [r7, #4]
3418a6da:	691b      	ldr	r3, [r3, #16]
3418a6dc:	4618      	mov	r0, r3
3418a6de:	f7ff fc81 	bl	34189fe4 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
3418a6e2:	687b      	ldr	r3, [r7, #4]
3418a6e4:	695b      	ldr	r3, [r3, #20]
3418a6e6:	4618      	mov	r0, r3
3418a6e8:	f7ff fc9e 	bl	3418a028 <LL_RCC_HSI_SetCalibTrimming>
3418a6ec:	e017      	b.n	3418a71e <HAL_RCC_OscConfig+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
3418a6ee:	f7ff fc57 	bl	34189fa0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418a6f2:	f7f9 fedb 	bl	341844ac <HAL_GetTick>
3418a6f6:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
3418a6f8:	e00c      	b.n	3418a714 <HAL_RCC_OscConfig+0x288>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3418a6fa:	f7f9 fed7 	bl	341844ac <HAL_GetTick>
3418a6fe:	4602      	mov	r2, r0
3418a700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a702:	1ad3      	subs	r3, r2, r3
3418a704:	2b01      	cmp	r3, #1
3418a706:	d905      	bls.n	3418a714 <HAL_RCC_OscConfig+0x288>
          {
            return HAL_TIMEOUT;
3418a708:	2303      	movs	r3, #3
3418a70a:	e29a      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
3418a70c:	56028000 	.word	0x56028000
3418a710:	00018010 	.word	0x00018010
        while (LL_RCC_HSI_IsReady() != 0U)
3418a714:	f7ff fc54 	bl	34189fc0 <LL_RCC_HSI_IsReady>
3418a718:	4603      	mov	r3, r0
3418a71a:	2b00      	cmp	r3, #0
3418a71c:	d1ed      	bne.n	3418a6fa <HAL_RCC_OscConfig+0x26e>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
3418a71e:	687b      	ldr	r3, [r7, #4]
3418a720:	681b      	ldr	r3, [r3, #0]
3418a722:	f003 0310 	and.w	r3, r3, #16
3418a726:	2b00      	cmp	r3, #0
3418a728:	d070      	beq.n	3418a80c <HAL_RCC_OscConfig+0x380>
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3418a72a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418a72e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418a732:	d028      	beq.n	3418a786 <HAL_RCC_OscConfig+0x2fa>
3418a734:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418a738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a73c:	d023      	beq.n	3418a786 <HAL_RCC_OscConfig+0x2fa>
3418a73e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418a740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a744:	d104      	bne.n	3418a750 <HAL_RCC_OscConfig+0x2c4>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418a746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418a74c:	2b00      	cmp	r3, #0
3418a74e:	d11a      	bne.n	3418a786 <HAL_RCC_OscConfig+0x2fa>
3418a750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418a752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a756:	d104      	bne.n	3418a762 <HAL_RCC_OscConfig+0x2d6>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418a758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a75a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418a75e:	2b00      	cmp	r3, #0
3418a760:	d111      	bne.n	3418a786 <HAL_RCC_OscConfig+0x2fa>
3418a762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418a764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a768:	d104      	bne.n	3418a774 <HAL_RCC_OscConfig+0x2e8>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418a76a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a76c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418a770:	2b00      	cmp	r3, #0
3418a772:	d108      	bne.n	3418a786 <HAL_RCC_OscConfig+0x2fa>
3418a774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418a776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a77a:	d110      	bne.n	3418a79e <HAL_RCC_OscConfig+0x312>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418a77c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418a77e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418a782:	2b00      	cmp	r3, #0
3418a784:	d00b      	beq.n	3418a79e <HAL_RCC_OscConfig+0x312>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3418a786:	687b      	ldr	r3, [r7, #4]
3418a788:	69db      	ldr	r3, [r3, #28]
3418a78a:	2b00      	cmp	r3, #0
3418a78c:	d101      	bne.n	3418a792 <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
3418a78e:	2301      	movs	r3, #1
3418a790:	e257      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
3418a792:	687b      	ldr	r3, [r7, #4]
3418a794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418a796:	4618      	mov	r0, r3
3418a798:	f7ff fcae 	bl	3418a0f8 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3418a79c:	e036      	b.n	3418a80c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
3418a79e:	687b      	ldr	r3, [r7, #4]
3418a7a0:	69db      	ldr	r3, [r3, #28]
3418a7a2:	2b00      	cmp	r3, #0
3418a7a4:	d01e      	beq.n	3418a7e4 <HAL_RCC_OscConfig+0x358>
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
3418a7a6:	687b      	ldr	r3, [r7, #4]
3418a7a8:	6a1b      	ldr	r3, [r3, #32]
3418a7aa:	4618      	mov	r0, r3
3418a7ac:	f7ff fc82 	bl	3418a0b4 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
3418a7b0:	f7ff fc50 	bl	3418a054 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418a7b4:	f7f9 fe7a 	bl	341844ac <HAL_GetTick>
3418a7b8:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
3418a7ba:	e008      	b.n	3418a7ce <HAL_RCC_OscConfig+0x342>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3418a7bc:	f7f9 fe76 	bl	341844ac <HAL_GetTick>
3418a7c0:	4602      	mov	r2, r0
3418a7c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a7c4:	1ad3      	subs	r3, r2, r3
3418a7c6:	2b01      	cmp	r3, #1
3418a7c8:	d901      	bls.n	3418a7ce <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
3418a7ca:	2303      	movs	r3, #3
3418a7cc:	e239      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() == 0U)
3418a7ce:	f7ff fc5f 	bl	3418a090 <LL_RCC_MSI_IsReady>
3418a7d2:	4603      	mov	r3, r0
3418a7d4:	2b00      	cmp	r3, #0
3418a7d6:	d0f1      	beq.n	3418a7bc <HAL_RCC_OscConfig+0x330>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
3418a7d8:	687b      	ldr	r3, [r7, #4]
3418a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418a7dc:	4618      	mov	r0, r3
3418a7de:	f7ff fc8b 	bl	3418a0f8 <LL_RCC_MSI_SetCalibTrimming>
3418a7e2:	e013      	b.n	3418a80c <HAL_RCC_OscConfig+0x380>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
3418a7e4:	f7ff fc44 	bl	3418a070 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418a7e8:	f7f9 fe60 	bl	341844ac <HAL_GetTick>
3418a7ec:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
3418a7ee:	e008      	b.n	3418a802 <HAL_RCC_OscConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3418a7f0:	f7f9 fe5c 	bl	341844ac <HAL_GetTick>
3418a7f4:	4602      	mov	r2, r0
3418a7f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a7f8:	1ad3      	subs	r3, r2, r3
3418a7fa:	2b01      	cmp	r3, #1
3418a7fc:	d901      	bls.n	3418a802 <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
3418a7fe:	2303      	movs	r3, #3
3418a800:	e21f      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() != 0U)
3418a802:	f7ff fc45 	bl	3418a090 <LL_RCC_MSI_IsReady>
3418a806:	4603      	mov	r3, r0
3418a808:	2b00      	cmp	r3, #0
3418a80a:	d1f1      	bne.n	3418a7f0 <HAL_RCC_OscConfig+0x364>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
3418a80c:	687b      	ldr	r3, [r7, #4]
3418a80e:	681b      	ldr	r3, [r3, #0]
3418a810:	f003 0308 	and.w	r3, r3, #8
3418a814:	2b00      	cmp	r3, #0
3418a816:	d02c      	beq.n	3418a872 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
3418a818:	687b      	ldr	r3, [r7, #4]
3418a81a:	699b      	ldr	r3, [r3, #24]
3418a81c:	2b00      	cmp	r3, #0
3418a81e:	d014      	beq.n	3418a84a <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
3418a820:	f7ff fc92 	bl	3418a148 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418a824:	f7f9 fe42 	bl	341844ac <HAL_GetTick>
3418a828:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
3418a82a:	e008      	b.n	3418a83e <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
3418a82c:	f7f9 fe3e 	bl	341844ac <HAL_GetTick>
3418a830:	4602      	mov	r2, r0
3418a832:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a834:	1ad3      	subs	r3, r2, r3
3418a836:	2b01      	cmp	r3, #1
3418a838:	d901      	bls.n	3418a83e <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
3418a83a:	2303      	movs	r3, #3
3418a83c:	e201      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() == 0U)
3418a83e:	f7ff fca1 	bl	3418a184 <LL_RCC_LSI_IsReady>
3418a842:	4603      	mov	r3, r0
3418a844:	2b00      	cmp	r3, #0
3418a846:	d0f1      	beq.n	3418a82c <HAL_RCC_OscConfig+0x3a0>
3418a848:	e013      	b.n	3418a872 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
3418a84a:	f7ff fc8b 	bl	3418a164 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418a84e:	f7f9 fe2d 	bl	341844ac <HAL_GetTick>
3418a852:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
3418a854:	e008      	b.n	3418a868 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
3418a856:	f7f9 fe29 	bl	341844ac <HAL_GetTick>
3418a85a:	4602      	mov	r2, r0
3418a85c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a85e:	1ad3      	subs	r3, r2, r3
3418a860:	2b01      	cmp	r3, #1
3418a862:	d901      	bls.n	3418a868 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
3418a864:	2303      	movs	r3, #3
3418a866:	e1ec      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() != 0U)
3418a868:	f7ff fc8c 	bl	3418a184 <LL_RCC_LSI_IsReady>
3418a86c:	4603      	mov	r3, r0
3418a86e:	2b00      	cmp	r3, #0
3418a870:	d1f1      	bne.n	3418a856 <HAL_RCC_OscConfig+0x3ca>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
3418a872:	687b      	ldr	r3, [r7, #4]
3418a874:	681b      	ldr	r3, [r3, #0]
3418a876:	f003 0304 	and.w	r3, r3, #4
3418a87a:	2b00      	cmp	r3, #0
3418a87c:	f000 808c 	beq.w	3418a998 <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3418a880:	687b      	ldr	r3, [r7, #4]
3418a882:	689b      	ldr	r3, [r3, #8]
3418a884:	2b02      	cmp	r3, #2
3418a886:	d104      	bne.n	3418a892 <HAL_RCC_OscConfig+0x406>
3418a888:	4b96      	ldr	r3, [pc, #600]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a88a:	2202      	movs	r2, #2
3418a88c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418a890:	e055      	b.n	3418a93e <HAL_RCC_OscConfig+0x4b2>
3418a892:	687b      	ldr	r3, [r7, #4]
3418a894:	689b      	ldr	r3, [r3, #8]
3418a896:	2b00      	cmp	r3, #0
3418a898:	d112      	bne.n	3418a8c0 <HAL_RCC_OscConfig+0x434>
3418a89a:	4b92      	ldr	r3, [pc, #584]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a89c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418a8a0:	461a      	mov	r2, r3
3418a8a2:	2302      	movs	r3, #2
3418a8a4:	6013      	str	r3, [r2, #0]
3418a8a6:	4b8f      	ldr	r3, [pc, #572]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418a8aa:	4a8e      	ldr	r2, [pc, #568]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418a8b0:	6413      	str	r3, [r2, #64]	@ 0x40
3418a8b2:	4b8c      	ldr	r3, [pc, #560]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418a8b6:	4a8b      	ldr	r2, [pc, #556]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3418a8bc:	6413      	str	r3, [r2, #64]	@ 0x40
3418a8be:	e03e      	b.n	3418a93e <HAL_RCC_OscConfig+0x4b2>
3418a8c0:	687b      	ldr	r3, [r7, #4]
3418a8c2:	689b      	ldr	r3, [r3, #8]
3418a8c4:	f248 0202 	movw	r2, #32770	@ 0x8002
3418a8c8:	4293      	cmp	r3, r2
3418a8ca:	d110      	bne.n	3418a8ee <HAL_RCC_OscConfig+0x462>
3418a8cc:	4b85      	ldr	r3, [pc, #532]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418a8d0:	4a84      	ldr	r2, [pc, #528]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418a8d6:	6413      	str	r3, [r2, #64]	@ 0x40
3418a8d8:	4b82      	ldr	r3, [pc, #520]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418a8dc:	4a81      	ldr	r2, [pc, #516]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418a8e2:	6413      	str	r3, [r2, #64]	@ 0x40
3418a8e4:	4b7f      	ldr	r3, [pc, #508]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8e6:	2202      	movs	r2, #2
3418a8e8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418a8ec:	e027      	b.n	3418a93e <HAL_RCC_OscConfig+0x4b2>
3418a8ee:	687b      	ldr	r3, [r7, #4]
3418a8f0:	689b      	ldr	r3, [r3, #8]
3418a8f2:	4a7d      	ldr	r2, [pc, #500]	@ (3418aae8 <HAL_RCC_OscConfig+0x65c>)
3418a8f4:	4293      	cmp	r3, r2
3418a8f6:	d110      	bne.n	3418a91a <HAL_RCC_OscConfig+0x48e>
3418a8f8:	4b7a      	ldr	r3, [pc, #488]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418a8fc:	4a79      	ldr	r2, [pc, #484]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a8fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418a902:	6413      	str	r3, [r2, #64]	@ 0x40
3418a904:	4b77      	ldr	r3, [pc, #476]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418a908:	4a76      	ldr	r2, [pc, #472]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a90a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418a90e:	6413      	str	r3, [r2, #64]	@ 0x40
3418a910:	4b74      	ldr	r3, [pc, #464]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a912:	2202      	movs	r2, #2
3418a914:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418a918:	e011      	b.n	3418a93e <HAL_RCC_OscConfig+0x4b2>
3418a91a:	4b72      	ldr	r3, [pc, #456]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a91c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418a920:	461a      	mov	r2, r3
3418a922:	2302      	movs	r3, #2
3418a924:	6013      	str	r3, [r2, #0]
3418a926:	4b6f      	ldr	r3, [pc, #444]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418a92a:	4a6e      	ldr	r2, [pc, #440]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a92c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3418a930:	6413      	str	r3, [r2, #64]	@ 0x40
3418a932:	4b6c      	ldr	r3, [pc, #432]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418a936:	4a6b      	ldr	r2, [pc, #428]	@ (3418aae4 <HAL_RCC_OscConfig+0x658>)
3418a938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418a93c:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
3418a93e:	687b      	ldr	r3, [r7, #4]
3418a940:	689b      	ldr	r3, [r3, #8]
3418a942:	2b00      	cmp	r3, #0
3418a944:	d014      	beq.n	3418a970 <HAL_RCC_OscConfig+0x4e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418a946:	f7f9 fdb1 	bl	341844ac <HAL_GetTick>
3418a94a:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
3418a94c:	e00a      	b.n	3418a964 <HAL_RCC_OscConfig+0x4d8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418a94e:	f7f9 fdad 	bl	341844ac <HAL_GetTick>
3418a952:	4602      	mov	r2, r0
3418a954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a956:	1ad3      	subs	r3, r2, r3
3418a958:	f241 3288 	movw	r2, #5000	@ 0x1388
3418a95c:	4293      	cmp	r3, r2
3418a95e:	d901      	bls.n	3418a964 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
3418a960:	2303      	movs	r3, #3
3418a962:	e16e      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() == 0U)
3418a964:	f7ff fbde 	bl	3418a124 <LL_RCC_LSE_IsReady>
3418a968:	4603      	mov	r3, r0
3418a96a:	2b00      	cmp	r3, #0
3418a96c:	d0ef      	beq.n	3418a94e <HAL_RCC_OscConfig+0x4c2>
3418a96e:	e013      	b.n	3418a998 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418a970:	f7f9 fd9c 	bl	341844ac <HAL_GetTick>
3418a974:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
3418a976:	e00a      	b.n	3418a98e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418a978:	f7f9 fd98 	bl	341844ac <HAL_GetTick>
3418a97c:	4602      	mov	r2, r0
3418a97e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418a980:	1ad3      	subs	r3, r2, r3
3418a982:	f241 3288 	movw	r2, #5000	@ 0x1388
3418a986:	4293      	cmp	r3, r2
3418a988:	d901      	bls.n	3418a98e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
3418a98a:	2303      	movs	r3, #3
3418a98c:	e159      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() != 0U)
3418a98e:	f7ff fbc9 	bl	3418a124 <LL_RCC_LSE_IsReady>
3418a992:	4603      	mov	r3, r0
3418a994:	2b00      	cmp	r3, #0
3418a996:	d1ef      	bne.n	3418a978 <HAL_RCC_OscConfig+0x4ec>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
3418a998:	687b      	ldr	r3, [r7, #4]
3418a99a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418a99c:	2b00      	cmp	r3, #0
3418a99e:	d04c      	beq.n	3418aa3a <HAL_RCC_OscConfig+0x5ae>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
3418a9a0:	687b      	ldr	r3, [r7, #4]
3418a9a2:	3328      	adds	r3, #40	@ 0x28
3418a9a4:	4619      	mov	r1, r3
3418a9a6:	2000      	movs	r0, #0
3418a9a8:	f000 fe38 	bl	3418b61c <RCC_PLL_IsNewConfig>
3418a9ac:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
3418a9ae:	f7ff fc3d 	bl	3418a22c <LL_RCC_PLL1_IsReady>
3418a9b2:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
3418a9b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
3418a9b6:	2b01      	cmp	r3, #1
3418a9b8:	d130      	bne.n	3418aa1c <HAL_RCC_OscConfig+0x590>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418a9ba:	f7ff fd0f 	bl	3418a3dc <LL_RCC_IC1_GetSource>
3418a9be:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418a9c0:	f7ff fd2a 	bl	3418a418 <LL_RCC_IC2_GetSource>
3418a9c4:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418a9c6:	f7ff fd45 	bl	3418a454 <LL_RCC_IC6_GetSource>
3418a9ca:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418a9cc:	f7ff fd50 	bl	3418a470 <LL_RCC_IC11_GetSource>
3418a9d0:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
3418a9d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418a9d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418a9da:	d104      	bne.n	3418a9e6 <HAL_RCC_OscConfig+0x55a>
3418a9dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
3418a9de:	2b00      	cmp	r3, #0
3418a9e0:	d101      	bne.n	3418a9e6 <HAL_RCC_OscConfig+0x55a>
      {
        return HAL_ERROR;
3418a9e2:	2301      	movs	r3, #1
3418a9e4:	e12d      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
3418a9e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418a9ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a9ee:	d10a      	bne.n	3418aa06 <HAL_RCC_OscConfig+0x57a>
3418a9f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
3418a9f2:	2b00      	cmp	r3, #0
3418a9f4:	d005      	beq.n	3418aa02 <HAL_RCC_OscConfig+0x576>
3418a9f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418a9f8:	2b00      	cmp	r3, #0
3418a9fa:	d002      	beq.n	3418aa02 <HAL_RCC_OscConfig+0x576>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
3418a9fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418a9fe:	2b00      	cmp	r3, #0
3418aa00:	d101      	bne.n	3418aa06 <HAL_RCC_OscConfig+0x57a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
3418aa02:	2301      	movs	r3, #1
3418aa04:	e11d      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
3418aa06:	687b      	ldr	r3, [r7, #4]
3418aa08:	3328      	adds	r3, #40	@ 0x28
3418aa0a:	4619      	mov	r1, r3
3418aa0c:	2000      	movs	r0, #0
3418aa0e:	f000 fca9 	bl	3418b364 <RCC_PLL_Config>
3418aa12:	4603      	mov	r3, r0
3418aa14:	2b00      	cmp	r3, #0
3418aa16:	d010      	beq.n	3418aa3a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
3418aa18:	2301      	movs	r3, #1
3418aa1a:	e112      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
3418aa1c:	687b      	ldr	r3, [r7, #4]
3418aa1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418aa20:	2b02      	cmp	r3, #2
3418aa22:	d10a      	bne.n	3418aa3a <HAL_RCC_OscConfig+0x5ae>
3418aa24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418aa26:	2b00      	cmp	r3, #0
3418aa28:	d107      	bne.n	3418aa3a <HAL_RCC_OscConfig+0x5ae>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
3418aa2a:	2000      	movs	r0, #0
3418aa2c:	f000 fdca 	bl	3418b5c4 <RCC_PLL_Enable>
3418aa30:	4603      	mov	r3, r0
3418aa32:	2b00      	cmp	r3, #0
3418aa34:	d001      	beq.n	3418aa3a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
3418aa36:	2301      	movs	r3, #1
3418aa38:	e103      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
3418aa3a:	687b      	ldr	r3, [r7, #4]
3418aa3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418aa3e:	2b00      	cmp	r3, #0
3418aa40:	d054      	beq.n	3418aaec <HAL_RCC_OscConfig+0x660>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
3418aa42:	687b      	ldr	r3, [r7, #4]
3418aa44:	3344      	adds	r3, #68	@ 0x44
3418aa46:	4619      	mov	r1, r3
3418aa48:	2001      	movs	r0, #1
3418aa4a:	f000 fde7 	bl	3418b61c <RCC_PLL_IsNewConfig>
3418aa4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
3418aa50:	f7ff fc22 	bl	3418a298 <LL_RCC_PLL2_IsReady>
3418aa54:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
3418aa56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418aa58:	2b01      	cmp	r3, #1
3418aa5a:	d134      	bne.n	3418aac6 <HAL_RCC_OscConfig+0x63a>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418aa5c:	f7ff fcbe 	bl	3418a3dc <LL_RCC_IC1_GetSource>
3418aa60:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418aa62:	f7ff fcd9 	bl	3418a418 <LL_RCC_IC2_GetSource>
3418aa66:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418aa68:	f7ff fcf4 	bl	3418a454 <LL_RCC_IC6_GetSource>
3418aa6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418aa6e:	f7ff fcff 	bl	3418a470 <LL_RCC_IC11_GetSource>
3418aa72:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
3418aa74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418aa78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418aa7c:	d105      	bne.n	3418aa8a <HAL_RCC_OscConfig+0x5fe>
3418aa7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418aa80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aa84:	d101      	bne.n	3418aa8a <HAL_RCC_OscConfig+0x5fe>
      {
        return HAL_ERROR;
3418aa86:	2301      	movs	r3, #1
3418aa88:	e0db      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
3418aa8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418aa8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aa92:	d10d      	bne.n	3418aab0 <HAL_RCC_OscConfig+0x624>
3418aa94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418aa96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aa9a:	d007      	beq.n	3418aaac <HAL_RCC_OscConfig+0x620>
3418aa9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418aa9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aaa2:	d003      	beq.n	3418aaac <HAL_RCC_OscConfig+0x620>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
3418aaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418aaa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aaaa:	d101      	bne.n	3418aab0 <HAL_RCC_OscConfig+0x624>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
3418aaac:	2301      	movs	r3, #1
3418aaae:	e0c8      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
3418aab0:	687b      	ldr	r3, [r7, #4]
3418aab2:	3344      	adds	r3, #68	@ 0x44
3418aab4:	4619      	mov	r1, r3
3418aab6:	2001      	movs	r0, #1
3418aab8:	f000 fc54 	bl	3418b364 <RCC_PLL_Config>
3418aabc:	4603      	mov	r3, r0
3418aabe:	2b00      	cmp	r3, #0
3418aac0:	d014      	beq.n	3418aaec <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
3418aac2:	2301      	movs	r3, #1
3418aac4:	e0bd      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
3418aac6:	687b      	ldr	r3, [r7, #4]
3418aac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418aaca:	2b02      	cmp	r3, #2
3418aacc:	d10e      	bne.n	3418aaec <HAL_RCC_OscConfig+0x660>
3418aace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418aad0:	2b00      	cmp	r3, #0
3418aad2:	d10b      	bne.n	3418aaec <HAL_RCC_OscConfig+0x660>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
3418aad4:	2001      	movs	r0, #1
3418aad6:	f000 fd75 	bl	3418b5c4 <RCC_PLL_Enable>
3418aada:	4603      	mov	r3, r0
3418aadc:	2b00      	cmp	r3, #0
3418aade:	d005      	beq.n	3418aaec <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
3418aae0:	2301      	movs	r3, #1
3418aae2:	e0ae      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
3418aae4:	56028000 	.word	0x56028000
3418aae8:	00018002 	.word	0x00018002

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
3418aaec:	687b      	ldr	r3, [r7, #4]
3418aaee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418aaf0:	2b00      	cmp	r3, #0
3418aaf2:	d050      	beq.n	3418ab96 <HAL_RCC_OscConfig+0x70a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
3418aaf4:	687b      	ldr	r3, [r7, #4]
3418aaf6:	3360      	adds	r3, #96	@ 0x60
3418aaf8:	4619      	mov	r1, r3
3418aafa:	2002      	movs	r0, #2
3418aafc:	f000 fd8e 	bl	3418b61c <RCC_PLL_IsNewConfig>
3418ab00:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
3418ab02:	f7ff fb93 	bl	3418a22c <LL_RCC_PLL1_IsReady>
3418ab06:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
3418ab08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418ab0a:	2b01      	cmp	r3, #1
3418ab0c:	d134      	bne.n	3418ab78 <HAL_RCC_OscConfig+0x6ec>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418ab0e:	f7ff fc65 	bl	3418a3dc <LL_RCC_IC1_GetSource>
3418ab12:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418ab14:	f7ff fc80 	bl	3418a418 <LL_RCC_IC2_GetSource>
3418ab18:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418ab1a:	f7ff fc9b 	bl	3418a454 <LL_RCC_IC6_GetSource>
3418ab1e:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418ab20:	f7ff fca6 	bl	3418a470 <LL_RCC_IC11_GetSource>
3418ab24:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
3418ab26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418ab2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418ab2e:	d105      	bne.n	3418ab3c <HAL_RCC_OscConfig+0x6b0>
3418ab30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418ab32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ab36:	d101      	bne.n	3418ab3c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
3418ab38:	2301      	movs	r3, #1
3418ab3a:	e082      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
3418ab3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418ab40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ab44:	d10d      	bne.n	3418ab62 <HAL_RCC_OscConfig+0x6d6>
3418ab46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ab48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ab4c:	d007      	beq.n	3418ab5e <HAL_RCC_OscConfig+0x6d2>
3418ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418ab50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ab54:	d003      	beq.n	3418ab5e <HAL_RCC_OscConfig+0x6d2>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
3418ab56:	6a3b      	ldr	r3, [r7, #32]
3418ab58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ab5c:	d101      	bne.n	3418ab62 <HAL_RCC_OscConfig+0x6d6>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
3418ab5e:	2301      	movs	r3, #1
3418ab60:	e06f      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
3418ab62:	687b      	ldr	r3, [r7, #4]
3418ab64:	3360      	adds	r3, #96	@ 0x60
3418ab66:	4619      	mov	r1, r3
3418ab68:	2002      	movs	r0, #2
3418ab6a:	f000 fbfb 	bl	3418b364 <RCC_PLL_Config>
3418ab6e:	4603      	mov	r3, r0
3418ab70:	2b00      	cmp	r3, #0
3418ab72:	d010      	beq.n	3418ab96 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
3418ab74:	2301      	movs	r3, #1
3418ab76:	e064      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
3418ab78:	687b      	ldr	r3, [r7, #4]
3418ab7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418ab7c:	2b02      	cmp	r3, #2
3418ab7e:	d10a      	bne.n	3418ab96 <HAL_RCC_OscConfig+0x70a>
3418ab80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418ab82:	2b00      	cmp	r3, #0
3418ab84:	d107      	bne.n	3418ab96 <HAL_RCC_OscConfig+0x70a>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
3418ab86:	2002      	movs	r0, #2
3418ab88:	f000 fd1c 	bl	3418b5c4 <RCC_PLL_Enable>
3418ab8c:	4603      	mov	r3, r0
3418ab8e:	2b00      	cmp	r3, #0
3418ab90:	d001      	beq.n	3418ab96 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
3418ab92:	2301      	movs	r3, #1
3418ab94:	e055      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
3418ab96:	687b      	ldr	r3, [r7, #4]
3418ab98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418ab9a:	2b00      	cmp	r3, #0
3418ab9c:	d050      	beq.n	3418ac40 <HAL_RCC_OscConfig+0x7b4>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
3418ab9e:	687b      	ldr	r3, [r7, #4]
3418aba0:	337c      	adds	r3, #124	@ 0x7c
3418aba2:	4619      	mov	r1, r3
3418aba4:	2003      	movs	r0, #3
3418aba6:	f000 fd39 	bl	3418b61c <RCC_PLL_IsNewConfig>
3418abaa:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
3418abac:	f7ff fbe0 	bl	3418a370 <LL_RCC_PLL4_IsReady>
3418abb0:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
3418abb2:	69fb      	ldr	r3, [r7, #28]
3418abb4:	2b01      	cmp	r3, #1
3418abb6:	d134      	bne.n	3418ac22 <HAL_RCC_OscConfig+0x796>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418abb8:	f7ff fc10 	bl	3418a3dc <LL_RCC_IC1_GetSource>
3418abbc:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418abbe:	f7ff fc2b 	bl	3418a418 <LL_RCC_IC2_GetSource>
3418abc2:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418abc4:	f7ff fc46 	bl	3418a454 <LL_RCC_IC6_GetSource>
3418abc8:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418abca:	f7ff fc51 	bl	3418a470 <LL_RCC_IC11_GetSource>
3418abce:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
3418abd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418abd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418abd8:	d105      	bne.n	3418abe6 <HAL_RCC_OscConfig+0x75a>
3418abda:	697b      	ldr	r3, [r7, #20]
3418abdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418abe0:	d101      	bne.n	3418abe6 <HAL_RCC_OscConfig+0x75a>
      {
        return HAL_ERROR;
3418abe2:	2301      	movs	r3, #1
3418abe4:	e02d      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
3418abe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418abea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418abee:	d10d      	bne.n	3418ac0c <HAL_RCC_OscConfig+0x780>
3418abf0:	693b      	ldr	r3, [r7, #16]
3418abf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418abf6:	d007      	beq.n	3418ac08 <HAL_RCC_OscConfig+0x77c>
3418abf8:	68fb      	ldr	r3, [r7, #12]
3418abfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418abfe:	d003      	beq.n	3418ac08 <HAL_RCC_OscConfig+0x77c>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
3418ac00:	68bb      	ldr	r3, [r7, #8]
3418ac02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ac06:	d101      	bne.n	3418ac0c <HAL_RCC_OscConfig+0x780>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
3418ac08:	2301      	movs	r3, #1
3418ac0a:	e01a      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
3418ac0c:	687b      	ldr	r3, [r7, #4]
3418ac0e:	337c      	adds	r3, #124	@ 0x7c
3418ac10:	4619      	mov	r1, r3
3418ac12:	2003      	movs	r0, #3
3418ac14:	f000 fba6 	bl	3418b364 <RCC_PLL_Config>
3418ac18:	4603      	mov	r3, r0
3418ac1a:	2b00      	cmp	r3, #0
3418ac1c:	d010      	beq.n	3418ac40 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
3418ac1e:	2301      	movs	r3, #1
3418ac20:	e00f      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
3418ac22:	687b      	ldr	r3, [r7, #4]
3418ac24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418ac26:	2b02      	cmp	r3, #2
3418ac28:	d10a      	bne.n	3418ac40 <HAL_RCC_OscConfig+0x7b4>
3418ac2a:	69bb      	ldr	r3, [r7, #24]
3418ac2c:	2b00      	cmp	r3, #0
3418ac2e:	d107      	bne.n	3418ac40 <HAL_RCC_OscConfig+0x7b4>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
3418ac30:	2003      	movs	r0, #3
3418ac32:	f000 fcc7 	bl	3418b5c4 <RCC_PLL_Enable>
3418ac36:	4603      	mov	r3, r0
3418ac38:	2b00      	cmp	r3, #0
3418ac3a:	d001      	beq.n	3418ac40 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
3418ac3c:	2301      	movs	r3, #1
3418ac3e:	e000      	b.n	3418ac42 <HAL_RCC_OscConfig+0x7b6>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
3418ac40:	2300      	movs	r3, #0
}
3418ac42:	4618      	mov	r0, r3
3418ac44:	3788      	adds	r7, #136	@ 0x88
3418ac46:	46bd      	mov	sp, r7
3418ac48:	bd80      	pop	{r7, pc}
3418ac4a:	bf00      	nop

3418ac4c <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
3418ac4c:	b580      	push	{r7, lr}
3418ac4e:	b084      	sub	sp, #16
3418ac50:	af00      	add	r7, sp, #0
3418ac52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
3418ac54:	687b      	ldr	r3, [r7, #4]
3418ac56:	2b00      	cmp	r3, #0
3418ac58:	d101      	bne.n	3418ac5e <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
3418ac5a:	2301      	movs	r3, #1
3418ac5c:	e1f2      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3418ac5e:	687b      	ldr	r3, [r7, #4]
3418ac60:	681b      	ldr	r3, [r3, #0]
3418ac62:	f003 0308 	and.w	r3, r3, #8
3418ac66:	2b00      	cmp	r3, #0
3418ac68:	d010      	beq.n	3418ac8c <HAL_RCC_ClockConfig+0x40>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
3418ac6a:	687b      	ldr	r3, [r7, #4]
3418ac6c:	691a      	ldr	r2, [r3, #16]
3418ac6e:	4ba3      	ldr	r3, [pc, #652]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ac70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ac72:	f003 0307 	and.w	r3, r3, #7
3418ac76:	429a      	cmp	r2, r3
3418ac78:	d908      	bls.n	3418ac8c <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
3418ac7a:	4ba0      	ldr	r3, [pc, #640]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ac7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ac7e:	f023 0207 	bic.w	r2, r3, #7
3418ac82:	687b      	ldr	r3, [r7, #4]
3418ac84:	691b      	ldr	r3, [r3, #16]
3418ac86:	499d      	ldr	r1, [pc, #628]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ac88:	4313      	orrs	r3, r2
3418ac8a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
3418ac8c:	687b      	ldr	r3, [r7, #4]
3418ac8e:	681b      	ldr	r3, [r3, #0]
3418ac90:	f003 0310 	and.w	r3, r3, #16
3418ac94:	2b00      	cmp	r3, #0
3418ac96:	d010      	beq.n	3418acba <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
3418ac98:	687b      	ldr	r3, [r7, #4]
3418ac9a:	695a      	ldr	r2, [r3, #20]
3418ac9c:	4b97      	ldr	r3, [pc, #604]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ac9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418aca0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
3418aca4:	429a      	cmp	r2, r3
3418aca6:	d908      	bls.n	3418acba <HAL_RCC_ClockConfig+0x6e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
3418aca8:	4b94      	ldr	r3, [pc, #592]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418acaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418acac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
3418acb0:	687b      	ldr	r3, [r7, #4]
3418acb2:	695b      	ldr	r3, [r3, #20]
3418acb4:	4991      	ldr	r1, [pc, #580]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418acb6:	4313      	orrs	r3, r2
3418acb8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
3418acba:	687b      	ldr	r3, [r7, #4]
3418acbc:	681b      	ldr	r3, [r3, #0]
3418acbe:	f003 0320 	and.w	r3, r3, #32
3418acc2:	2b00      	cmp	r3, #0
3418acc4:	d010      	beq.n	3418ace8 <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
3418acc6:	687b      	ldr	r3, [r7, #4]
3418acc8:	699a      	ldr	r2, [r3, #24]
3418acca:	4b8c      	ldr	r3, [pc, #560]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418accc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418acce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3418acd2:	429a      	cmp	r2, r3
3418acd4:	d908      	bls.n	3418ace8 <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
3418acd6:	4b89      	ldr	r3, [pc, #548]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418acda:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
3418acde:	687b      	ldr	r3, [r7, #4]
3418ace0:	699b      	ldr	r3, [r3, #24]
3418ace2:	4986      	ldr	r1, [pc, #536]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ace4:	4313      	orrs	r3, r2
3418ace6:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3418ace8:	687b      	ldr	r3, [r7, #4]
3418acea:	681b      	ldr	r3, [r3, #0]
3418acec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418acf0:	2b00      	cmp	r3, #0
3418acf2:	d010      	beq.n	3418ad16 <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3418acf4:	687b      	ldr	r3, [r7, #4]
3418acf6:	69da      	ldr	r2, [r3, #28]
3418acf8:	4b80      	ldr	r3, [pc, #512]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418acfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418acfc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
3418ad00:	429a      	cmp	r2, r3
3418ad02:	d908      	bls.n	3418ad16 <HAL_RCC_ClockConfig+0xca>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
3418ad04:	4b7d      	ldr	r3, [pc, #500]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ad06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ad08:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3418ad0c:	687b      	ldr	r3, [r7, #4]
3418ad0e:	69db      	ldr	r3, [r3, #28]
3418ad10:	497a      	ldr	r1, [pc, #488]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ad12:	4313      	orrs	r3, r2
3418ad14:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
3418ad16:	687b      	ldr	r3, [r7, #4]
3418ad18:	681b      	ldr	r3, [r3, #0]
3418ad1a:	f003 0304 	and.w	r3, r3, #4
3418ad1e:	2b00      	cmp	r3, #0
3418ad20:	d010      	beq.n	3418ad44 <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
3418ad22:	687b      	ldr	r3, [r7, #4]
3418ad24:	68da      	ldr	r2, [r3, #12]
3418ad26:	4b75      	ldr	r3, [pc, #468]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ad28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ad2a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3418ad2e:	429a      	cmp	r2, r3
3418ad30:	d908      	bls.n	3418ad44 <HAL_RCC_ClockConfig+0xf8>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3418ad32:	4b72      	ldr	r3, [pc, #456]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ad34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ad36:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
3418ad3a:	687b      	ldr	r3, [r7, #4]
3418ad3c:	68db      	ldr	r3, [r3, #12]
3418ad3e:	496f      	ldr	r1, [pc, #444]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ad40:	4313      	orrs	r3, r2
3418ad42:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
3418ad44:	687b      	ldr	r3, [r7, #4]
3418ad46:	681b      	ldr	r3, [r3, #0]
3418ad48:	f003 0301 	and.w	r3, r3, #1
3418ad4c:	2b00      	cmp	r3, #0
3418ad4e:	d063      	beq.n	3418ae18 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
3418ad50:	687b      	ldr	r3, [r7, #4]
3418ad52:	685b      	ldr	r3, [r3, #4]
3418ad54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418ad58:	d106      	bne.n	3418ad68 <HAL_RCC_ClockConfig+0x11c>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
3418ad5a:	f7ff f901 	bl	34189f60 <LL_RCC_HSE_IsReady>
3418ad5e:	4603      	mov	r3, r0
3418ad60:	2b00      	cmp	r3, #0
3418ad62:	d134      	bne.n	3418adce <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
3418ad64:	2301      	movs	r3, #1
3418ad66:	e16d      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
3418ad68:	687b      	ldr	r3, [r7, #4]
3418ad6a:	685b      	ldr	r3, [r3, #4]
3418ad6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418ad70:	d11a      	bne.n	3418ada8 <HAL_RCC_ClockConfig+0x15c>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
3418ad72:	f7ff fb33 	bl	3418a3dc <LL_RCC_IC1_GetSource>
3418ad76:	4602      	mov	r2, r0
3418ad78:	687b      	ldr	r3, [r7, #4]
3418ad7a:	6a1b      	ldr	r3, [r3, #32]
3418ad7c:	4619      	mov	r1, r3
3418ad7e:	4610      	mov	r0, r2
3418ad80:	f000 fd00 	bl	3418b784 <RCC_IC_CheckPLLSources>
3418ad84:	4603      	mov	r3, r0
3418ad86:	2b01      	cmp	r3, #1
3418ad88:	d001      	beq.n	3418ad8e <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
3418ad8a:	2301      	movs	r3, #1
3418ad8c:	e15a      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
3418ad8e:	687b      	ldr	r3, [r7, #4]
3418ad90:	6a1a      	ldr	r2, [r3, #32]
3418ad92:	687b      	ldr	r3, [r7, #4]
3418ad94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ad96:	3b01      	subs	r3, #1
3418ad98:	041b      	lsls	r3, r3, #16
3418ad9a:	4958      	ldr	r1, [pc, #352]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418ad9c:	4313      	orrs	r3, r2
3418ad9e:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
3418ada2:	f7ff fb0d 	bl	3418a3c0 <LL_RCC_IC1_Enable>
3418ada6:	e012      	b.n	3418adce <HAL_RCC_ClockConfig+0x182>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
3418ada8:	687b      	ldr	r3, [r7, #4]
3418adaa:	685b      	ldr	r3, [r3, #4]
3418adac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418adb0:	d106      	bne.n	3418adc0 <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
3418adb2:	f7ff f96d 	bl	3418a090 <LL_RCC_MSI_IsReady>
3418adb6:	4603      	mov	r3, r0
3418adb8:	2b00      	cmp	r3, #0
3418adba:	d108      	bne.n	3418adce <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
3418adbc:	2301      	movs	r3, #1
3418adbe:	e141      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
3418adc0:	f7ff f8fe 	bl	34189fc0 <LL_RCC_HSI_IsReady>
3418adc4:	4603      	mov	r3, r0
3418adc6:	2b00      	cmp	r3, #0
3418adc8:	d101      	bne.n	3418adce <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
3418adca:	2301      	movs	r3, #1
3418adcc:	e13a      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
3418adce:	4b4b      	ldr	r3, [pc, #300]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418add0:	6a1b      	ldr	r3, [r3, #32]
3418add2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
3418add6:	687b      	ldr	r3, [r7, #4]
3418add8:	685b      	ldr	r3, [r3, #4]
3418adda:	4948      	ldr	r1, [pc, #288]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418addc:	4313      	orrs	r3, r2
3418adde:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418ade0:	f7f9 fb64 	bl	341844ac <HAL_GetTick>
3418ade4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
3418ade6:	e00a      	b.n	3418adfe <HAL_RCC_ClockConfig+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3418ade8:	f7f9 fb60 	bl	341844ac <HAL_GetTick>
3418adec:	4602      	mov	r2, r0
3418adee:	68fb      	ldr	r3, [r7, #12]
3418adf0:	1ad3      	subs	r3, r2, r3
3418adf2:	f241 3288 	movw	r2, #5000	@ 0x1388
3418adf6:	4293      	cmp	r3, r2
3418adf8:	d901      	bls.n	3418adfe <HAL_RCC_ClockConfig+0x1b2>
      {
        return HAL_TIMEOUT;
3418adfa:	2303      	movs	r3, #3
3418adfc:	e122      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
3418adfe:	f7ff f9cf 	bl	3418a1a0 <LL_RCC_GetCpuClkSource>
3418ae02:	4602      	mov	r2, r0
3418ae04:	687b      	ldr	r3, [r7, #4]
3418ae06:	685b      	ldr	r3, [r3, #4]
3418ae08:	011b      	lsls	r3, r3, #4
3418ae0a:	429a      	cmp	r2, r3
3418ae0c:	d1ec      	bne.n	3418ade8 <HAL_RCC_ClockConfig+0x19c>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
3418ae0e:	f000 f921 	bl	3418b054 <HAL_RCC_GetCpuClockFreq>
3418ae12:	4603      	mov	r3, r0
3418ae14:	4a3a      	ldr	r2, [pc, #232]	@ (3418af00 <HAL_RCC_ClockConfig+0x2b4>)
3418ae16:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
3418ae18:	687b      	ldr	r3, [r7, #4]
3418ae1a:	681b      	ldr	r3, [r3, #0]
3418ae1c:	f003 0302 	and.w	r3, r3, #2
3418ae20:	2b00      	cmp	r3, #0
3418ae22:	f000 8096 	beq.w	3418af52 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
3418ae26:	687b      	ldr	r3, [r7, #4]
3418ae28:	689b      	ldr	r3, [r3, #8]
3418ae2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418ae2e:	d106      	bne.n	3418ae3e <HAL_RCC_ClockConfig+0x1f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
3418ae30:	f7ff f896 	bl	34189f60 <LL_RCC_HSE_IsReady>
3418ae34:	4603      	mov	r3, r0
3418ae36:	2b00      	cmp	r3, #0
3418ae38:	d16b      	bne.n	3418af12 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
3418ae3a:	2301      	movs	r3, #1
3418ae3c:	e102      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
3418ae3e:	687b      	ldr	r3, [r7, #4]
3418ae40:	689b      	ldr	r3, [r3, #8]
3418ae42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418ae46:	d14d      	bne.n	3418aee4 <HAL_RCC_ClockConfig+0x298>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
3418ae48:	f7ff fae6 	bl	3418a418 <LL_RCC_IC2_GetSource>
3418ae4c:	4602      	mov	r2, r0
3418ae4e:	687b      	ldr	r3, [r7, #4]
3418ae50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418ae52:	4619      	mov	r1, r3
3418ae54:	4610      	mov	r0, r2
3418ae56:	f000 fc95 	bl	3418b784 <RCC_IC_CheckPLLSources>
3418ae5a:	4603      	mov	r3, r0
3418ae5c:	2b01      	cmp	r3, #1
3418ae5e:	d001      	beq.n	3418ae64 <HAL_RCC_ClockConfig+0x218>
      {
        return HAL_ERROR;
3418ae60:	2301      	movs	r3, #1
3418ae62:	e0ef      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
3418ae64:	f7ff faf6 	bl	3418a454 <LL_RCC_IC6_GetSource>
3418ae68:	4602      	mov	r2, r0
3418ae6a:	687b      	ldr	r3, [r7, #4]
3418ae6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418ae6e:	4619      	mov	r1, r3
3418ae70:	4610      	mov	r0, r2
3418ae72:	f000 fc87 	bl	3418b784 <RCC_IC_CheckPLLSources>
3418ae76:	4603      	mov	r3, r0
3418ae78:	2b01      	cmp	r3, #1
3418ae7a:	d001      	beq.n	3418ae80 <HAL_RCC_ClockConfig+0x234>
      {
        return HAL_ERROR;
3418ae7c:	2301      	movs	r3, #1
3418ae7e:	e0e1      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
3418ae80:	f7ff faf6 	bl	3418a470 <LL_RCC_IC11_GetSource>
3418ae84:	4602      	mov	r2, r0
3418ae86:	687b      	ldr	r3, [r7, #4]
3418ae88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418ae8a:	4619      	mov	r1, r3
3418ae8c:	4610      	mov	r0, r2
3418ae8e:	f000 fc79 	bl	3418b784 <RCC_IC_CheckPLLSources>
3418ae92:	4603      	mov	r3, r0
3418ae94:	2b01      	cmp	r3, #1
3418ae96:	d001      	beq.n	3418ae9c <HAL_RCC_ClockConfig+0x250>
      {
        return HAL_ERROR;
3418ae98:	2301      	movs	r3, #1
3418ae9a:	e0d3      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
3418ae9c:	687b      	ldr	r3, [r7, #4]
3418ae9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418aea0:	687b      	ldr	r3, [r7, #4]
3418aea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418aea4:	3b01      	subs	r3, #1
3418aea6:	041b      	lsls	r3, r3, #16
3418aea8:	4914      	ldr	r1, [pc, #80]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418aeaa:	4313      	orrs	r3, r2
3418aeac:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
3418aeb0:	687b      	ldr	r3, [r7, #4]
3418aeb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3418aeb4:	687b      	ldr	r3, [r7, #4]
3418aeb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418aeb8:	3b01      	subs	r3, #1
3418aeba:	041b      	lsls	r3, r3, #16
3418aebc:	490f      	ldr	r1, [pc, #60]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418aebe:	4313      	orrs	r3, r2
3418aec0:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
3418aec4:	687b      	ldr	r3, [r7, #4]
3418aec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418aec8:	687b      	ldr	r3, [r7, #4]
3418aeca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418aecc:	3b01      	subs	r3, #1
3418aece:	041b      	lsls	r3, r3, #16
3418aed0:	490a      	ldr	r1, [pc, #40]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418aed2:	4313      	orrs	r3, r2
3418aed4:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
3418aed8:	4b08      	ldr	r3, [pc, #32]	@ (3418aefc <HAL_RCC_ClockConfig+0x2b0>)
3418aeda:	f240 4222 	movw	r2, #1058	@ 0x422
3418aede:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
3418aee2:	e016      	b.n	3418af12 <HAL_RCC_ClockConfig+0x2c6>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
3418aee4:	687b      	ldr	r3, [r7, #4]
3418aee6:	689b      	ldr	r3, [r3, #8]
3418aee8:	2b00      	cmp	r3, #0
3418aeea:	d10b      	bne.n	3418af04 <HAL_RCC_ClockConfig+0x2b8>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
3418aeec:	f7ff f868 	bl	34189fc0 <LL_RCC_HSI_IsReady>
3418aef0:	4603      	mov	r3, r0
3418aef2:	2b00      	cmp	r3, #0
3418aef4:	d10d      	bne.n	3418af12 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
3418aef6:	2301      	movs	r3, #1
3418aef8:	e0a4      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
3418aefa:	bf00      	nop
3418aefc:	56028000 	.word	0x56028000
3418af00:	341c0138 	.word	0x341c0138
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
3418af04:	f7ff f8c4 	bl	3418a090 <LL_RCC_MSI_IsReady>
3418af08:	4603      	mov	r3, r0
3418af0a:	2b00      	cmp	r3, #0
3418af0c:	d101      	bne.n	3418af12 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
3418af0e:	2301      	movs	r3, #1
3418af10:	e098      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
3418af12:	4b4e      	ldr	r3, [pc, #312]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418af14:	6a1b      	ldr	r3, [r3, #32]
3418af16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418af1a:	687b      	ldr	r3, [r7, #4]
3418af1c:	689b      	ldr	r3, [r3, #8]
3418af1e:	494b      	ldr	r1, [pc, #300]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418af20:	4313      	orrs	r3, r2
3418af22:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418af24:	f7f9 fac2 	bl	341844ac <HAL_GetTick>
3418af28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3418af2a:	e00a      	b.n	3418af42 <HAL_RCC_ClockConfig+0x2f6>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3418af2c:	f7f9 fabe 	bl	341844ac <HAL_GetTick>
3418af30:	4602      	mov	r2, r0
3418af32:	68fb      	ldr	r3, [r7, #12]
3418af34:	1ad3      	subs	r3, r2, r3
3418af36:	f241 3288 	movw	r2, #5000	@ 0x1388
3418af3a:	4293      	cmp	r3, r2
3418af3c:	d901      	bls.n	3418af42 <HAL_RCC_ClockConfig+0x2f6>
      {
        return HAL_TIMEOUT;
3418af3e:	2303      	movs	r3, #3
3418af40:	e080      	b.n	3418b044 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3418af42:	f7ff f93b 	bl	3418a1bc <LL_RCC_GetSysClkSource>
3418af46:	4602      	mov	r2, r0
3418af48:	687b      	ldr	r3, [r7, #4]
3418af4a:	689b      	ldr	r3, [r3, #8]
3418af4c:	011b      	lsls	r3, r3, #4
3418af4e:	429a      	cmp	r2, r3
3418af50:	d1ec      	bne.n	3418af2c <HAL_RCC_ClockConfig+0x2e0>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
3418af52:	687b      	ldr	r3, [r7, #4]
3418af54:	681b      	ldr	r3, [r3, #0]
3418af56:	f003 0304 	and.w	r3, r3, #4
3418af5a:	2b00      	cmp	r3, #0
3418af5c:	d010      	beq.n	3418af80 <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
3418af5e:	687b      	ldr	r3, [r7, #4]
3418af60:	68da      	ldr	r2, [r3, #12]
3418af62:	4b3a      	ldr	r3, [pc, #232]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418af64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418af66:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3418af6a:	429a      	cmp	r2, r3
3418af6c:	d208      	bcs.n	3418af80 <HAL_RCC_ClockConfig+0x334>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3418af6e:	4b37      	ldr	r3, [pc, #220]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418af70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418af72:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
3418af76:	687b      	ldr	r3, [r7, #4]
3418af78:	68db      	ldr	r3, [r3, #12]
3418af7a:	4934      	ldr	r1, [pc, #208]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418af7c:	4313      	orrs	r3, r2
3418af7e:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3418af80:	687b      	ldr	r3, [r7, #4]
3418af82:	681b      	ldr	r3, [r3, #0]
3418af84:	f003 0308 	and.w	r3, r3, #8
3418af88:	2b00      	cmp	r3, #0
3418af8a:	d010      	beq.n	3418afae <HAL_RCC_ClockConfig+0x362>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
3418af8c:	687b      	ldr	r3, [r7, #4]
3418af8e:	691a      	ldr	r2, [r3, #16]
3418af90:	4b2e      	ldr	r3, [pc, #184]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418af92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418af94:	f003 0307 	and.w	r3, r3, #7
3418af98:	429a      	cmp	r2, r3
3418af9a:	d208      	bcs.n	3418afae <HAL_RCC_ClockConfig+0x362>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
3418af9c:	4b2b      	ldr	r3, [pc, #172]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418af9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418afa0:	f023 0207 	bic.w	r2, r3, #7
3418afa4:	687b      	ldr	r3, [r7, #4]
3418afa6:	691b      	ldr	r3, [r3, #16]
3418afa8:	4928      	ldr	r1, [pc, #160]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418afaa:	4313      	orrs	r3, r2
3418afac:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
3418afae:	687b      	ldr	r3, [r7, #4]
3418afb0:	681b      	ldr	r3, [r3, #0]
3418afb2:	f003 0310 	and.w	r3, r3, #16
3418afb6:	2b00      	cmp	r3, #0
3418afb8:	d010      	beq.n	3418afdc <HAL_RCC_ClockConfig+0x390>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
3418afba:	687b      	ldr	r3, [r7, #4]
3418afbc:	695a      	ldr	r2, [r3, #20]
3418afbe:	4b23      	ldr	r3, [pc, #140]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418afc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418afc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
3418afc6:	429a      	cmp	r2, r3
3418afc8:	d208      	bcs.n	3418afdc <HAL_RCC_ClockConfig+0x390>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
3418afca:	4b20      	ldr	r3, [pc, #128]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418afcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418afce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
3418afd2:	687b      	ldr	r3, [r7, #4]
3418afd4:	695b      	ldr	r3, [r3, #20]
3418afd6:	491d      	ldr	r1, [pc, #116]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418afd8:	4313      	orrs	r3, r2
3418afda:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
3418afdc:	687b      	ldr	r3, [r7, #4]
3418afde:	681b      	ldr	r3, [r3, #0]
3418afe0:	f003 0320 	and.w	r3, r3, #32
3418afe4:	2b00      	cmp	r3, #0
3418afe6:	d010      	beq.n	3418b00a <HAL_RCC_ClockConfig+0x3be>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
3418afe8:	687b      	ldr	r3, [r7, #4]
3418afea:	699a      	ldr	r2, [r3, #24]
3418afec:	4b17      	ldr	r3, [pc, #92]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418afee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418aff0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3418aff4:	429a      	cmp	r2, r3
3418aff6:	d208      	bcs.n	3418b00a <HAL_RCC_ClockConfig+0x3be>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
3418aff8:	4b14      	ldr	r3, [pc, #80]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418affa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418affc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
3418b000:	687b      	ldr	r3, [r7, #4]
3418b002:	699b      	ldr	r3, [r3, #24]
3418b004:	4911      	ldr	r1, [pc, #68]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418b006:	4313      	orrs	r3, r2
3418b008:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3418b00a:	687b      	ldr	r3, [r7, #4]
3418b00c:	681b      	ldr	r3, [r3, #0]
3418b00e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418b012:	2b00      	cmp	r3, #0
3418b014:	d010      	beq.n	3418b038 <HAL_RCC_ClockConfig+0x3ec>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3418b016:	687b      	ldr	r3, [r7, #4]
3418b018:	69da      	ldr	r2, [r3, #28]
3418b01a:	4b0c      	ldr	r3, [pc, #48]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418b01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418b01e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
3418b022:	429a      	cmp	r2, r3
3418b024:	d208      	bcs.n	3418b038 <HAL_RCC_ClockConfig+0x3ec>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
3418b026:	4b09      	ldr	r3, [pc, #36]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418b028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418b02a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3418b02e:	687b      	ldr	r3, [r7, #4]
3418b030:	69db      	ldr	r3, [r3, #28]
3418b032:	4906      	ldr	r1, [pc, #24]	@ (3418b04c <HAL_RCC_ClockConfig+0x400>)
3418b034:	4313      	orrs	r3, r2
3418b036:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
3418b038:	4b05      	ldr	r3, [pc, #20]	@ (3418b050 <HAL_RCC_ClockConfig+0x404>)
3418b03a:	681b      	ldr	r3, [r3, #0]
3418b03c:	4618      	mov	r0, r3
3418b03e:	f7f9 f9eb 	bl	34184418 <HAL_InitTick>
3418b042:	4603      	mov	r3, r0
}
3418b044:	4618      	mov	r0, r3
3418b046:	3710      	adds	r7, #16
3418b048:	46bd      	mov	sp, r7
3418b04a:	bd80      	pop	{r7, pc}
3418b04c:	56028000 	.word	0x56028000
3418b050:	341c0068 	.word	0x341c0068

3418b054 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
3418b054:	b580      	push	{r7, lr}
3418b056:	b082      	sub	sp, #8
3418b058:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
3418b05a:	2300      	movs	r3, #0
3418b05c:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
3418b05e:	f7ff f89f 	bl	3418a1a0 <LL_RCC_GetCpuClkSource>
3418b062:	4603      	mov	r3, r0
3418b064:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418b068:	d025      	beq.n	3418b0b6 <HAL_RCC_GetCpuClockFreq+0x62>
3418b06a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418b06e:	d860      	bhi.n	3418b132 <HAL_RCC_GetCpuClockFreq+0xde>
3418b070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418b074:	d01c      	beq.n	3418b0b0 <HAL_RCC_GetCpuClockFreq+0x5c>
3418b076:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418b07a:	d85a      	bhi.n	3418b132 <HAL_RCC_GetCpuClockFreq+0xde>
3418b07c:	2b00      	cmp	r3, #0
3418b07e:	d003      	beq.n	3418b088 <HAL_RCC_GetCpuClockFreq+0x34>
3418b080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418b084:	d009      	beq.n	3418b09a <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b086:	e054      	b.n	3418b132 <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b088:	f7fe ffc0 	bl	3418a00c <LL_RCC_HSI_GetDivider>
3418b08c:	4603      	mov	r3, r0
3418b08e:	09db      	lsrs	r3, r3, #7
3418b090:	4a2b      	ldr	r2, [pc, #172]	@ (3418b140 <HAL_RCC_GetCpuClockFreq+0xec>)
3418b092:	fa22 f303 	lsr.w	r3, r2, r3
3418b096:	607b      	str	r3, [r7, #4]
      break;
3418b098:	e04c      	b.n	3418b134 <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418b09a:	f7ff f81f 	bl	3418a0dc <LL_RCC_MSI_GetFrequency>
3418b09e:	4603      	mov	r3, r0
3418b0a0:	2b00      	cmp	r3, #0
3418b0a2:	d102      	bne.n	3418b0aa <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
3418b0a4:	4b27      	ldr	r3, [pc, #156]	@ (3418b144 <HAL_RCC_GetCpuClockFreq+0xf0>)
3418b0a6:	607b      	str	r3, [r7, #4]
      break;
3418b0a8:	e044      	b.n	3418b134 <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
3418b0aa:	4b27      	ldr	r3, [pc, #156]	@ (3418b148 <HAL_RCC_GetCpuClockFreq+0xf4>)
3418b0ac:	607b      	str	r3, [r7, #4]
      break;
3418b0ae:	e041      	b.n	3418b134 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
3418b0b0:	4b26      	ldr	r3, [pc, #152]	@ (3418b14c <HAL_RCC_GetCpuClockFreq+0xf8>)
3418b0b2:	607b      	str	r3, [r7, #4]
      break;
3418b0b4:	e03e      	b.n	3418b134 <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
3418b0b6:	f7ff f99f 	bl	3418a3f8 <LL_RCC_IC1_GetDivider>
3418b0ba:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
3418b0bc:	f7ff f98e 	bl	3418a3dc <LL_RCC_IC1_GetSource>
3418b0c0:	4603      	mov	r3, r0
3418b0c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b0c6:	d029      	beq.n	3418b11c <HAL_RCC_GetCpuClockFreq+0xc8>
3418b0c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b0cc:	d82f      	bhi.n	3418b12e <HAL_RCC_GetCpuClockFreq+0xda>
3418b0ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b0d2:	d01a      	beq.n	3418b10a <HAL_RCC_GetCpuClockFreq+0xb6>
3418b0d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b0d8:	d829      	bhi.n	3418b12e <HAL_RCC_GetCpuClockFreq+0xda>
3418b0da:	2b00      	cmp	r3, #0
3418b0dc:	d003      	beq.n	3418b0e6 <HAL_RCC_GetCpuClockFreq+0x92>
3418b0de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b0e2:	d009      	beq.n	3418b0f8 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
3418b0e4:	e023      	b.n	3418b12e <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b0e6:	f003 fcd9 	bl	3418ea9c <HAL_RCCEx_GetPLL1CLKFreq>
3418b0ea:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418b0ec:	687a      	ldr	r2, [r7, #4]
3418b0ee:	683b      	ldr	r3, [r7, #0]
3418b0f0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b0f4:	607b      	str	r3, [r7, #4]
          break;
3418b0f6:	e01b      	b.n	3418b130 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b0f8:	f003 fd16 	bl	3418eb28 <HAL_RCCEx_GetPLL2CLKFreq>
3418b0fc:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418b0fe:	687a      	ldr	r2, [r7, #4]
3418b100:	683b      	ldr	r3, [r7, #0]
3418b102:	fbb2 f3f3 	udiv	r3, r2, r3
3418b106:	607b      	str	r3, [r7, #4]
          break;
3418b108:	e012      	b.n	3418b130 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b10a:	f003 fd53 	bl	3418ebb4 <HAL_RCCEx_GetPLL3CLKFreq>
3418b10e:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418b110:	687a      	ldr	r2, [r7, #4]
3418b112:	683b      	ldr	r3, [r7, #0]
3418b114:	fbb2 f3f3 	udiv	r3, r2, r3
3418b118:	607b      	str	r3, [r7, #4]
          break;
3418b11a:	e009      	b.n	3418b130 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b11c:	f003 fd90 	bl	3418ec40 <HAL_RCCEx_GetPLL4CLKFreq>
3418b120:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418b122:	687a      	ldr	r2, [r7, #4]
3418b124:	683b      	ldr	r3, [r7, #0]
3418b126:	fbb2 f3f3 	udiv	r3, r2, r3
3418b12a:	607b      	str	r3, [r7, #4]
          break;
3418b12c:	e000      	b.n	3418b130 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
3418b12e:	bf00      	nop
      break;
3418b130:	e000      	b.n	3418b134 <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
3418b132:	bf00      	nop
  }

  return frequency;
3418b134:	687b      	ldr	r3, [r7, #4]
}
3418b136:	4618      	mov	r0, r3
3418b138:	3708      	adds	r7, #8
3418b13a:	46bd      	mov	sp, r7
3418b13c:	bd80      	pop	{r7, pc}
3418b13e:	bf00      	nop
3418b140:	03d09000 	.word	0x03d09000
3418b144:	003d0900 	.word	0x003d0900
3418b148:	00f42400 	.word	0x00f42400
3418b14c:	02dc6c00 	.word	0x02dc6c00

3418b150 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
3418b150:	b580      	push	{r7, lr}
3418b152:	b082      	sub	sp, #8
3418b154:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
3418b156:	2300      	movs	r3, #0
3418b158:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
3418b15a:	f7ff f82f 	bl	3418a1bc <LL_RCC_GetSysClkSource>
3418b15e:	4603      	mov	r3, r0
3418b160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b164:	d025      	beq.n	3418b1b2 <HAL_RCC_GetSysClockFreq+0x62>
3418b166:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b16a:	d860      	bhi.n	3418b22e <HAL_RCC_GetSysClockFreq+0xde>
3418b16c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b170:	d01c      	beq.n	3418b1ac <HAL_RCC_GetSysClockFreq+0x5c>
3418b172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b176:	d85a      	bhi.n	3418b22e <HAL_RCC_GetSysClockFreq+0xde>
3418b178:	2b00      	cmp	r3, #0
3418b17a:	d003      	beq.n	3418b184 <HAL_RCC_GetSysClockFreq+0x34>
3418b17c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b180:	d009      	beq.n	3418b196 <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b182:	e054      	b.n	3418b22e <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b184:	f7fe ff42 	bl	3418a00c <LL_RCC_HSI_GetDivider>
3418b188:	4603      	mov	r3, r0
3418b18a:	09db      	lsrs	r3, r3, #7
3418b18c:	4a2b      	ldr	r2, [pc, #172]	@ (3418b23c <HAL_RCC_GetSysClockFreq+0xec>)
3418b18e:	fa22 f303 	lsr.w	r3, r2, r3
3418b192:	607b      	str	r3, [r7, #4]
      break;
3418b194:	e04c      	b.n	3418b230 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418b196:	f7fe ffa1 	bl	3418a0dc <LL_RCC_MSI_GetFrequency>
3418b19a:	4603      	mov	r3, r0
3418b19c:	2b00      	cmp	r3, #0
3418b19e:	d102      	bne.n	3418b1a6 <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
3418b1a0:	4b27      	ldr	r3, [pc, #156]	@ (3418b240 <HAL_RCC_GetSysClockFreq+0xf0>)
3418b1a2:	607b      	str	r3, [r7, #4]
      break;
3418b1a4:	e044      	b.n	3418b230 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
3418b1a6:	4b27      	ldr	r3, [pc, #156]	@ (3418b244 <HAL_RCC_GetSysClockFreq+0xf4>)
3418b1a8:	607b      	str	r3, [r7, #4]
      break;
3418b1aa:	e041      	b.n	3418b230 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
3418b1ac:	4b26      	ldr	r3, [pc, #152]	@ (3418b248 <HAL_RCC_GetSysClockFreq+0xf8>)
3418b1ae:	607b      	str	r3, [r7, #4]
      break;
3418b1b0:	e03e      	b.n	3418b230 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
3418b1b2:	f7ff f93f 	bl	3418a434 <LL_RCC_IC2_GetDivider>
3418b1b6:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
3418b1b8:	f7ff f92e 	bl	3418a418 <LL_RCC_IC2_GetSource>
3418b1bc:	4603      	mov	r3, r0
3418b1be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b1c2:	d029      	beq.n	3418b218 <HAL_RCC_GetSysClockFreq+0xc8>
3418b1c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b1c8:	d82f      	bhi.n	3418b22a <HAL_RCC_GetSysClockFreq+0xda>
3418b1ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b1ce:	d01a      	beq.n	3418b206 <HAL_RCC_GetSysClockFreq+0xb6>
3418b1d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b1d4:	d829      	bhi.n	3418b22a <HAL_RCC_GetSysClockFreq+0xda>
3418b1d6:	2b00      	cmp	r3, #0
3418b1d8:	d003      	beq.n	3418b1e2 <HAL_RCC_GetSysClockFreq+0x92>
3418b1da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b1de:	d009      	beq.n	3418b1f4 <HAL_RCC_GetSysClockFreq+0xa4>
          break;
3418b1e0:	e023      	b.n	3418b22a <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b1e2:	f003 fc5b 	bl	3418ea9c <HAL_RCCEx_GetPLL1CLKFreq>
3418b1e6:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418b1e8:	687a      	ldr	r2, [r7, #4]
3418b1ea:	683b      	ldr	r3, [r7, #0]
3418b1ec:	fbb2 f3f3 	udiv	r3, r2, r3
3418b1f0:	607b      	str	r3, [r7, #4]
          break;
3418b1f2:	e01b      	b.n	3418b22c <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b1f4:	f003 fc98 	bl	3418eb28 <HAL_RCCEx_GetPLL2CLKFreq>
3418b1f8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418b1fa:	687a      	ldr	r2, [r7, #4]
3418b1fc:	683b      	ldr	r3, [r7, #0]
3418b1fe:	fbb2 f3f3 	udiv	r3, r2, r3
3418b202:	607b      	str	r3, [r7, #4]
          break;
3418b204:	e012      	b.n	3418b22c <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b206:	f003 fcd5 	bl	3418ebb4 <HAL_RCCEx_GetPLL3CLKFreq>
3418b20a:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418b20c:	687a      	ldr	r2, [r7, #4]
3418b20e:	683b      	ldr	r3, [r7, #0]
3418b210:	fbb2 f3f3 	udiv	r3, r2, r3
3418b214:	607b      	str	r3, [r7, #4]
          break;
3418b216:	e009      	b.n	3418b22c <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b218:	f003 fd12 	bl	3418ec40 <HAL_RCCEx_GetPLL4CLKFreq>
3418b21c:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418b21e:	687a      	ldr	r2, [r7, #4]
3418b220:	683b      	ldr	r3, [r7, #0]
3418b222:	fbb2 f3f3 	udiv	r3, r2, r3
3418b226:	607b      	str	r3, [r7, #4]
          break;
3418b228:	e000      	b.n	3418b22c <HAL_RCC_GetSysClockFreq+0xdc>
          break;
3418b22a:	bf00      	nop
      break;
3418b22c:	e000      	b.n	3418b230 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
3418b22e:	bf00      	nop
  }

  return frequency;
3418b230:	687b      	ldr	r3, [r7, #4]
}
3418b232:	4618      	mov	r0, r3
3418b234:	3708      	adds	r7, #8
3418b236:	46bd      	mov	sp, r7
3418b238:	bd80      	pop	{r7, pc}
3418b23a:	bf00      	nop
3418b23c:	03d09000 	.word	0x03d09000
3418b240:	003d0900 	.word	0x003d0900
3418b244:	00f42400 	.word	0x00f42400
3418b248:	02dc6c00 	.word	0x02dc6c00

3418b24c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
3418b24c:	b598      	push	{r3, r4, r7, lr}
3418b24e:	af00      	add	r7, sp, #0
  return LL_RCC_CALC_PCLK1_FREQ(LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()),
3418b250:	f7ff ff7e 	bl	3418b150 <HAL_RCC_GetSysClockFreq>
3418b254:	4604      	mov	r4, r0
3418b256:	f7fe ffbf 	bl	3418a1d8 <LL_RCC_GetAHBPrescaler>
3418b25a:	4603      	mov	r3, r0
3418b25c:	0d1b      	lsrs	r3, r3, #20
3418b25e:	f003 0307 	and.w	r3, r3, #7
3418b262:	40dc      	lsrs	r4, r3
3418b264:	f7fe ffc6 	bl	3418a1f4 <LL_RCC_GetAPB1Prescaler>
3418b268:	4603      	mov	r3, r0
3418b26a:	f003 0307 	and.w	r3, r3, #7
3418b26e:	fa24 f303 	lsr.w	r3, r4, r3
                                LL_RCC_GetAPB1Prescaler());
}
3418b272:	4618      	mov	r0, r3
3418b274:	bd98      	pop	{r3, r4, r7, pc}
	...

3418b278 <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
3418b278:	b480      	push	{r7}
3418b27a:	b085      	sub	sp, #20
3418b27c:	af00      	add	r7, sp, #0
3418b27e:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
3418b280:	687b      	ldr	r3, [r7, #4]
3418b282:	227f      	movs	r2, #127	@ 0x7f
3418b284:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
3418b286:	4b36      	ldr	r3, [pc, #216]	@ (3418b360 <HAL_RCC_GetClockConfig+0xe8>)
3418b288:	6a1b      	ldr	r3, [r3, #32]
3418b28a:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
3418b28c:	68fb      	ldr	r3, [r7, #12]
3418b28e:	091b      	lsrs	r3, r3, #4
3418b290:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
3418b294:	687b      	ldr	r3, [r7, #4]
3418b296:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
3418b298:	68fb      	ldr	r3, [r7, #12]
3418b29a:	091b      	lsrs	r3, r3, #4
3418b29c:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
3418b2a0:	687b      	ldr	r3, [r7, #4]
3418b2a2:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
3418b2a4:	4b2e      	ldr	r3, [pc, #184]	@ (3418b360 <HAL_RCC_GetClockConfig+0xe8>)
3418b2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418b2a8:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
3418b2aa:	68fb      	ldr	r3, [r7, #12]
3418b2ac:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
3418b2b0:	687b      	ldr	r3, [r7, #4]
3418b2b2:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
3418b2b4:	68fb      	ldr	r3, [r7, #12]
3418b2b6:	f003 0207 	and.w	r2, r3, #7
3418b2ba:	687b      	ldr	r3, [r7, #4]
3418b2bc:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
3418b2be:	68fb      	ldr	r3, [r7, #12]
3418b2c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
3418b2c4:	687b      	ldr	r3, [r7, #4]
3418b2c6:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
3418b2c8:	68fb      	ldr	r3, [r7, #12]
3418b2ca:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
3418b2ce:	687b      	ldr	r3, [r7, #4]
3418b2d0:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
3418b2d2:	68fb      	ldr	r3, [r7, #12]
3418b2d4:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
3418b2d8:	687b      	ldr	r3, [r7, #4]
3418b2da:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
3418b2dc:	4b20      	ldr	r3, [pc, #128]	@ (3418b360 <HAL_RCC_GetClockConfig+0xe8>)
3418b2de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418b2e2:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
3418b2e4:	68fb      	ldr	r3, [r7, #12]
3418b2e6:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418b2ea:	687b      	ldr	r3, [r7, #4]
3418b2ec:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
3418b2ee:	68fb      	ldr	r3, [r7, #12]
3418b2f0:	0c1b      	lsrs	r3, r3, #16
3418b2f2:	b2db      	uxtb	r3, r3
3418b2f4:	1c5a      	adds	r2, r3, #1
3418b2f6:	687b      	ldr	r3, [r7, #4]
3418b2f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
3418b2fa:	4b19      	ldr	r3, [pc, #100]	@ (3418b360 <HAL_RCC_GetClockConfig+0xe8>)
3418b2fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418b300:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
3418b302:	68fb      	ldr	r3, [r7, #12]
3418b304:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418b308:	687b      	ldr	r3, [r7, #4]
3418b30a:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
3418b30c:	68fb      	ldr	r3, [r7, #12]
3418b30e:	0c1b      	lsrs	r3, r3, #16
3418b310:	b2db      	uxtb	r3, r3
3418b312:	1c5a      	adds	r2, r3, #1
3418b314:	687b      	ldr	r3, [r7, #4]
3418b316:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
3418b318:	4b11      	ldr	r3, [pc, #68]	@ (3418b360 <HAL_RCC_GetClockConfig+0xe8>)
3418b31a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418b31e:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
3418b320:	68fb      	ldr	r3, [r7, #12]
3418b322:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418b326:	687b      	ldr	r3, [r7, #4]
3418b328:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
3418b32a:	68fb      	ldr	r3, [r7, #12]
3418b32c:	0c1b      	lsrs	r3, r3, #16
3418b32e:	b2db      	uxtb	r3, r3
3418b330:	1c5a      	adds	r2, r3, #1
3418b332:	687b      	ldr	r3, [r7, #4]
3418b334:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
3418b336:	4b0a      	ldr	r3, [pc, #40]	@ (3418b360 <HAL_RCC_GetClockConfig+0xe8>)
3418b338:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418b33c:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
3418b33e:	68fb      	ldr	r3, [r7, #12]
3418b340:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418b344:	687b      	ldr	r3, [r7, #4]
3418b346:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
3418b348:	68fb      	ldr	r3, [r7, #12]
3418b34a:	0c1b      	lsrs	r3, r3, #16
3418b34c:	b2db      	uxtb	r3, r3
3418b34e:	1c5a      	adds	r2, r3, #1
3418b350:	687b      	ldr	r3, [r7, #4]
3418b352:	63da      	str	r2, [r3, #60]	@ 0x3c
}
3418b354:	bf00      	nop
3418b356:	3714      	adds	r7, #20
3418b358:	46bd      	mov	sp, r7
3418b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b35e:	4770      	bx	lr
3418b360:	56028000 	.word	0x56028000

3418b364 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
3418b364:	b580      	push	{r7, lr}
3418b366:	b088      	sub	sp, #32
3418b368:	af00      	add	r7, sp, #0
3418b36a:	6078      	str	r0, [r7, #4]
3418b36c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
3418b36e:	2300      	movs	r3, #0
3418b370:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3418b372:	687b      	ldr	r3, [r7, #4]
3418b374:	011a      	lsls	r2, r3, #4
3418b376:	4b8e      	ldr	r3, [pc, #568]	@ (3418b5b0 <RCC_PLL_Config+0x24c>)
3418b378:	4413      	add	r3, r2
3418b37a:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3418b37c:	687b      	ldr	r3, [r7, #4]
3418b37e:	011a      	lsls	r2, r3, #4
3418b380:	4b8c      	ldr	r3, [pc, #560]	@ (3418b5b4 <RCC_PLL_Config+0x250>)
3418b382:	4413      	add	r3, r2
3418b384:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3418b386:	687b      	ldr	r3, [r7, #4]
3418b388:	011a      	lsls	r2, r3, #4
3418b38a:	4b8b      	ldr	r3, [pc, #556]	@ (3418b5b8 <RCC_PLL_Config+0x254>)
3418b38c:	4413      	add	r3, r2
3418b38e:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
3418b390:	683b      	ldr	r3, [r7, #0]
3418b392:	681b      	ldr	r3, [r3, #0]
3418b394:	2b02      	cmp	r3, #2
3418b396:	f040 8091 	bne.w	3418b4bc <RCC_PLL_Config+0x158>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3418b39a:	4a88      	ldr	r2, [pc, #544]	@ (3418b5bc <RCC_PLL_Config+0x258>)
3418b39c:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b3a0:	687b      	ldr	r3, [r7, #4]
3418b3a2:	fa01 f303 	lsl.w	r3, r1, r3
3418b3a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418b3aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418b3ac:	f7f9 f87e 	bl	341844ac <HAL_GetTick>
3418b3b0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418b3b2:	e008      	b.n	3418b3c6 <RCC_PLL_Config+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418b3b4:	f7f9 f87a 	bl	341844ac <HAL_GetTick>
3418b3b8:	4602      	mov	r2, r0
3418b3ba:	68fb      	ldr	r3, [r7, #12]
3418b3bc:	1ad3      	subs	r3, r2, r3
3418b3be:	2b01      	cmp	r3, #1
3418b3c0:	d901      	bls.n	3418b3c6 <RCC_PLL_Config+0x62>
      {
        return HAL_TIMEOUT;
3418b3c2:	2303      	movs	r3, #3
3418b3c4:	e0f0      	b.n	3418b5a8 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418b3c6:	4b7d      	ldr	r3, [pc, #500]	@ (3418b5bc <RCC_PLL_Config+0x258>)
3418b3c8:	685a      	ldr	r2, [r3, #4]
3418b3ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b3ce:	687b      	ldr	r3, [r7, #4]
3418b3d0:	fa01 f303 	lsl.w	r3, r1, r3
3418b3d4:	401a      	ands	r2, r3
3418b3d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b3da:	687b      	ldr	r3, [r7, #4]
3418b3dc:	fa01 f303 	lsl.w	r3, r1, r3
3418b3e0:	429a      	cmp	r2, r3
3418b3e2:	d0e7      	beq.n	3418b3b4 <RCC_PLL_Config+0x50>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3418b3e4:	693b      	ldr	r3, [r7, #16]
3418b3e6:	681b      	ldr	r3, [r3, #0]
3418b3e8:	f043 0204 	orr.w	r2, r3, #4
3418b3ec:	693b      	ldr	r3, [r7, #16]
3418b3ee:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3418b3f0:	69bb      	ldr	r3, [r7, #24]
3418b3f2:	681b      	ldr	r3, [r3, #0]
3418b3f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3418b3f8:	69bb      	ldr	r3, [r7, #24]
3418b3fa:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
3418b3fc:	69bb      	ldr	r3, [r7, #24]
3418b3fe:	681a      	ldr	r2, [r3, #0]
3418b400:	4b6f      	ldr	r3, [pc, #444]	@ (3418b5c0 <RCC_PLL_Config+0x25c>)
3418b402:	4013      	ands	r3, r2
3418b404:	683a      	ldr	r2, [r7, #0]
3418b406:	6851      	ldr	r1, [r2, #4]
3418b408:	683a      	ldr	r2, [r7, #0]
3418b40a:	6892      	ldr	r2, [r2, #8]
3418b40c:	0512      	lsls	r2, r2, #20
3418b40e:	4311      	orrs	r1, r2
3418b410:	683a      	ldr	r2, [r7, #0]
3418b412:	6912      	ldr	r2, [r2, #16]
3418b414:	0212      	lsls	r2, r2, #8
3418b416:	430a      	orrs	r2, r1
3418b418:	431a      	orrs	r2, r3
3418b41a:	69bb      	ldr	r3, [r7, #24]
3418b41c:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
3418b41e:	693b      	ldr	r3, [r7, #16]
3418b420:	681b      	ldr	r3, [r3, #0]
3418b422:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
3418b426:	683b      	ldr	r3, [r7, #0]
3418b428:	695b      	ldr	r3, [r3, #20]
3418b42a:	06d9      	lsls	r1, r3, #27
3418b42c:	683b      	ldr	r3, [r7, #0]
3418b42e:	699b      	ldr	r3, [r3, #24]
3418b430:	061b      	lsls	r3, r3, #24
3418b432:	430b      	orrs	r3, r1
3418b434:	431a      	orrs	r2, r3
3418b436:	693b      	ldr	r3, [r7, #16]
3418b438:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
3418b43a:	697b      	ldr	r3, [r7, #20]
3418b43c:	681b      	ldr	r3, [r3, #0]
3418b43e:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
3418b442:	683b      	ldr	r3, [r7, #0]
3418b444:	68db      	ldr	r3, [r3, #12]
3418b446:	431a      	orrs	r2, r3
3418b448:	697b      	ldr	r3, [r7, #20]
3418b44a:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
3418b44c:	693b      	ldr	r3, [r7, #16]
3418b44e:	681b      	ldr	r3, [r3, #0]
3418b450:	f023 0208 	bic.w	r2, r3, #8
3418b454:	693b      	ldr	r3, [r7, #16]
3418b456:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
3418b458:	683b      	ldr	r3, [r7, #0]
3418b45a:	68db      	ldr	r3, [r3, #12]
3418b45c:	2b00      	cmp	r3, #0
3418b45e:	d005      	beq.n	3418b46c <RCC_PLL_Config+0x108>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
3418b460:	693b      	ldr	r3, [r7, #16]
3418b462:	681b      	ldr	r3, [r3, #0]
3418b464:	f043 020a 	orr.w	r2, r3, #10
3418b468:	693b      	ldr	r3, [r7, #16]
3418b46a:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
3418b46c:	693b      	ldr	r3, [r7, #16]
3418b46e:	681b      	ldr	r3, [r3, #0]
3418b470:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3418b474:	f043 0301 	orr.w	r3, r3, #1
3418b478:	693a      	ldr	r2, [r7, #16]
3418b47a:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3418b47c:	4a4f      	ldr	r2, [pc, #316]	@ (3418b5bc <RCC_PLL_Config+0x258>)
3418b47e:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b482:	687b      	ldr	r3, [r7, #4]
3418b484:	fa01 f303 	lsl.w	r3, r1, r3
3418b488:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418b48c:	f7f9 f80e 	bl	341844ac <HAL_GetTick>
3418b490:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418b492:	e008      	b.n	3418b4a6 <RCC_PLL_Config+0x142>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418b494:	f7f9 f80a 	bl	341844ac <HAL_GetTick>
3418b498:	4602      	mov	r2, r0
3418b49a:	68fb      	ldr	r3, [r7, #12]
3418b49c:	1ad3      	subs	r3, r2, r3
3418b49e:	2b01      	cmp	r3, #1
3418b4a0:	d901      	bls.n	3418b4a6 <RCC_PLL_Config+0x142>
      {
        return HAL_TIMEOUT;
3418b4a2:	2303      	movs	r3, #3
3418b4a4:	e080      	b.n	3418b5a8 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418b4a6:	4b45      	ldr	r3, [pc, #276]	@ (3418b5bc <RCC_PLL_Config+0x258>)
3418b4a8:	685a      	ldr	r2, [r3, #4]
3418b4aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b4ae:	687b      	ldr	r3, [r7, #4]
3418b4b0:	fa01 f303 	lsl.w	r3, r1, r3
3418b4b4:	4013      	ands	r3, r2
3418b4b6:	2b00      	cmp	r3, #0
3418b4b8:	d0ec      	beq.n	3418b494 <RCC_PLL_Config+0x130>
3418b4ba:	e074      	b.n	3418b5a6 <RCC_PLL_Config+0x242>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
3418b4bc:	683b      	ldr	r3, [r7, #0]
3418b4be:	681b      	ldr	r3, [r3, #0]
3418b4c0:	2b03      	cmp	r3, #3
3418b4c2:	d13b      	bne.n	3418b53c <RCC_PLL_Config+0x1d8>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
3418b4c4:	683b      	ldr	r3, [r7, #0]
3418b4c6:	685b      	ldr	r3, [r3, #4]
3418b4c8:	4618      	mov	r0, r3
3418b4ca:	f000 f921 	bl	3418b710 <RCC_PLL_Source_IsReady>
3418b4ce:	4603      	mov	r3, r0
3418b4d0:	2b01      	cmp	r3, #1
3418b4d2:	d130      	bne.n	3418b536 <RCC_PLL_Config+0x1d2>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3418b4d4:	4a39      	ldr	r2, [pc, #228]	@ (3418b5bc <RCC_PLL_Config+0x258>)
3418b4d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b4da:	687b      	ldr	r3, [r7, #4]
3418b4dc:	fa01 f303 	lsl.w	r3, r1, r3
3418b4e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418b4e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418b4e6:	f7f8 ffe1 	bl	341844ac <HAL_GetTick>
3418b4ea:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418b4ec:	e008      	b.n	3418b500 <RCC_PLL_Config+0x19c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418b4ee:	f7f8 ffdd 	bl	341844ac <HAL_GetTick>
3418b4f2:	4602      	mov	r2, r0
3418b4f4:	68fb      	ldr	r3, [r7, #12]
3418b4f6:	1ad3      	subs	r3, r2, r3
3418b4f8:	2b01      	cmp	r3, #1
3418b4fa:	d901      	bls.n	3418b500 <RCC_PLL_Config+0x19c>
        {
          return HAL_TIMEOUT;
3418b4fc:	2303      	movs	r3, #3
3418b4fe:	e053      	b.n	3418b5a8 <RCC_PLL_Config+0x244>
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418b500:	4b2e      	ldr	r3, [pc, #184]	@ (3418b5bc <RCC_PLL_Config+0x258>)
3418b502:	685a      	ldr	r2, [r3, #4]
3418b504:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b508:	687b      	ldr	r3, [r7, #4]
3418b50a:	fa01 f303 	lsl.w	r3, r1, r3
3418b50e:	401a      	ands	r2, r3
3418b510:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b514:	687b      	ldr	r3, [r7, #4]
3418b516:	fa01 f303 	lsl.w	r3, r1, r3
3418b51a:	429a      	cmp	r2, r3
3418b51c:	d0e7      	beq.n	3418b4ee <RCC_PLL_Config+0x18a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
3418b51e:	69bb      	ldr	r3, [r7, #24]
3418b520:	681b      	ldr	r3, [r3, #0]
3418b522:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
3418b526:	683b      	ldr	r3, [r7, #0]
3418b528:	685b      	ldr	r3, [r3, #4]
3418b52a:	4313      	orrs	r3, r2
3418b52c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418b530:	69bb      	ldr	r3, [r7, #24]
3418b532:	601a      	str	r2, [r3, #0]
3418b534:	e037      	b.n	3418b5a6 <RCC_PLL_Config+0x242>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
3418b536:	2301      	movs	r3, #1
3418b538:	77fb      	strb	r3, [r7, #31]
3418b53a:	e034      	b.n	3418b5a6 <RCC_PLL_Config+0x242>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
3418b53c:	683b      	ldr	r3, [r7, #0]
3418b53e:	681b      	ldr	r3, [r3, #0]
3418b540:	2b01      	cmp	r3, #1
3418b542:	d130      	bne.n	3418b5a6 <RCC_PLL_Config+0x242>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
3418b544:	693b      	ldr	r3, [r7, #16]
3418b546:	681b      	ldr	r3, [r3, #0]
3418b548:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
3418b54c:	693b      	ldr	r3, [r7, #16]
3418b54e:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3418b550:	4a1a      	ldr	r2, [pc, #104]	@ (3418b5bc <RCC_PLL_Config+0x258>)
3418b552:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b556:	687b      	ldr	r3, [r7, #4]
3418b558:	fa01 f303 	lsl.w	r3, r1, r3
3418b55c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418b560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418b562:	f7f8 ffa3 	bl	341844ac <HAL_GetTick>
3418b566:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418b568:	e008      	b.n	3418b57c <RCC_PLL_Config+0x218>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418b56a:	f7f8 ff9f 	bl	341844ac <HAL_GetTick>
3418b56e:	4602      	mov	r2, r0
3418b570:	68fb      	ldr	r3, [r7, #12]
3418b572:	1ad3      	subs	r3, r2, r3
3418b574:	2b01      	cmp	r3, #1
3418b576:	d901      	bls.n	3418b57c <RCC_PLL_Config+0x218>
      {
        return HAL_TIMEOUT;
3418b578:	2303      	movs	r3, #3
3418b57a:	e015      	b.n	3418b5a8 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418b57c:	4b0f      	ldr	r3, [pc, #60]	@ (3418b5bc <RCC_PLL_Config+0x258>)
3418b57e:	685a      	ldr	r2, [r3, #4]
3418b580:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b584:	687b      	ldr	r3, [r7, #4]
3418b586:	fa01 f303 	lsl.w	r3, r1, r3
3418b58a:	401a      	ands	r2, r3
3418b58c:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b590:	687b      	ldr	r3, [r7, #4]
3418b592:	fa01 f303 	lsl.w	r3, r1, r3
3418b596:	429a      	cmp	r2, r3
3418b598:	d0e7      	beq.n	3418b56a <RCC_PLL_Config+0x206>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3418b59a:	69bb      	ldr	r3, [r7, #24]
3418b59c:	681b      	ldr	r3, [r3, #0]
3418b59e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3418b5a2:	69bb      	ldr	r3, [r7, #24]
3418b5a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
3418b5a6:	7ffb      	ldrb	r3, [r7, #31]
}
3418b5a8:	4618      	mov	r0, r3
3418b5aa:	3720      	adds	r7, #32
3418b5ac:	46bd      	mov	sp, r7
3418b5ae:	bd80      	pop	{r7, pc}
3418b5b0:	56028080 	.word	0x56028080
3418b5b4:	56028084 	.word	0x56028084
3418b5b8:	56028088 	.word	0x56028088
3418b5bc:	56028000 	.word	0x56028000
3418b5c0:	8c0000ff 	.word	0x8c0000ff

3418b5c4 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
3418b5c4:	b580      	push	{r7, lr}
3418b5c6:	b084      	sub	sp, #16
3418b5c8:	af00      	add	r7, sp, #0
3418b5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
3418b5cc:	2300      	movs	r3, #0
3418b5ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3418b5d0:	4a11      	ldr	r2, [pc, #68]	@ (3418b618 <RCC_PLL_Enable+0x54>)
3418b5d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b5d6:	687b      	ldr	r3, [r7, #4]
3418b5d8:	fa01 f303 	lsl.w	r3, r1, r3
3418b5dc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
3418b5e0:	f7f8 ff64 	bl	341844ac <HAL_GetTick>
3418b5e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418b5e6:	e008      	b.n	3418b5fa <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418b5e8:	f7f8 ff60 	bl	341844ac <HAL_GetTick>
3418b5ec:	4602      	mov	r2, r0
3418b5ee:	68bb      	ldr	r3, [r7, #8]
3418b5f0:	1ad3      	subs	r3, r2, r3
3418b5f2:	2b01      	cmp	r3, #1
3418b5f4:	d901      	bls.n	3418b5fa <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
3418b5f6:	2303      	movs	r3, #3
3418b5f8:	e00a      	b.n	3418b610 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418b5fa:	4b07      	ldr	r3, [pc, #28]	@ (3418b618 <RCC_PLL_Enable+0x54>)
3418b5fc:	685a      	ldr	r2, [r3, #4]
3418b5fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b602:	687b      	ldr	r3, [r7, #4]
3418b604:	fa01 f303 	lsl.w	r3, r1, r3
3418b608:	4013      	ands	r3, r2
3418b60a:	2b00      	cmp	r3, #0
3418b60c:	d0ec      	beq.n	3418b5e8 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
3418b60e:	7bfb      	ldrb	r3, [r7, #15]
}
3418b610:	4618      	mov	r0, r3
3418b612:	3710      	adds	r7, #16
3418b614:	46bd      	mov	sp, r7
3418b616:	bd80      	pop	{r7, pc}
3418b618:	56028000 	.word	0x56028000

3418b61c <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
3418b61c:	b480      	push	{r7}
3418b61e:	b089      	sub	sp, #36	@ 0x24
3418b620:	af00      	add	r7, sp, #0
3418b622:	6078      	str	r0, [r7, #4]
3418b624:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
3418b626:	2300      	movs	r3, #0
3418b628:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3418b62a:	687b      	ldr	r3, [r7, #4]
3418b62c:	011a      	lsls	r2, r3, #4
3418b62e:	4b34      	ldr	r3, [pc, #208]	@ (3418b700 <RCC_PLL_IsNewConfig+0xe4>)
3418b630:	4413      	add	r3, r2
3418b632:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3418b634:	687b      	ldr	r3, [r7, #4]
3418b636:	011a      	lsls	r2, r3, #4
3418b638:	4b32      	ldr	r3, [pc, #200]	@ (3418b704 <RCC_PLL_IsNewConfig+0xe8>)
3418b63a:	4413      	add	r3, r2
3418b63c:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3418b63e:	687b      	ldr	r3, [r7, #4]
3418b640:	011a      	lsls	r2, r3, #4
3418b642:	4b31      	ldr	r3, [pc, #196]	@ (3418b708 <RCC_PLL_IsNewConfig+0xec>)
3418b644:	4413      	add	r3, r2
3418b646:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3418b648:	697b      	ldr	r3, [r7, #20]
3418b64a:	681b      	ldr	r3, [r3, #0]
3418b64c:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
3418b650:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
3418b654:	683a      	ldr	r2, [r7, #0]
3418b656:	6851      	ldr	r1, [r2, #4]
3418b658:	683a      	ldr	r2, [r7, #0]
3418b65a:	6892      	ldr	r2, [r2, #8]
3418b65c:	0512      	lsls	r2, r2, #20
3418b65e:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
3418b660:	683a      	ldr	r2, [r7, #0]
3418b662:	6912      	ldr	r2, [r2, #16]
3418b664:	0212      	lsls	r2, r2, #8
3418b666:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3418b668:	4293      	cmp	r3, r2
3418b66a:	d002      	beq.n	3418b672 <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
3418b66c:	2301      	movs	r3, #1
3418b66e:	61fb      	str	r3, [r7, #28]
3418b670:	e03e      	b.n	3418b6f0 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3418b672:	693b      	ldr	r3, [r7, #16]
3418b674:	681b      	ldr	r3, [r3, #0]
3418b676:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
3418b67a:	683b      	ldr	r3, [r7, #0]
3418b67c:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3418b67e:	429a      	cmp	r2, r3
3418b680:	d002      	beq.n	3418b688 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
3418b682:	2301      	movs	r3, #1
3418b684:	61fb      	str	r3, [r7, #28]
3418b686:	e033      	b.n	3418b6f0 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3418b688:	68fb      	ldr	r3, [r7, #12]
3418b68a:	681b      	ldr	r3, [r3, #0]
3418b68c:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
3418b690:	683b      	ldr	r3, [r7, #0]
3418b692:	695b      	ldr	r3, [r3, #20]
3418b694:	06d9      	lsls	r1, r3, #27
3418b696:	683b      	ldr	r3, [r7, #0]
3418b698:	699b      	ldr	r3, [r3, #24]
3418b69a:	061b      	lsls	r3, r3, #24
3418b69c:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3418b69e:	429a      	cmp	r2, r3
3418b6a0:	d002      	beq.n	3418b6a8 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
3418b6a2:	2301      	movs	r3, #1
3418b6a4:	61fb      	str	r3, [r7, #28]
3418b6a6:	e023      	b.n	3418b6f0 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418b6a8:	4b18      	ldr	r3, [pc, #96]	@ (3418b70c <RCC_PLL_IsNewConfig+0xf0>)
3418b6aa:	685a      	ldr	r2, [r3, #4]
3418b6ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b6b0:	687b      	ldr	r3, [r7, #4]
3418b6b2:	fa01 f303 	lsl.w	r3, r1, r3
3418b6b6:	401a      	ands	r2, r3
3418b6b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418b6bc:	687b      	ldr	r3, [r7, #4]
3418b6be:	fa01 f303 	lsl.w	r3, r1, r3
3418b6c2:	429a      	cmp	r2, r3
3418b6c4:	d102      	bne.n	3418b6cc <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
3418b6c6:	2302      	movs	r3, #2
3418b6c8:	61bb      	str	r3, [r7, #24]
3418b6ca:	e00a      	b.n	3418b6e2 <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
3418b6cc:	697b      	ldr	r3, [r7, #20]
3418b6ce:	681b      	ldr	r3, [r3, #0]
3418b6d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418b6d4:	2b00      	cmp	r3, #0
3418b6d6:	d002      	beq.n	3418b6de <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
3418b6d8:	2303      	movs	r3, #3
3418b6da:	61bb      	str	r3, [r7, #24]
3418b6dc:	e001      	b.n	3418b6e2 <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
3418b6de:	2301      	movs	r3, #1
3418b6e0:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3418b6e2:	683b      	ldr	r3, [r7, #0]
3418b6e4:	681b      	ldr	r3, [r3, #0]
3418b6e6:	69ba      	ldr	r2, [r7, #24]
3418b6e8:	429a      	cmp	r2, r3
3418b6ea:	d001      	beq.n	3418b6f0 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
3418b6ec:	2301      	movs	r3, #1
3418b6ee:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
3418b6f0:	69fb      	ldr	r3, [r7, #28]
}
3418b6f2:	4618      	mov	r0, r3
3418b6f4:	3724      	adds	r7, #36	@ 0x24
3418b6f6:	46bd      	mov	sp, r7
3418b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b6fc:	4770      	bx	lr
3418b6fe:	bf00      	nop
3418b700:	56028080 	.word	0x56028080
3418b704:	56028084 	.word	0x56028084
3418b708:	56028088 	.word	0x56028088
3418b70c:	56028000 	.word	0x56028000

3418b710 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
3418b710:	b580      	push	{r7, lr}
3418b712:	b084      	sub	sp, #16
3418b714:	af00      	add	r7, sp, #0
3418b716:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
3418b718:	2301      	movs	r3, #1
3418b71a:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
3418b71c:	687b      	ldr	r3, [r7, #4]
3418b71e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b722:	d01b      	beq.n	3418b75c <RCC_PLL_Source_IsReady+0x4c>
3418b724:	687b      	ldr	r3, [r7, #4]
3418b726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b72a:	d81f      	bhi.n	3418b76c <RCC_PLL_Source_IsReady+0x5c>
3418b72c:	687b      	ldr	r3, [r7, #4]
3418b72e:	2b00      	cmp	r3, #0
3418b730:	d004      	beq.n	3418b73c <RCC_PLL_Source_IsReady+0x2c>
3418b732:	687b      	ldr	r3, [r7, #4]
3418b734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b738:	d008      	beq.n	3418b74c <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
3418b73a:	e017      	b.n	3418b76c <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
3418b73c:	f7fe fc40 	bl	34189fc0 <LL_RCC_HSI_IsReady>
3418b740:	4603      	mov	r3, r0
3418b742:	2b00      	cmp	r3, #0
3418b744:	d114      	bne.n	3418b770 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
3418b746:	2300      	movs	r3, #0
3418b748:	60fb      	str	r3, [r7, #12]
      break;
3418b74a:	e011      	b.n	3418b770 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
3418b74c:	f7fe fca0 	bl	3418a090 <LL_RCC_MSI_IsReady>
3418b750:	4603      	mov	r3, r0
3418b752:	2b00      	cmp	r3, #0
3418b754:	d10e      	bne.n	3418b774 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
3418b756:	2300      	movs	r3, #0
3418b758:	60fb      	str	r3, [r7, #12]
      break;
3418b75a:	e00b      	b.n	3418b774 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
3418b75c:	f7fe fc00 	bl	34189f60 <LL_RCC_HSE_IsReady>
3418b760:	4603      	mov	r3, r0
3418b762:	2b00      	cmp	r3, #0
3418b764:	d108      	bne.n	3418b778 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
3418b766:	2300      	movs	r3, #0
3418b768:	60fb      	str	r3, [r7, #12]
      break;
3418b76a:	e005      	b.n	3418b778 <RCC_PLL_Source_IsReady+0x68>
      break;
3418b76c:	bf00      	nop
3418b76e:	e004      	b.n	3418b77a <RCC_PLL_Source_IsReady+0x6a>
      break;
3418b770:	bf00      	nop
3418b772:	e002      	b.n	3418b77a <RCC_PLL_Source_IsReady+0x6a>
      break;
3418b774:	bf00      	nop
3418b776:	e000      	b.n	3418b77a <RCC_PLL_Source_IsReady+0x6a>
      break;
3418b778:	bf00      	nop
  }

  return ret;
3418b77a:	68fb      	ldr	r3, [r7, #12]
}
3418b77c:	4618      	mov	r0, r3
3418b77e:	3710      	adds	r7, #16
3418b780:	46bd      	mov	sp, r7
3418b782:	bd80      	pop	{r7, pc}

3418b784 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
3418b784:	b580      	push	{r7, lr}
3418b786:	b084      	sub	sp, #16
3418b788:	af00      	add	r7, sp, #0
3418b78a:	6078      	str	r0, [r7, #4]
3418b78c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
3418b78e:	2301      	movs	r3, #1
3418b790:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
3418b792:	687b      	ldr	r3, [r7, #4]
3418b794:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b798:	d03a      	beq.n	3418b810 <RCC_IC_CheckPLLSources+0x8c>
3418b79a:	687b      	ldr	r3, [r7, #4]
3418b79c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b7a0:	d843      	bhi.n	3418b82a <RCC_IC_CheckPLLSources+0xa6>
3418b7a2:	687b      	ldr	r3, [r7, #4]
3418b7a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b7a8:	d025      	beq.n	3418b7f6 <RCC_IC_CheckPLLSources+0x72>
3418b7aa:	687b      	ldr	r3, [r7, #4]
3418b7ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b7b0:	d83b      	bhi.n	3418b82a <RCC_IC_CheckPLLSources+0xa6>
3418b7b2:	687b      	ldr	r3, [r7, #4]
3418b7b4:	2b00      	cmp	r3, #0
3418b7b6:	d004      	beq.n	3418b7c2 <RCC_IC_CheckPLLSources+0x3e>
3418b7b8:	687b      	ldr	r3, [r7, #4]
3418b7ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b7be:	d00d      	beq.n	3418b7dc <RCC_IC_CheckPLLSources+0x58>
3418b7c0:	e033      	b.n	3418b82a <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3418b7c2:	f7fe fd33 	bl	3418a22c <LL_RCC_PLL1_IsReady>
3418b7c6:	4603      	mov	r3, r0
3418b7c8:	2b00      	cmp	r3, #0
3418b7ca:	d131      	bne.n	3418b830 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
3418b7cc:	f7fe fd42 	bl	3418a254 <LL_RCC_PLL1_IsEnabledBypass>
3418b7d0:	4603      	mov	r3, r0
3418b7d2:	2b00      	cmp	r3, #0
3418b7d4:	d12c      	bne.n	3418b830 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3418b7d6:	2300      	movs	r3, #0
3418b7d8:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418b7da:	e029      	b.n	3418b830 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
3418b7dc:	f7fe fd5c 	bl	3418a298 <LL_RCC_PLL2_IsReady>
3418b7e0:	4603      	mov	r3, r0
3418b7e2:	2b00      	cmp	r3, #0
3418b7e4:	d126      	bne.n	3418b834 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418b7e6:	f7fe fd6b 	bl	3418a2c0 <LL_RCC_PLL2_IsEnabledBypass>
3418b7ea:	4603      	mov	r3, r0
3418b7ec:	2b00      	cmp	r3, #0
3418b7ee:	d121      	bne.n	3418b834 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
3418b7f0:	2300      	movs	r3, #0
3418b7f2:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418b7f4:	e01e      	b.n	3418b834 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418b7f6:	f7fe fd85 	bl	3418a304 <LL_RCC_PLL3_IsReady>
3418b7fa:	4603      	mov	r3, r0
3418b7fc:	2b00      	cmp	r3, #0
3418b7fe:	d11b      	bne.n	3418b838 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
3418b800:	f7fe fd94 	bl	3418a32c <LL_RCC_PLL3_IsEnabledBypass>
3418b804:	4603      	mov	r3, r0
3418b806:	2b00      	cmp	r3, #0
3418b808:	d116      	bne.n	3418b838 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
3418b80a:	2300      	movs	r3, #0
3418b80c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418b80e:	e013      	b.n	3418b838 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
3418b810:	f7fe fdae 	bl	3418a370 <LL_RCC_PLL4_IsReady>
3418b814:	4603      	mov	r3, r0
3418b816:	2b00      	cmp	r3, #0
3418b818:	d110      	bne.n	3418b83c <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418b81a:	f7fe fdbd 	bl	3418a398 <LL_RCC_PLL4_IsEnabledBypass>
3418b81e:	4603      	mov	r3, r0
3418b820:	2b00      	cmp	r3, #0
3418b822:	d10b      	bne.n	3418b83c <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
3418b824:	2300      	movs	r3, #0
3418b826:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418b828:	e008      	b.n	3418b83c <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
3418b82a:	2300      	movs	r3, #0
3418b82c:	60fb      	str	r3, [r7, #12]
      break;
3418b82e:	e006      	b.n	3418b83e <RCC_IC_CheckPLLSources+0xba>
      break;
3418b830:	bf00      	nop
3418b832:	e004      	b.n	3418b83e <RCC_IC_CheckPLLSources+0xba>
      break;
3418b834:	bf00      	nop
3418b836:	e002      	b.n	3418b83e <RCC_IC_CheckPLLSources+0xba>
      break;
3418b838:	bf00      	nop
3418b83a:	e000      	b.n	3418b83e <RCC_IC_CheckPLLSources+0xba>
      break;
3418b83c:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
3418b83e:	683b      	ldr	r3, [r7, #0]
3418b840:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b844:	d03a      	beq.n	3418b8bc <RCC_IC_CheckPLLSources+0x138>
3418b846:	683b      	ldr	r3, [r7, #0]
3418b848:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b84c:	d843      	bhi.n	3418b8d6 <RCC_IC_CheckPLLSources+0x152>
3418b84e:	683b      	ldr	r3, [r7, #0]
3418b850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b854:	d025      	beq.n	3418b8a2 <RCC_IC_CheckPLLSources+0x11e>
3418b856:	683b      	ldr	r3, [r7, #0]
3418b858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b85c:	d83b      	bhi.n	3418b8d6 <RCC_IC_CheckPLLSources+0x152>
3418b85e:	683b      	ldr	r3, [r7, #0]
3418b860:	2b00      	cmp	r3, #0
3418b862:	d004      	beq.n	3418b86e <RCC_IC_CheckPLLSources+0xea>
3418b864:	683b      	ldr	r3, [r7, #0]
3418b866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b86a:	d00d      	beq.n	3418b888 <RCC_IC_CheckPLLSources+0x104>
3418b86c:	e033      	b.n	3418b8d6 <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3418b86e:	f7fe fcdd 	bl	3418a22c <LL_RCC_PLL1_IsReady>
3418b872:	4603      	mov	r3, r0
3418b874:	2b00      	cmp	r3, #0
3418b876:	d131      	bne.n	3418b8dc <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
3418b878:	f7fe fcec 	bl	3418a254 <LL_RCC_PLL1_IsEnabledBypass>
3418b87c:	4603      	mov	r3, r0
3418b87e:	2b00      	cmp	r3, #0
3418b880:	d12c      	bne.n	3418b8dc <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
3418b882:	2300      	movs	r3, #0
3418b884:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418b886:	e029      	b.n	3418b8dc <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
3418b888:	f7fe fd06 	bl	3418a298 <LL_RCC_PLL2_IsReady>
3418b88c:	4603      	mov	r3, r0
3418b88e:	2b00      	cmp	r3, #0
3418b890:	d126      	bne.n	3418b8e0 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418b892:	f7fe fd15 	bl	3418a2c0 <LL_RCC_PLL2_IsEnabledBypass>
3418b896:	4603      	mov	r3, r0
3418b898:	2b00      	cmp	r3, #0
3418b89a:	d121      	bne.n	3418b8e0 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
3418b89c:	2300      	movs	r3, #0
3418b89e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418b8a0:	e01e      	b.n	3418b8e0 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418b8a2:	f7fe fd2f 	bl	3418a304 <LL_RCC_PLL3_IsReady>
3418b8a6:	4603      	mov	r3, r0
3418b8a8:	2b00      	cmp	r3, #0
3418b8aa:	d11b      	bne.n	3418b8e4 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
3418b8ac:	f7fe fd3e 	bl	3418a32c <LL_RCC_PLL3_IsEnabledBypass>
3418b8b0:	4603      	mov	r3, r0
3418b8b2:	2b00      	cmp	r3, #0
3418b8b4:	d116      	bne.n	3418b8e4 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
3418b8b6:	2300      	movs	r3, #0
3418b8b8:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418b8ba:	e013      	b.n	3418b8e4 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
3418b8bc:	f7fe fd58 	bl	3418a370 <LL_RCC_PLL4_IsReady>
3418b8c0:	4603      	mov	r3, r0
3418b8c2:	2b00      	cmp	r3, #0
3418b8c4:	d110      	bne.n	3418b8e8 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418b8c6:	f7fe fd67 	bl	3418a398 <LL_RCC_PLL4_IsEnabledBypass>
3418b8ca:	4603      	mov	r3, r0
3418b8cc:	2b00      	cmp	r3, #0
3418b8ce:	d10b      	bne.n	3418b8e8 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
3418b8d0:	2300      	movs	r3, #0
3418b8d2:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418b8d4:	e008      	b.n	3418b8e8 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
3418b8d6:	2300      	movs	r3, #0
3418b8d8:	60fb      	str	r3, [r7, #12]
      break;
3418b8da:	e006      	b.n	3418b8ea <RCC_IC_CheckPLLSources+0x166>
      break;
3418b8dc:	bf00      	nop
3418b8de:	e004      	b.n	3418b8ea <RCC_IC_CheckPLLSources+0x166>
      break;
3418b8e0:	bf00      	nop
3418b8e2:	e002      	b.n	3418b8ea <RCC_IC_CheckPLLSources+0x166>
      break;
3418b8e4:	bf00      	nop
3418b8e6:	e000      	b.n	3418b8ea <RCC_IC_CheckPLLSources+0x166>
      break;
3418b8e8:	bf00      	nop
  }

  return ret;
3418b8ea:	68fb      	ldr	r3, [r7, #12]
}
3418b8ec:	4618      	mov	r0, r3
3418b8ee:	3710      	adds	r7, #16
3418b8f0:	46bd      	mov	sp, r7
3418b8f2:	bd80      	pop	{r7, pc}

3418b8f4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
3418b8f4:	b480      	push	{r7}
3418b8f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418b8f8:	4b05      	ldr	r3, [pc, #20]	@ (3418b910 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3418b8fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418b8fc:	4a04      	ldr	r2, [pc, #16]	@ (3418b910 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3418b8fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418b902:	6553      	str	r3, [r2, #84]	@ 0x54
}
3418b904:	bf00      	nop
3418b906:	46bd      	mov	sp, r7
3418b908:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b90c:	4770      	bx	lr
3418b90e:	bf00      	nop
3418b910:	56028000 	.word	0x56028000

3418b914 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
3418b914:	b480      	push	{r7}
3418b916:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418b918:	4b05      	ldr	r3, [pc, #20]	@ (3418b930 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3418b91a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418b91c:	4a04      	ldr	r2, [pc, #16]	@ (3418b930 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3418b91e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418b922:	6553      	str	r3, [r2, #84]	@ 0x54
}
3418b924:	bf00      	nop
3418b926:	46bd      	mov	sp, r7
3418b928:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b92c:	4770      	bx	lr
3418b92e:	bf00      	nop
3418b930:	56028000 	.word	0x56028000

3418b934 <LL_RCC_HSE_IsReady>:
{
3418b934:	b480      	push	{r7}
3418b936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3418b938:	4b06      	ldr	r3, [pc, #24]	@ (3418b954 <LL_RCC_HSE_IsReady+0x20>)
3418b93a:	685b      	ldr	r3, [r3, #4]
3418b93c:	f003 0310 	and.w	r3, r3, #16
3418b940:	2b00      	cmp	r3, #0
3418b942:	d001      	beq.n	3418b948 <LL_RCC_HSE_IsReady+0x14>
3418b944:	2301      	movs	r3, #1
3418b946:	e000      	b.n	3418b94a <LL_RCC_HSE_IsReady+0x16>
3418b948:	2300      	movs	r3, #0
}
3418b94a:	4618      	mov	r0, r3
3418b94c:	46bd      	mov	sp, r7
3418b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b952:	4770      	bx	lr
3418b954:	56028000 	.word	0x56028000

3418b958 <LL_RCC_HSI_IsReady>:
{
3418b958:	b480      	push	{r7}
3418b95a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
3418b95c:	4b06      	ldr	r3, [pc, #24]	@ (3418b978 <LL_RCC_HSI_IsReady+0x20>)
3418b95e:	685b      	ldr	r3, [r3, #4]
3418b960:	f003 0308 	and.w	r3, r3, #8
3418b964:	2b00      	cmp	r3, #0
3418b966:	d001      	beq.n	3418b96c <LL_RCC_HSI_IsReady+0x14>
3418b968:	2301      	movs	r3, #1
3418b96a:	e000      	b.n	3418b96e <LL_RCC_HSI_IsReady+0x16>
3418b96c:	2300      	movs	r3, #0
}
3418b96e:	4618      	mov	r0, r3
3418b970:	46bd      	mov	sp, r7
3418b972:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b976:	4770      	bx	lr
3418b978:	56028000 	.word	0x56028000

3418b97c <LL_RCC_HSI_GetDivider>:
{
3418b97c:	b480      	push	{r7}
3418b97e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3418b980:	4b04      	ldr	r3, [pc, #16]	@ (3418b994 <LL_RCC_HSI_GetDivider+0x18>)
3418b982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418b984:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
3418b988:	4618      	mov	r0, r3
3418b98a:	46bd      	mov	sp, r7
3418b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b990:	4770      	bx	lr
3418b992:	bf00      	nop
3418b994:	56028000 	.word	0x56028000

3418b998 <LL_RCC_MSI_IsReady>:
{
3418b998:	b480      	push	{r7}
3418b99a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3418b99c:	4b06      	ldr	r3, [pc, #24]	@ (3418b9b8 <LL_RCC_MSI_IsReady+0x20>)
3418b99e:	685b      	ldr	r3, [r3, #4]
3418b9a0:	f003 0304 	and.w	r3, r3, #4
3418b9a4:	2b00      	cmp	r3, #0
3418b9a6:	d001      	beq.n	3418b9ac <LL_RCC_MSI_IsReady+0x14>
3418b9a8:	2301      	movs	r3, #1
3418b9aa:	e000      	b.n	3418b9ae <LL_RCC_MSI_IsReady+0x16>
3418b9ac:	2300      	movs	r3, #0
}
3418b9ae:	4618      	mov	r0, r3
3418b9b0:	46bd      	mov	sp, r7
3418b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b9b6:	4770      	bx	lr
3418b9b8:	56028000 	.word	0x56028000

3418b9bc <LL_RCC_MSI_GetFrequency>:
{
3418b9bc:	b480      	push	{r7}
3418b9be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3418b9c0:	4b04      	ldr	r3, [pc, #16]	@ (3418b9d4 <LL_RCC_MSI_GetFrequency+0x18>)
3418b9c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418b9c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3418b9c8:	4618      	mov	r0, r3
3418b9ca:	46bd      	mov	sp, r7
3418b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b9d0:	4770      	bx	lr
3418b9d2:	bf00      	nop
3418b9d4:	56028000 	.word	0x56028000

3418b9d8 <LL_RCC_LSE_IsReady>:
{
3418b9d8:	b480      	push	{r7}
3418b9da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3418b9dc:	4b06      	ldr	r3, [pc, #24]	@ (3418b9f8 <LL_RCC_LSE_IsReady+0x20>)
3418b9de:	685b      	ldr	r3, [r3, #4]
3418b9e0:	f003 0302 	and.w	r3, r3, #2
3418b9e4:	2b00      	cmp	r3, #0
3418b9e6:	d001      	beq.n	3418b9ec <LL_RCC_LSE_IsReady+0x14>
3418b9e8:	2301      	movs	r3, #1
3418b9ea:	e000      	b.n	3418b9ee <LL_RCC_LSE_IsReady+0x16>
3418b9ec:	2300      	movs	r3, #0
}
3418b9ee:	4618      	mov	r0, r3
3418b9f0:	46bd      	mov	sp, r7
3418b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b9f6:	4770      	bx	lr
3418b9f8:	56028000 	.word	0x56028000

3418b9fc <LL_RCC_SetClockSource>:
{
3418b9fc:	b480      	push	{r7}
3418b9fe:	b085      	sub	sp, #20
3418ba00:	af00      	add	r7, sp, #0
3418ba02:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
3418ba04:	687b      	ldr	r3, [r7, #4]
3418ba06:	b2da      	uxtb	r2, r3
3418ba08:	4b10      	ldr	r3, [pc, #64]	@ (3418ba4c <LL_RCC_SetClockSource+0x50>)
3418ba0a:	4413      	add	r3, r2
3418ba0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3418ba0e:	68fb      	ldr	r3, [r7, #12]
3418ba10:	681a      	ldr	r2, [r3, #0]
3418ba12:	687b      	ldr	r3, [r7, #4]
3418ba14:	0e19      	lsrs	r1, r3, #24
3418ba16:	687b      	ldr	r3, [r7, #4]
3418ba18:	0a1b      	lsrs	r3, r3, #8
3418ba1a:	f003 031f 	and.w	r3, r3, #31
3418ba1e:	fa01 f303 	lsl.w	r3, r1, r3
3418ba22:	43db      	mvns	r3, r3
3418ba24:	401a      	ands	r2, r3
3418ba26:	687b      	ldr	r3, [r7, #4]
3418ba28:	0c1b      	lsrs	r3, r3, #16
3418ba2a:	b2d9      	uxtb	r1, r3
3418ba2c:	687b      	ldr	r3, [r7, #4]
3418ba2e:	0a1b      	lsrs	r3, r3, #8
3418ba30:	f003 031f 	and.w	r3, r3, #31
3418ba34:	fa01 f303 	lsl.w	r3, r1, r3
3418ba38:	431a      	orrs	r2, r3
3418ba3a:	68fb      	ldr	r3, [r7, #12]
3418ba3c:	601a      	str	r2, [r3, #0]
}
3418ba3e:	bf00      	nop
3418ba40:	3714      	adds	r7, #20
3418ba42:	46bd      	mov	sp, r7
3418ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ba48:	4770      	bx	lr
3418ba4a:	bf00      	nop
3418ba4c:	56028144 	.word	0x56028144

3418ba50 <LL_RCC_SetADFClockSource>:
{
3418ba50:	b480      	push	{r7}
3418ba52:	b083      	sub	sp, #12
3418ba54:	af00      	add	r7, sp, #0
3418ba56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
3418ba58:	4b07      	ldr	r3, [pc, #28]	@ (3418ba78 <LL_RCC_SetADFClockSource+0x28>)
3418ba5a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418ba5e:	f023 0207 	bic.w	r2, r3, #7
3418ba62:	4905      	ldr	r1, [pc, #20]	@ (3418ba78 <LL_RCC_SetADFClockSource+0x28>)
3418ba64:	687b      	ldr	r3, [r7, #4]
3418ba66:	4313      	orrs	r3, r2
3418ba68:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
3418ba6c:	bf00      	nop
3418ba6e:	370c      	adds	r7, #12
3418ba70:	46bd      	mov	sp, r7
3418ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ba76:	4770      	bx	lr
3418ba78:	56028000 	.word	0x56028000

3418ba7c <LL_RCC_SetCLKPClockSource>:
{
3418ba7c:	b480      	push	{r7}
3418ba7e:	b083      	sub	sp, #12
3418ba80:	af00      	add	r7, sp, #0
3418ba82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
3418ba84:	4b07      	ldr	r3, [pc, #28]	@ (3418baa4 <LL_RCC_SetCLKPClockSource+0x28>)
3418ba86:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418ba8a:	f023 0207 	bic.w	r2, r3, #7
3418ba8e:	4905      	ldr	r1, [pc, #20]	@ (3418baa4 <LL_RCC_SetCLKPClockSource+0x28>)
3418ba90:	687b      	ldr	r3, [r7, #4]
3418ba92:	4313      	orrs	r3, r2
3418ba94:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418ba98:	bf00      	nop
3418ba9a:	370c      	adds	r7, #12
3418ba9c:	46bd      	mov	sp, r7
3418ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418baa2:	4770      	bx	lr
3418baa4:	56028000 	.word	0x56028000

3418baa8 <LL_RCC_SetDCMIPPClockSource>:
{
3418baa8:	b480      	push	{r7}
3418baaa:	b083      	sub	sp, #12
3418baac:	af00      	add	r7, sp, #0
3418baae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
3418bab0:	4b07      	ldr	r3, [pc, #28]	@ (3418bad0 <LL_RCC_SetDCMIPPClockSource+0x28>)
3418bab2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418bab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
3418baba:	4905      	ldr	r1, [pc, #20]	@ (3418bad0 <LL_RCC_SetDCMIPPClockSource+0x28>)
3418babc:	687b      	ldr	r3, [r7, #4]
3418babe:	4313      	orrs	r3, r2
3418bac0:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
3418bac4:	bf00      	nop
3418bac6:	370c      	adds	r7, #12
3418bac8:	46bd      	mov	sp, r7
3418baca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bace:	4770      	bx	lr
3418bad0:	56028000 	.word	0x56028000

3418bad4 <LL_RCC_SetETHClockSource>:
{
3418bad4:	b480      	push	{r7}
3418bad6:	b083      	sub	sp, #12
3418bad8:	af00      	add	r7, sp, #0
3418bada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
3418badc:	4b07      	ldr	r3, [pc, #28]	@ (3418bafc <LL_RCC_SetETHClockSource+0x28>)
3418bade:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418bae2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
3418bae6:	4905      	ldr	r1, [pc, #20]	@ (3418bafc <LL_RCC_SetETHClockSource+0x28>)
3418bae8:	687b      	ldr	r3, [r7, #4]
3418baea:	4313      	orrs	r3, r2
3418baec:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3418baf0:	bf00      	nop
3418baf2:	370c      	adds	r7, #12
3418baf4:	46bd      	mov	sp, r7
3418baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bafa:	4770      	bx	lr
3418bafc:	56028000 	.word	0x56028000

3418bb00 <LL_RCC_SetETHPHYInterface>:
{
3418bb00:	b480      	push	{r7}
3418bb02:	b083      	sub	sp, #12
3418bb04:	af00      	add	r7, sp, #0
3418bb06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
3418bb08:	4b07      	ldr	r3, [pc, #28]	@ (3418bb28 <LL_RCC_SetETHPHYInterface+0x28>)
3418bb0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418bb0e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3418bb12:	4905      	ldr	r1, [pc, #20]	@ (3418bb28 <LL_RCC_SetETHPHYInterface+0x28>)
3418bb14:	687b      	ldr	r3, [r7, #4]
3418bb16:	4313      	orrs	r3, r2
3418bb18:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3418bb1c:	bf00      	nop
3418bb1e:	370c      	adds	r7, #12
3418bb20:	46bd      	mov	sp, r7
3418bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bb26:	4770      	bx	lr
3418bb28:	56028000 	.word	0x56028000

3418bb2c <LL_RCC_SetETHREFRXClockSource>:
{
3418bb2c:	b480      	push	{r7}
3418bb2e:	b083      	sub	sp, #12
3418bb30:	af00      	add	r7, sp, #0
3418bb32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
3418bb34:	4b07      	ldr	r3, [pc, #28]	@ (3418bb54 <LL_RCC_SetETHREFRXClockSource+0x28>)
3418bb36:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418bb3a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
3418bb3e:	4905      	ldr	r1, [pc, #20]	@ (3418bb54 <LL_RCC_SetETHREFRXClockSource+0x28>)
3418bb40:	687b      	ldr	r3, [r7, #4]
3418bb42:	4313      	orrs	r3, r2
3418bb44:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3418bb48:	bf00      	nop
3418bb4a:	370c      	adds	r7, #12
3418bb4c:	46bd      	mov	sp, r7
3418bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bb52:	4770      	bx	lr
3418bb54:	56028000 	.word	0x56028000

3418bb58 <LL_RCC_SetETHREFTXClockSource>:
{
3418bb58:	b480      	push	{r7}
3418bb5a:	b083      	sub	sp, #12
3418bb5c:	af00      	add	r7, sp, #0
3418bb5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
3418bb60:	4b07      	ldr	r3, [pc, #28]	@ (3418bb80 <LL_RCC_SetETHREFTXClockSource+0x28>)
3418bb62:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418bb66:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
3418bb6a:	4905      	ldr	r1, [pc, #20]	@ (3418bb80 <LL_RCC_SetETHREFTXClockSource+0x28>)
3418bb6c:	687b      	ldr	r3, [r7, #4]
3418bb6e:	4313      	orrs	r3, r2
3418bb70:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3418bb74:	bf00      	nop
3418bb76:	370c      	adds	r7, #12
3418bb78:	46bd      	mov	sp, r7
3418bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bb7e:	4770      	bx	lr
3418bb80:	56028000 	.word	0x56028000

3418bb84 <LL_RCC_SetFDCANClockSource>:
{
3418bb84:	b480      	push	{r7}
3418bb86:	b083      	sub	sp, #12
3418bb88:	af00      	add	r7, sp, #0
3418bb8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
3418bb8c:	4b07      	ldr	r3, [pc, #28]	@ (3418bbac <LL_RCC_SetFDCANClockSource+0x28>)
3418bb8e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418bb92:	f023 0203 	bic.w	r2, r3, #3
3418bb96:	4905      	ldr	r1, [pc, #20]	@ (3418bbac <LL_RCC_SetFDCANClockSource+0x28>)
3418bb98:	687b      	ldr	r3, [r7, #4]
3418bb9a:	4313      	orrs	r3, r2
3418bb9c:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3418bba0:	bf00      	nop
3418bba2:	370c      	adds	r7, #12
3418bba4:	46bd      	mov	sp, r7
3418bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bbaa:	4770      	bx	lr
3418bbac:	56028000 	.word	0x56028000

3418bbb0 <LL_RCC_SetFMCClockSource>:
{
3418bbb0:	b480      	push	{r7}
3418bbb2:	b083      	sub	sp, #12
3418bbb4:	af00      	add	r7, sp, #0
3418bbb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
3418bbb8:	4b07      	ldr	r3, [pc, #28]	@ (3418bbd8 <LL_RCC_SetFMCClockSource+0x28>)
3418bbba:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418bbbe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418bbc2:	4905      	ldr	r1, [pc, #20]	@ (3418bbd8 <LL_RCC_SetFMCClockSource+0x28>)
3418bbc4:	687b      	ldr	r3, [r7, #4]
3418bbc6:	4313      	orrs	r3, r2
3418bbc8:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3418bbcc:	bf00      	nop
3418bbce:	370c      	adds	r7, #12
3418bbd0:	46bd      	mov	sp, r7
3418bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bbd6:	4770      	bx	lr
3418bbd8:	56028000 	.word	0x56028000

3418bbdc <LL_RCC_SetI2CClockSource>:
{
3418bbdc:	b580      	push	{r7, lr}
3418bbde:	b082      	sub	sp, #8
3418bbe0:	af00      	add	r7, sp, #0
3418bbe2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bbe4:	6878      	ldr	r0, [r7, #4]
3418bbe6:	f7ff ff09 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bbea:	bf00      	nop
3418bbec:	3708      	adds	r7, #8
3418bbee:	46bd      	mov	sp, r7
3418bbf0:	bd80      	pop	{r7, pc}

3418bbf2 <LL_RCC_SetI3CClockSource>:
{
3418bbf2:	b580      	push	{r7, lr}
3418bbf4:	b082      	sub	sp, #8
3418bbf6:	af00      	add	r7, sp, #0
3418bbf8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bbfa:	6878      	ldr	r0, [r7, #4]
3418bbfc:	f7ff fefe 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bc00:	bf00      	nop
3418bc02:	3708      	adds	r7, #8
3418bc04:	46bd      	mov	sp, r7
3418bc06:	bd80      	pop	{r7, pc}

3418bc08 <LL_RCC_SetLPTIMClockSource>:
{
3418bc08:	b580      	push	{r7, lr}
3418bc0a:	b082      	sub	sp, #8
3418bc0c:	af00      	add	r7, sp, #0
3418bc0e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bc10:	6878      	ldr	r0, [r7, #4]
3418bc12:	f7ff fef3 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bc16:	bf00      	nop
3418bc18:	3708      	adds	r7, #8
3418bc1a:	46bd      	mov	sp, r7
3418bc1c:	bd80      	pop	{r7, pc}
	...

3418bc20 <LL_RCC_SetLPUARTClockSource>:
{
3418bc20:	b480      	push	{r7}
3418bc22:	b083      	sub	sp, #12
3418bc24:	af00      	add	r7, sp, #0
3418bc26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
3418bc28:	4b07      	ldr	r3, [pc, #28]	@ (3418bc48 <LL_RCC_SetLPUARTClockSource+0x28>)
3418bc2a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418bc2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
3418bc32:	4905      	ldr	r1, [pc, #20]	@ (3418bc48 <LL_RCC_SetLPUARTClockSource+0x28>)
3418bc34:	687b      	ldr	r3, [r7, #4]
3418bc36:	4313      	orrs	r3, r2
3418bc38:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
3418bc3c:	bf00      	nop
3418bc3e:	370c      	adds	r7, #12
3418bc40:	46bd      	mov	sp, r7
3418bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bc46:	4770      	bx	lr
3418bc48:	56028000 	.word	0x56028000

3418bc4c <LL_RCC_SetLTDCClockSource>:
{
3418bc4c:	b480      	push	{r7}
3418bc4e:	b083      	sub	sp, #12
3418bc50:	af00      	add	r7, sp, #0
3418bc52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
3418bc54:	4b07      	ldr	r3, [pc, #28]	@ (3418bc74 <LL_RCC_SetLTDCClockSource+0x28>)
3418bc56:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3418bc5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418bc5e:	4905      	ldr	r1, [pc, #20]	@ (3418bc74 <LL_RCC_SetLTDCClockSource+0x28>)
3418bc60:	687b      	ldr	r3, [r7, #4]
3418bc62:	4313      	orrs	r3, r2
3418bc64:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
3418bc68:	bf00      	nop
3418bc6a:	370c      	adds	r7, #12
3418bc6c:	46bd      	mov	sp, r7
3418bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bc72:	4770      	bx	lr
3418bc74:	56028000 	.word	0x56028000

3418bc78 <LL_RCC_SetMDFClockSource>:
{
3418bc78:	b480      	push	{r7}
3418bc7a:	b083      	sub	sp, #12
3418bc7c:	af00      	add	r7, sp, #0
3418bc7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
3418bc80:	4b07      	ldr	r3, [pc, #28]	@ (3418bca0 <LL_RCC_SetMDFClockSource+0x28>)
3418bc82:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3418bc86:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3418bc8a:	4905      	ldr	r1, [pc, #20]	@ (3418bca0 <LL_RCC_SetMDFClockSource+0x28>)
3418bc8c:	687b      	ldr	r3, [r7, #4]
3418bc8e:	4313      	orrs	r3, r2
3418bc90:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
3418bc94:	bf00      	nop
3418bc96:	370c      	adds	r7, #12
3418bc98:	46bd      	mov	sp, r7
3418bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bc9e:	4770      	bx	lr
3418bca0:	56028000 	.word	0x56028000

3418bca4 <LL_RCC_SetOTGPHYClockSource>:
{
3418bca4:	b580      	push	{r7, lr}
3418bca6:	b082      	sub	sp, #8
3418bca8:	af00      	add	r7, sp, #0
3418bcaa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bcac:	6878      	ldr	r0, [r7, #4]
3418bcae:	f7ff fea5 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bcb2:	bf00      	nop
3418bcb4:	3708      	adds	r7, #8
3418bcb6:	46bd      	mov	sp, r7
3418bcb8:	bd80      	pop	{r7, pc}

3418bcba <LL_RCC_SetOTGPHYCKREFClockSource>:
{
3418bcba:	b580      	push	{r7, lr}
3418bcbc:	b082      	sub	sp, #8
3418bcbe:	af00      	add	r7, sp, #0
3418bcc0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bcc2:	6878      	ldr	r0, [r7, #4]
3418bcc4:	f7ff fe9a 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bcc8:	bf00      	nop
3418bcca:	3708      	adds	r7, #8
3418bccc:	46bd      	mov	sp, r7
3418bcce:	bd80      	pop	{r7, pc}

3418bcd0 <LL_RCC_SetPSSIClockSource>:
{
3418bcd0:	b480      	push	{r7}
3418bcd2:	b083      	sub	sp, #12
3418bcd4:	af00      	add	r7, sp, #0
3418bcd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
3418bcd8:	4b07      	ldr	r3, [pc, #28]	@ (3418bcf8 <LL_RCC_SetPSSIClockSource+0x28>)
3418bcda:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418bcde:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418bce2:	4905      	ldr	r1, [pc, #20]	@ (3418bcf8 <LL_RCC_SetPSSIClockSource+0x28>)
3418bce4:	687b      	ldr	r3, [r7, #4]
3418bce6:	4313      	orrs	r3, r2
3418bce8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418bcec:	bf00      	nop
3418bcee:	370c      	adds	r7, #12
3418bcf0:	46bd      	mov	sp, r7
3418bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bcf6:	4770      	bx	lr
3418bcf8:	56028000 	.word	0x56028000

3418bcfc <LL_RCC_SetSAIClockSource>:
{
3418bcfc:	b580      	push	{r7, lr}
3418bcfe:	b082      	sub	sp, #8
3418bd00:	af00      	add	r7, sp, #0
3418bd02:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bd04:	6878      	ldr	r0, [r7, #4]
3418bd06:	f7ff fe79 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bd0a:	bf00      	nop
3418bd0c:	3708      	adds	r7, #8
3418bd0e:	46bd      	mov	sp, r7
3418bd10:	bd80      	pop	{r7, pc}

3418bd12 <LL_RCC_SetSDMMCClockSource>:
{
3418bd12:	b580      	push	{r7, lr}
3418bd14:	b082      	sub	sp, #8
3418bd16:	af00      	add	r7, sp, #0
3418bd18:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bd1a:	6878      	ldr	r0, [r7, #4]
3418bd1c:	f7ff fe6e 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bd20:	bf00      	nop
3418bd22:	3708      	adds	r7, #8
3418bd24:	46bd      	mov	sp, r7
3418bd26:	bd80      	pop	{r7, pc}

3418bd28 <LL_RCC_SetSPDIFRXClockSource>:
{
3418bd28:	b480      	push	{r7}
3418bd2a:	b083      	sub	sp, #12
3418bd2c:	af00      	add	r7, sp, #0
3418bd2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
3418bd30:	4b07      	ldr	r3, [pc, #28]	@ (3418bd50 <LL_RCC_SetSPDIFRXClockSource+0x28>)
3418bd32:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3418bd36:	f023 0207 	bic.w	r2, r3, #7
3418bd3a:	4905      	ldr	r1, [pc, #20]	@ (3418bd50 <LL_RCC_SetSPDIFRXClockSource+0x28>)
3418bd3c:	687b      	ldr	r3, [r7, #4]
3418bd3e:	4313      	orrs	r3, r2
3418bd40:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
3418bd44:	bf00      	nop
3418bd46:	370c      	adds	r7, #12
3418bd48:	46bd      	mov	sp, r7
3418bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bd4e:	4770      	bx	lr
3418bd50:	56028000 	.word	0x56028000

3418bd54 <LL_RCC_SetSPIClockSource>:
{
3418bd54:	b580      	push	{r7, lr}
3418bd56:	b082      	sub	sp, #8
3418bd58:	af00      	add	r7, sp, #0
3418bd5a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bd5c:	6878      	ldr	r0, [r7, #4]
3418bd5e:	f7ff fe4d 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bd62:	bf00      	nop
3418bd64:	3708      	adds	r7, #8
3418bd66:	46bd      	mov	sp, r7
3418bd68:	bd80      	pop	{r7, pc}

3418bd6a <LL_RCC_SetUSARTClockSource>:
{
3418bd6a:	b580      	push	{r7, lr}
3418bd6c:	b082      	sub	sp, #8
3418bd6e:	af00      	add	r7, sp, #0
3418bd70:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bd72:	6878      	ldr	r0, [r7, #4]
3418bd74:	f7ff fe42 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bd78:	bf00      	nop
3418bd7a:	3708      	adds	r7, #8
3418bd7c:	46bd      	mov	sp, r7
3418bd7e:	bd80      	pop	{r7, pc}

3418bd80 <LL_RCC_SetXSPIClockSource>:
{
3418bd80:	b580      	push	{r7, lr}
3418bd82:	b082      	sub	sp, #8
3418bd84:	af00      	add	r7, sp, #0
3418bd86:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418bd88:	6878      	ldr	r0, [r7, #4]
3418bd8a:	f7ff fe37 	bl	3418b9fc <LL_RCC_SetClockSource>
}
3418bd8e:	bf00      	nop
3418bd90:	3708      	adds	r7, #8
3418bd92:	46bd      	mov	sp, r7
3418bd94:	bd80      	pop	{r7, pc}
	...

3418bd98 <LL_RCC_SetRTCClockSource>:
{
3418bd98:	b480      	push	{r7}
3418bd9a:	b083      	sub	sp, #12
3418bd9c:	af00      	add	r7, sp, #0
3418bd9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
3418bda0:	4b07      	ldr	r3, [pc, #28]	@ (3418bdc0 <LL_RCC_SetRTCClockSource+0x28>)
3418bda2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418bda6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
3418bdaa:	4905      	ldr	r1, [pc, #20]	@ (3418bdc0 <LL_RCC_SetRTCClockSource+0x28>)
3418bdac:	687b      	ldr	r3, [r7, #4]
3418bdae:	4313      	orrs	r3, r2
3418bdb0:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418bdb4:	bf00      	nop
3418bdb6:	370c      	adds	r7, #12
3418bdb8:	46bd      	mov	sp, r7
3418bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bdbe:	4770      	bx	lr
3418bdc0:	56028000 	.word	0x56028000

3418bdc4 <LL_RCC_GetRTCClockSource>:
{
3418bdc4:	b480      	push	{r7}
3418bdc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3418bdc8:	4b04      	ldr	r3, [pc, #16]	@ (3418bddc <LL_RCC_GetRTCClockSource+0x18>)
3418bdca:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418bdce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
3418bdd2:	4618      	mov	r0, r3
3418bdd4:	46bd      	mov	sp, r7
3418bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bdda:	4770      	bx	lr
3418bddc:	56028000 	.word	0x56028000

3418bde0 <LL_RCC_SetRTC_HSEPrescaler>:
{
3418bde0:	b480      	push	{r7}
3418bde2:	b083      	sub	sp, #12
3418bde4:	af00      	add	r7, sp, #0
3418bde6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
3418bde8:	4b07      	ldr	r3, [pc, #28]	@ (3418be08 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3418bdea:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418bdee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
3418bdf2:	4905      	ldr	r1, [pc, #20]	@ (3418be08 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3418bdf4:	687b      	ldr	r3, [r7, #4]
3418bdf6:	4313      	orrs	r3, r2
3418bdf8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418bdfc:	bf00      	nop
3418bdfe:	370c      	adds	r7, #12
3418be00:	46bd      	mov	sp, r7
3418be02:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be06:	4770      	bx	lr
3418be08:	56028000 	.word	0x56028000

3418be0c <LL_RCC_SetTIMPrescaler>:
{
3418be0c:	b480      	push	{r7}
3418be0e:	b083      	sub	sp, #12
3418be10:	af00      	add	r7, sp, #0
3418be12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
3418be14:	4b07      	ldr	r3, [pc, #28]	@ (3418be34 <LL_RCC_SetTIMPrescaler+0x28>)
3418be16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418be18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418be1c:	687b      	ldr	r3, [r7, #4]
3418be1e:	061b      	lsls	r3, r3, #24
3418be20:	4904      	ldr	r1, [pc, #16]	@ (3418be34 <LL_RCC_SetTIMPrescaler+0x28>)
3418be22:	4313      	orrs	r3, r2
3418be24:	624b      	str	r3, [r1, #36]	@ 0x24
}
3418be26:	bf00      	nop
3418be28:	370c      	adds	r7, #12
3418be2a:	46bd      	mov	sp, r7
3418be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be30:	4770      	bx	lr
3418be32:	bf00      	nop
3418be34:	56028000 	.word	0x56028000

3418be38 <LL_RCC_PLL1_GetSource>:
{
3418be38:	b480      	push	{r7}
3418be3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
3418be3c:	4b04      	ldr	r3, [pc, #16]	@ (3418be50 <LL_RCC_PLL1_GetSource+0x18>)
3418be3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418be42:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418be46:	4618      	mov	r0, r3
3418be48:	46bd      	mov	sp, r7
3418be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be4e:	4770      	bx	lr
3418be50:	56028000 	.word	0x56028000

3418be54 <LL_RCC_PLL1_IsReady>:
{
3418be54:	b480      	push	{r7}
3418be56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3418be58:	4b07      	ldr	r3, [pc, #28]	@ (3418be78 <LL_RCC_PLL1_IsReady+0x24>)
3418be5a:	685b      	ldr	r3, [r3, #4]
3418be5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418be60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418be64:	d101      	bne.n	3418be6a <LL_RCC_PLL1_IsReady+0x16>
3418be66:	2301      	movs	r3, #1
3418be68:	e000      	b.n	3418be6c <LL_RCC_PLL1_IsReady+0x18>
3418be6a:	2300      	movs	r3, #0
}
3418be6c:	4618      	mov	r0, r3
3418be6e:	46bd      	mov	sp, r7
3418be70:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be74:	4770      	bx	lr
3418be76:	bf00      	nop
3418be78:	56028000 	.word	0x56028000

3418be7c <LL_RCC_PLL1_IsEnabledBypass>:
{
3418be7c:	b480      	push	{r7}
3418be7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3418be80:	4b07      	ldr	r3, [pc, #28]	@ (3418bea0 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3418be82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418be86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418be8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418be8e:	d101      	bne.n	3418be94 <LL_RCC_PLL1_IsEnabledBypass+0x18>
3418be90:	2301      	movs	r3, #1
3418be92:	e000      	b.n	3418be96 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
3418be94:	2300      	movs	r3, #0
}
3418be96:	4618      	mov	r0, r3
3418be98:	46bd      	mov	sp, r7
3418be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be9e:	4770      	bx	lr
3418bea0:	56028000 	.word	0x56028000

3418bea4 <LL_RCC_PLL1_GetN>:
{
3418bea4:	b480      	push	{r7}
3418bea6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
3418bea8:	4b05      	ldr	r3, [pc, #20]	@ (3418bec0 <LL_RCC_PLL1_GetN+0x1c>)
3418beaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418beae:	0a1b      	lsrs	r3, r3, #8
3418beb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418beb4:	4618      	mov	r0, r3
3418beb6:	46bd      	mov	sp, r7
3418beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bebc:	4770      	bx	lr
3418bebe:	bf00      	nop
3418bec0:	56028000 	.word	0x56028000

3418bec4 <LL_RCC_PLL1_GetM>:
{
3418bec4:	b480      	push	{r7}
3418bec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3418bec8:	4b05      	ldr	r3, [pc, #20]	@ (3418bee0 <LL_RCC_PLL1_GetM+0x1c>)
3418beca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418bece:	0d1b      	lsrs	r3, r3, #20
3418bed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418bed4:	4618      	mov	r0, r3
3418bed6:	46bd      	mov	sp, r7
3418bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bedc:	4770      	bx	lr
3418bede:	bf00      	nop
3418bee0:	56028000 	.word	0x56028000

3418bee4 <LL_RCC_PLL1_GetP1>:
{
3418bee4:	b480      	push	{r7}
3418bee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
3418bee8:	4b05      	ldr	r3, [pc, #20]	@ (3418bf00 <LL_RCC_PLL1_GetP1+0x1c>)
3418beea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418beee:	0edb      	lsrs	r3, r3, #27
3418bef0:	f003 0307 	and.w	r3, r3, #7
}
3418bef4:	4618      	mov	r0, r3
3418bef6:	46bd      	mov	sp, r7
3418bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418befc:	4770      	bx	lr
3418befe:	bf00      	nop
3418bf00:	56028000 	.word	0x56028000

3418bf04 <LL_RCC_PLL1_GetP2>:
{
3418bf04:	b480      	push	{r7}
3418bf06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3418bf08:	4b05      	ldr	r3, [pc, #20]	@ (3418bf20 <LL_RCC_PLL1_GetP2+0x1c>)
3418bf0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418bf0e:	0e1b      	lsrs	r3, r3, #24
3418bf10:	f003 0307 	and.w	r3, r3, #7
}
3418bf14:	4618      	mov	r0, r3
3418bf16:	46bd      	mov	sp, r7
3418bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf1c:	4770      	bx	lr
3418bf1e:	bf00      	nop
3418bf20:	56028000 	.word	0x56028000

3418bf24 <LL_RCC_PLL1P_IsEnabled>:
{
3418bf24:	b480      	push	{r7}
3418bf26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
3418bf28:	4b07      	ldr	r3, [pc, #28]	@ (3418bf48 <LL_RCC_PLL1P_IsEnabled+0x24>)
3418bf2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418bf2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418bf32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418bf36:	d101      	bne.n	3418bf3c <LL_RCC_PLL1P_IsEnabled+0x18>
3418bf38:	2301      	movs	r3, #1
3418bf3a:	e000      	b.n	3418bf3e <LL_RCC_PLL1P_IsEnabled+0x1a>
3418bf3c:	2300      	movs	r3, #0
}
3418bf3e:	4618      	mov	r0, r3
3418bf40:	46bd      	mov	sp, r7
3418bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf46:	4770      	bx	lr
3418bf48:	56028000 	.word	0x56028000

3418bf4c <LL_RCC_PLL1_GetFRACN>:
{
3418bf4c:	b480      	push	{r7}
3418bf4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
3418bf50:	4b04      	ldr	r3, [pc, #16]	@ (3418bf64 <LL_RCC_PLL1_GetFRACN+0x18>)
3418bf52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418bf56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418bf5a:	4618      	mov	r0, r3
3418bf5c:	46bd      	mov	sp, r7
3418bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf62:	4770      	bx	lr
3418bf64:	56028000 	.word	0x56028000

3418bf68 <LL_RCC_PLL2_GetSource>:
{
3418bf68:	b480      	push	{r7}
3418bf6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3418bf6c:	4b04      	ldr	r3, [pc, #16]	@ (3418bf80 <LL_RCC_PLL2_GetSource+0x18>)
3418bf6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418bf72:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418bf76:	4618      	mov	r0, r3
3418bf78:	46bd      	mov	sp, r7
3418bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf7e:	4770      	bx	lr
3418bf80:	56028000 	.word	0x56028000

3418bf84 <LL_RCC_PLL2_IsReady>:
{
3418bf84:	b480      	push	{r7}
3418bf86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3418bf88:	4b07      	ldr	r3, [pc, #28]	@ (3418bfa8 <LL_RCC_PLL2_IsReady+0x24>)
3418bf8a:	685b      	ldr	r3, [r3, #4]
3418bf8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418bf90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418bf94:	d101      	bne.n	3418bf9a <LL_RCC_PLL2_IsReady+0x16>
3418bf96:	2301      	movs	r3, #1
3418bf98:	e000      	b.n	3418bf9c <LL_RCC_PLL2_IsReady+0x18>
3418bf9a:	2300      	movs	r3, #0
}
3418bf9c:	4618      	mov	r0, r3
3418bf9e:	46bd      	mov	sp, r7
3418bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bfa4:	4770      	bx	lr
3418bfa6:	bf00      	nop
3418bfa8:	56028000 	.word	0x56028000

3418bfac <LL_RCC_PLL2_IsEnabledBypass>:
{
3418bfac:	b480      	push	{r7}
3418bfae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3418bfb0:	4b07      	ldr	r3, [pc, #28]	@ (3418bfd0 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
3418bfb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418bfb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418bfba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418bfbe:	d101      	bne.n	3418bfc4 <LL_RCC_PLL2_IsEnabledBypass+0x18>
3418bfc0:	2301      	movs	r3, #1
3418bfc2:	e000      	b.n	3418bfc6 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
3418bfc4:	2300      	movs	r3, #0
}
3418bfc6:	4618      	mov	r0, r3
3418bfc8:	46bd      	mov	sp, r7
3418bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bfce:	4770      	bx	lr
3418bfd0:	56028000 	.word	0x56028000

3418bfd4 <LL_RCC_PLL2_GetN>:
{
3418bfd4:	b480      	push	{r7}
3418bfd6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
3418bfd8:	4b05      	ldr	r3, [pc, #20]	@ (3418bff0 <LL_RCC_PLL2_GetN+0x1c>)
3418bfda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418bfde:	0a1b      	lsrs	r3, r3, #8
3418bfe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418bfe4:	4618      	mov	r0, r3
3418bfe6:	46bd      	mov	sp, r7
3418bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bfec:	4770      	bx	lr
3418bfee:	bf00      	nop
3418bff0:	56028000 	.word	0x56028000

3418bff4 <LL_RCC_PLL2_GetM>:
{
3418bff4:	b480      	push	{r7}
3418bff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
3418bff8:	4b05      	ldr	r3, [pc, #20]	@ (3418c010 <LL_RCC_PLL2_GetM+0x1c>)
3418bffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418bffe:	0d1b      	lsrs	r3, r3, #20
3418c000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418c004:	4618      	mov	r0, r3
3418c006:	46bd      	mov	sp, r7
3418c008:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c00c:	4770      	bx	lr
3418c00e:	bf00      	nop
3418c010:	56028000 	.word	0x56028000

3418c014 <LL_RCC_PLL2_GetP1>:
{
3418c014:	b480      	push	{r7}
3418c016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
3418c018:	4b05      	ldr	r3, [pc, #20]	@ (3418c030 <LL_RCC_PLL2_GetP1+0x1c>)
3418c01a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418c01e:	0edb      	lsrs	r3, r3, #27
3418c020:	f003 0307 	and.w	r3, r3, #7
}
3418c024:	4618      	mov	r0, r3
3418c026:	46bd      	mov	sp, r7
3418c028:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c02c:	4770      	bx	lr
3418c02e:	bf00      	nop
3418c030:	56028000 	.word	0x56028000

3418c034 <LL_RCC_PLL2_GetP2>:
{
3418c034:	b480      	push	{r7}
3418c036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
3418c038:	4b05      	ldr	r3, [pc, #20]	@ (3418c050 <LL_RCC_PLL2_GetP2+0x1c>)
3418c03a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418c03e:	0e1b      	lsrs	r3, r3, #24
3418c040:	f003 0307 	and.w	r3, r3, #7
}
3418c044:	4618      	mov	r0, r3
3418c046:	46bd      	mov	sp, r7
3418c048:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c04c:	4770      	bx	lr
3418c04e:	bf00      	nop
3418c050:	56028000 	.word	0x56028000

3418c054 <LL_RCC_PLL2P_IsEnabled>:
{
3418c054:	b480      	push	{r7}
3418c056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
3418c058:	4b07      	ldr	r3, [pc, #28]	@ (3418c078 <LL_RCC_PLL2P_IsEnabled+0x24>)
3418c05a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418c05e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418c062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418c066:	d101      	bne.n	3418c06c <LL_RCC_PLL2P_IsEnabled+0x18>
3418c068:	2301      	movs	r3, #1
3418c06a:	e000      	b.n	3418c06e <LL_RCC_PLL2P_IsEnabled+0x1a>
3418c06c:	2300      	movs	r3, #0
}
3418c06e:	4618      	mov	r0, r3
3418c070:	46bd      	mov	sp, r7
3418c072:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c076:	4770      	bx	lr
3418c078:	56028000 	.word	0x56028000

3418c07c <LL_RCC_PLL2_GetFRACN>:
{
3418c07c:	b480      	push	{r7}
3418c07e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
3418c080:	4b04      	ldr	r3, [pc, #16]	@ (3418c094 <LL_RCC_PLL2_GetFRACN+0x18>)
3418c082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418c086:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418c08a:	4618      	mov	r0, r3
3418c08c:	46bd      	mov	sp, r7
3418c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c092:	4770      	bx	lr
3418c094:	56028000 	.word	0x56028000

3418c098 <LL_RCC_PLL3_GetSource>:
{
3418c098:	b480      	push	{r7}
3418c09a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3418c09c:	4b04      	ldr	r3, [pc, #16]	@ (3418c0b0 <LL_RCC_PLL3_GetSource+0x18>)
3418c09e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418c0a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418c0a6:	4618      	mov	r0, r3
3418c0a8:	46bd      	mov	sp, r7
3418c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c0ae:	4770      	bx	lr
3418c0b0:	56028000 	.word	0x56028000

3418c0b4 <LL_RCC_PLL3_IsReady>:
{
3418c0b4:	b480      	push	{r7}
3418c0b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418c0b8:	4b07      	ldr	r3, [pc, #28]	@ (3418c0d8 <LL_RCC_PLL3_IsReady+0x24>)
3418c0ba:	685b      	ldr	r3, [r3, #4]
3418c0bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418c0c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418c0c4:	d101      	bne.n	3418c0ca <LL_RCC_PLL3_IsReady+0x16>
3418c0c6:	2301      	movs	r3, #1
3418c0c8:	e000      	b.n	3418c0cc <LL_RCC_PLL3_IsReady+0x18>
3418c0ca:	2300      	movs	r3, #0
}
3418c0cc:	4618      	mov	r0, r3
3418c0ce:	46bd      	mov	sp, r7
3418c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c0d4:	4770      	bx	lr
3418c0d6:	bf00      	nop
3418c0d8:	56028000 	.word	0x56028000

3418c0dc <LL_RCC_PLL3_IsEnabledBypass>:
{
3418c0dc:	b480      	push	{r7}
3418c0de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3418c0e0:	4b07      	ldr	r3, [pc, #28]	@ (3418c100 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3418c0e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418c0e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418c0ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418c0ee:	d101      	bne.n	3418c0f4 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3418c0f0:	2301      	movs	r3, #1
3418c0f2:	e000      	b.n	3418c0f6 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
3418c0f4:	2300      	movs	r3, #0
}
3418c0f6:	4618      	mov	r0, r3
3418c0f8:	46bd      	mov	sp, r7
3418c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c0fe:	4770      	bx	lr
3418c100:	56028000 	.word	0x56028000

3418c104 <LL_RCC_PLL3_GetN>:
{
3418c104:	b480      	push	{r7}
3418c106:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
3418c108:	4b05      	ldr	r3, [pc, #20]	@ (3418c120 <LL_RCC_PLL3_GetN+0x1c>)
3418c10a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418c10e:	0a1b      	lsrs	r3, r3, #8
3418c110:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418c114:	4618      	mov	r0, r3
3418c116:	46bd      	mov	sp, r7
3418c118:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c11c:	4770      	bx	lr
3418c11e:	bf00      	nop
3418c120:	56028000 	.word	0x56028000

3418c124 <LL_RCC_PLL3_GetM>:
{
3418c124:	b480      	push	{r7}
3418c126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3418c128:	4b05      	ldr	r3, [pc, #20]	@ (3418c140 <LL_RCC_PLL3_GetM+0x1c>)
3418c12a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418c12e:	0d1b      	lsrs	r3, r3, #20
3418c130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418c134:	4618      	mov	r0, r3
3418c136:	46bd      	mov	sp, r7
3418c138:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c13c:	4770      	bx	lr
3418c13e:	bf00      	nop
3418c140:	56028000 	.word	0x56028000

3418c144 <LL_RCC_PLL3_GetP1>:
{
3418c144:	b480      	push	{r7}
3418c146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
3418c148:	4b05      	ldr	r3, [pc, #20]	@ (3418c160 <LL_RCC_PLL3_GetP1+0x1c>)
3418c14a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418c14e:	0edb      	lsrs	r3, r3, #27
3418c150:	f003 0307 	and.w	r3, r3, #7
}
3418c154:	4618      	mov	r0, r3
3418c156:	46bd      	mov	sp, r7
3418c158:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c15c:	4770      	bx	lr
3418c15e:	bf00      	nop
3418c160:	56028000 	.word	0x56028000

3418c164 <LL_RCC_PLL3_GetP2>:
{
3418c164:	b480      	push	{r7}
3418c166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3418c168:	4b05      	ldr	r3, [pc, #20]	@ (3418c180 <LL_RCC_PLL3_GetP2+0x1c>)
3418c16a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418c16e:	0e1b      	lsrs	r3, r3, #24
3418c170:	f003 0307 	and.w	r3, r3, #7
}
3418c174:	4618      	mov	r0, r3
3418c176:	46bd      	mov	sp, r7
3418c178:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c17c:	4770      	bx	lr
3418c17e:	bf00      	nop
3418c180:	56028000 	.word	0x56028000

3418c184 <LL_RCC_PLL3P_IsEnabled>:
{
3418c184:	b480      	push	{r7}
3418c186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
3418c188:	4b07      	ldr	r3, [pc, #28]	@ (3418c1a8 <LL_RCC_PLL3P_IsEnabled+0x24>)
3418c18a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418c18e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418c192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418c196:	d101      	bne.n	3418c19c <LL_RCC_PLL3P_IsEnabled+0x18>
3418c198:	2301      	movs	r3, #1
3418c19a:	e000      	b.n	3418c19e <LL_RCC_PLL3P_IsEnabled+0x1a>
3418c19c:	2300      	movs	r3, #0
}
3418c19e:	4618      	mov	r0, r3
3418c1a0:	46bd      	mov	sp, r7
3418c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c1a6:	4770      	bx	lr
3418c1a8:	56028000 	.word	0x56028000

3418c1ac <LL_RCC_PLL3_GetFRACN>:
{
3418c1ac:	b480      	push	{r7}
3418c1ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3418c1b0:	4b04      	ldr	r3, [pc, #16]	@ (3418c1c4 <LL_RCC_PLL3_GetFRACN+0x18>)
3418c1b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418c1b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418c1ba:	4618      	mov	r0, r3
3418c1bc:	46bd      	mov	sp, r7
3418c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c1c2:	4770      	bx	lr
3418c1c4:	56028000 	.word	0x56028000

3418c1c8 <LL_RCC_PLL4_GetSource>:
{
3418c1c8:	b480      	push	{r7}
3418c1ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3418c1cc:	4b04      	ldr	r3, [pc, #16]	@ (3418c1e0 <LL_RCC_PLL4_GetSource+0x18>)
3418c1ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418c1d2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418c1d6:	4618      	mov	r0, r3
3418c1d8:	46bd      	mov	sp, r7
3418c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c1de:	4770      	bx	lr
3418c1e0:	56028000 	.word	0x56028000

3418c1e4 <LL_RCC_PLL4_IsReady>:
{
3418c1e4:	b480      	push	{r7}
3418c1e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418c1e8:	4b07      	ldr	r3, [pc, #28]	@ (3418c208 <LL_RCC_PLL4_IsReady+0x24>)
3418c1ea:	685b      	ldr	r3, [r3, #4]
3418c1ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418c1f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418c1f4:	d101      	bne.n	3418c1fa <LL_RCC_PLL4_IsReady+0x16>
3418c1f6:	2301      	movs	r3, #1
3418c1f8:	e000      	b.n	3418c1fc <LL_RCC_PLL4_IsReady+0x18>
3418c1fa:	2300      	movs	r3, #0
}
3418c1fc:	4618      	mov	r0, r3
3418c1fe:	46bd      	mov	sp, r7
3418c200:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c204:	4770      	bx	lr
3418c206:	bf00      	nop
3418c208:	56028000 	.word	0x56028000

3418c20c <LL_RCC_PLL4_IsEnabledBypass>:
{
3418c20c:	b480      	push	{r7}
3418c20e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418c210:	4b07      	ldr	r3, [pc, #28]	@ (3418c230 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418c212:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418c216:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418c21a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418c21e:	d101      	bne.n	3418c224 <LL_RCC_PLL4_IsEnabledBypass+0x18>
3418c220:	2301      	movs	r3, #1
3418c222:	e000      	b.n	3418c226 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
3418c224:	2300      	movs	r3, #0
}
3418c226:	4618      	mov	r0, r3
3418c228:	46bd      	mov	sp, r7
3418c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c22e:	4770      	bx	lr
3418c230:	56028000 	.word	0x56028000

3418c234 <LL_RCC_PLL4_GetN>:
{
3418c234:	b480      	push	{r7}
3418c236:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
3418c238:	4b05      	ldr	r3, [pc, #20]	@ (3418c250 <LL_RCC_PLL4_GetN+0x1c>)
3418c23a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418c23e:	0a1b      	lsrs	r3, r3, #8
3418c240:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418c244:	4618      	mov	r0, r3
3418c246:	46bd      	mov	sp, r7
3418c248:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c24c:	4770      	bx	lr
3418c24e:	bf00      	nop
3418c250:	56028000 	.word	0x56028000

3418c254 <LL_RCC_PLL4_GetM>:
{
3418c254:	b480      	push	{r7}
3418c256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
3418c258:	4b05      	ldr	r3, [pc, #20]	@ (3418c270 <LL_RCC_PLL4_GetM+0x1c>)
3418c25a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418c25e:	0d1b      	lsrs	r3, r3, #20
3418c260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418c264:	4618      	mov	r0, r3
3418c266:	46bd      	mov	sp, r7
3418c268:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c26c:	4770      	bx	lr
3418c26e:	bf00      	nop
3418c270:	56028000 	.word	0x56028000

3418c274 <LL_RCC_PLL4_GetP1>:
{
3418c274:	b480      	push	{r7}
3418c276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
3418c278:	4b05      	ldr	r3, [pc, #20]	@ (3418c290 <LL_RCC_PLL4_GetP1+0x1c>)
3418c27a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418c27e:	0edb      	lsrs	r3, r3, #27
3418c280:	f003 0307 	and.w	r3, r3, #7
}
3418c284:	4618      	mov	r0, r3
3418c286:	46bd      	mov	sp, r7
3418c288:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c28c:	4770      	bx	lr
3418c28e:	bf00      	nop
3418c290:	56028000 	.word	0x56028000

3418c294 <LL_RCC_PLL4_GetP2>:
{
3418c294:	b480      	push	{r7}
3418c296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
3418c298:	4b05      	ldr	r3, [pc, #20]	@ (3418c2b0 <LL_RCC_PLL4_GetP2+0x1c>)
3418c29a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418c29e:	0e1b      	lsrs	r3, r3, #24
3418c2a0:	f003 0307 	and.w	r3, r3, #7
}
3418c2a4:	4618      	mov	r0, r3
3418c2a6:	46bd      	mov	sp, r7
3418c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c2ac:	4770      	bx	lr
3418c2ae:	bf00      	nop
3418c2b0:	56028000 	.word	0x56028000

3418c2b4 <LL_RCC_PLL4P_IsEnabled>:
{
3418c2b4:	b480      	push	{r7}
3418c2b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3418c2b8:	4b07      	ldr	r3, [pc, #28]	@ (3418c2d8 <LL_RCC_PLL4P_IsEnabled+0x24>)
3418c2ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418c2be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418c2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418c2c6:	d101      	bne.n	3418c2cc <LL_RCC_PLL4P_IsEnabled+0x18>
3418c2c8:	2301      	movs	r3, #1
3418c2ca:	e000      	b.n	3418c2ce <LL_RCC_PLL4P_IsEnabled+0x1a>
3418c2cc:	2300      	movs	r3, #0
}
3418c2ce:	4618      	mov	r0, r3
3418c2d0:	46bd      	mov	sp, r7
3418c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c2d6:	4770      	bx	lr
3418c2d8:	56028000 	.word	0x56028000

3418c2dc <LL_RCC_PLL4_GetFRACN>:
{
3418c2dc:	b480      	push	{r7}
3418c2de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
3418c2e0:	4b04      	ldr	r3, [pc, #16]	@ (3418c2f4 <LL_RCC_PLL4_GetFRACN+0x18>)
3418c2e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418c2e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418c2ea:	4618      	mov	r0, r3
3418c2ec:	46bd      	mov	sp, r7
3418c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c2f2:	4770      	bx	lr
3418c2f4:	56028000 	.word	0x56028000

3418c2f8 <LL_RCC_IC3_Enable>:
{
3418c2f8:	b480      	push	{r7}
3418c2fa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3418c2fc:	4b04      	ldr	r3, [pc, #16]	@ (3418c310 <LL_RCC_IC3_Enable+0x18>)
3418c2fe:	2204      	movs	r2, #4
3418c300:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c304:	bf00      	nop
3418c306:	46bd      	mov	sp, r7
3418c308:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c30c:	4770      	bx	lr
3418c30e:	bf00      	nop
3418c310:	56028000 	.word	0x56028000

3418c314 <LL_RCC_IC4_Enable>:
{
3418c314:	b480      	push	{r7}
3418c316:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3418c318:	4b04      	ldr	r3, [pc, #16]	@ (3418c32c <LL_RCC_IC4_Enable+0x18>)
3418c31a:	2208      	movs	r2, #8
3418c31c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c320:	bf00      	nop
3418c322:	46bd      	mov	sp, r7
3418c324:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c328:	4770      	bx	lr
3418c32a:	bf00      	nop
3418c32c:	56028000 	.word	0x56028000

3418c330 <LL_RCC_IC5_Enable>:
{
3418c330:	b480      	push	{r7}
3418c332:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3418c334:	4b04      	ldr	r3, [pc, #16]	@ (3418c348 <LL_RCC_IC5_Enable+0x18>)
3418c336:	2210      	movs	r2, #16
3418c338:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c33c:	bf00      	nop
3418c33e:	46bd      	mov	sp, r7
3418c340:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c344:	4770      	bx	lr
3418c346:	bf00      	nop
3418c348:	56028000 	.word	0x56028000

3418c34c <LL_RCC_IC7_Enable>:
{
3418c34c:	b480      	push	{r7}
3418c34e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3418c350:	4b04      	ldr	r3, [pc, #16]	@ (3418c364 <LL_RCC_IC7_Enable+0x18>)
3418c352:	2240      	movs	r2, #64	@ 0x40
3418c354:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c358:	bf00      	nop
3418c35a:	46bd      	mov	sp, r7
3418c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c360:	4770      	bx	lr
3418c362:	bf00      	nop
3418c364:	56028000 	.word	0x56028000

3418c368 <LL_RCC_IC8_Enable>:
{
3418c368:	b480      	push	{r7}
3418c36a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3418c36c:	4b04      	ldr	r3, [pc, #16]	@ (3418c380 <LL_RCC_IC8_Enable+0x18>)
3418c36e:	2280      	movs	r2, #128	@ 0x80
3418c370:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c374:	bf00      	nop
3418c376:	46bd      	mov	sp, r7
3418c378:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c37c:	4770      	bx	lr
3418c37e:	bf00      	nop
3418c380:	56028000 	.word	0x56028000

3418c384 <LL_RCC_IC9_Enable>:
{
3418c384:	b480      	push	{r7}
3418c386:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3418c388:	4b04      	ldr	r3, [pc, #16]	@ (3418c39c <LL_RCC_IC9_Enable+0x18>)
3418c38a:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418c38e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c392:	bf00      	nop
3418c394:	46bd      	mov	sp, r7
3418c396:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c39a:	4770      	bx	lr
3418c39c:	56028000 	.word	0x56028000

3418c3a0 <LL_RCC_IC10_Enable>:
{
3418c3a0:	b480      	push	{r7}
3418c3a2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3418c3a4:	4b04      	ldr	r3, [pc, #16]	@ (3418c3b8 <LL_RCC_IC10_Enable+0x18>)
3418c3a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418c3aa:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c3ae:	bf00      	nop
3418c3b0:	46bd      	mov	sp, r7
3418c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c3b6:	4770      	bx	lr
3418c3b8:	56028000 	.word	0x56028000

3418c3bc <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
3418c3bc:	b480      	push	{r7}
3418c3be:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
3418c3c0:	4b04      	ldr	r3, [pc, #16]	@ (3418c3d4 <LL_RCC_IC12_Enable+0x18>)
3418c3c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418c3c6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c3ca:	bf00      	nop
3418c3cc:	46bd      	mov	sp, r7
3418c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c3d2:	4770      	bx	lr
3418c3d4:	56028000 	.word	0x56028000

3418c3d8 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
3418c3d8:	b480      	push	{r7}
3418c3da:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
3418c3dc:	4b04      	ldr	r3, [pc, #16]	@ (3418c3f0 <LL_RCC_IC13_Enable+0x18>)
3418c3de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3418c3e2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c3e6:	bf00      	nop
3418c3e8:	46bd      	mov	sp, r7
3418c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c3ee:	4770      	bx	lr
3418c3f0:	56028000 	.word	0x56028000

3418c3f4 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
3418c3f4:	b480      	push	{r7}
3418c3f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3418c3f8:	4b04      	ldr	r3, [pc, #16]	@ (3418c40c <LL_RCC_IC14_Enable+0x18>)
3418c3fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418c3fe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c402:	bf00      	nop
3418c404:	46bd      	mov	sp, r7
3418c406:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c40a:	4770      	bx	lr
3418c40c:	56028000 	.word	0x56028000

3418c410 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
3418c410:	b480      	push	{r7}
3418c412:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3418c414:	4b04      	ldr	r3, [pc, #16]	@ (3418c428 <LL_RCC_IC15_Enable+0x18>)
3418c416:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3418c41a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c41e:	bf00      	nop
3418c420:	46bd      	mov	sp, r7
3418c422:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c426:	4770      	bx	lr
3418c428:	56028000 	.word	0x56028000

3418c42c <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
3418c42c:	b480      	push	{r7}
3418c42e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
3418c430:	4b04      	ldr	r3, [pc, #16]	@ (3418c444 <LL_RCC_IC16_Enable+0x18>)
3418c432:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418c436:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c43a:	bf00      	nop
3418c43c:	46bd      	mov	sp, r7
3418c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c442:	4770      	bx	lr
3418c444:	56028000 	.word	0x56028000

3418c448 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
3418c448:	b480      	push	{r7}
3418c44a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
3418c44c:	4b04      	ldr	r3, [pc, #16]	@ (3418c460 <LL_RCC_IC17_Enable+0x18>)
3418c44e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3418c452:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c456:	bf00      	nop
3418c458:	46bd      	mov	sp, r7
3418c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c45e:	4770      	bx	lr
3418c460:	56028000 	.word	0x56028000

3418c464 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
3418c464:	b480      	push	{r7}
3418c466:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
3418c468:	4b04      	ldr	r3, [pc, #16]	@ (3418c47c <LL_RCC_IC18_Enable+0x18>)
3418c46a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418c46e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c472:	bf00      	nop
3418c474:	46bd      	mov	sp, r7
3418c476:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c47a:	4770      	bx	lr
3418c47c:	56028000 	.word	0x56028000

3418c480 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
3418c480:	b480      	push	{r7}
3418c482:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
3418c484:	4b04      	ldr	r3, [pc, #16]	@ (3418c498 <LL_RCC_IC19_Enable+0x18>)
3418c486:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3418c48a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c48e:	bf00      	nop
3418c490:	46bd      	mov	sp, r7
3418c492:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c496:	4770      	bx	lr
3418c498:	56028000 	.word	0x56028000

3418c49c <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
3418c49c:	b480      	push	{r7}
3418c49e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
3418c4a0:	4b04      	ldr	r3, [pc, #16]	@ (3418c4b4 <LL_RCC_IC20_Enable+0x18>)
3418c4a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3418c4a6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418c4aa:	bf00      	nop
3418c4ac:	46bd      	mov	sp, r7
3418c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c4b2:	4770      	bx	lr
3418c4b4:	56028000 	.word	0x56028000

3418c4b8 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
3418c4b8:	b480      	push	{r7}
3418c4ba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418c4bc:	4b04      	ldr	r3, [pc, #16]	@ (3418c4d0 <LL_RCC_CLKP_Enable+0x18>)
3418c4be:	2240      	movs	r2, #64	@ 0x40
3418c4c0:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
3418c4c4:	bf00      	nop
3418c4c6:	46bd      	mov	sp, r7
3418c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c4cc:	4770      	bx	lr
3418c4ce:	bf00      	nop
3418c4d0:	56028000 	.word	0x56028000

3418c4d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
3418c4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418c4d8:	b0f2      	sub	sp, #456	@ 0x1c8
3418c4da:	af00      	add	r7, sp, #0
3418c4dc:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
3418c4e0:	2300      	movs	r3, #0
3418c4e2:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
3418c4e6:	2300      	movs	r3, #0
3418c4e8:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
3418c4ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c4f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
3418c4f8:	2500      	movs	r5, #0
3418c4fa:	ea54 0305 	orrs.w	r3, r4, r5
3418c4fe:	d06c      	beq.n	3418c5da <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
3418c500:	f7ff fc60 	bl	3418bdc4 <LL_RCC_GetRTCClockSource>
3418c504:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3418c508:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
3418c50c:	2b00      	cmp	r3, #0
3418c50e:	d018      	beq.n	3418c542 <HAL_RCCEx_PeriphCLKConfig+0x6e>
3418c510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c514:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418c518:	f403 7240 	and.w	r2, r3, #768	@ 0x300
3418c51c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
3418c520:	4293      	cmp	r3, r2
3418c522:	d00e      	beq.n	3418c542 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
3418c524:	4bc3      	ldr	r3, [pc, #780]	@ (3418c834 <HAL_RCCEx_PeriphCLKConfig+0x360>)
3418c526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418c528:	4ac2      	ldr	r2, [pc, #776]	@ (3418c834 <HAL_RCCEx_PeriphCLKConfig+0x360>)
3418c52a:	f043 0301 	orr.w	r3, r3, #1
3418c52e:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3418c530:	4bc0      	ldr	r3, [pc, #768]	@ (3418c834 <HAL_RCCEx_PeriphCLKConfig+0x360>)
3418c532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418c534:	f003 0301 	and.w	r3, r3, #1
3418c538:	2b00      	cmp	r3, #0
3418c53a:	d102      	bne.n	3418c542 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
3418c53c:	2301      	movs	r3, #1
3418c53e:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
3418c542:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
3418c546:	2b00      	cmp	r3, #0
3418c548:	d143      	bne.n	3418c5d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3418c54a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c54e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418c552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418c556:	d117      	bne.n	3418c588 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418c558:	f7f7 ffa8 	bl	341844ac <HAL_GetTick>
3418c55c:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
3418c560:	e00d      	b.n	3418c57e <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418c562:	f7f7 ffa3 	bl	341844ac <HAL_GetTick>
3418c566:	4602      	mov	r2, r0
3418c568:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
3418c56c:	1ad2      	subs	r2, r2, r3
3418c56e:	f241 3388 	movw	r3, #5000	@ 0x1388
3418c572:	429a      	cmp	r2, r3
3418c574:	d903      	bls.n	3418c57e <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
3418c576:	2303      	movs	r3, #3
3418c578:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
3418c57c:	e004      	b.n	3418c588 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
3418c57e:	f7ff fa2b 	bl	3418b9d8 <LL_RCC_LSE_IsReady>
3418c582:	4603      	mov	r3, r0
3418c584:	2b00      	cmp	r3, #0
3418c586:	d0ec      	beq.n	3418c562 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
3418c588:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
3418c58c:	2b00      	cmp	r3, #0
3418c58e:	d11b      	bne.n	3418c5c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
3418c590:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c594:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418c598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3418c59c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418c5a0:	d108      	bne.n	3418c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
3418c5a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c5a6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418c5aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3418c5ae:	4618      	mov	r0, r3
3418c5b0:	f7ff fc16 	bl	3418bde0 <LL_RCC_SetRTC_HSEPrescaler>
3418c5b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c5b8:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418c5bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3418c5c0:	4618      	mov	r0, r3
3418c5c2:	f7ff fbe9 	bl	3418bd98 <LL_RCC_SetRTCClockSource>
3418c5c6:	e008      	b.n	3418c5da <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
3418c5c8:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
3418c5cc:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
3418c5d0:	e003      	b.n	3418c5da <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
3418c5d2:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
3418c5d6:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3418c5da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c5e2:	f002 0804 	and.w	r8, r2, #4
3418c5e6:	f04f 0900 	mov.w	r9, #0
3418c5ea:	ea58 0309 	orrs.w	r3, r8, r9
3418c5ee:	f000 809b 	beq.w	3418c728 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
3418c5f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c5f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418c5fa:	2b04      	cmp	r3, #4
3418c5fc:	d116      	bne.n	3418c62c <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418c5fe:	4b8e      	ldr	r3, [pc, #568]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c600:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418c604:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c608:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c60c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418c612:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418c618:	3b01      	subs	r3, #1
3418c61a:	041b      	lsls	r3, r3, #16
3418c61c:	4313      	orrs	r3, r2
3418c61e:	4a86      	ldr	r2, [pc, #536]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c620:	430b      	orrs	r3, r1
3418c622:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3418c626:	f7ff fe83 	bl	3418c330 <LL_RCC_IC5_Enable>
3418c62a:	e076      	b.n	3418c71a <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
3418c62c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c630:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418c634:	2b05      	cmp	r3, #5
3418c636:	d116      	bne.n	3418c666 <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418c638:	4b7f      	ldr	r3, [pc, #508]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c63a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418c63e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c642:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c646:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c64a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418c64c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418c652:	3b01      	subs	r3, #1
3418c654:	041b      	lsls	r3, r3, #16
3418c656:	4313      	orrs	r3, r2
3418c658:	4a77      	ldr	r2, [pc, #476]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c65a:	430b      	orrs	r3, r1
3418c65c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418c660:	f7ff fe9e 	bl	3418c3a0 <LL_RCC_IC10_Enable>
3418c664:	e059      	b.n	3418c71a <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3418c666:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c66a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418c66e:	2b06      	cmp	r3, #6
3418c670:	d116      	bne.n	3418c6a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418c672:	4b71      	ldr	r3, [pc, #452]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c674:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418c678:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c67c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c680:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c684:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418c686:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c68a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418c68c:	3b01      	subs	r3, #1
3418c68e:	041b      	lsls	r3, r3, #16
3418c690:	4313      	orrs	r3, r2
3418c692:	4a69      	ldr	r2, [pc, #420]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c694:	430b      	orrs	r3, r1
3418c696:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418c69a:	f7ff feb9 	bl	3418c410 <LL_RCC_IC15_Enable>
3418c69e:	e03c      	b.n	3418c71a <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
3418c6a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418c6a8:	2b03      	cmp	r3, #3
3418c6aa:	d118      	bne.n	3418c6de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3418c6ac:	4b62      	ldr	r3, [pc, #392]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c6ae:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418c6b2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c6b6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c6ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6be:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3418c6c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3418c6ca:	3b01      	subs	r3, #1
3418c6cc:	041b      	lsls	r3, r3, #16
3418c6ce:	4313      	orrs	r3, r2
3418c6d0:	4a59      	ldr	r2, [pc, #356]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c6d2:	430b      	orrs	r3, r1
3418c6d4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3418c6d8:	f7ff fed2 	bl	3418c480 <LL_RCC_IC19_Enable>
3418c6dc:	e01d      	b.n	3418c71a <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
3418c6de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418c6e6:	2b07      	cmp	r3, #7
3418c6e8:	d117      	bne.n	3418c71a <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3418c6ea:	4b53      	ldr	r3, [pc, #332]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c6ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418c6f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c6f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c6f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3418c700:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c704:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418c708:	3b01      	subs	r3, #1
3418c70a:	041b      	lsls	r3, r3, #16
3418c70c:	4313      	orrs	r3, r2
3418c70e:	4a4a      	ldr	r2, [pc, #296]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c710:	430b      	orrs	r3, r1
3418c712:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3418c716:	f7ff fec1 	bl	3418c49c <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
3418c71a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c71e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418c722:	4618      	mov	r0, r3
3418c724:	f7ff f9aa 	bl	3418ba7c <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
3418c728:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c730:	f04f 0a00 	mov.w	sl, #0
3418c734:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
3418c738:	ea5a 030b 	orrs.w	r3, sl, fp
3418c73c:	d04b      	beq.n	3418c7d6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3418c73e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c742:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418c746:	4b3d      	ldr	r3, [pc, #244]	@ (3418c83c <HAL_RCCEx_PeriphCLKConfig+0x368>)
3418c748:	429a      	cmp	r2, r3
3418c74a:	d116      	bne.n	3418c77a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418c74c:	4b3a      	ldr	r3, [pc, #232]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c74e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418c752:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c756:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c75a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c75e:	699a      	ldr	r2, [r3, #24]
3418c760:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c764:	69db      	ldr	r3, [r3, #28]
3418c766:	3b01      	subs	r3, #1
3418c768:	041b      	lsls	r3, r3, #16
3418c76a:	4313      	orrs	r3, r2
3418c76c:	4a32      	ldr	r2, [pc, #200]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c76e:	430b      	orrs	r3, r1
3418c770:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418c774:	f7ff fdc0 	bl	3418c2f8 <LL_RCC_IC3_Enable>
3418c778:	e026      	b.n	3418c7c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
3418c77a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c77e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418c782:	4b2f      	ldr	r3, [pc, #188]	@ (3418c840 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
3418c784:	429a      	cmp	r2, r3
3418c786:	d116      	bne.n	3418c7b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418c788:	4b2b      	ldr	r3, [pc, #172]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c78a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418c78e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c792:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c796:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c79a:	6a1a      	ldr	r2, [r3, #32]
3418c79c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c7a2:	3b01      	subs	r3, #1
3418c7a4:	041b      	lsls	r3, r3, #16
3418c7a6:	4313      	orrs	r3, r2
3418c7a8:	4a23      	ldr	r2, [pc, #140]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c7aa:	430b      	orrs	r3, r1
3418c7ac:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418c7b0:	f7ff fdb0 	bl	3418c314 <LL_RCC_IC4_Enable>
3418c7b4:	e008      	b.n	3418c7c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3418c7b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7ba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418c7be:	4b21      	ldr	r3, [pc, #132]	@ (3418c844 <HAL_RCCEx_PeriphCLKConfig+0x370>)
3418c7c0:	429a      	cmp	r2, r3
3418c7c2:	d101      	bne.n	3418c7c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
3418c7c4:	f7ff fe78 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
3418c7c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
3418c7d0:	4618      	mov	r0, r3
3418c7d2:	f7ff fad5 	bl	3418bd80 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3418c7d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c7de:	2100      	movs	r1, #0
3418c7e0:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
3418c7e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3418c7e8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
3418c7ec:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
3418c7f0:	4603      	mov	r3, r0
3418c7f2:	460a      	mov	r2, r1
3418c7f4:	4313      	orrs	r3, r2
3418c7f6:	d057      	beq.n	3418c8a8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
3418c7f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3418c800:	4b11      	ldr	r3, [pc, #68]	@ (3418c848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
3418c802:	429a      	cmp	r2, r3
3418c804:	d122      	bne.n	3418c84c <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418c806:	4b0c      	ldr	r3, [pc, #48]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c808:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418c80c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c810:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c814:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c818:	699a      	ldr	r2, [r3, #24]
3418c81a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c81e:	69db      	ldr	r3, [r3, #28]
3418c820:	3b01      	subs	r3, #1
3418c822:	041b      	lsls	r3, r3, #16
3418c824:	4313      	orrs	r3, r2
3418c826:	4a04      	ldr	r2, [pc, #16]	@ (3418c838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418c828:	430b      	orrs	r3, r1
3418c82a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418c82e:	f7ff fd63 	bl	3418c2f8 <LL_RCC_IC3_Enable>
3418c832:	e032      	b.n	3418c89a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
3418c834:	56024800 	.word	0x56024800
3418c838:	56028000 	.word	0x56028000
3418c83c:	03020014 	.word	0x03020014
3418c840:	03030014 	.word	0x03030014
3418c844:	03010014 	.word	0x03010014
3418c848:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
3418c84c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c850:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3418c854:	4bc5      	ldr	r3, [pc, #788]	@ (3418cb6c <HAL_RCCEx_PeriphCLKConfig+0x698>)
3418c856:	429a      	cmp	r2, r3
3418c858:	d116      	bne.n	3418c888 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418c85a:	4bc5      	ldr	r3, [pc, #788]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c85c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418c860:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c864:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c868:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c86c:	6a1a      	ldr	r2, [r3, #32]
3418c86e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c874:	3b01      	subs	r3, #1
3418c876:	041b      	lsls	r3, r3, #16
3418c878:	4313      	orrs	r3, r2
3418c87a:	4abd      	ldr	r2, [pc, #756]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c87c:	430b      	orrs	r3, r1
3418c87e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418c882:	f7ff fd47 	bl	3418c314 <LL_RCC_IC4_Enable>
3418c886:	e008      	b.n	3418c89a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3418c888:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c88c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3418c890:	4bb8      	ldr	r3, [pc, #736]	@ (3418cb74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
3418c892:	429a      	cmp	r2, r3
3418c894:	d101      	bne.n	3418c89a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
3418c896:	f7ff fe0f 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
3418c89a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c89e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418c8a2:	4618      	mov	r0, r3
3418c8a4:	f7ff fa6c 	bl	3418bd80 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
3418c8a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c8b0:	2100      	movs	r1, #0
3418c8b2:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
3418c8b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3418c8ba:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
3418c8be:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3418c8c2:	4603      	mov	r3, r0
3418c8c4:	460a      	mov	r2, r1
3418c8c6:	4313      	orrs	r3, r2
3418c8c8:	d04b      	beq.n	3418c962 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3418c8ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c8ce:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3418c8d2:	4ba9      	ldr	r3, [pc, #676]	@ (3418cb78 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
3418c8d4:	429a      	cmp	r2, r3
3418c8d6:	d116      	bne.n	3418c906 <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418c8d8:	4ba5      	ldr	r3, [pc, #660]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c8da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418c8de:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c8e2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c8e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c8ea:	699a      	ldr	r2, [r3, #24]
3418c8ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c8f0:	69db      	ldr	r3, [r3, #28]
3418c8f2:	3b01      	subs	r3, #1
3418c8f4:	041b      	lsls	r3, r3, #16
3418c8f6:	4313      	orrs	r3, r2
3418c8f8:	4a9d      	ldr	r2, [pc, #628]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c8fa:	430b      	orrs	r3, r1
3418c8fc:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418c900:	f7ff fcfa 	bl	3418c2f8 <LL_RCC_IC3_Enable>
3418c904:	e026      	b.n	3418c954 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3418c906:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c90a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3418c90e:	4b9b      	ldr	r3, [pc, #620]	@ (3418cb7c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
3418c910:	429a      	cmp	r2, r3
3418c912:	d116      	bne.n	3418c942 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418c914:	4b96      	ldr	r3, [pc, #600]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c916:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418c91a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c91e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c922:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c926:	6a1a      	ldr	r2, [r3, #32]
3418c928:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c92e:	3b01      	subs	r3, #1
3418c930:	041b      	lsls	r3, r3, #16
3418c932:	4313      	orrs	r3, r2
3418c934:	4a8e      	ldr	r2, [pc, #568]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c936:	430b      	orrs	r3, r1
3418c938:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418c93c:	f7ff fcea 	bl	3418c314 <LL_RCC_IC4_Enable>
3418c940:	e008      	b.n	3418c954 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3418c942:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c946:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3418c94a:	4b8d      	ldr	r3, [pc, #564]	@ (3418cb80 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
3418c94c:	429a      	cmp	r2, r3
3418c94e:	d101      	bne.n	3418c954 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
3418c950:	f7ff fdb2 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
3418c954:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c958:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418c95c:	4618      	mov	r0, r3
3418c95e:	f7ff fa0f 	bl	3418bd80 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3418c962:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c966:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c96a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3418c96e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3418c972:	2300      	movs	r3, #0
3418c974:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
3418c978:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
3418c97c:	4603      	mov	r3, r0
3418c97e:	460a      	mov	r2, r1
3418c980:	4313      	orrs	r3, r2
3418c982:	d048      	beq.n	3418ca16 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
3418c984:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c988:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418c98c:	2b20      	cmp	r3, #32
3418c98e:	d116      	bne.n	3418c9be <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418c990:	4b77      	ldr	r3, [pc, #476]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c992:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418c996:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c99a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c99e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9a2:	699a      	ldr	r2, [r3, #24]
3418c9a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9a8:	69db      	ldr	r3, [r3, #28]
3418c9aa:	3b01      	subs	r3, #1
3418c9ac:	041b      	lsls	r3, r3, #16
3418c9ae:	4313      	orrs	r3, r2
3418c9b0:	4a6f      	ldr	r2, [pc, #444]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c9b2:	430b      	orrs	r3, r1
3418c9b4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418c9b8:	f7ff fc9e 	bl	3418c2f8 <LL_RCC_IC3_Enable>
3418c9bc:	e024      	b.n	3418ca08 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
3418c9be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418c9c6:	2b30      	cmp	r3, #48	@ 0x30
3418c9c8:	d116      	bne.n	3418c9f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418c9ca:	4b69      	ldr	r3, [pc, #420]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c9cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418c9d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c9d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c9d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9dc:	6a1a      	ldr	r2, [r3, #32]
3418c9de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c9e4:	3b01      	subs	r3, #1
3418c9e6:	041b      	lsls	r3, r3, #16
3418c9e8:	4313      	orrs	r3, r2
3418c9ea:	4a61      	ldr	r2, [pc, #388]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418c9ec:	430b      	orrs	r3, r1
3418c9ee:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418c9f2:	f7ff fc8f 	bl	3418c314 <LL_RCC_IC4_Enable>
3418c9f6:	e007      	b.n	3418ca08 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
3418c9f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418ca00:	2b10      	cmp	r3, #16
3418ca02:	d101      	bne.n	3418ca08 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
3418ca04:	f7ff fd58 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
3418ca08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418ca10:	4618      	mov	r0, r3
3418ca12:	f7ff f8cd 	bl	3418bbb0 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3418ca16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ca1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3418ca22:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
3418ca26:	2300      	movs	r3, #0
3418ca28:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
3418ca2c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
3418ca30:	4603      	mov	r3, r0
3418ca32:	460a      	mov	r2, r1
3418ca34:	4313      	orrs	r3, r2
3418ca36:	d04b      	beq.n	3418cad0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3418ca38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca3c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418ca40:	4b50      	ldr	r3, [pc, #320]	@ (3418cb84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
3418ca42:	429a      	cmp	r2, r3
3418ca44:	d116      	bne.n	3418ca74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418ca46:	4b4a      	ldr	r3, [pc, #296]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418ca48:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418ca4c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ca50:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ca54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca58:	6a1a      	ldr	r2, [r3, #32]
3418ca5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ca60:	3b01      	subs	r3, #1
3418ca62:	041b      	lsls	r3, r3, #16
3418ca64:	4313      	orrs	r3, r2
3418ca66:	4a42      	ldr	r2, [pc, #264]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418ca68:	430b      	orrs	r3, r1
3418ca6a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418ca6e:	f7ff fc51 	bl	3418c314 <LL_RCC_IC4_Enable>
3418ca72:	e026      	b.n	3418cac2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
3418ca74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca78:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418ca7c:	4b42      	ldr	r3, [pc, #264]	@ (3418cb88 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
3418ca7e:	429a      	cmp	r2, r3
3418ca80:	d116      	bne.n	3418cab0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418ca82:	4b3b      	ldr	r3, [pc, #236]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418ca84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418ca88:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ca8c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ca90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418ca96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418ca9c:	3b01      	subs	r3, #1
3418ca9e:	041b      	lsls	r3, r3, #16
3418caa0:	4313      	orrs	r3, r2
3418caa2:	4a33      	ldr	r2, [pc, #204]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418caa4:	430b      	orrs	r3, r1
3418caa6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3418caaa:	f7ff fc41 	bl	3418c330 <LL_RCC_IC5_Enable>
3418caae:	e008      	b.n	3418cac2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3418cab0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cab4:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418cab8:	4b34      	ldr	r3, [pc, #208]	@ (3418cb8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
3418caba:	429a      	cmp	r2, r3
3418cabc:	d101      	bne.n	3418cac2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
3418cabe:	f7ff fcfb 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
3418cac2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cac6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
3418caca:	4618      	mov	r0, r3
3418cacc:	f7ff f921 	bl	3418bd12 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3418cad0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418cad8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
3418cadc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
3418cae0:	2300      	movs	r3, #0
3418cae2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
3418cae6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
3418caea:	4603      	mov	r3, r0
3418caec:	460a      	mov	r2, r1
3418caee:	4313      	orrs	r3, r2
3418caf0:	d062      	beq.n	3418cbb8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3418caf2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418caf6:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3418cafa:	4b25      	ldr	r3, [pc, #148]	@ (3418cb90 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
3418cafc:	429a      	cmp	r2, r3
3418cafe:	d116      	bne.n	3418cb2e <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418cb00:	4b1b      	ldr	r3, [pc, #108]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418cb02:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418cb06:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418cb0a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418cb0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cb12:	6a1a      	ldr	r2, [r3, #32]
3418cb14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cb18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cb1a:	3b01      	subs	r3, #1
3418cb1c:	041b      	lsls	r3, r3, #16
3418cb1e:	4313      	orrs	r3, r2
3418cb20:	4a13      	ldr	r2, [pc, #76]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418cb22:	430b      	orrs	r3, r1
3418cb24:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418cb28:	f7ff fbf4 	bl	3418c314 <LL_RCC_IC4_Enable>
3418cb2c:	e03d      	b.n	3418cbaa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3418cb2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cb32:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3418cb36:	4b17      	ldr	r3, [pc, #92]	@ (3418cb94 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
3418cb38:	429a      	cmp	r2, r3
3418cb3a:	d12d      	bne.n	3418cb98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418cb3c:	4b0c      	ldr	r3, [pc, #48]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418cb3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418cb42:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418cb46:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418cb4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cb4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418cb50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418cb56:	3b01      	subs	r3, #1
3418cb58:	041b      	lsls	r3, r3, #16
3418cb5a:	4313      	orrs	r3, r2
3418cb5c:	4a04      	ldr	r2, [pc, #16]	@ (3418cb70 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418cb5e:	430b      	orrs	r3, r1
3418cb60:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3418cb64:	f7ff fbe4 	bl	3418c330 <LL_RCC_IC5_Enable>
3418cb68:	e01f      	b.n	3418cbaa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
3418cb6a:	bf00      	nop
3418cb6c:	03030414 	.word	0x03030414
3418cb70:	56028000 	.word	0x56028000
3418cb74:	03010414 	.word	0x03010414
3418cb78:	03020814 	.word	0x03020814
3418cb7c:	03030814 	.word	0x03030814
3418cb80:	03010814 	.word	0x03010814
3418cb84:	0302001c 	.word	0x0302001c
3418cb88:	0303001c 	.word	0x0303001c
3418cb8c:	0301001c 	.word	0x0301001c
3418cb90:	0302041c 	.word	0x0302041c
3418cb94:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3418cb98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cb9c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3418cba0:	4bb3      	ldr	r3, [pc, #716]	@ (3418ce70 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
3418cba2:	429a      	cmp	r2, r3
3418cba4:	d101      	bne.n	3418cbaa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
3418cba6:	f7ff fc87 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3418cbaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cbae:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
3418cbb2:	4618      	mov	r0, r3
3418cbb4:	f7ff f8ad 	bl	3418bd12 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3418cbb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
3418cbc0:	f002 0301 	and.w	r3, r2, #1
3418cbc4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
3418cbc8:	2300      	movs	r3, #0
3418cbca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
3418cbce:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
3418cbd2:	4603      	mov	r3, r0
3418cbd4:	460a      	mov	r2, r1
3418cbd6:	4313      	orrs	r3, r2
3418cbd8:	d057      	beq.n	3418cc8a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3418cbda:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cbde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418cbe2:	2b20      	cmp	r3, #32
3418cbe4:	d116      	bne.n	3418cc14 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418cbe6:	4ba3      	ldr	r3, [pc, #652]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cbe8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418cbec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418cbf0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418cbf4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cbf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418cbfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cbfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418cc00:	3b01      	subs	r3, #1
3418cc02:	041b      	lsls	r3, r3, #16
3418cc04:	4313      	orrs	r3, r2
3418cc06:	4a9b      	ldr	r2, [pc, #620]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cc08:	430b      	orrs	r3, r1
3418cc0a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418cc0e:	f7ff fb9d 	bl	3418c34c <LL_RCC_IC7_Enable>
3418cc12:	e024      	b.n	3418cc5e <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
3418cc14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cc18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418cc1c:	2b30      	cmp	r3, #48	@ 0x30
3418cc1e:	d116      	bne.n	3418cc4e <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418cc20:	4b94      	ldr	r3, [pc, #592]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cc22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418cc26:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418cc2a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418cc2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cc32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418cc34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cc38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418cc3a:	3b01      	subs	r3, #1
3418cc3c:	041b      	lsls	r3, r3, #16
3418cc3e:	4313      	orrs	r3, r2
3418cc40:	4a8c      	ldr	r2, [pc, #560]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cc42:	430b      	orrs	r3, r1
3418cc44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418cc48:	f7ff fb8e 	bl	3418c368 <LL_RCC_IC8_Enable>
3418cc4c:	e007      	b.n	3418cc5e <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3418cc4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cc52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418cc56:	2b10      	cmp	r3, #16
3418cc58:	d101      	bne.n	3418cc5e <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
3418cc5a:	f7ff fc2d 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3418cc5e:	4b85      	ldr	r3, [pc, #532]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cc60:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418cc64:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
3418cc68:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
3418cc6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cc70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3418cc74:	3b01      	subs	r3, #1
3418cc76:	021a      	lsls	r2, r3, #8
3418cc78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cc7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418cc80:	4313      	orrs	r3, r2
3418cc82:	4a7c      	ldr	r2, [pc, #496]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cc84:	430b      	orrs	r3, r1
3418cc86:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3418cc8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418cc92:	f002 0302 	and.w	r3, r2, #2
3418cc96:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
3418cc9a:	2300      	movs	r3, #0
3418cc9c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
3418cca0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
3418cca4:	4603      	mov	r3, r0
3418cca6:	460a      	mov	r2, r1
3418cca8:	4313      	orrs	r3, r2
3418ccaa:	d048      	beq.n	3418cd3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
3418ccac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ccb0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418ccb4:	2b02      	cmp	r3, #2
3418ccb6:	d116      	bne.n	3418cce6 <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418ccb8:	4b6e      	ldr	r3, [pc, #440]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ccba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418ccbe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ccc2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ccc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ccca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418cccc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ccd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418ccd2:	3b01      	subs	r3, #1
3418ccd4:	041b      	lsls	r3, r3, #16
3418ccd6:	4313      	orrs	r3, r2
3418ccd8:	4a66      	ldr	r2, [pc, #408]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ccda:	430b      	orrs	r3, r1
3418ccdc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418cce0:	f7ff fb34 	bl	3418c34c <LL_RCC_IC7_Enable>
3418cce4:	e024      	b.n	3418cd30 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
3418cce6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ccea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418ccee:	2b03      	cmp	r3, #3
3418ccf0:	d116      	bne.n	3418cd20 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418ccf2:	4b60      	ldr	r3, [pc, #384]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ccf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418ccf8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ccfc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418cd00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cd04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418cd06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cd0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418cd0c:	3b01      	subs	r3, #1
3418cd0e:	041b      	lsls	r3, r3, #16
3418cd10:	4313      	orrs	r3, r2
3418cd12:	4a58      	ldr	r2, [pc, #352]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cd14:	430b      	orrs	r3, r1
3418cd16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418cd1a:	f7ff fb25 	bl	3418c368 <LL_RCC_IC8_Enable>
3418cd1e:	e007      	b.n	3418cd30 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
3418cd20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cd24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418cd28:	2b01      	cmp	r3, #1
3418cd2a:	d101      	bne.n	3418cd30 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
3418cd2c:	f7ff fbc4 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
3418cd30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cd34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418cd38:	4618      	mov	r0, r3
3418cd3a:	f7fe fe89 	bl	3418ba50 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3418cd3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
3418cd46:	f002 0308 	and.w	r3, r2, #8
3418cd4a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3418cd4e:	2300      	movs	r3, #0
3418cd50:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
3418cd54:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
3418cd58:	4603      	mov	r3, r0
3418cd5a:	460a      	mov	r2, r1
3418cd5c:	4313      	orrs	r3, r2
3418cd5e:	d017      	beq.n	3418cd90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3418cd60:	4b44      	ldr	r3, [pc, #272]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cd62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418cd66:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418cd6a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418cd6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cd72:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3418cd76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cd7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418cd7e:	3b01      	subs	r3, #1
3418cd80:	041b      	lsls	r3, r3, #16
3418cd82:	4313      	orrs	r3, r2
3418cd84:	4a3b      	ldr	r2, [pc, #236]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cd86:	430b      	orrs	r3, r1
3418cd88:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
3418cd8c:	f7ff fb6a 	bl	3418c464 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3418cd90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
3418cd98:	f002 0310 	and.w	r3, r2, #16
3418cd9c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
3418cda0:	2300      	movs	r3, #0
3418cda2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3418cda6:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3418cdaa:	4603      	mov	r3, r0
3418cdac:	460a      	mov	r2, r1
3418cdae:	4313      	orrs	r3, r2
3418cdb0:	d02f      	beq.n	3418ce12 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3418cdb2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cdb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418cdba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418cdbe:	d118      	bne.n	3418cdf2 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3418cdc0:	4b2c      	ldr	r3, [pc, #176]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cdc2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418cdc6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418cdca:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418cdce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cdd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3418cdd6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cdda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3418cdde:	3b01      	subs	r3, #1
3418cde0:	041b      	lsls	r3, r3, #16
3418cde2:	4313      	orrs	r3, r2
3418cde4:	4a23      	ldr	r2, [pc, #140]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418cde6:	430b      	orrs	r3, r1
3418cde8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
3418cdec:	f7ff fb2c 	bl	3418c448 <LL_RCC_IC17_Enable>
3418cdf0:	e008      	b.n	3418ce04 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
3418cdf2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cdf6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418cdfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418cdfe:	d101      	bne.n	3418ce04 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
3418ce00:	f7ff fb5a 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
3418ce04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ce08:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418ce0c:	4618      	mov	r0, r3
3418ce0e:	f7fe fe4b 	bl	3418baa8 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3418ce12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ce1a:	f002 0320 	and.w	r3, r2, #32
3418ce1e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
3418ce22:	2300      	movs	r3, #0
3418ce24:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
3418ce28:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
3418ce2c:	4603      	mov	r3, r0
3418ce2e:	460a      	mov	r2, r1
3418ce30:	4313      	orrs	r3, r2
3418ce32:	d031      	beq.n	3418ce98 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
3418ce34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ce38:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418ce3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418ce40:	d11a      	bne.n	3418ce78 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3418ce42:	4b0c      	ldr	r3, [pc, #48]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ce44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418ce48:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ce4c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ce50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ce54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
3418ce56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ce5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ce5c:	3b01      	subs	r3, #1
3418ce5e:	041b      	lsls	r3, r3, #16
3418ce60:	4313      	orrs	r3, r2
3418ce62:	4a04      	ldr	r2, [pc, #16]	@ (3418ce74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ce64:	430b      	orrs	r3, r1
3418ce66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
3418ce6a:	f7ff faa7 	bl	3418c3bc <LL_RCC_IC12_Enable>
3418ce6e:	e00c      	b.n	3418ce8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
3418ce70:	0301041c 	.word	0x0301041c
3418ce74:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3418ce78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ce7c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418ce80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418ce84:	d101      	bne.n	3418ce8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
3418ce86:	f7ff fb17 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
3418ce8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ce8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418ce92:	4618      	mov	r0, r3
3418ce94:	f7fe fe1e 	bl	3418bad4 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3418ce98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418cea0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3418cea4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3418cea8:	2300      	movs	r3, #0
3418ceaa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
3418ceae:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
3418ceb2:	4603      	mov	r3, r0
3418ceb4:	460a      	mov	r2, r1
3418ceb6:	4313      	orrs	r3, r2
3418ceb8:	d006      	beq.n	3418cec8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3418ceba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cebe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418cec2:	4618      	mov	r0, r3
3418cec4:	f7fe fe1c 	bl	3418bb00 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3418cec8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ced0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
3418ced4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3418ced8:	2300      	movs	r3, #0
3418ceda:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
3418cede:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
3418cee2:	4603      	mov	r3, r0
3418cee4:	460a      	mov	r2, r1
3418cee6:	4313      	orrs	r3, r2
3418cee8:	d006      	beq.n	3418cef8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
3418ceea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ceee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418cef2:	4618      	mov	r0, r3
3418cef4:	f7fe fe1a 	bl	3418bb2c <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3418cef8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
3418cf00:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3418cf04:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
3418cf08:	2300      	movs	r3, #0
3418cf0a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
3418cf0e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
3418cf12:	4603      	mov	r3, r0
3418cf14:	460a      	mov	r2, r1
3418cf16:	4313      	orrs	r3, r2
3418cf18:	d006      	beq.n	3418cf28 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3418cf1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cf1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418cf22:	4618      	mov	r0, r3
3418cf24:	f7fe fe18 	bl	3418bb58 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3418cf28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418cf30:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3418cf34:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
3418cf38:	2300      	movs	r3, #0
3418cf3a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3418cf3e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3418cf42:	4603      	mov	r3, r0
3418cf44:	460a      	mov	r2, r1
3418cf46:	4313      	orrs	r3, r2
3418cf48:	d038      	beq.n	3418cfbc <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3418cf4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cf4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418cf52:	2b02      	cmp	r3, #2
3418cf54:	d116      	bne.n	3418cf84 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3418cf56:	4bbc      	ldr	r3, [pc, #752]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418cf58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3418cf5c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418cf60:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418cf64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cf68:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3418cf6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cf6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418cf70:	3b01      	subs	r3, #1
3418cf72:	041b      	lsls	r3, r3, #16
3418cf74:	4313      	orrs	r3, r2
3418cf76:	4ab4      	ldr	r2, [pc, #720]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418cf78:	430b      	orrs	r3, r1
3418cf7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
3418cf7e:	f7ff fa2b 	bl	3418c3d8 <LL_RCC_IC13_Enable>
3418cf82:	e007      	b.n	3418cf94 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
3418cf84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cf88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418cf8c:	2b01      	cmp	r3, #1
3418cf8e:	d101      	bne.n	3418cf94 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
3418cf90:	f7ff fa92 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
3418cf94:	4bac      	ldr	r3, [pc, #688]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418cf96:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418cf9a:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
3418cf9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cfa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418cfa6:	3b01      	subs	r3, #1
3418cfa8:	011a      	lsls	r2, r3, #4
3418cfaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cfae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418cfb2:	4313      	orrs	r3, r2
3418cfb4:	4aa4      	ldr	r2, [pc, #656]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418cfb6:	430b      	orrs	r3, r1
3418cfb8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
3418cfbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418cfc4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3418cfc8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
3418cfcc:	2300      	movs	r3, #0
3418cfce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
3418cfd2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3418cfd6:	4603      	mov	r3, r0
3418cfd8:	460a      	mov	r2, r1
3418cfda:	4313      	orrs	r3, r2
3418cfdc:	d02d      	beq.n	3418d03a <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3418cfde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cfe2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418cfe6:	2b02      	cmp	r3, #2
3418cfe8:	d118      	bne.n	3418d01c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3418cfea:	4b97      	ldr	r3, [pc, #604]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418cfec:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418cff0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418cff4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418cff8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418cffc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3418d000:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3418d008:	3b01      	subs	r3, #1
3418d00a:	041b      	lsls	r3, r3, #16
3418d00c:	4313      	orrs	r3, r2
3418d00e:	4a8e      	ldr	r2, [pc, #568]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d010:	430b      	orrs	r3, r1
3418d012:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3418d016:	f7ff fa33 	bl	3418c480 <LL_RCC_IC19_Enable>
3418d01a:	e007      	b.n	3418d02c <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
3418d01c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d020:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418d024:	2b01      	cmp	r3, #1
3418d026:	d101      	bne.n	3418d02c <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
3418d028:	f7ff fa46 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
3418d02c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418d034:	4618      	mov	r0, r3
3418d036:	f7fe fda5 	bl	3418bb84 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3418d03a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d03e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d042:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3418d046:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
3418d04a:	2300      	movs	r3, #0
3418d04c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
3418d050:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3418d054:	4603      	mov	r3, r0
3418d056:	460a      	mov	r2, r1
3418d058:	4313      	orrs	r3, r2
3418d05a:	d04b      	beq.n	3418d0f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
3418d05c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d060:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3418d064:	4b79      	ldr	r3, [pc, #484]	@ (3418d24c <HAL_RCCEx_PeriphCLKConfig+0xd78>)
3418d066:	429a      	cmp	r2, r3
3418d068:	d116      	bne.n	3418d098 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418d06a:	4b77      	ldr	r3, [pc, #476]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d06c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418d070:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d074:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d078:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d07c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418d07e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418d084:	3b01      	subs	r3, #1
3418d086:	041b      	lsls	r3, r3, #16
3418d088:	4313      	orrs	r3, r2
3418d08a:	4a6f      	ldr	r2, [pc, #444]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d08c:	430b      	orrs	r3, r1
3418d08e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418d092:	f7ff f985 	bl	3418c3a0 <LL_RCC_IC10_Enable>
3418d096:	e026      	b.n	3418d0e6 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
3418d098:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d09c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3418d0a0:	4b6b      	ldr	r3, [pc, #428]	@ (3418d250 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
3418d0a2:	429a      	cmp	r2, r3
3418d0a4:	d116      	bne.n	3418d0d4 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d0a6:	4b68      	ldr	r3, [pc, #416]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d0a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d0ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d0b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d0b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d0b8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d0ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d0be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d0c0:	3b01      	subs	r3, #1
3418d0c2:	041b      	lsls	r3, r3, #16
3418d0c4:	4313      	orrs	r3, r2
3418d0c6:	4a60      	ldr	r2, [pc, #384]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d0c8:	430b      	orrs	r3, r1
3418d0ca:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d0ce:	f7ff f99f 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d0d2:	e008      	b.n	3418d0e6 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
3418d0d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d0d8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3418d0dc:	4b5d      	ldr	r3, [pc, #372]	@ (3418d254 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
3418d0de:	429a      	cmp	r2, r3
3418d0e0:	d101      	bne.n	3418d0e6 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
3418d0e2:	f7ff f9e9 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
3418d0e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d0ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418d0ee:	4618      	mov	r0, r3
3418d0f0:	f7fe fd74 	bl	3418bbdc <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
3418d0f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d0fc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
3418d100:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
3418d104:	2300      	movs	r3, #0
3418d106:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
3418d10a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3418d10e:	4603      	mov	r3, r0
3418d110:	460a      	mov	r2, r1
3418d112:	4313      	orrs	r3, r2
3418d114:	d04b      	beq.n	3418d1ae <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
3418d116:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d11a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3418d11e:	4b4e      	ldr	r3, [pc, #312]	@ (3418d258 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
3418d120:	429a      	cmp	r2, r3
3418d122:	d116      	bne.n	3418d152 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418d124:	4b48      	ldr	r3, [pc, #288]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418d12a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d12e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d132:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d136:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418d138:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418d13e:	3b01      	subs	r3, #1
3418d140:	041b      	lsls	r3, r3, #16
3418d142:	4313      	orrs	r3, r2
3418d144:	4a40      	ldr	r2, [pc, #256]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d146:	430b      	orrs	r3, r1
3418d148:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418d14c:	f7ff f928 	bl	3418c3a0 <LL_RCC_IC10_Enable>
3418d150:	e026      	b.n	3418d1a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3418d152:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d156:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3418d15a:	4b40      	ldr	r3, [pc, #256]	@ (3418d25c <HAL_RCCEx_PeriphCLKConfig+0xd88>)
3418d15c:	429a      	cmp	r2, r3
3418d15e:	d116      	bne.n	3418d18e <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d160:	4b39      	ldr	r3, [pc, #228]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d162:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d166:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d16a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d16e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d172:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d174:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d17a:	3b01      	subs	r3, #1
3418d17c:	041b      	lsls	r3, r3, #16
3418d17e:	4313      	orrs	r3, r2
3418d180:	4a31      	ldr	r2, [pc, #196]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d182:	430b      	orrs	r3, r1
3418d184:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d188:	f7ff f942 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d18c:	e008      	b.n	3418d1a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3418d18e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d192:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3418d196:	4b32      	ldr	r3, [pc, #200]	@ (3418d260 <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
3418d198:	429a      	cmp	r2, r3
3418d19a:	d101      	bne.n	3418d1a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
3418d19c:	f7ff f98c 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
3418d1a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d1a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418d1a8:	4618      	mov	r0, r3
3418d1aa:	f7fe fd17 	bl	3418bbdc <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
3418d1ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d1b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3418d1ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
3418d1be:	2300      	movs	r3, #0
3418d1c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
3418d1c4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
3418d1c8:	4603      	mov	r3, r0
3418d1ca:	460a      	mov	r2, r1
3418d1cc:	4313      	orrs	r3, r2
3418d1ce:	d05d      	beq.n	3418d28c <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
3418d1d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d1d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3418d1d8:	4b22      	ldr	r3, [pc, #136]	@ (3418d264 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
3418d1da:	429a      	cmp	r2, r3
3418d1dc:	d116      	bne.n	3418d20c <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418d1de:	4b1a      	ldr	r3, [pc, #104]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d1e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418d1e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d1e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d1ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d1f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418d1f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d1f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418d1f8:	3b01      	subs	r3, #1
3418d1fa:	041b      	lsls	r3, r3, #16
3418d1fc:	4313      	orrs	r3, r2
3418d1fe:	4a12      	ldr	r2, [pc, #72]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d200:	430b      	orrs	r3, r1
3418d202:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418d206:	f7ff f8cb 	bl	3418c3a0 <LL_RCC_IC10_Enable>
3418d20a:	e038      	b.n	3418d27e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
3418d20c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d210:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3418d214:	4b14      	ldr	r3, [pc, #80]	@ (3418d268 <HAL_RCCEx_PeriphCLKConfig+0xd94>)
3418d216:	429a      	cmp	r2, r3
3418d218:	d128      	bne.n	3418d26c <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d21a:	4b0b      	ldr	r3, [pc, #44]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d21c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d220:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d224:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d228:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d22c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d22e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d232:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d234:	3b01      	subs	r3, #1
3418d236:	041b      	lsls	r3, r3, #16
3418d238:	4313      	orrs	r3, r2
3418d23a:	4a03      	ldr	r2, [pc, #12]	@ (3418d248 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418d23c:	430b      	orrs	r3, r1
3418d23e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d242:	f7ff f8e5 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d246:	e01a      	b.n	3418d27e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
3418d248:	56028000 	.word	0x56028000
3418d24c:	0702000c 	.word	0x0702000c
3418d250:	0703000c 	.word	0x0703000c
3418d254:	0701000c 	.word	0x0701000c
3418d258:	0702040c 	.word	0x0702040c
3418d25c:	0703040c 	.word	0x0703040c
3418d260:	0701040c 	.word	0x0701040c
3418d264:	0702080c 	.word	0x0702080c
3418d268:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
3418d26c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d270:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3418d274:	4bc8      	ldr	r3, [pc, #800]	@ (3418d598 <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
3418d276:	429a      	cmp	r2, r3
3418d278:	d101      	bne.n	3418d27e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
3418d27a:	f7ff f91d 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
3418d27e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418d286:	4618      	mov	r0, r3
3418d288:	f7fe fca8 	bl	3418bbdc <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
3418d28c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d290:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d294:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3418d298:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
3418d29c:	2300      	movs	r3, #0
3418d29e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
3418d2a2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3418d2a6:	4603      	mov	r3, r0
3418d2a8:	460a      	mov	r2, r1
3418d2aa:	4313      	orrs	r3, r2
3418d2ac:	d04b      	beq.n	3418d346 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
3418d2ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d2b2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3418d2b6:	4bb9      	ldr	r3, [pc, #740]	@ (3418d59c <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
3418d2b8:	429a      	cmp	r2, r3
3418d2ba:	d116      	bne.n	3418d2ea <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418d2bc:	4bb8      	ldr	r3, [pc, #736]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d2be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418d2c2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d2c6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d2ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d2ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418d2d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d2d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418d2d6:	3b01      	subs	r3, #1
3418d2d8:	041b      	lsls	r3, r3, #16
3418d2da:	4313      	orrs	r3, r2
3418d2dc:	4ab0      	ldr	r2, [pc, #704]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d2de:	430b      	orrs	r3, r1
3418d2e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418d2e4:	f7ff f85c 	bl	3418c3a0 <LL_RCC_IC10_Enable>
3418d2e8:	e026      	b.n	3418d338 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3418d2ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d2ee:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3418d2f2:	4bac      	ldr	r3, [pc, #688]	@ (3418d5a4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
3418d2f4:	429a      	cmp	r2, r3
3418d2f6:	d116      	bne.n	3418d326 <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d2f8:	4ba9      	ldr	r3, [pc, #676]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d2fa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d2fe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d302:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d306:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d30a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d30c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d310:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d312:	3b01      	subs	r3, #1
3418d314:	041b      	lsls	r3, r3, #16
3418d316:	4313      	orrs	r3, r2
3418d318:	4aa1      	ldr	r2, [pc, #644]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d31a:	430b      	orrs	r3, r1
3418d31c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d320:	f7ff f876 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d324:	e008      	b.n	3418d338 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3418d326:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d32a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3418d32e:	4b9e      	ldr	r3, [pc, #632]	@ (3418d5a8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
3418d330:	429a      	cmp	r2, r3
3418d332:	d101      	bne.n	3418d338 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
3418d334:	f7ff f8c0 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
3418d338:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d33c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3418d340:	4618      	mov	r0, r3
3418d342:	f7fe fc4b 	bl	3418bbdc <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
3418d346:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d34a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d34e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3418d352:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
3418d356:	2300      	movs	r3, #0
3418d358:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
3418d35c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
3418d360:	4603      	mov	r3, r0
3418d362:	460a      	mov	r2, r1
3418d364:	4313      	orrs	r3, r2
3418d366:	d04b      	beq.n	3418d400 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3418d368:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d36c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3418d370:	4b8e      	ldr	r3, [pc, #568]	@ (3418d5ac <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
3418d372:	429a      	cmp	r2, r3
3418d374:	d116      	bne.n	3418d3a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418d376:	4b8a      	ldr	r3, [pc, #552]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418d37c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d380:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d384:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d388:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418d38a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d38e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418d390:	3b01      	subs	r3, #1
3418d392:	041b      	lsls	r3, r3, #16
3418d394:	4313      	orrs	r3, r2
3418d396:	4a82      	ldr	r2, [pc, #520]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d398:	430b      	orrs	r3, r1
3418d39a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418d39e:	f7fe ffff 	bl	3418c3a0 <LL_RCC_IC10_Enable>
3418d3a2:	e026      	b.n	3418d3f2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3418d3a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d3a8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3418d3ac:	4b80      	ldr	r3, [pc, #512]	@ (3418d5b0 <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
3418d3ae:	429a      	cmp	r2, r3
3418d3b0:	d116      	bne.n	3418d3e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d3b2:	4b7b      	ldr	r3, [pc, #492]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d3b4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d3b8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d3bc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d3c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d3c4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d3c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d3ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d3cc:	3b01      	subs	r3, #1
3418d3ce:	041b      	lsls	r3, r3, #16
3418d3d0:	4313      	orrs	r3, r2
3418d3d2:	4a73      	ldr	r2, [pc, #460]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d3d4:	430b      	orrs	r3, r1
3418d3d6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d3da:	f7ff f819 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d3de:	e008      	b.n	3418d3f2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
3418d3e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d3e4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3418d3e8:	4b72      	ldr	r3, [pc, #456]	@ (3418d5b4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
3418d3ea:	429a      	cmp	r2, r3
3418d3ec:	d101      	bne.n	3418d3f2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
3418d3ee:	f7ff f863 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
3418d3f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d3f6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418d3fa:	4618      	mov	r0, r3
3418d3fc:	f7fe fbf9 	bl	3418bbf2 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
3418d400:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d404:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d408:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3418d40c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
3418d410:	2300      	movs	r3, #0
3418d412:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
3418d416:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3418d41a:	4603      	mov	r3, r0
3418d41c:	460a      	mov	r2, r1
3418d41e:	4313      	orrs	r3, r2
3418d420:	d04b      	beq.n	3418d4ba <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
3418d422:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d426:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3418d42a:	4b63      	ldr	r3, [pc, #396]	@ (3418d5b8 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
3418d42c:	429a      	cmp	r2, r3
3418d42e:	d116      	bne.n	3418d45e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418d430:	4b5b      	ldr	r3, [pc, #364]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418d436:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d43a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d43e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d442:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418d444:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418d44a:	3b01      	subs	r3, #1
3418d44c:	041b      	lsls	r3, r3, #16
3418d44e:	4313      	orrs	r3, r2
3418d450:	4a53      	ldr	r2, [pc, #332]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d452:	430b      	orrs	r3, r1
3418d454:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418d458:	f7fe ffa2 	bl	3418c3a0 <LL_RCC_IC10_Enable>
3418d45c:	e026      	b.n	3418d4ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
3418d45e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d462:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3418d466:	4b55      	ldr	r3, [pc, #340]	@ (3418d5bc <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
3418d468:	429a      	cmp	r2, r3
3418d46a:	d116      	bne.n	3418d49a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d46c:	4b4c      	ldr	r3, [pc, #304]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d46e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d472:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d476:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d47a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d47e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d480:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d486:	3b01      	subs	r3, #1
3418d488:	041b      	lsls	r3, r3, #16
3418d48a:	4313      	orrs	r3, r2
3418d48c:	4a44      	ldr	r2, [pc, #272]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d48e:	430b      	orrs	r3, r1
3418d490:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d494:	f7fe ffbc 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d498:	e008      	b.n	3418d4ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
3418d49a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d49e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3418d4a2:	4b47      	ldr	r3, [pc, #284]	@ (3418d5c0 <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
3418d4a4:	429a      	cmp	r2, r3
3418d4a6:	d101      	bne.n	3418d4ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
3418d4a8:	f7ff f806 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
3418d4ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d4b0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d4b4:	4618      	mov	r0, r3
3418d4b6:	f7fe fb9c 	bl	3418bbf2 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
3418d4ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d4be:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d4c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3418d4c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
3418d4ca:	2300      	movs	r3, #0
3418d4cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
3418d4d0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
3418d4d4:	4603      	mov	r3, r0
3418d4d6:	460a      	mov	r2, r1
3418d4d8:	4313      	orrs	r3, r2
3418d4da:	d02d      	beq.n	3418d538 <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3418d4dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d4e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3418d4e4:	4b37      	ldr	r3, [pc, #220]	@ (3418d5c4 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
3418d4e6:	429a      	cmp	r2, r3
3418d4e8:	d116      	bne.n	3418d518 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d4ea:	4b2d      	ldr	r3, [pc, #180]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d4ec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d4f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d4f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d4f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d4fc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d4fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d504:	3b01      	subs	r3, #1
3418d506:	041b      	lsls	r3, r3, #16
3418d508:	4313      	orrs	r3, r2
3418d50a:	4a25      	ldr	r2, [pc, #148]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d50c:	430b      	orrs	r3, r1
3418d50e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d512:	f7fe ff7d 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d516:	e008      	b.n	3418d52a <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3418d518:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d51c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3418d520:	4b29      	ldr	r3, [pc, #164]	@ (3418d5c8 <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
3418d522:	429a      	cmp	r2, r3
3418d524:	d101      	bne.n	3418d52a <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
3418d526:	f7fe ffc7 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3418d52a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d52e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418d532:	4618      	mov	r0, r3
3418d534:	f7fe fb68 	bl	3418bc08 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3418d538:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d540:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3418d544:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
3418d548:	2300      	movs	r3, #0
3418d54a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
3418d54e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
3418d552:	4603      	mov	r3, r0
3418d554:	460a      	mov	r2, r1
3418d556:	4313      	orrs	r3, r2
3418d558:	d04a      	beq.n	3418d5f0 <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
3418d55a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d55e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3418d562:	4b1a      	ldr	r3, [pc, #104]	@ (3418d5cc <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
3418d564:	429a      	cmp	r2, r3
3418d566:	d133      	bne.n	3418d5d0 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d568:	4b0d      	ldr	r3, [pc, #52]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d56a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d56e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d572:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d576:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d57a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d57c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d582:	3b01      	subs	r3, #1
3418d584:	041b      	lsls	r3, r3, #16
3418d586:	4313      	orrs	r3, r2
3418d588:	4a05      	ldr	r2, [pc, #20]	@ (3418d5a0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418d58a:	430b      	orrs	r3, r1
3418d58c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d590:	f7fe ff3e 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d594:	e025      	b.n	3418d5e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
3418d596:	bf00      	nop
3418d598:	0701080c 	.word	0x0701080c
3418d59c:	07020c0c 	.word	0x07020c0c
3418d5a0:	56028000 	.word	0x56028000
3418d5a4:	07030c0c 	.word	0x07030c0c
3418d5a8:	07010c0c 	.word	0x07010c0c
3418d5ac:	0702100c 	.word	0x0702100c
3418d5b0:	0703100c 	.word	0x0703100c
3418d5b4:	0701100c 	.word	0x0701100c
3418d5b8:	0702140c 	.word	0x0702140c
3418d5bc:	0703140c 	.word	0x0703140c
3418d5c0:	0701140c 	.word	0x0701140c
3418d5c4:	0702082c 	.word	0x0702082c
3418d5c8:	0701082c 	.word	0x0701082c
3418d5cc:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3418d5d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d5d4:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3418d5d8:	4bca      	ldr	r3, [pc, #808]	@ (3418d904 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
3418d5da:	429a      	cmp	r2, r3
3418d5dc:	d101      	bne.n	3418d5e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
3418d5de:	f7fe ff6b 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
3418d5e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d5e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418d5ea:	4618      	mov	r0, r3
3418d5ec:	f7fe fb0c 	bl	3418bc08 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
3418d5f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d5f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
3418d5fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
3418d600:	2300      	movs	r3, #0
3418d602:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
3418d606:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
3418d60a:	4603      	mov	r3, r0
3418d60c:	460a      	mov	r2, r1
3418d60e:	4313      	orrs	r3, r2
3418d610:	d02d      	beq.n	3418d66e <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3418d612:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d616:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418d61a:	4bbb      	ldr	r3, [pc, #748]	@ (3418d908 <HAL_RCCEx_PeriphCLKConfig+0x1434>)
3418d61c:	429a      	cmp	r2, r3
3418d61e:	d116      	bne.n	3418d64e <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d620:	4bba      	ldr	r3, [pc, #744]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d622:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d626:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d62a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d62e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d632:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d634:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d63a:	3b01      	subs	r3, #1
3418d63c:	041b      	lsls	r3, r3, #16
3418d63e:	4313      	orrs	r3, r2
3418d640:	4ab2      	ldr	r2, [pc, #712]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d642:	430b      	orrs	r3, r1
3418d644:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d648:	f7fe fee2 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d64c:	e008      	b.n	3418d660 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3418d64e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d652:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418d656:	4bae      	ldr	r3, [pc, #696]	@ (3418d910 <HAL_RCCEx_PeriphCLKConfig+0x143c>)
3418d658:	429a      	cmp	r2, r3
3418d65a:	d101      	bne.n	3418d660 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
3418d65c:	f7fe ff2c 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
3418d660:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d664:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418d668:	4618      	mov	r0, r3
3418d66a:	f7fe facd 	bl	3418bc08 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3418d66e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d672:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d676:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3418d67a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3418d67e:	2300      	movs	r3, #0
3418d680:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
3418d684:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
3418d688:	4603      	mov	r3, r0
3418d68a:	460a      	mov	r2, r1
3418d68c:	4313      	orrs	r3, r2
3418d68e:	d02d      	beq.n	3418d6ec <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3418d690:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d694:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3418d698:	4b9e      	ldr	r3, [pc, #632]	@ (3418d914 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
3418d69a:	429a      	cmp	r2, r3
3418d69c:	d116      	bne.n	3418d6cc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d69e:	4b9b      	ldr	r3, [pc, #620]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d6a0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d6a4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d6a8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d6ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d6b0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d6b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d6b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d6b8:	3b01      	subs	r3, #1
3418d6ba:	041b      	lsls	r3, r3, #16
3418d6bc:	4313      	orrs	r3, r2
3418d6be:	4a93      	ldr	r2, [pc, #588]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d6c0:	430b      	orrs	r3, r1
3418d6c2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d6c6:	f7fe fea3 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d6ca:	e008      	b.n	3418d6de <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
3418d6cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d6d0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3418d6d4:	4b90      	ldr	r3, [pc, #576]	@ (3418d918 <HAL_RCCEx_PeriphCLKConfig+0x1444>)
3418d6d6:	429a      	cmp	r2, r3
3418d6d8:	d101      	bne.n	3418d6de <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
3418d6da:	f7fe feed 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
3418d6de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d6e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418d6e6:	4618      	mov	r0, r3
3418d6e8:	f7fe fa8e 	bl	3418bc08 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
3418d6ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d6f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3418d6f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
3418d6fc:	2300      	movs	r3, #0
3418d6fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3418d702:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3418d706:	4603      	mov	r3, r0
3418d708:	460a      	mov	r2, r1
3418d70a:	4313      	orrs	r3, r2
3418d70c:	d02d      	beq.n	3418d76a <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3418d70e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d712:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3418d716:	4b81      	ldr	r3, [pc, #516]	@ (3418d91c <HAL_RCCEx_PeriphCLKConfig+0x1448>)
3418d718:	429a      	cmp	r2, r3
3418d71a:	d116      	bne.n	3418d74a <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418d71c:	4b7b      	ldr	r3, [pc, #492]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d71e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418d722:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d726:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d72a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d72e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418d730:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418d736:	3b01      	subs	r3, #1
3418d738:	041b      	lsls	r3, r3, #16
3418d73a:	4313      	orrs	r3, r2
3418d73c:	4a73      	ldr	r2, [pc, #460]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d73e:	430b      	orrs	r3, r1
3418d740:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418d744:	f7fe fe64 	bl	3418c410 <LL_RCC_IC15_Enable>
3418d748:	e008      	b.n	3418d75c <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
3418d74a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d74e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3418d752:	4b73      	ldr	r3, [pc, #460]	@ (3418d920 <HAL_RCCEx_PeriphCLKConfig+0x144c>)
3418d754:	429a      	cmp	r2, r3
3418d756:	d101      	bne.n	3418d75c <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
3418d758:	f7fe feae 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
3418d75c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d760:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418d764:	4618      	mov	r0, r3
3418d766:	f7fe fa4f 	bl	3418bc08 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3418d76a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d76e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d772:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3418d776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
3418d77a:	2300      	movs	r3, #0
3418d77c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3418d780:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
3418d784:	4603      	mov	r3, r0
3418d786:	460a      	mov	r2, r1
3418d788:	4313      	orrs	r3, r2
3418d78a:	d04b      	beq.n	3418d824 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3418d78c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d790:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418d794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418d798:	d116      	bne.n	3418d7c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418d79a:	4b5c      	ldr	r3, [pc, #368]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d79c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418d7a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d7a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d7a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d7ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418d7ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d7b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418d7b4:	3b01      	subs	r3, #1
3418d7b6:	041b      	lsls	r3, r3, #16
3418d7b8:	4313      	orrs	r3, r2
3418d7ba:	4a54      	ldr	r2, [pc, #336]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d7bc:	430b      	orrs	r3, r1
3418d7be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418d7c2:	f7fe fddf 	bl	3418c384 <LL_RCC_IC9_Enable>
3418d7c6:	e026      	b.n	3418d816 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3418d7c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d7cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418d7d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418d7d4:	d116      	bne.n	3418d804 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418d7d6:	4b4d      	ldr	r3, [pc, #308]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d7d8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418d7dc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d7e0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d7e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d7e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418d7ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d7ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418d7f0:	3b01      	subs	r3, #1
3418d7f2:	041b      	lsls	r3, r3, #16
3418d7f4:	4313      	orrs	r3, r2
3418d7f6:	4a45      	ldr	r2, [pc, #276]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d7f8:	430b      	orrs	r3, r1
3418d7fa:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418d7fe:	f7fe fdf9 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418d802:	e008      	b.n	3418d816 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
3418d804:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d808:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418d80c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418d810:	d101      	bne.n	3418d816 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
3418d812:	f7fe fe51 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
3418d816:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d81a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418d81e:	4618      	mov	r0, r3
3418d820:	f7fe f9fe 	bl	3418bc20 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
3418d824:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d828:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d82c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3418d830:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
3418d834:	2300      	movs	r3, #0
3418d836:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3418d83a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3418d83e:	4603      	mov	r3, r0
3418d840:	460a      	mov	r2, r1
3418d842:	4313      	orrs	r3, r2
3418d844:	d02f      	beq.n	3418d8a6 <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3418d846:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d84a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418d84e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418d852:	d118      	bne.n	3418d886 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3418d854:	4b2d      	ldr	r3, [pc, #180]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d856:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418d85a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d85e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d862:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d866:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3418d86a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d86e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418d872:	3b01      	subs	r3, #1
3418d874:	041b      	lsls	r3, r3, #16
3418d876:	4313      	orrs	r3, r2
3418d878:	4a24      	ldr	r2, [pc, #144]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d87a:	430b      	orrs	r3, r1
3418d87c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3418d880:	f7fe fdd4 	bl	3418c42c <LL_RCC_IC16_Enable>
3418d884:	e008      	b.n	3418d898 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3418d886:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d88a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418d88e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418d892:	d101      	bne.n	3418d898 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
3418d894:	f7fe fe10 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
3418d898:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d89c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418d8a0:	4618      	mov	r0, r3
3418d8a2:	f7fe f9d3 	bl	3418bc4c <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
3418d8a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d8ae:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3418d8b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
3418d8b6:	2300      	movs	r3, #0
3418d8b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3418d8bc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3418d8c0:	4603      	mov	r3, r0
3418d8c2:	460a      	mov	r2, r1
3418d8c4:	4313      	orrs	r3, r2
3418d8c6:	d05b      	beq.n	3418d980 <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
3418d8c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d8cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418d8d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418d8d4:	d126      	bne.n	3418d924 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418d8d6:	4b0d      	ldr	r3, [pc, #52]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d8d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418d8dc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d8e0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d8e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d8e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418d8ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d8ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418d8f0:	3b01      	subs	r3, #1
3418d8f2:	041b      	lsls	r3, r3, #16
3418d8f4:	4313      	orrs	r3, r2
3418d8f6:	4a05      	ldr	r2, [pc, #20]	@ (3418d90c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418d8f8:	430b      	orrs	r3, r1
3418d8fa:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418d8fe:	f7fe fd25 	bl	3418c34c <LL_RCC_IC7_Enable>
3418d902:	e036      	b.n	3418d972 <HAL_RCCEx_PeriphCLKConfig+0x149e>
3418d904:	07010c2c 	.word	0x07010c2c
3418d908:	0702102c 	.word	0x0702102c
3418d90c:	56028000 	.word	0x56028000
3418d910:	0701102c 	.word	0x0701102c
3418d914:	0702142c 	.word	0x0702142c
3418d918:	0701142c 	.word	0x0701142c
3418d91c:	0702182c 	.word	0x0702182c
3418d920:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
3418d924:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d928:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418d92c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418d930:	d116      	bne.n	3418d960 <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418d932:	4bb5      	ldr	r3, [pc, #724]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418d934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418d938:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d93c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d940:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d944:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418d946:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d94a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418d94c:	3b01      	subs	r3, #1
3418d94e:	041b      	lsls	r3, r3, #16
3418d950:	4313      	orrs	r3, r2
3418d952:	4aad      	ldr	r2, [pc, #692]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418d954:	430b      	orrs	r3, r1
3418d956:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418d95a:	f7fe fd05 	bl	3418c368 <LL_RCC_IC8_Enable>
3418d95e:	e008      	b.n	3418d972 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3418d960:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d964:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418d968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418d96c:	d101      	bne.n	3418d972 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
3418d96e:	f7fe fda3 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3418d972:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d976:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418d97a:	4618      	mov	r0, r3
3418d97c:	f7fe f97c 	bl	3418bc78 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3418d980:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d984:	e9d3 2300 	ldrd	r2, r3, [r3]
3418d988:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3418d98c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3418d990:	2300      	movs	r3, #0
3418d992:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3418d996:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
3418d99a:	4603      	mov	r3, r0
3418d99c:	460a      	mov	r2, r1
3418d99e:	4313      	orrs	r3, r2
3418d9a0:	d02d      	beq.n	3418d9fe <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3418d9a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d9a6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3418d9aa:	2b20      	cmp	r3, #32
3418d9ac:	d118      	bne.n	3418d9e0 <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3418d9ae:	4b96      	ldr	r3, [pc, #600]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418d9b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418d9b4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418d9b8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418d9bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d9c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3418d9c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d9c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418d9cc:	3b01      	subs	r3, #1
3418d9ce:	041b      	lsls	r3, r3, #16
3418d9d0:	4313      	orrs	r3, r2
3418d9d2:	4a8d      	ldr	r2, [pc, #564]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418d9d4:	430b      	orrs	r3, r1
3418d9d6:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3418d9da:	f7fe fd5f 	bl	3418c49c <LL_RCC_IC20_Enable>
3418d9de:	e007      	b.n	3418d9f0 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
3418d9e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d9e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3418d9e8:	2b10      	cmp	r3, #16
3418d9ea:	d101      	bne.n	3418d9f0 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
3418d9ec:	f7fe fd64 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
3418d9f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418d9f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3418d9f8:	4618      	mov	r0, r3
3418d9fa:	f7fe f969 	bl	3418bcd0 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3418d9fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418da02:	e9d3 2300 	ldrd	r2, r3, [r3]
3418da06:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
3418da0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3418da0e:	2300      	movs	r3, #0
3418da10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3418da14:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3418da18:	4603      	mov	r3, r0
3418da1a:	460a      	mov	r2, r1
3418da1c:	4313      	orrs	r3, r2
3418da1e:	d04b      	beq.n	3418dab8 <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3418da20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418da24:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3418da28:	4b78      	ldr	r3, [pc, #480]	@ (3418dc0c <HAL_RCCEx_PeriphCLKConfig+0x1738>)
3418da2a:	429a      	cmp	r2, r3
3418da2c:	d116      	bne.n	3418da5c <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418da2e:	4b76      	ldr	r3, [pc, #472]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418da30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418da34:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418da38:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418da3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418da40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418da42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418da46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418da48:	3b01      	subs	r3, #1
3418da4a:	041b      	lsls	r3, r3, #16
3418da4c:	4313      	orrs	r3, r2
3418da4e:	4a6e      	ldr	r2, [pc, #440]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418da50:	430b      	orrs	r3, r1
3418da52:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418da56:	f7fe fc79 	bl	3418c34c <LL_RCC_IC7_Enable>
3418da5a:	e026      	b.n	3418daaa <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
3418da5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418da60:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3418da64:	4b6a      	ldr	r3, [pc, #424]	@ (3418dc10 <HAL_RCCEx_PeriphCLKConfig+0x173c>)
3418da66:	429a      	cmp	r2, r3
3418da68:	d116      	bne.n	3418da98 <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418da6a:	4b67      	ldr	r3, [pc, #412]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418da6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418da70:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418da74:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418da78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418da7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418da7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418da82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418da84:	3b01      	subs	r3, #1
3418da86:	041b      	lsls	r3, r3, #16
3418da88:	4313      	orrs	r3, r2
3418da8a:	4a5f      	ldr	r2, [pc, #380]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418da8c:	430b      	orrs	r3, r1
3418da8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418da92:	f7fe fc69 	bl	3418c368 <LL_RCC_IC8_Enable>
3418da96:	e008      	b.n	3418daaa <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
3418da98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418da9c:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3418daa0:	4b5c      	ldr	r3, [pc, #368]	@ (3418dc14 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
3418daa2:	429a      	cmp	r2, r3
3418daa4:	d101      	bne.n	3418daaa <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
3418daa6:	f7fe fd07 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
3418daaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418daae:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3418dab2:	4618      	mov	r0, r3
3418dab4:	f7fe f922 	bl	3418bcfc <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3418dab8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
3418dac0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
3418dac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
3418dac8:	2300      	movs	r3, #0
3418daca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3418dace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3418dad2:	4603      	mov	r3, r0
3418dad4:	460a      	mov	r2, r1
3418dad6:	4313      	orrs	r3, r2
3418dad8:	d04b      	beq.n	3418db72 <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3418dada:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dade:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3418dae2:	4b4d      	ldr	r3, [pc, #308]	@ (3418dc18 <HAL_RCCEx_PeriphCLKConfig+0x1744>)
3418dae4:	429a      	cmp	r2, r3
3418dae6:	d116      	bne.n	3418db16 <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418dae8:	4b47      	ldr	r3, [pc, #284]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418daea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418daee:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418daf2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418daf6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dafa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418dafc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418db00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418db02:	3b01      	subs	r3, #1
3418db04:	041b      	lsls	r3, r3, #16
3418db06:	4313      	orrs	r3, r2
3418db08:	4a3f      	ldr	r2, [pc, #252]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418db0a:	430b      	orrs	r3, r1
3418db0c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418db10:	f7fe fc1c 	bl	3418c34c <LL_RCC_IC7_Enable>
3418db14:	e026      	b.n	3418db64 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
3418db16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418db1a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3418db1e:	4b3f      	ldr	r3, [pc, #252]	@ (3418dc1c <HAL_RCCEx_PeriphCLKConfig+0x1748>)
3418db20:	429a      	cmp	r2, r3
3418db22:	d116      	bne.n	3418db52 <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418db24:	4b38      	ldr	r3, [pc, #224]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418db26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418db2a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418db2e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418db32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418db36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418db38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418db3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418db3e:	3b01      	subs	r3, #1
3418db40:	041b      	lsls	r3, r3, #16
3418db42:	4313      	orrs	r3, r2
3418db44:	4a30      	ldr	r2, [pc, #192]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418db46:	430b      	orrs	r3, r1
3418db48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418db4c:	f7fe fc0c 	bl	3418c368 <LL_RCC_IC8_Enable>
3418db50:	e008      	b.n	3418db64 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3418db52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418db56:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3418db5a:	4b31      	ldr	r3, [pc, #196]	@ (3418dc20 <HAL_RCCEx_PeriphCLKConfig+0x174c>)
3418db5c:	429a      	cmp	r2, r3
3418db5e:	d101      	bne.n	3418db64 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
3418db60:	f7fe fcaa 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
3418db64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418db68:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
3418db6c:	4618      	mov	r0, r3
3418db6e:	f7fe f8c5 	bl	3418bcfc <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3418db72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418db76:	e9d3 2300 	ldrd	r2, r3, [r3]
3418db7a:	2100      	movs	r1, #0
3418db7c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
3418db80:	f003 0301 	and.w	r3, r3, #1
3418db84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
3418db88:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
3418db8c:	4603      	mov	r3, r0
3418db8e:	460a      	mov	r2, r1
3418db90:	4313      	orrs	r3, r2
3418db92:	d056      	beq.n	3418dc42 <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3418db94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418db98:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418db9c:	2b02      	cmp	r3, #2
3418db9e:	d116      	bne.n	3418dbce <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418dba0:	4b19      	ldr	r3, [pc, #100]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418dba2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418dba6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418dbaa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418dbae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dbb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418dbb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dbb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418dbba:	3b01      	subs	r3, #1
3418dbbc:	041b      	lsls	r3, r3, #16
3418dbbe:	4313      	orrs	r3, r2
3418dbc0:	4a11      	ldr	r2, [pc, #68]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418dbc2:	430b      	orrs	r3, r1
3418dbc4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418dbc8:	f7fe fbc0 	bl	3418c34c <LL_RCC_IC7_Enable>
3418dbcc:	e032      	b.n	3418dc34 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3418dbce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dbd2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418dbd6:	2b03      	cmp	r3, #3
3418dbd8:	d124      	bne.n	3418dc24 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418dbda:	4b0b      	ldr	r3, [pc, #44]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418dbdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418dbe0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418dbe4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418dbe8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dbec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418dbee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dbf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dbf4:	3b01      	subs	r3, #1
3418dbf6:	041b      	lsls	r3, r3, #16
3418dbf8:	4313      	orrs	r3, r2
3418dbfa:	4a03      	ldr	r2, [pc, #12]	@ (3418dc08 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418dbfc:	430b      	orrs	r3, r1
3418dbfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418dc02:	f7fe fbb1 	bl	3418c368 <LL_RCC_IC8_Enable>
3418dc06:	e015      	b.n	3418dc34 <HAL_RCCEx_PeriphCLKConfig+0x1760>
3418dc08:	56028000 	.word	0x56028000
3418dc0c:	07021418 	.word	0x07021418
3418dc10:	07031418 	.word	0x07031418
3418dc14:	07011418 	.word	0x07011418
3418dc18:	07021818 	.word	0x07021818
3418dc1c:	07031818 	.word	0x07031818
3418dc20:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
3418dc24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dc28:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418dc2c:	2b01      	cmp	r3, #1
3418dc2e:	d101      	bne.n	3418dc34 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
3418dc30:	f7fe fc42 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
3418dc34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dc38:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418dc3c:	4618      	mov	r0, r3
3418dc3e:	f7fe f873 	bl	3418bd28 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3418dc42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dc46:	e9d3 2300 	ldrd	r2, r3, [r3]
3418dc4a:	2100      	movs	r1, #0
3418dc4c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3418dc50:	f003 0302 	and.w	r3, r3, #2
3418dc54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
3418dc58:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
3418dc5c:	4603      	mov	r3, r0
3418dc5e:	460a      	mov	r2, r1
3418dc60:	4313      	orrs	r3, r2
3418dc62:	d04b      	beq.n	3418dcfc <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3418dc64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dc68:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3418dc6c:	4bc6      	ldr	r3, [pc, #792]	@ (3418df88 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
3418dc6e:	429a      	cmp	r2, r3
3418dc70:	d116      	bne.n	3418dca0 <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418dc72:	4bc6      	ldr	r3, [pc, #792]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dc74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418dc78:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418dc7c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418dc80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dc84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418dc86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dc8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dc8c:	3b01      	subs	r3, #1
3418dc8e:	041b      	lsls	r3, r3, #16
3418dc90:	4313      	orrs	r3, r2
3418dc92:	4abe      	ldr	r2, [pc, #760]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dc94:	430b      	orrs	r3, r1
3418dc96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418dc9a:	f7fe fb65 	bl	3418c368 <LL_RCC_IC8_Enable>
3418dc9e:	e026      	b.n	3418dcee <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
3418dca0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dca4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3418dca8:	4bb9      	ldr	r3, [pc, #740]	@ (3418df90 <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
3418dcaa:	429a      	cmp	r2, r3
3418dcac:	d116      	bne.n	3418dcdc <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418dcae:	4bb7      	ldr	r3, [pc, #732]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dcb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418dcb4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418dcb8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418dcbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dcc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418dcc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dcc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418dcc8:	3b01      	subs	r3, #1
3418dcca:	041b      	lsls	r3, r3, #16
3418dccc:	4313      	orrs	r3, r2
3418dcce:	4aaf      	ldr	r2, [pc, #700]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dcd0:	430b      	orrs	r3, r1
3418dcd2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418dcd6:	f7fe fb55 	bl	3418c384 <LL_RCC_IC9_Enable>
3418dcda:	e008      	b.n	3418dcee <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
3418dcdc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dce0:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3418dce4:	4bab      	ldr	r3, [pc, #684]	@ (3418df94 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
3418dce6:	429a      	cmp	r2, r3
3418dce8:	d101      	bne.n	3418dcee <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
3418dcea:	f7fe fbe5 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
3418dcee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dcf2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
3418dcf6:	4618      	mov	r0, r3
3418dcf8:	f7fe f82c 	bl	3418bd54 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
3418dcfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dd00:	e9d3 2300 	ldrd	r2, r3, [r3]
3418dd04:	2100      	movs	r1, #0
3418dd06:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
3418dd0a:	f003 0304 	and.w	r3, r3, #4
3418dd0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3418dd12:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
3418dd16:	4603      	mov	r3, r0
3418dd18:	460a      	mov	r2, r1
3418dd1a:	4313      	orrs	r3, r2
3418dd1c:	d04b      	beq.n	3418ddb6 <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3418dd1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dd22:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418dd26:	4b9c      	ldr	r3, [pc, #624]	@ (3418df98 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
3418dd28:	429a      	cmp	r2, r3
3418dd2a:	d116      	bne.n	3418dd5a <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418dd2c:	4b97      	ldr	r3, [pc, #604]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dd2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418dd32:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418dd36:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418dd3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dd3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418dd40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dd44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dd46:	3b01      	subs	r3, #1
3418dd48:	041b      	lsls	r3, r3, #16
3418dd4a:	4313      	orrs	r3, r2
3418dd4c:	4a8f      	ldr	r2, [pc, #572]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dd4e:	430b      	orrs	r3, r1
3418dd50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418dd54:	f7fe fb08 	bl	3418c368 <LL_RCC_IC8_Enable>
3418dd58:	e026      	b.n	3418dda8 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3418dd5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dd5e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418dd62:	4b8e      	ldr	r3, [pc, #568]	@ (3418df9c <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
3418dd64:	429a      	cmp	r2, r3
3418dd66:	d116      	bne.n	3418dd96 <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418dd68:	4b88      	ldr	r3, [pc, #544]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dd6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418dd6e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418dd72:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418dd76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dd7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418dd7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dd80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418dd82:	3b01      	subs	r3, #1
3418dd84:	041b      	lsls	r3, r3, #16
3418dd86:	4313      	orrs	r3, r2
3418dd88:	4a80      	ldr	r2, [pc, #512]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dd8a:	430b      	orrs	r3, r1
3418dd8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418dd90:	f7fe faf8 	bl	3418c384 <LL_RCC_IC9_Enable>
3418dd94:	e008      	b.n	3418dda8 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3418dd96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dd9a:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418dd9e:	4b80      	ldr	r3, [pc, #512]	@ (3418dfa0 <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
3418dda0:	429a      	cmp	r2, r3
3418dda2:	d101      	bne.n	3418dda8 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
3418dda4:	f7fe fb88 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
3418dda8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ddac:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
3418ddb0:	4618      	mov	r0, r3
3418ddb2:	f7fd ffcf 	bl	3418bd54 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3418ddb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ddbe:	2100      	movs	r1, #0
3418ddc0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
3418ddc4:	f003 0308 	and.w	r3, r3, #8
3418ddc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
3418ddcc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
3418ddd0:	4603      	mov	r3, r0
3418ddd2:	460a      	mov	r2, r1
3418ddd4:	4313      	orrs	r3, r2
3418ddd6:	d04b      	beq.n	3418de70 <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3418ddd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dddc:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3418dde0:	4b70      	ldr	r3, [pc, #448]	@ (3418dfa4 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
3418dde2:	429a      	cmp	r2, r3
3418dde4:	d116      	bne.n	3418de14 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418dde6:	4b69      	ldr	r3, [pc, #420]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dde8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418ddec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ddf0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ddf4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ddf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418ddfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ddfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418de00:	3b01      	subs	r3, #1
3418de02:	041b      	lsls	r3, r3, #16
3418de04:	4313      	orrs	r3, r2
3418de06:	4a61      	ldr	r2, [pc, #388]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418de08:	430b      	orrs	r3, r1
3418de0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418de0e:	f7fe faab 	bl	3418c368 <LL_RCC_IC8_Enable>
3418de12:	e026      	b.n	3418de62 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
3418de14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418de18:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3418de1c:	4b62      	ldr	r3, [pc, #392]	@ (3418dfa8 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
3418de1e:	429a      	cmp	r2, r3
3418de20:	d116      	bne.n	3418de50 <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418de22:	4b5a      	ldr	r3, [pc, #360]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418de24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418de28:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418de2c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418de30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418de34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418de36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418de3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418de3c:	3b01      	subs	r3, #1
3418de3e:	041b      	lsls	r3, r3, #16
3418de40:	4313      	orrs	r3, r2
3418de42:	4a52      	ldr	r2, [pc, #328]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418de44:	430b      	orrs	r3, r1
3418de46:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418de4a:	f7fe fa9b 	bl	3418c384 <LL_RCC_IC9_Enable>
3418de4e:	e008      	b.n	3418de62 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
3418de50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418de54:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3418de58:	4b54      	ldr	r3, [pc, #336]	@ (3418dfac <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
3418de5a:	429a      	cmp	r2, r3
3418de5c:	d101      	bne.n	3418de62 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
3418de5e:	f7fe fb2b 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
3418de62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418de66:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
3418de6a:	4618      	mov	r0, r3
3418de6c:	f7fd ff72 	bl	3418bd54 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3418de70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418de74:	e9d3 2300 	ldrd	r2, r3, [r3]
3418de78:	2100      	movs	r1, #0
3418de7a:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
3418de7e:	f003 0310 	and.w	r3, r3, #16
3418de82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
3418de86:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
3418de8a:	4603      	mov	r3, r0
3418de8c:	460a      	mov	r2, r1
3418de8e:	4313      	orrs	r3, r2
3418de90:	d04b      	beq.n	3418df2a <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3418de92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418de96:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418de9a:	4b45      	ldr	r3, [pc, #276]	@ (3418dfb0 <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
3418de9c:	429a      	cmp	r2, r3
3418de9e:	d116      	bne.n	3418dece <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418dea0:	4b3a      	ldr	r3, [pc, #232]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dea2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418dea6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418deaa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418deae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418deb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418deb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418deb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418deba:	3b01      	subs	r3, #1
3418debc:	041b      	lsls	r3, r3, #16
3418debe:	4313      	orrs	r3, r2
3418dec0:	4a32      	ldr	r2, [pc, #200]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dec2:	430b      	orrs	r3, r1
3418dec4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418dec8:	f7fe fa5c 	bl	3418c384 <LL_RCC_IC9_Enable>
3418decc:	e026      	b.n	3418df1c <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
3418dece:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ded2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418ded6:	4b37      	ldr	r3, [pc, #220]	@ (3418dfb4 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
3418ded8:	429a      	cmp	r2, r3
3418deda:	d116      	bne.n	3418df0a <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418dedc:	4b2b      	ldr	r3, [pc, #172]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418dede:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418dee2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418dee6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418deea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418deee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418def0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418def4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418def6:	3b01      	subs	r3, #1
3418def8:	041b      	lsls	r3, r3, #16
3418defa:	4313      	orrs	r3, r2
3418defc:	4a23      	ldr	r2, [pc, #140]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418defe:	430b      	orrs	r3, r1
3418df00:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418df04:	f7fe fa76 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418df08:	e008      	b.n	3418df1c <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
3418df0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418df0e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418df12:	4b29      	ldr	r3, [pc, #164]	@ (3418dfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
3418df14:	429a      	cmp	r2, r3
3418df16:	d101      	bne.n	3418df1c <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
3418df18:	f7fe face 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
3418df1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418df20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
3418df24:	4618      	mov	r0, r3
3418df26:	f7fd ff15 	bl	3418bd54 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3418df2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418df32:	2100      	movs	r1, #0
3418df34:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
3418df38:	f003 0320 	and.w	r3, r3, #32
3418df3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
3418df40:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
3418df44:	4603      	mov	r3, r0
3418df46:	460a      	mov	r2, r1
3418df48:	4313      	orrs	r3, r2
3418df4a:	d067      	beq.n	3418e01c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
3418df4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418df50:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3418df54:	4b19      	ldr	r3, [pc, #100]	@ (3418dfbc <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
3418df56:	429a      	cmp	r2, r3
3418df58:	d132      	bne.n	3418dfc0 <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418df5a:	4b0c      	ldr	r3, [pc, #48]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418df5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418df60:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418df64:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418df68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418df6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418df6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418df72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418df74:	3b01      	subs	r3, #1
3418df76:	041b      	lsls	r3, r3, #16
3418df78:	4313      	orrs	r3, r2
3418df7a:	4a04      	ldr	r2, [pc, #16]	@ (3418df8c <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418df7c:	430b      	orrs	r3, r1
3418df7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418df82:	f7fe f9ff 	bl	3418c384 <LL_RCC_IC9_Enable>
3418df86:	e042      	b.n	3418e00e <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
3418df88:	07020420 	.word	0x07020420
3418df8c:	56028000 	.word	0x56028000
3418df90:	07030420 	.word	0x07030420
3418df94:	07010420 	.word	0x07010420
3418df98:	07020820 	.word	0x07020820
3418df9c:	07030820 	.word	0x07030820
3418dfa0:	07010820 	.word	0x07010820
3418dfa4:	07020c20 	.word	0x07020c20
3418dfa8:	07030c20 	.word	0x07030c20
3418dfac:	07010c20 	.word	0x07010c20
3418dfb0:	07021020 	.word	0x07021020
3418dfb4:	07031020 	.word	0x07031020
3418dfb8:	07011020 	.word	0x07011020
3418dfbc:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
3418dfc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dfc4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3418dfc8:	4bc2      	ldr	r3, [pc, #776]	@ (3418e2d4 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
3418dfca:	429a      	cmp	r2, r3
3418dfcc:	d116      	bne.n	3418dffc <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418dfce:	4bc2      	ldr	r3, [pc, #776]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418dfd0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418dfd4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418dfd8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418dfdc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dfe0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418dfe2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418dfe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418dfe8:	3b01      	subs	r3, #1
3418dfea:	041b      	lsls	r3, r3, #16
3418dfec:	4313      	orrs	r3, r2
3418dfee:	4aba      	ldr	r2, [pc, #744]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418dff0:	430b      	orrs	r3, r1
3418dff2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418dff6:	f7fe f9fd 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418dffa:	e008      	b.n	3418e00e <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
3418dffc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e000:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3418e004:	4bb5      	ldr	r3, [pc, #724]	@ (3418e2dc <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
3418e006:	429a      	cmp	r2, r3
3418e008:	d101      	bne.n	3418e00e <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
3418e00a:	f7fe fa55 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
3418e00e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e012:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418e016:	4618      	mov	r0, r3
3418e018:	f7fd fe9c 	bl	3418bd54 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
3418e01c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e020:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e024:	2100      	movs	r1, #0
3418e026:	67b9      	str	r1, [r7, #120]	@ 0x78
3418e028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418e02c:	67fb      	str	r3, [r7, #124]	@ 0x7c
3418e02e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
3418e032:	4603      	mov	r3, r0
3418e034:	460a      	mov	r2, r1
3418e036:	4313      	orrs	r3, r2
3418e038:	d04b      	beq.n	3418e0d2 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3418e03a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e03e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418e042:	4ba7      	ldr	r3, [pc, #668]	@ (3418e2e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
3418e044:	429a      	cmp	r2, r3
3418e046:	d116      	bne.n	3418e076 <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418e048:	4ba3      	ldr	r3, [pc, #652]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e04a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418e04e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e052:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e056:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e05a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418e05c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e062:	3b01      	subs	r3, #1
3418e064:	041b      	lsls	r3, r3, #16
3418e066:	4313      	orrs	r3, r2
3418e068:	4a9b      	ldr	r2, [pc, #620]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e06a:	430b      	orrs	r3, r1
3418e06c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418e070:	f7fe f97a 	bl	3418c368 <LL_RCC_IC8_Enable>
3418e074:	e026      	b.n	3418e0c4 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
3418e076:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e07a:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418e07e:	4b99      	ldr	r3, [pc, #612]	@ (3418e2e4 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
3418e080:	429a      	cmp	r2, r3
3418e082:	d116      	bne.n	3418e0b2 <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e084:	4b94      	ldr	r3, [pc, #592]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e086:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e08a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e08e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e092:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e096:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e098:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e09e:	3b01      	subs	r3, #1
3418e0a0:	041b      	lsls	r3, r3, #16
3418e0a2:	4313      	orrs	r3, r2
3418e0a4:	4a8c      	ldr	r2, [pc, #560]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e0a6:	430b      	orrs	r3, r1
3418e0a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e0ac:	f7fe f96a 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e0b0:	e008      	b.n	3418e0c4 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
3418e0b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e0b6:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418e0ba:	4b8b      	ldr	r3, [pc, #556]	@ (3418e2e8 <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
3418e0bc:	429a      	cmp	r2, r3
3418e0be:	d101      	bne.n	3418e0c4 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
3418e0c0:	f7fe f9fa 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
3418e0c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e0c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418e0cc:	4618      	mov	r0, r3
3418e0ce:	f7fd fe41 	bl	3418bd54 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
3418e0d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e0da:	2100      	movs	r1, #0
3418e0dc:	6739      	str	r1, [r7, #112]	@ 0x70
3418e0de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418e0e2:	677b      	str	r3, [r7, #116]	@ 0x74
3418e0e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
3418e0e8:	4603      	mov	r3, r0
3418e0ea:	460a      	mov	r2, r1
3418e0ec:	4313      	orrs	r3, r2
3418e0ee:	d04b      	beq.n	3418e188 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
3418e0f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e0f4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3418e0f8:	4b7c      	ldr	r3, [pc, #496]	@ (3418e2ec <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
3418e0fa:	429a      	cmp	r2, r3
3418e0fc:	d116      	bne.n	3418e12c <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e0fe:	4b76      	ldr	r3, [pc, #472]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e104:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e108:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e10c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e110:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e112:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e118:	3b01      	subs	r3, #1
3418e11a:	041b      	lsls	r3, r3, #16
3418e11c:	4313      	orrs	r3, r2
3418e11e:	4a6e      	ldr	r2, [pc, #440]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e120:	430b      	orrs	r3, r1
3418e122:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e126:	f7fe f92d 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e12a:	e026      	b.n	3418e17a <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
3418e12c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e130:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3418e134:	4b6e      	ldr	r3, [pc, #440]	@ (3418e2f0 <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
3418e136:	429a      	cmp	r2, r3
3418e138:	d116      	bne.n	3418e168 <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e13a:	4b67      	ldr	r3, [pc, #412]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e13c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e140:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e144:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e148:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e14c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418e14e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e154:	3b01      	subs	r3, #1
3418e156:	041b      	lsls	r3, r3, #16
3418e158:	4313      	orrs	r3, r2
3418e15a:	4a5f      	ldr	r2, [pc, #380]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e15c:	430b      	orrs	r3, r1
3418e15e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e162:	f7fe f947 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e166:	e008      	b.n	3418e17a <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
3418e168:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e16c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3418e170:	4b60      	ldr	r3, [pc, #384]	@ (3418e2f4 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
3418e172:	429a      	cmp	r2, r3
3418e174:	d101      	bne.n	3418e17a <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
3418e176:	f7fe f99f 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
3418e17a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e17e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3418e182:	4618      	mov	r0, r3
3418e184:	f7fd fdf1 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
3418e188:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e18c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e190:	2100      	movs	r1, #0
3418e192:	66b9      	str	r1, [r7, #104]	@ 0x68
3418e194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418e198:	66fb      	str	r3, [r7, #108]	@ 0x6c
3418e19a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
3418e19e:	4603      	mov	r3, r0
3418e1a0:	460a      	mov	r2, r1
3418e1a2:	4313      	orrs	r3, r2
3418e1a4:	d04b      	beq.n	3418e23e <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
3418e1a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e1aa:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418e1ae:	4b52      	ldr	r3, [pc, #328]	@ (3418e2f8 <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
3418e1b0:	429a      	cmp	r2, r3
3418e1b2:	d116      	bne.n	3418e1e2 <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e1b4:	4b48      	ldr	r3, [pc, #288]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e1b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e1ba:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e1be:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e1c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e1c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e1c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e1cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e1ce:	3b01      	subs	r3, #1
3418e1d0:	041b      	lsls	r3, r3, #16
3418e1d2:	4313      	orrs	r3, r2
3418e1d4:	4a40      	ldr	r2, [pc, #256]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e1d6:	430b      	orrs	r3, r1
3418e1d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e1dc:	f7fe f8d2 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e1e0:	e026      	b.n	3418e230 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
3418e1e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e1e6:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418e1ea:	4b44      	ldr	r3, [pc, #272]	@ (3418e2fc <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
3418e1ec:	429a      	cmp	r2, r3
3418e1ee:	d116      	bne.n	3418e21e <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e1f0:	4b39      	ldr	r3, [pc, #228]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e1f2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e1f6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e1fa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e1fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e202:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418e204:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e20a:	3b01      	subs	r3, #1
3418e20c:	041b      	lsls	r3, r3, #16
3418e20e:	4313      	orrs	r3, r2
3418e210:	4a31      	ldr	r2, [pc, #196]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e212:	430b      	orrs	r3, r1
3418e214:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e218:	f7fe f8ec 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e21c:	e008      	b.n	3418e230 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
3418e21e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e222:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418e226:	4b36      	ldr	r3, [pc, #216]	@ (3418e300 <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
3418e228:	429a      	cmp	r2, r3
3418e22a:	d101      	bne.n	3418e230 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
3418e22c:	f7fe f944 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
3418e230:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e234:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3418e238:	4618      	mov	r0, r3
3418e23a:	f7fd fd96 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
3418e23e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e242:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e246:	2100      	movs	r1, #0
3418e248:	6639      	str	r1, [r7, #96]	@ 0x60
3418e24a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418e24e:	667b      	str	r3, [r7, #100]	@ 0x64
3418e250:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
3418e254:	4603      	mov	r3, r0
3418e256:	460a      	mov	r2, r1
3418e258:	4313      	orrs	r3, r2
3418e25a:	d067      	beq.n	3418e32c <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
3418e25c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e260:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3418e264:	4b27      	ldr	r3, [pc, #156]	@ (3418e304 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
3418e266:	429a      	cmp	r2, r3
3418e268:	d116      	bne.n	3418e298 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e26a:	4b1b      	ldr	r3, [pc, #108]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e26c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e270:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e274:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e278:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e27c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e27e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e284:	3b01      	subs	r3, #1
3418e286:	041b      	lsls	r3, r3, #16
3418e288:	4313      	orrs	r3, r2
3418e28a:	4a13      	ldr	r2, [pc, #76]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e28c:	430b      	orrs	r3, r1
3418e28e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e292:	f7fe f877 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e296:	e042      	b.n	3418e31e <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
3418e298:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e29c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3418e2a0:	4b19      	ldr	r3, [pc, #100]	@ (3418e308 <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
3418e2a2:	429a      	cmp	r2, r3
3418e2a4:	d132      	bne.n	3418e30c <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e2a6:	4b0c      	ldr	r3, [pc, #48]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e2a8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e2ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e2b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e2b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e2b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418e2ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e2be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e2c0:	3b01      	subs	r3, #1
3418e2c2:	041b      	lsls	r3, r3, #16
3418e2c4:	4313      	orrs	r3, r2
3418e2c6:	4a04      	ldr	r2, [pc, #16]	@ (3418e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418e2c8:	430b      	orrs	r3, r1
3418e2ca:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e2ce:	f7fe f891 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e2d2:	e024      	b.n	3418e31e <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
3418e2d4:	07031420 	.word	0x07031420
3418e2d8:	56028000 	.word	0x56028000
3418e2dc:	07011420 	.word	0x07011420
3418e2e0:	07021820 	.word	0x07021820
3418e2e4:	07031820 	.word	0x07031820
3418e2e8:	07011820 	.word	0x07011820
3418e2ec:	07020030 	.word	0x07020030
3418e2f0:	07030030 	.word	0x07030030
3418e2f4:	07010030 	.word	0x07010030
3418e2f8:	07020430 	.word	0x07020430
3418e2fc:	07030430 	.word	0x07030430
3418e300:	07010430 	.word	0x07010430
3418e304:	07020830 	.word	0x07020830
3418e308:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
3418e30c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e310:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3418e314:	4bb3      	ldr	r3, [pc, #716]	@ (3418e5e4 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
3418e316:	429a      	cmp	r2, r3
3418e318:	d101      	bne.n	3418e31e <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
3418e31a:	f7fe f8cd 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
3418e31e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e322:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
3418e326:	4618      	mov	r0, r3
3418e328:	f7fd fd1f 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
3418e32c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e330:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e334:	2100      	movs	r1, #0
3418e336:	65b9      	str	r1, [r7, #88]	@ 0x58
3418e338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418e33c:	65fb      	str	r3, [r7, #92]	@ 0x5c
3418e33e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
3418e342:	4603      	mov	r3, r0
3418e344:	460a      	mov	r2, r1
3418e346:	4313      	orrs	r3, r2
3418e348:	d04b      	beq.n	3418e3e2 <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3418e34a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e34e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3418e352:	4ba5      	ldr	r3, [pc, #660]	@ (3418e5e8 <HAL_RCCEx_PeriphCLKConfig+0x2114>)
3418e354:	429a      	cmp	r2, r3
3418e356:	d116      	bne.n	3418e386 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e358:	4ba4      	ldr	r3, [pc, #656]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e35a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e35e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e362:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e366:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e36a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e36c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e372:	3b01      	subs	r3, #1
3418e374:	041b      	lsls	r3, r3, #16
3418e376:	4313      	orrs	r3, r2
3418e378:	4a9c      	ldr	r2, [pc, #624]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e37a:	430b      	orrs	r3, r1
3418e37c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e380:	f7fe f800 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e384:	e026      	b.n	3418e3d4 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
3418e386:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e38a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3418e38e:	4b98      	ldr	r3, [pc, #608]	@ (3418e5f0 <HAL_RCCEx_PeriphCLKConfig+0x211c>)
3418e390:	429a      	cmp	r2, r3
3418e392:	d116      	bne.n	3418e3c2 <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e394:	4b95      	ldr	r3, [pc, #596]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e396:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e39a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e39e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e3a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e3a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418e3a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e3ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e3ae:	3b01      	subs	r3, #1
3418e3b0:	041b      	lsls	r3, r3, #16
3418e3b2:	4313      	orrs	r3, r2
3418e3b4:	4a8d      	ldr	r2, [pc, #564]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e3b6:	430b      	orrs	r3, r1
3418e3b8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e3bc:	f7fe f81a 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e3c0:	e008      	b.n	3418e3d4 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
3418e3c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e3c6:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3418e3ca:	4b8a      	ldr	r3, [pc, #552]	@ (3418e5f4 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
3418e3cc:	429a      	cmp	r2, r3
3418e3ce:	d101      	bne.n	3418e3d4 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
3418e3d0:	f7fe f872 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
3418e3d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e3d8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418e3dc:	4618      	mov	r0, r3
3418e3de:	f7fd fcc4 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
3418e3e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e3ea:	2100      	movs	r1, #0
3418e3ec:	6539      	str	r1, [r7, #80]	@ 0x50
3418e3ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418e3f2:	657b      	str	r3, [r7, #84]	@ 0x54
3418e3f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
3418e3f8:	4603      	mov	r3, r0
3418e3fa:	460a      	mov	r2, r1
3418e3fc:	4313      	orrs	r3, r2
3418e3fe:	d04b      	beq.n	3418e498 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
3418e400:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e404:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3418e408:	4b7b      	ldr	r3, [pc, #492]	@ (3418e5f8 <HAL_RCCEx_PeriphCLKConfig+0x2124>)
3418e40a:	429a      	cmp	r2, r3
3418e40c:	d116      	bne.n	3418e43c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e40e:	4b77      	ldr	r3, [pc, #476]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e410:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e414:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e418:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e41c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e420:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e422:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e428:	3b01      	subs	r3, #1
3418e42a:	041b      	lsls	r3, r3, #16
3418e42c:	4313      	orrs	r3, r2
3418e42e:	4a6f      	ldr	r2, [pc, #444]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e430:	430b      	orrs	r3, r1
3418e432:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e436:	f7fd ffa5 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e43a:	e026      	b.n	3418e48a <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
3418e43c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e440:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3418e444:	4b6d      	ldr	r3, [pc, #436]	@ (3418e5fc <HAL_RCCEx_PeriphCLKConfig+0x2128>)
3418e446:	429a      	cmp	r2, r3
3418e448:	d116      	bne.n	3418e478 <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e44a:	4b68      	ldr	r3, [pc, #416]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e44c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e450:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e454:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e458:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e45c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418e45e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e464:	3b01      	subs	r3, #1
3418e466:	041b      	lsls	r3, r3, #16
3418e468:	4313      	orrs	r3, r2
3418e46a:	4a60      	ldr	r2, [pc, #384]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e46c:	430b      	orrs	r3, r1
3418e46e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e472:	f7fd ffbf 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e476:	e008      	b.n	3418e48a <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
3418e478:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e47c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3418e480:	4b5f      	ldr	r3, [pc, #380]	@ (3418e600 <HAL_RCCEx_PeriphCLKConfig+0x212c>)
3418e482:	429a      	cmp	r2, r3
3418e484:	d101      	bne.n	3418e48a <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
3418e486:	f7fe f817 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
3418e48a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e48e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
3418e492:	4618      	mov	r0, r3
3418e494:	f7fd fc69 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
3418e498:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e4a0:	2100      	movs	r1, #0
3418e4a2:	64b9      	str	r1, [r7, #72]	@ 0x48
3418e4a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418e4a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418e4aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
3418e4ae:	4603      	mov	r3, r0
3418e4b0:	460a      	mov	r2, r1
3418e4b2:	4313      	orrs	r3, r2
3418e4b4:	d04b      	beq.n	3418e54e <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
3418e4b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e4ba:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418e4be:	4b51      	ldr	r3, [pc, #324]	@ (3418e604 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
3418e4c0:	429a      	cmp	r2, r3
3418e4c2:	d116      	bne.n	3418e4f2 <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e4c4:	4b49      	ldr	r3, [pc, #292]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e4c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e4ca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e4ce:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e4d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e4d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e4d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e4dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e4de:	3b01      	subs	r3, #1
3418e4e0:	041b      	lsls	r3, r3, #16
3418e4e2:	4313      	orrs	r3, r2
3418e4e4:	4a41      	ldr	r2, [pc, #260]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e4e6:	430b      	orrs	r3, r1
3418e4e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e4ec:	f7fd ff4a 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e4f0:	e026      	b.n	3418e540 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
3418e4f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e4f6:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418e4fa:	4b43      	ldr	r3, [pc, #268]	@ (3418e608 <HAL_RCCEx_PeriphCLKConfig+0x2134>)
3418e4fc:	429a      	cmp	r2, r3
3418e4fe:	d116      	bne.n	3418e52e <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e500:	4b3a      	ldr	r3, [pc, #232]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e502:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e506:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e50a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e50e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e512:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418e514:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e51a:	3b01      	subs	r3, #1
3418e51c:	041b      	lsls	r3, r3, #16
3418e51e:	4313      	orrs	r3, r2
3418e520:	4a32      	ldr	r2, [pc, #200]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e522:	430b      	orrs	r3, r1
3418e524:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e528:	f7fd ff64 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e52c:	e008      	b.n	3418e540 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3418e52e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e532:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418e536:	4b35      	ldr	r3, [pc, #212]	@ (3418e60c <HAL_RCCEx_PeriphCLKConfig+0x2138>)
3418e538:	429a      	cmp	r2, r3
3418e53a:	d101      	bne.n	3418e540 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
3418e53c:	f7fd ffbc 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
3418e540:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e544:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3418e548:	4618      	mov	r0, r3
3418e54a:	f7fd fc0e 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
3418e54e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e552:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e556:	2100      	movs	r1, #0
3418e558:	6439      	str	r1, [r7, #64]	@ 0x40
3418e55a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418e55e:	647b      	str	r3, [r7, #68]	@ 0x44
3418e560:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
3418e564:	4603      	mov	r3, r0
3418e566:	460a      	mov	r2, r1
3418e568:	4313      	orrs	r3, r2
3418e56a:	d065      	beq.n	3418e638 <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
3418e56c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e570:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3418e574:	4b26      	ldr	r3, [pc, #152]	@ (3418e610 <HAL_RCCEx_PeriphCLKConfig+0x213c>)
3418e576:	429a      	cmp	r2, r3
3418e578:	d116      	bne.n	3418e5a8 <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e57a:	4b1c      	ldr	r3, [pc, #112]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e57c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e580:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e584:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e588:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e58c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e58e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e594:	3b01      	subs	r3, #1
3418e596:	041b      	lsls	r3, r3, #16
3418e598:	4313      	orrs	r3, r2
3418e59a:	4a14      	ldr	r2, [pc, #80]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e59c:	430b      	orrs	r3, r1
3418e59e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e5a2:	f7fd feef 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e5a6:	e040      	b.n	3418e62a <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
3418e5a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e5ac:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3418e5b0:	4b18      	ldr	r3, [pc, #96]	@ (3418e614 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
3418e5b2:	429a      	cmp	r2, r3
3418e5b4:	d130      	bne.n	3418e618 <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e5b6:	4b0d      	ldr	r3, [pc, #52]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e5b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e5bc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e5c0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e5c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e5c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418e5ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e5ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e5d0:	3b01      	subs	r3, #1
3418e5d2:	041b      	lsls	r3, r3, #16
3418e5d4:	4313      	orrs	r3, r2
3418e5d6:	4a05      	ldr	r2, [pc, #20]	@ (3418e5ec <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418e5d8:	430b      	orrs	r3, r1
3418e5da:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e5de:	f7fd ff09 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e5e2:	e022      	b.n	3418e62a <HAL_RCCEx_PeriphCLKConfig+0x2156>
3418e5e4:	07010830 	.word	0x07010830
3418e5e8:	07020c30 	.word	0x07020c30
3418e5ec:	56028000 	.word	0x56028000
3418e5f0:	07030c30 	.word	0x07030c30
3418e5f4:	07010c30 	.word	0x07010c30
3418e5f8:	07021030 	.word	0x07021030
3418e5fc:	07031030 	.word	0x07031030
3418e600:	07011030 	.word	0x07011030
3418e604:	07021430 	.word	0x07021430
3418e608:	07031430 	.word	0x07031430
3418e60c:	07011430 	.word	0x07011430
3418e610:	07021830 	.word	0x07021830
3418e614:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3418e618:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e61c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3418e620:	4bc8      	ldr	r3, [pc, #800]	@ (3418e944 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418e622:	429a      	cmp	r2, r3
3418e624:	d101      	bne.n	3418e62a <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
3418e626:	f7fd ff47 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
3418e62a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e62e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
3418e632:	4618      	mov	r0, r3
3418e634:	f7fd fb99 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
3418e638:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e63c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e640:	2100      	movs	r1, #0
3418e642:	63b9      	str	r1, [r7, #56]	@ 0x38
3418e644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418e648:	63fb      	str	r3, [r7, #60]	@ 0x3c
3418e64a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
3418e64e:	4603      	mov	r3, r0
3418e650:	460a      	mov	r2, r1
3418e652:	4313      	orrs	r3, r2
3418e654:	d04b      	beq.n	3418e6ee <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
3418e656:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e65a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418e65e:	4bba      	ldr	r3, [pc, #744]	@ (3418e948 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3418e660:	429a      	cmp	r2, r3
3418e662:	d116      	bne.n	3418e692 <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e664:	4bb9      	ldr	r3, [pc, #740]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e666:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e66a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e66e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e672:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e676:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e678:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e67c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e67e:	3b01      	subs	r3, #1
3418e680:	041b      	lsls	r3, r3, #16
3418e682:	4313      	orrs	r3, r2
3418e684:	4ab1      	ldr	r2, [pc, #708]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e686:	430b      	orrs	r3, r1
3418e688:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e68c:	f7fd fe7a 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e690:	e026      	b.n	3418e6e0 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3418e692:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e696:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418e69a:	4bad      	ldr	r3, [pc, #692]	@ (3418e950 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
3418e69c:	429a      	cmp	r2, r3
3418e69e:	d116      	bne.n	3418e6ce <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e6a0:	4baa      	ldr	r3, [pc, #680]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e6a2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e6a6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e6aa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e6ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e6b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418e6b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e6b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e6ba:	3b01      	subs	r3, #1
3418e6bc:	041b      	lsls	r3, r3, #16
3418e6be:	4313      	orrs	r3, r2
3418e6c0:	4aa2      	ldr	r2, [pc, #648]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e6c2:	430b      	orrs	r3, r1
3418e6c4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e6c8:	f7fd fe94 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e6cc:	e008      	b.n	3418e6e0 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3418e6ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e6d2:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418e6d6:	4b9f      	ldr	r3, [pc, #636]	@ (3418e954 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
3418e6d8:	429a      	cmp	r2, r3
3418e6da:	d101      	bne.n	3418e6e0 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
3418e6dc:	f7fd feec 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
3418e6e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e6e4:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
3418e6e8:	4618      	mov	r0, r3
3418e6ea:	f7fd fb3e 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
3418e6ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e6f6:	2100      	movs	r1, #0
3418e6f8:	6339      	str	r1, [r7, #48]	@ 0x30
3418e6fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418e6fe:	637b      	str	r3, [r7, #52]	@ 0x34
3418e700:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418e704:	4603      	mov	r3, r0
3418e706:	460a      	mov	r2, r1
3418e708:	4313      	orrs	r3, r2
3418e70a:	d04b      	beq.n	3418e7a4 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
3418e70c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e710:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418e714:	4a90      	ldr	r2, [pc, #576]	@ (3418e958 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
3418e716:	4293      	cmp	r3, r2
3418e718:	d116      	bne.n	3418e748 <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e71a:	4b8c      	ldr	r3, [pc, #560]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e71c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e720:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e724:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e728:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e72c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e72e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e734:	3b01      	subs	r3, #1
3418e736:	041b      	lsls	r3, r3, #16
3418e738:	4313      	orrs	r3, r2
3418e73a:	4a84      	ldr	r2, [pc, #528]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e73c:	430b      	orrs	r3, r1
3418e73e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e742:	f7fd fe1f 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e746:	e026      	b.n	3418e796 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3418e748:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e74c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418e750:	4a82      	ldr	r2, [pc, #520]	@ (3418e95c <HAL_RCCEx_PeriphCLKConfig+0x2488>)
3418e752:	4293      	cmp	r3, r2
3418e754:	d116      	bne.n	3418e784 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e756:	4b7d      	ldr	r3, [pc, #500]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e758:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e75c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418e760:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418e764:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e768:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418e76a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e76e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e770:	3b01      	subs	r3, #1
3418e772:	041b      	lsls	r3, r3, #16
3418e774:	4313      	orrs	r3, r2
3418e776:	4a75      	ldr	r2, [pc, #468]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e778:	430b      	orrs	r3, r1
3418e77a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e77e:	f7fd fe39 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e782:	e008      	b.n	3418e796 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
3418e784:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e788:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418e78c:	4a74      	ldr	r2, [pc, #464]	@ (3418e960 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
3418e78e:	4293      	cmp	r3, r2
3418e790:	d101      	bne.n	3418e796 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
3418e792:	f7fd fe91 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3418e796:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e79a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418e79e:	4618      	mov	r0, r3
3418e7a0:	f7fd fae3 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3418e7a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e7ac:	2100      	movs	r1, #0
3418e7ae:	62b9      	str	r1, [r7, #40]	@ 0x28
3418e7b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418e7b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418e7b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3418e7ba:	4603      	mov	r3, r0
3418e7bc:	460a      	mov	r2, r1
3418e7be:	4313      	orrs	r3, r2
3418e7c0:	d04b      	beq.n	3418e85a <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
3418e7c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e7c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418e7ca:	4a66      	ldr	r2, [pc, #408]	@ (3418e964 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
3418e7cc:	4293      	cmp	r3, r2
3418e7ce:	d116      	bne.n	3418e7fe <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418e7d0:	4b5e      	ldr	r3, [pc, #376]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e7d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418e7d6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418e7da:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418e7de:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418e7e2:	6c91      	ldr	r1, [r2, #72]	@ 0x48
3418e7e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418e7e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3418e7ea:	3a01      	subs	r2, #1
3418e7ec:	0412      	lsls	r2, r2, #16
3418e7ee:	430a      	orrs	r2, r1
3418e7f0:	4956      	ldr	r1, [pc, #344]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e7f2:	4313      	orrs	r3, r2
3418e7f4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418e7f8:	f7fd fdc4 	bl	3418c384 <LL_RCC_IC9_Enable>
3418e7fc:	e026      	b.n	3418e84c <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3418e7fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e802:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418e806:	4a58      	ldr	r2, [pc, #352]	@ (3418e968 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
3418e808:	4293      	cmp	r3, r2
3418e80a:	d116      	bne.n	3418e83a <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418e80c:	4b4f      	ldr	r3, [pc, #316]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e80e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418e812:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418e816:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418e81a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418e81e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
3418e820:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418e824:	6f52      	ldr	r2, [r2, #116]	@ 0x74
3418e826:	3a01      	subs	r2, #1
3418e828:	0412      	lsls	r2, r2, #16
3418e82a:	430a      	orrs	r2, r1
3418e82c:	4947      	ldr	r1, [pc, #284]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e82e:	4313      	orrs	r3, r2
3418e830:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418e834:	f7fd fdde 	bl	3418c3f4 <LL_RCC_IC14_Enable>
3418e838:	e008      	b.n	3418e84c <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
3418e83a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e83e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418e842:	4a4a      	ldr	r2, [pc, #296]	@ (3418e96c <HAL_RCCEx_PeriphCLKConfig+0x2498>)
3418e844:	4293      	cmp	r3, r2
3418e846:	d101      	bne.n	3418e84c <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
3418e848:	f7fd fe36 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
3418e84c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e850:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418e854:	4618      	mov	r0, r3
3418e856:	f7fd fa88 	bl	3418bd6a <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3418e85a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e85e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e862:	2100      	movs	r1, #0
3418e864:	6239      	str	r1, [r7, #32]
3418e866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418e86a:	627b      	str	r3, [r7, #36]	@ 0x24
3418e86c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
3418e870:	4603      	mov	r3, r0
3418e872:	460a      	mov	r2, r1
3418e874:	4313      	orrs	r3, r2
3418e876:	d014      	beq.n	3418e8a2 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3418e878:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e87c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418e880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418e884:	4618      	mov	r0, r3
3418e886:	f7fd fa18 	bl	3418bcba <LL_RCC_SetOTGPHYCKREFClockSource>
3418e88a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e88e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418e892:	0fdb      	lsrs	r3, r3, #31
3418e894:	2b01      	cmp	r3, #1
3418e896:	d102      	bne.n	3418e89e <HAL_RCCEx_PeriphCLKConfig+0x23ca>
3418e898:	f7fd f83c 	bl	3418b914 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418e89c:	e001      	b.n	3418e8a2 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
3418e89e:	f7fd f829 	bl	3418b8f4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3418e8a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e8aa:	2100      	movs	r1, #0
3418e8ac:	61b9      	str	r1, [r7, #24]
3418e8ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418e8b2:	61fb      	str	r3, [r7, #28]
3418e8b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
3418e8b8:	4603      	mov	r3, r0
3418e8ba:	460a      	mov	r2, r1
3418e8bc:	4313      	orrs	r3, r2
3418e8be:	d014      	beq.n	3418e8ea <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3418e8c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e8c4:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3418e8c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418e8cc:	4618      	mov	r0, r3
3418e8ce:	f7fd f9f4 	bl	3418bcba <LL_RCC_SetOTGPHYCKREFClockSource>
3418e8d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e8d6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3418e8da:	0fdb      	lsrs	r3, r3, #31
3418e8dc:	2b01      	cmp	r3, #1
3418e8de:	d102      	bne.n	3418e8e6 <HAL_RCCEx_PeriphCLKConfig+0x2412>
3418e8e0:	f7fd f818 	bl	3418b914 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418e8e4:	e001      	b.n	3418e8ea <HAL_RCCEx_PeriphCLKConfig+0x2416>
3418e8e6:	f7fd f805 	bl	3418b8f4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
3418e8ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e8f2:	2100      	movs	r1, #0
3418e8f4:	6139      	str	r1, [r7, #16]
3418e8f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418e8fa:	617b      	str	r3, [r7, #20]
3418e8fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
3418e900:	4603      	mov	r3, r0
3418e902:	460a      	mov	r2, r1
3418e904:	4313      	orrs	r3, r2
3418e906:	d053      	beq.n	3418e9b0 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
3418e908:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e90c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418e910:	4a17      	ldr	r2, [pc, #92]	@ (3418e970 <HAL_RCCEx_PeriphCLKConfig+0x249c>)
3418e912:	4293      	cmp	r3, r2
3418e914:	d12e      	bne.n	3418e974 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418e916:	4b0d      	ldr	r3, [pc, #52]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e918:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418e91c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418e920:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418e924:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418e928:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3418e92a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418e92e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3418e930:	3a01      	subs	r2, #1
3418e932:	0412      	lsls	r2, r2, #16
3418e934:	430a      	orrs	r2, r1
3418e936:	4905      	ldr	r1, [pc, #20]	@ (3418e94c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418e938:	4313      	orrs	r3, r2
3418e93a:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418e93e:	f7fd fd67 	bl	3418c410 <LL_RCC_IC15_Enable>
3418e942:	e020      	b.n	3418e986 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
3418e944:	07011830 	.word	0x07011830
3418e948:	07021c30 	.word	0x07021c30
3418e94c:	56028000 	.word	0x56028000
3418e950:	07031c30 	.word	0x07031c30
3418e954:	07011c30 	.word	0x07011c30
3418e958:	07020034 	.word	0x07020034
3418e95c:	07030034 	.word	0x07030034
3418e960:	07010034 	.word	0x07010034
3418e964:	07020434 	.word	0x07020434
3418e968:	07030434 	.word	0x07030434
3418e96c:	07010434 	.word	0x07010434
3418e970:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
3418e974:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e978:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418e97c:	4a43      	ldr	r2, [pc, #268]	@ (3418ea8c <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
3418e97e:	4293      	cmp	r3, r2
3418e980:	d101      	bne.n	3418e986 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
3418e982:	f7fd fd99 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3418e986:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e98a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418e98e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418e992:	4618      	mov	r0, r3
3418e994:	f7fd f986 	bl	3418bca4 <LL_RCC_SetOTGPHYClockSource>
3418e998:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e99c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418e9a0:	0fdb      	lsrs	r3, r3, #31
3418e9a2:	2b01      	cmp	r3, #1
3418e9a4:	d102      	bne.n	3418e9ac <HAL_RCCEx_PeriphCLKConfig+0x24d8>
3418e9a6:	f7fc ffb5 	bl	3418b914 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418e9aa:	e001      	b.n	3418e9b0 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
3418e9ac:	f7fc ffa2 	bl	3418b8f4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
3418e9b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e9b8:	2100      	movs	r1, #0
3418e9ba:	60b9      	str	r1, [r7, #8]
3418e9bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418e9c0:	60fb      	str	r3, [r7, #12]
3418e9c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3418e9c6:	4603      	mov	r3, r0
3418e9c8:	460a      	mov	r2, r1
3418e9ca:	4313      	orrs	r3, r2
3418e9cc:	d03b      	beq.n	3418ea46 <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
3418e9ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418e9d2:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418e9d6:	4a2e      	ldr	r2, [pc, #184]	@ (3418ea90 <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
3418e9d8:	4293      	cmp	r3, r2
3418e9da:	d116      	bne.n	3418ea0a <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418e9dc:	4b2d      	ldr	r3, [pc, #180]	@ (3418ea94 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
3418e9de:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418e9e2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418e9e6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418e9ea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418e9ee:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3418e9f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418e9f4:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3418e9f6:	3a01      	subs	r2, #1
3418e9f8:	0412      	lsls	r2, r2, #16
3418e9fa:	430a      	orrs	r2, r1
3418e9fc:	4925      	ldr	r1, [pc, #148]	@ (3418ea94 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
3418e9fe:	4313      	orrs	r3, r2
3418ea00:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418ea04:	f7fd fd04 	bl	3418c410 <LL_RCC_IC15_Enable>
3418ea08:	e008      	b.n	3418ea1c <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
3418ea0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ea0e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418ea12:	4a21      	ldr	r2, [pc, #132]	@ (3418ea98 <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
3418ea14:	4293      	cmp	r3, r2
3418ea16:	d101      	bne.n	3418ea1c <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
3418ea18:	f7fd fd4e 	bl	3418c4b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3418ea1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ea20:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418ea24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418ea28:	4618      	mov	r0, r3
3418ea2a:	f7fd f93b 	bl	3418bca4 <LL_RCC_SetOTGPHYClockSource>
3418ea2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ea32:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418ea36:	0fdb      	lsrs	r3, r3, #31
3418ea38:	2b01      	cmp	r3, #1
3418ea3a:	d102      	bne.n	3418ea42 <HAL_RCCEx_PeriphCLKConfig+0x256e>
3418ea3c:	f7fc ff6a 	bl	3418b914 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418ea40:	e001      	b.n	3418ea46 <HAL_RCCEx_PeriphCLKConfig+0x2572>
3418ea42:	f7fc ff57 	bl	3418b8f4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
3418ea46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ea4e:	2100      	movs	r1, #0
3418ea50:	6039      	str	r1, [r7, #0]
3418ea52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418ea56:	607b      	str	r3, [r7, #4]
3418ea58:	e9d7 0100 	ldrd	r0, r1, [r7]
3418ea5c:	4603      	mov	r3, r0
3418ea5e:	460a      	mov	r2, r1
3418ea60:	4313      	orrs	r3, r2
3418ea62:	d006      	beq.n	3418ea72 <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
3418ea64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ea68:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3418ea6c:	4618      	mov	r0, r3
3418ea6e:	f7fd f9cd 	bl	3418be0c <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
3418ea72:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
3418ea76:	2b00      	cmp	r3, #0
3418ea78:	d101      	bne.n	3418ea7e <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
3418ea7a:	2300      	movs	r3, #0
3418ea7c:	e000      	b.n	3418ea80 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
3418ea7e:	2301      	movs	r3, #1
}
3418ea80:	4618      	mov	r0, r3
3418ea82:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
3418ea86:	46bd      	mov	sp, r7
3418ea88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418ea8c:	03010c14 	.word	0x03010c14
3418ea90:	03021414 	.word	0x03021414
3418ea94:	56028000 	.word	0x56028000
3418ea98:	03011414 	.word	0x03011414

3418ea9c <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
3418ea9c:	b5f0      	push	{r4, r5, r6, r7, lr}
3418ea9e:	b087      	sub	sp, #28
3418eaa0:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418eaa2:	2300      	movs	r3, #0
3418eaa4:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
3418eaa6:	f7fd f9d5 	bl	3418be54 <LL_RCC_PLL1_IsReady>
3418eaaa:	4603      	mov	r3, r0
3418eaac:	2b00      	cmp	r3, #0
3418eaae:	d02a      	beq.n	3418eb06 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
3418eab0:	f7fd fa38 	bl	3418bf24 <LL_RCC_PLL1P_IsEnabled>
3418eab4:	4603      	mov	r3, r0
3418eab6:	2b00      	cmp	r3, #0
3418eab8:	d031      	beq.n	3418eb1e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418eaba:	f7fd f9bd 	bl	3418be38 <LL_RCC_PLL1_GetSource>
3418eabe:	4603      	mov	r3, r0
3418eac0:	4618      	mov	r0, r3
3418eac2:	f000 f903 	bl	3418eccc <RCCEx_GetPLLSourceFreq>
3418eac6:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418eac8:	68bb      	ldr	r3, [r7, #8]
3418eaca:	2b00      	cmp	r3, #0
3418eacc:	d027      	beq.n	3418eb1e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
3418eace:	f7fd f9f9 	bl	3418bec4 <LL_RCC_PLL1_GetM>
3418ead2:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418ead4:	687b      	ldr	r3, [r7, #4]
3418ead6:	2b00      	cmp	r3, #0
3418ead8:	d021      	beq.n	3418eb1e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
3418eada:	f7fd f9e3 	bl	3418bea4 <LL_RCC_PLL1_GetN>
3418eade:	4605      	mov	r5, r0
3418eae0:	f7fd fa34 	bl	3418bf4c <LL_RCC_PLL1_GetFRACN>
3418eae4:	4606      	mov	r6, r0
3418eae6:	f7fd f9fd 	bl	3418bee4 <LL_RCC_PLL1_GetP1>
3418eaea:	4604      	mov	r4, r0
3418eaec:	f7fd fa0a 	bl	3418bf04 <LL_RCC_PLL1_GetP2>
3418eaf0:	4603      	mov	r3, r0
3418eaf2:	9301      	str	r3, [sp, #4]
3418eaf4:	9400      	str	r4, [sp, #0]
3418eaf6:	4633      	mov	r3, r6
3418eaf8:	462a      	mov	r2, r5
3418eafa:	6879      	ldr	r1, [r7, #4]
3418eafc:	68b8      	ldr	r0, [r7, #8]
3418eafe:	f000 f943 	bl	3418ed88 <RCCEx_CalcPLLFreq>
3418eb02:	60f8      	str	r0, [r7, #12]
3418eb04:	e00b      	b.n	3418eb1e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
3418eb06:	f7fd f9b9 	bl	3418be7c <LL_RCC_PLL1_IsEnabledBypass>
3418eb0a:	4603      	mov	r3, r0
3418eb0c:	2b00      	cmp	r3, #0
3418eb0e:	d006      	beq.n	3418eb1e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418eb10:	f7fd f992 	bl	3418be38 <LL_RCC_PLL1_GetSource>
3418eb14:	4603      	mov	r3, r0
3418eb16:	4618      	mov	r0, r3
3418eb18:	f000 f8d8 	bl	3418eccc <RCCEx_GetPLLSourceFreq>
3418eb1c:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418eb1e:	68fb      	ldr	r3, [r7, #12]
}
3418eb20:	4618      	mov	r0, r3
3418eb22:	3714      	adds	r7, #20
3418eb24:	46bd      	mov	sp, r7
3418eb26:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418eb28 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
3418eb28:	b5f0      	push	{r4, r5, r6, r7, lr}
3418eb2a:	b087      	sub	sp, #28
3418eb2c:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418eb2e:	2300      	movs	r3, #0
3418eb30:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
3418eb32:	f7fd fa27 	bl	3418bf84 <LL_RCC_PLL2_IsReady>
3418eb36:	4603      	mov	r3, r0
3418eb38:	2b00      	cmp	r3, #0
3418eb3a:	d02a      	beq.n	3418eb92 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
3418eb3c:	f7fd fa8a 	bl	3418c054 <LL_RCC_PLL2P_IsEnabled>
3418eb40:	4603      	mov	r3, r0
3418eb42:	2b00      	cmp	r3, #0
3418eb44:	d031      	beq.n	3418ebaa <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3418eb46:	f7fd fa0f 	bl	3418bf68 <LL_RCC_PLL2_GetSource>
3418eb4a:	4603      	mov	r3, r0
3418eb4c:	4618      	mov	r0, r3
3418eb4e:	f000 f8bd 	bl	3418eccc <RCCEx_GetPLLSourceFreq>
3418eb52:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418eb54:	68bb      	ldr	r3, [r7, #8]
3418eb56:	2b00      	cmp	r3, #0
3418eb58:	d027      	beq.n	3418ebaa <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
3418eb5a:	f7fd fa4b 	bl	3418bff4 <LL_RCC_PLL2_GetM>
3418eb5e:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418eb60:	687b      	ldr	r3, [r7, #4]
3418eb62:	2b00      	cmp	r3, #0
3418eb64:	d021      	beq.n	3418ebaa <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
3418eb66:	f7fd fa35 	bl	3418bfd4 <LL_RCC_PLL2_GetN>
3418eb6a:	4605      	mov	r5, r0
3418eb6c:	f7fd fa86 	bl	3418c07c <LL_RCC_PLL2_GetFRACN>
3418eb70:	4606      	mov	r6, r0
3418eb72:	f7fd fa4f 	bl	3418c014 <LL_RCC_PLL2_GetP1>
3418eb76:	4604      	mov	r4, r0
3418eb78:	f7fd fa5c 	bl	3418c034 <LL_RCC_PLL2_GetP2>
3418eb7c:	4603      	mov	r3, r0
3418eb7e:	9301      	str	r3, [sp, #4]
3418eb80:	9400      	str	r4, [sp, #0]
3418eb82:	4633      	mov	r3, r6
3418eb84:	462a      	mov	r2, r5
3418eb86:	6879      	ldr	r1, [r7, #4]
3418eb88:	68b8      	ldr	r0, [r7, #8]
3418eb8a:	f000 f8fd 	bl	3418ed88 <RCCEx_CalcPLLFreq>
3418eb8e:	60f8      	str	r0, [r7, #12]
3418eb90:	e00b      	b.n	3418ebaa <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
3418eb92:	f7fd fa0b 	bl	3418bfac <LL_RCC_PLL2_IsEnabledBypass>
3418eb96:	4603      	mov	r3, r0
3418eb98:	2b00      	cmp	r3, #0
3418eb9a:	d006      	beq.n	3418ebaa <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3418eb9c:	f7fd f9e4 	bl	3418bf68 <LL_RCC_PLL2_GetSource>
3418eba0:	4603      	mov	r3, r0
3418eba2:	4618      	mov	r0, r3
3418eba4:	f000 f892 	bl	3418eccc <RCCEx_GetPLLSourceFreq>
3418eba8:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418ebaa:	68fb      	ldr	r3, [r7, #12]
}
3418ebac:	4618      	mov	r0, r3
3418ebae:	3714      	adds	r7, #20
3418ebb0:	46bd      	mov	sp, r7
3418ebb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418ebb4 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
3418ebb4:	b5f0      	push	{r4, r5, r6, r7, lr}
3418ebb6:	b087      	sub	sp, #28
3418ebb8:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418ebba:	2300      	movs	r3, #0
3418ebbc:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
3418ebbe:	f7fd fa79 	bl	3418c0b4 <LL_RCC_PLL3_IsReady>
3418ebc2:	4603      	mov	r3, r0
3418ebc4:	2b00      	cmp	r3, #0
3418ebc6:	d02a      	beq.n	3418ec1e <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
3418ebc8:	f7fd fadc 	bl	3418c184 <LL_RCC_PLL3P_IsEnabled>
3418ebcc:	4603      	mov	r3, r0
3418ebce:	2b00      	cmp	r3, #0
3418ebd0:	d031      	beq.n	3418ec36 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418ebd2:	f7fd fa61 	bl	3418c098 <LL_RCC_PLL3_GetSource>
3418ebd6:	4603      	mov	r3, r0
3418ebd8:	4618      	mov	r0, r3
3418ebda:	f000 f877 	bl	3418eccc <RCCEx_GetPLLSourceFreq>
3418ebde:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418ebe0:	68bb      	ldr	r3, [r7, #8]
3418ebe2:	2b00      	cmp	r3, #0
3418ebe4:	d027      	beq.n	3418ec36 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
3418ebe6:	f7fd fa9d 	bl	3418c124 <LL_RCC_PLL3_GetM>
3418ebea:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418ebec:	687b      	ldr	r3, [r7, #4]
3418ebee:	2b00      	cmp	r3, #0
3418ebf0:	d021      	beq.n	3418ec36 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
3418ebf2:	f7fd fa87 	bl	3418c104 <LL_RCC_PLL3_GetN>
3418ebf6:	4605      	mov	r5, r0
3418ebf8:	f7fd fad8 	bl	3418c1ac <LL_RCC_PLL3_GetFRACN>
3418ebfc:	4606      	mov	r6, r0
3418ebfe:	f7fd faa1 	bl	3418c144 <LL_RCC_PLL3_GetP1>
3418ec02:	4604      	mov	r4, r0
3418ec04:	f7fd faae 	bl	3418c164 <LL_RCC_PLL3_GetP2>
3418ec08:	4603      	mov	r3, r0
3418ec0a:	9301      	str	r3, [sp, #4]
3418ec0c:	9400      	str	r4, [sp, #0]
3418ec0e:	4633      	mov	r3, r6
3418ec10:	462a      	mov	r2, r5
3418ec12:	6879      	ldr	r1, [r7, #4]
3418ec14:	68b8      	ldr	r0, [r7, #8]
3418ec16:	f000 f8b7 	bl	3418ed88 <RCCEx_CalcPLLFreq>
3418ec1a:	60f8      	str	r0, [r7, #12]
3418ec1c:	e00b      	b.n	3418ec36 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
3418ec1e:	f7fd fa5d 	bl	3418c0dc <LL_RCC_PLL3_IsEnabledBypass>
3418ec22:	4603      	mov	r3, r0
3418ec24:	2b00      	cmp	r3, #0
3418ec26:	d006      	beq.n	3418ec36 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418ec28:	f7fd fa36 	bl	3418c098 <LL_RCC_PLL3_GetSource>
3418ec2c:	4603      	mov	r3, r0
3418ec2e:	4618      	mov	r0, r3
3418ec30:	f000 f84c 	bl	3418eccc <RCCEx_GetPLLSourceFreq>
3418ec34:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418ec36:	68fb      	ldr	r3, [r7, #12]
}
3418ec38:	4618      	mov	r0, r3
3418ec3a:	3714      	adds	r7, #20
3418ec3c:	46bd      	mov	sp, r7
3418ec3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418ec40 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
3418ec40:	b5f0      	push	{r4, r5, r6, r7, lr}
3418ec42:	b087      	sub	sp, #28
3418ec44:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418ec46:	2300      	movs	r3, #0
3418ec48:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
3418ec4a:	f7fd facb 	bl	3418c1e4 <LL_RCC_PLL4_IsReady>
3418ec4e:	4603      	mov	r3, r0
3418ec50:	2b00      	cmp	r3, #0
3418ec52:	d02a      	beq.n	3418ecaa <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
3418ec54:	f7fd fb2e 	bl	3418c2b4 <LL_RCC_PLL4P_IsEnabled>
3418ec58:	4603      	mov	r3, r0
3418ec5a:	2b00      	cmp	r3, #0
3418ec5c:	d031      	beq.n	3418ecc2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3418ec5e:	f7fd fab3 	bl	3418c1c8 <LL_RCC_PLL4_GetSource>
3418ec62:	4603      	mov	r3, r0
3418ec64:	4618      	mov	r0, r3
3418ec66:	f000 f831 	bl	3418eccc <RCCEx_GetPLLSourceFreq>
3418ec6a:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418ec6c:	68bb      	ldr	r3, [r7, #8]
3418ec6e:	2b00      	cmp	r3, #0
3418ec70:	d027      	beq.n	3418ecc2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
3418ec72:	f7fd faef 	bl	3418c254 <LL_RCC_PLL4_GetM>
3418ec76:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418ec78:	687b      	ldr	r3, [r7, #4]
3418ec7a:	2b00      	cmp	r3, #0
3418ec7c:	d021      	beq.n	3418ecc2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
3418ec7e:	f7fd fad9 	bl	3418c234 <LL_RCC_PLL4_GetN>
3418ec82:	4605      	mov	r5, r0
3418ec84:	f7fd fb2a 	bl	3418c2dc <LL_RCC_PLL4_GetFRACN>
3418ec88:	4606      	mov	r6, r0
3418ec8a:	f7fd faf3 	bl	3418c274 <LL_RCC_PLL4_GetP1>
3418ec8e:	4604      	mov	r4, r0
3418ec90:	f7fd fb00 	bl	3418c294 <LL_RCC_PLL4_GetP2>
3418ec94:	4603      	mov	r3, r0
3418ec96:	9301      	str	r3, [sp, #4]
3418ec98:	9400      	str	r4, [sp, #0]
3418ec9a:	4633      	mov	r3, r6
3418ec9c:	462a      	mov	r2, r5
3418ec9e:	6879      	ldr	r1, [r7, #4]
3418eca0:	68b8      	ldr	r0, [r7, #8]
3418eca2:	f000 f871 	bl	3418ed88 <RCCEx_CalcPLLFreq>
3418eca6:	60f8      	str	r0, [r7, #12]
3418eca8:	e00b      	b.n	3418ecc2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
3418ecaa:	f7fd faaf 	bl	3418c20c <LL_RCC_PLL4_IsEnabledBypass>
3418ecae:	4603      	mov	r3, r0
3418ecb0:	2b00      	cmp	r3, #0
3418ecb2:	d006      	beq.n	3418ecc2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3418ecb4:	f7fd fa88 	bl	3418c1c8 <LL_RCC_PLL4_GetSource>
3418ecb8:	4603      	mov	r3, r0
3418ecba:	4618      	mov	r0, r3
3418ecbc:	f000 f806 	bl	3418eccc <RCCEx_GetPLLSourceFreq>
3418ecc0:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418ecc2:	68fb      	ldr	r3, [r7, #12]
}
3418ecc4:	4618      	mov	r0, r3
3418ecc6:	3714      	adds	r7, #20
3418ecc8:	46bd      	mov	sp, r7
3418ecca:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418eccc <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
3418eccc:	b580      	push	{r7, lr}
3418ecce:	b084      	sub	sp, #16
3418ecd0:	af00      	add	r7, sp, #0
3418ecd2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
3418ecd4:	2300      	movs	r3, #0
3418ecd6:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
3418ecd8:	687b      	ldr	r3, [r7, #4]
3418ecda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ecde:	d039      	beq.n	3418ed54 <RCCEx_GetPLLSourceFreq+0x88>
3418ece0:	687b      	ldr	r3, [r7, #4]
3418ece2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ece6:	d838      	bhi.n	3418ed5a <RCCEx_GetPLLSourceFreq+0x8e>
3418ece8:	687b      	ldr	r3, [r7, #4]
3418ecea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ecee:	d029      	beq.n	3418ed44 <RCCEx_GetPLLSourceFreq+0x78>
3418ecf0:	687b      	ldr	r3, [r7, #4]
3418ecf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ecf6:	d830      	bhi.n	3418ed5a <RCCEx_GetPLLSourceFreq+0x8e>
3418ecf8:	687b      	ldr	r3, [r7, #4]
3418ecfa:	2b00      	cmp	r3, #0
3418ecfc:	d004      	beq.n	3418ed08 <RCCEx_GetPLLSourceFreq+0x3c>
3418ecfe:	687b      	ldr	r3, [r7, #4]
3418ed00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ed04:	d00e      	beq.n	3418ed24 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
3418ed06:	e028      	b.n	3418ed5a <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
3418ed08:	f7fc fe26 	bl	3418b958 <LL_RCC_HSI_IsReady>
3418ed0c:	4603      	mov	r3, r0
3418ed0e:	2b00      	cmp	r3, #0
3418ed10:	d025      	beq.n	3418ed5e <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418ed12:	f7fc fe33 	bl	3418b97c <LL_RCC_HSI_GetDivider>
3418ed16:	4603      	mov	r3, r0
3418ed18:	09db      	lsrs	r3, r3, #7
3418ed1a:	4a16      	ldr	r2, [pc, #88]	@ (3418ed74 <RCCEx_GetPLLSourceFreq+0xa8>)
3418ed1c:	fa22 f303 	lsr.w	r3, r2, r3
3418ed20:	60fb      	str	r3, [r7, #12]
      break;
3418ed22:	e01c      	b.n	3418ed5e <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
3418ed24:	f7fc fe38 	bl	3418b998 <LL_RCC_MSI_IsReady>
3418ed28:	4603      	mov	r3, r0
3418ed2a:	2b00      	cmp	r3, #0
3418ed2c:	d019      	beq.n	3418ed62 <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418ed2e:	f7fc fe45 	bl	3418b9bc <LL_RCC_MSI_GetFrequency>
3418ed32:	4603      	mov	r3, r0
3418ed34:	2b00      	cmp	r3, #0
3418ed36:	d102      	bne.n	3418ed3e <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
3418ed38:	4b0f      	ldr	r3, [pc, #60]	@ (3418ed78 <RCCEx_GetPLLSourceFreq+0xac>)
3418ed3a:	60fb      	str	r3, [r7, #12]
      break;
3418ed3c:	e011      	b.n	3418ed62 <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
3418ed3e:	4b0f      	ldr	r3, [pc, #60]	@ (3418ed7c <RCCEx_GetPLLSourceFreq+0xb0>)
3418ed40:	60fb      	str	r3, [r7, #12]
      break;
3418ed42:	e00e      	b.n	3418ed62 <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
3418ed44:	f7fc fdf6 	bl	3418b934 <LL_RCC_HSE_IsReady>
3418ed48:	4603      	mov	r3, r0
3418ed4a:	2b00      	cmp	r3, #0
3418ed4c:	d00b      	beq.n	3418ed66 <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
3418ed4e:	4b0c      	ldr	r3, [pc, #48]	@ (3418ed80 <RCCEx_GetPLLSourceFreq+0xb4>)
3418ed50:	60fb      	str	r3, [r7, #12]
      break;
3418ed52:	e008      	b.n	3418ed66 <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
3418ed54:	4b0b      	ldr	r3, [pc, #44]	@ (3418ed84 <RCCEx_GetPLLSourceFreq+0xb8>)
3418ed56:	60fb      	str	r3, [r7, #12]
      break;
3418ed58:	e006      	b.n	3418ed68 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418ed5a:	bf00      	nop
3418ed5c:	e004      	b.n	3418ed68 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418ed5e:	bf00      	nop
3418ed60:	e002      	b.n	3418ed68 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418ed62:	bf00      	nop
3418ed64:	e000      	b.n	3418ed68 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418ed66:	bf00      	nop
  }

  return pllinputfreq;
3418ed68:	68fb      	ldr	r3, [r7, #12]
}
3418ed6a:	4618      	mov	r0, r3
3418ed6c:	3710      	adds	r7, #16
3418ed6e:	46bd      	mov	sp, r7
3418ed70:	bd80      	pop	{r7, pc}
3418ed72:	bf00      	nop
3418ed74:	03d09000 	.word	0x03d09000
3418ed78:	003d0900 	.word	0x003d0900
3418ed7c:	00f42400 	.word	0x00f42400
3418ed80:	02dc6c00 	.word	0x02dc6c00
3418ed84:	00bb8000 	.word	0x00bb8000

3418ed88 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
3418ed88:	b480      	push	{r7}
3418ed8a:	b087      	sub	sp, #28
3418ed8c:	af00      	add	r7, sp, #0
3418ed8e:	60f8      	str	r0, [r7, #12]
3418ed90:	60b9      	str	r1, [r7, #8]
3418ed92:	607a      	str	r2, [r7, #4]
3418ed94:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3418ed96:	68fb      	ldr	r3, [r7, #12]
3418ed98:	ee07 3a90 	vmov	s15, r3
3418ed9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418eda0:	687b      	ldr	r3, [r7, #4]
3418eda2:	ee07 3a90 	vmov	s15, r3
3418eda6:	eef8 6a67 	vcvt.f32.u32	s13, s15
3418edaa:	683b      	ldr	r3, [r7, #0]
3418edac:	ee07 3a90 	vmov	s15, r3
3418edb0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3418edb4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 3418ee1c <RCCEx_CalcPLLFreq+0x94>
3418edb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
3418edbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
3418edc0:	ee67 6a27 	vmul.f32	s13, s14, s15
3418edc4:	68bb      	ldr	r3, [r7, #8]
3418edc6:	ee07 3a90 	vmov	s15, r3
3418edca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418edce:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418edd2:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
3418edd6:	6a3b      	ldr	r3, [r7, #32]
3418edd8:	ee07 3a90 	vmov	s15, r3
3418eddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418ede0:	edd7 6a05 	vldr	s13, [r7, #20]
3418ede4:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418ede8:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
3418edec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418edee:	ee07 3a90 	vmov	s15, r3
3418edf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418edf6:	edd7 6a05 	vldr	s13, [r7, #20]
3418edfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418edfe:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
3418ee02:	edd7 7a05 	vldr	s15, [r7, #20]
3418ee06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3418ee0a:	ee17 3a90 	vmov	r3, s15
}
3418ee0e:	4618      	mov	r0, r3
3418ee10:	371c      	adds	r7, #28
3418ee12:	46bd      	mov	sp, r7
3418ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ee18:	4770      	bx	lr
3418ee1a:	bf00      	nop
3418ee1c:	4b800000 	.word	0x4b800000

3418ee20 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
3418ee20:	b480      	push	{r7}
3418ee22:	b089      	sub	sp, #36	@ 0x24
3418ee24:	af00      	add	r7, sp, #0
3418ee26:	6078      	str	r0, [r7, #4]
3418ee28:	6039      	str	r1, [r7, #0]
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));

  master_cid = POSITION_VAL(pConfig->MasterCID);
3418ee2a:	683b      	ldr	r3, [r7, #0]
3418ee2c:	681b      	ldr	r3, [r3, #0]
3418ee2e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3418ee30:	693b      	ldr	r3, [r7, #16]
3418ee32:	fa93 f3a3 	rbit	r3, r3
3418ee36:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
3418ee38:	68fb      	ldr	r3, [r7, #12]
3418ee3a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
3418ee3c:	697b      	ldr	r3, [r7, #20]
3418ee3e:	2b00      	cmp	r3, #0
3418ee40:	d101      	bne.n	3418ee46 <HAL_RIF_RIMC_ConfigMasterAttributes+0x26>
  {
    return 32U;
3418ee42:	2320      	movs	r3, #32
3418ee44:	e003      	b.n	3418ee4e <HAL_RIF_RIMC_ConfigMasterAttributes+0x2e>
  }
  return __builtin_clz(value);
3418ee46:	697b      	ldr	r3, [r7, #20]
3418ee48:	fab3 f383 	clz	r3, r3
3418ee4c:	b2db      	uxtb	r3, r3
3418ee4e:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3418ee50:	4a10      	ldr	r2, [pc, #64]	@ (3418ee94 <HAL_RIF_RIMC_ConfigMasterAttributes+0x74>)
3418ee52:	687b      	ldr	r3, [r7, #4]
3418ee54:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3418ee58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418ee5c:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3418ee5e:	69bb      	ldr	r3, [r7, #24]
3418ee60:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3418ee64:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3418ee66:	69fb      	ldr	r3, [r7, #28]
3418ee68:	011a      	lsls	r2, r3, #4
3418ee6a:	683b      	ldr	r3, [r7, #0]
3418ee6c:	685b      	ldr	r3, [r3, #4]
3418ee6e:	021b      	lsls	r3, r3, #8
3418ee70:	4313      	orrs	r3, r2
3418ee72:	69ba      	ldr	r2, [r7, #24]
3418ee74:	4313      	orrs	r3, r2
3418ee76:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3418ee78:	4906      	ldr	r1, [pc, #24]	@ (3418ee94 <HAL_RIF_RIMC_ConfigMasterAttributes+0x74>)
3418ee7a:	687b      	ldr	r3, [r7, #4]
3418ee7c:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3418ee80:	69ba      	ldr	r2, [r7, #24]
3418ee82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3418ee86:	bf00      	nop
3418ee88:	3724      	adds	r7, #36	@ 0x24
3418ee8a:	46bd      	mov	sp, r7
3418ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ee90:	4770      	bx	lr
3418ee92:	bf00      	nop
3418ee94:	54024000 	.word	0x54024000

3418ee98 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
3418ee98:	b480      	push	{r7}
3418ee9a:	b085      	sub	sp, #20
3418ee9c:	af00      	add	r7, sp, #0
3418ee9e:	6078      	str	r0, [r7, #4]
3418eea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3418eea2:	4a25      	ldr	r2, [pc, #148]	@ (3418ef38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418eea4:	687b      	ldr	r3, [r7, #4]
3418eea6:	0f1b      	lsrs	r3, r3, #28
3418eea8:	3304      	adds	r3, #4
3418eeaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418eeae:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3418eeb0:	687b      	ldr	r3, [r7, #4]
3418eeb2:	f003 031f 	and.w	r3, r3, #31
3418eeb6:	2201      	movs	r2, #1
3418eeb8:	fa02 f303 	lsl.w	r3, r2, r3
3418eebc:	43da      	mvns	r2, r3
3418eebe:	68fb      	ldr	r3, [r7, #12]
3418eec0:	4013      	ands	r3, r2
3418eec2:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3418eec4:	683b      	ldr	r3, [r7, #0]
3418eec6:	f003 0201 	and.w	r2, r3, #1
3418eeca:	687b      	ldr	r3, [r7, #4]
3418eecc:	f003 031f 	and.w	r3, r3, #31
3418eed0:	409a      	lsls	r2, r3
3418eed2:	68fb      	ldr	r3, [r7, #12]
3418eed4:	4313      	orrs	r3, r2
3418eed6:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3418eed8:	4917      	ldr	r1, [pc, #92]	@ (3418ef38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418eeda:	687b      	ldr	r3, [r7, #4]
3418eedc:	0f1b      	lsrs	r3, r3, #28
3418eede:	68fa      	ldr	r2, [r7, #12]
3418eee0:	3304      	adds	r3, #4
3418eee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3418eee6:	4a14      	ldr	r2, [pc, #80]	@ (3418ef38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418eee8:	687b      	ldr	r3, [r7, #4]
3418eeea:	0f1b      	lsrs	r3, r3, #28
3418eeec:	330c      	adds	r3, #12
3418eeee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418eef2:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3418eef4:	687b      	ldr	r3, [r7, #4]
3418eef6:	f003 031f 	and.w	r3, r3, #31
3418eefa:	2201      	movs	r2, #1
3418eefc:	fa02 f303 	lsl.w	r3, r2, r3
3418ef00:	43da      	mvns	r2, r3
3418ef02:	68fb      	ldr	r3, [r7, #12]
3418ef04:	4013      	ands	r3, r2
3418ef06:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3418ef08:	683b      	ldr	r3, [r7, #0]
3418ef0a:	085b      	lsrs	r3, r3, #1
3418ef0c:	f003 0201 	and.w	r2, r3, #1
3418ef10:	687b      	ldr	r3, [r7, #4]
3418ef12:	f003 031f 	and.w	r3, r3, #31
3418ef16:	409a      	lsls	r2, r3
3418ef18:	68fb      	ldr	r3, [r7, #12]
3418ef1a:	4313      	orrs	r3, r2
3418ef1c:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3418ef1e:	4906      	ldr	r1, [pc, #24]	@ (3418ef38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418ef20:	687b      	ldr	r3, [r7, #4]
3418ef22:	0f1b      	lsrs	r3, r3, #28
3418ef24:	68fa      	ldr	r2, [r7, #12]
3418ef26:	330c      	adds	r3, #12
3418ef28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3418ef2c:	bf00      	nop
3418ef2e:	3714      	adds	r7, #20
3418ef30:	46bd      	mov	sp, r7
3418ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef36:	4770      	bx	lr
3418ef38:	54024000 	.word	0x54024000

3418ef3c <ISP_Algo_BadPixel_Init>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_Init(void *hIsp, void *pAlgo)
{
3418ef3c:	b480      	push	{r7}
3418ef3e:	b083      	sub	sp, #12
3418ef40:	af00      	add	r7, sp, #0
3418ef42:	6078      	str	r0, [r7, #4]
3418ef44:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */

  ((ISP_AlgoTypeDef *)pAlgo)->state = ISP_ALGO_STATE_INIT;
3418ef46:	683b      	ldr	r3, [r7, #0]
3418ef48:	2200      	movs	r2, #0
3418ef4a:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3418ef4c:	2300      	movs	r3, #0
}
3418ef4e:	4618      	mov	r0, r3
3418ef50:	370c      	adds	r7, #12
3418ef52:	46bd      	mov	sp, r7
3418ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef58:	4770      	bx	lr

3418ef5a <ISP_Algo_BadPixel_DeInit>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_DeInit(void *hIsp, void *pAlgo)
{
3418ef5a:	b480      	push	{r7}
3418ef5c:	b083      	sub	sp, #12
3418ef5e:	af00      	add	r7, sp, #0
3418ef60:	6078      	str	r0, [r7, #4]
3418ef62:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  return ISP_OK;
3418ef64:	2300      	movs	r3, #0
}
3418ef66:	4618      	mov	r0, r3
3418ef68:	370c      	adds	r7, #12
3418ef6a:	46bd      	mov	sp, r7
3418ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef70:	4770      	bx	lr
	...

3418ef74 <ISP_Algo_BadPixel_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_Process(void *hIsp, void *pAlgo)
{
3418ef74:	b580      	push	{r7, lr}
3418ef76:	b088      	sub	sp, #32
3418ef78:	af00      	add	r7, sp, #0
3418ef7a:	6078      	str	r0, [r7, #4]
3418ef7c:	6039      	str	r1, [r7, #0]
  uint32_t CurrentFrameId;
  ISP_BadPixelTypeDef BadPixelConfig;
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418ef7e:	6878      	ldr	r0, [r7, #4]
3418ef80:	f002 fd90 	bl	34191aa4 <ISP_SVC_IQParam_Get>
3418ef84:	61f8      	str	r0, [r7, #28]

  if (IQParamConfig->badPixelAlgo.enable == false)
3418ef86:	69fb      	ldr	r3, [r7, #28]
3418ef88:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
3418ef8c:	2b00      	cmp	r3, #0
3418ef8e:	d101      	bne.n	3418ef94 <ISP_Algo_BadPixel_Process+0x20>
  {
    return ISP_OK;
3418ef90:	2300      	movs	r3, #0
3418ef92:	e069      	b.n	3418f068 <ISP_Algo_BadPixel_Process+0xf4>
  }

  /* Wait for a new frame */
  CurrentFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp);
3418ef94:	6878      	ldr	r0, [r7, #4]
3418ef96:	f002 fcd0 	bl	3419193a <ISP_SVC_Misc_GetMainFrameId>
3418ef9a:	61b8      	str	r0, [r7, #24]
  if (CurrentFrameId == LastFrameId)
3418ef9c:	4b34      	ldr	r3, [pc, #208]	@ (3418f070 <ISP_Algo_BadPixel_Process+0xfc>)
3418ef9e:	681b      	ldr	r3, [r3, #0]
3418efa0:	69ba      	ldr	r2, [r7, #24]
3418efa2:	429a      	cmp	r2, r3
3418efa4:	d101      	bne.n	3418efaa <ISP_Algo_BadPixel_Process+0x36>
  {
    return ISP_OK;
3418efa6:	2300      	movs	r3, #0
3418efa8:	e05e      	b.n	3418f068 <ISP_Algo_BadPixel_Process+0xf4>
  }
  LastFrameId = CurrentFrameId;
3418efaa:	4a31      	ldr	r2, [pc, #196]	@ (3418f070 <ISP_Algo_BadPixel_Process+0xfc>)
3418efac:	69bb      	ldr	r3, [r7, #24]
3418efae:	6013      	str	r3, [r2, #0]

  if (Step++ >= 0)
3418efb0:	4b30      	ldr	r3, [pc, #192]	@ (3418f074 <ISP_Algo_BadPixel_Process+0x100>)
3418efb2:	f993 3000 	ldrsb.w	r3, [r3]
3418efb6:	b2da      	uxtb	r2, r3
3418efb8:	3201      	adds	r2, #1
3418efba:	b2d2      	uxtb	r2, r2
3418efbc:	b251      	sxtb	r1, r2
3418efbe:	4a2d      	ldr	r2, [pc, #180]	@ (3418f074 <ISP_Algo_BadPixel_Process+0x100>)
3418efc0:	7011      	strb	r1, [r2, #0]
3418efc2:	2b00      	cmp	r3, #0
3418efc4:	db12      	blt.n	3418efec <ISP_Algo_BadPixel_Process+0x78>
  {
    /* Measure the number of bad pixels */
    ret  = ISP_SVC_ISP_GetBadPixel(hIsp, &BadPixelConfig);
3418efc6:	f107 030c 	add.w	r3, r7, #12
3418efca:	4619      	mov	r1, r3
3418efcc:	6878      	ldr	r0, [r7, #4]
3418efce:	f002 f962 	bl	34191296 <ISP_SVC_ISP_GetBadPixel>
3418efd2:	4603      	mov	r3, r0
3418efd4:	75fb      	strb	r3, [r7, #23]
    if (ret != ISP_OK)
3418efd6:	7dfb      	ldrb	r3, [r7, #23]
3418efd8:	2b00      	cmp	r3, #0
3418efda:	d001      	beq.n	3418efe0 <ISP_Algo_BadPixel_Process+0x6c>
    {
      return ret;
3418efdc:	7dfb      	ldrb	r3, [r7, #23]
3418efde:	e043      	b.n	3418f068 <ISP_Algo_BadPixel_Process+0xf4>
    }
    BadPixelCount += BadPixelConfig.count;
3418efe0:	693a      	ldr	r2, [r7, #16]
3418efe2:	4b25      	ldr	r3, [pc, #148]	@ (3418f078 <ISP_Algo_BadPixel_Process+0x104>)
3418efe4:	681b      	ldr	r3, [r3, #0]
3418efe6:	4413      	add	r3, r2
3418efe8:	4a23      	ldr	r2, [pc, #140]	@ (3418f078 <ISP_Algo_BadPixel_Process+0x104>)
3418efea:	6013      	str	r3, [r2, #0]
  }

  if (Step == 10)
3418efec:	4b21      	ldr	r3, [pc, #132]	@ (3418f074 <ISP_Algo_BadPixel_Process+0x100>)
3418efee:	f993 3000 	ldrsb.w	r3, [r3]
3418eff2:	2b0a      	cmp	r3, #10
3418eff4:	d137      	bne.n	3418f066 <ISP_Algo_BadPixel_Process+0xf2>
  {
    /* All measures done : make an average and compare with threshold */
    BadPixelCount /= 10;
3418eff6:	4b20      	ldr	r3, [pc, #128]	@ (3418f078 <ISP_Algo_BadPixel_Process+0x104>)
3418eff8:	681b      	ldr	r3, [r3, #0]
3418effa:	4a20      	ldr	r2, [pc, #128]	@ (3418f07c <ISP_Algo_BadPixel_Process+0x108>)
3418effc:	fba2 2303 	umull	r2, r3, r2, r3
3418f000:	08db      	lsrs	r3, r3, #3
3418f002:	4a1d      	ldr	r2, [pc, #116]	@ (3418f078 <ISP_Algo_BadPixel_Process+0x104>)
3418f004:	6013      	str	r3, [r2, #0]

    if ((BadPixelCount > IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength > 0))
3418f006:	69fb      	ldr	r3, [r7, #28]
3418f008:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
3418f00a:	4b1b      	ldr	r3, [pc, #108]	@ (3418f078 <ISP_Algo_BadPixel_Process+0x104>)
3418f00c:	681b      	ldr	r3, [r3, #0]
3418f00e:	429a      	cmp	r2, r3
3418f010:	d207      	bcs.n	3418f022 <ISP_Algo_BadPixel_Process+0xae>
3418f012:	7b7b      	ldrb	r3, [r7, #13]
3418f014:	2b00      	cmp	r3, #0
3418f016:	d004      	beq.n	3418f022 <ISP_Algo_BadPixel_Process+0xae>
    {
      /* Bad pixel is above target : decrease strength */
      BadPixelConfig.strength--;
3418f018:	7b7b      	ldrb	r3, [r7, #13]
3418f01a:	3b01      	subs	r3, #1
3418f01c:	b2db      	uxtb	r3, r3
3418f01e:	737b      	strb	r3, [r7, #13]
3418f020:	e00c      	b.n	3418f03c <ISP_Algo_BadPixel_Process+0xc8>
    }
    else if ((BadPixelCount < IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength < ISP_BADPIXEL_STRENGTH_MAX - 1))
3418f022:	69fb      	ldr	r3, [r7, #28]
3418f024:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
3418f026:	4b14      	ldr	r3, [pc, #80]	@ (3418f078 <ISP_Algo_BadPixel_Process+0x104>)
3418f028:	681b      	ldr	r3, [r3, #0]
3418f02a:	429a      	cmp	r2, r3
3418f02c:	d906      	bls.n	3418f03c <ISP_Algo_BadPixel_Process+0xc8>
3418f02e:	7b7b      	ldrb	r3, [r7, #13]
3418f030:	2b05      	cmp	r3, #5
3418f032:	d803      	bhi.n	3418f03c <ISP_Algo_BadPixel_Process+0xc8>
    {
      /* Bad pixel is below target : increase strength. (exclude ISP_BADPIXEL_STRENGTH_MAX which gives weird results) */
      BadPixelConfig.strength++;
3418f034:	7b7b      	ldrb	r3, [r7, #13]
3418f036:	3301      	adds	r3, #1
3418f038:	b2db      	uxtb	r3, r3
3418f03a:	737b      	strb	r3, [r7, #13]
    }

    /* Set updated Strength */
    BadPixelConfig.enable = 1;
3418f03c:	2301      	movs	r3, #1
3418f03e:	733b      	strb	r3, [r7, #12]
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &BadPixelConfig);
3418f040:	f107 030c 	add.w	r3, r7, #12
3418f044:	4619      	mov	r1, r3
3418f046:	6878      	ldr	r0, [r7, #4]
3418f048:	f002 f8e6 	bl	34191218 <ISP_SVC_ISP_SetBadPixel>
3418f04c:	4603      	mov	r3, r0
3418f04e:	75fb      	strb	r3, [r7, #23]
    if (ret != ISP_OK)
3418f050:	7dfb      	ldrb	r3, [r7, #23]
3418f052:	2b00      	cmp	r3, #0
3418f054:	d001      	beq.n	3418f05a <ISP_Algo_BadPixel_Process+0xe6>
    {
      return ret;
3418f056:	7dfb      	ldrb	r3, [r7, #23]
3418f058:	e006      	b.n	3418f068 <ISP_Algo_BadPixel_Process+0xf4>
    }

    /* Set Step to -1 to wait for an extra frame before a new measurement (the ISP HW needs one frame to update after reconfig) */
    Step = -1;
3418f05a:	4b06      	ldr	r3, [pc, #24]	@ (3418f074 <ISP_Algo_BadPixel_Process+0x100>)
3418f05c:	22ff      	movs	r2, #255	@ 0xff
3418f05e:	701a      	strb	r2, [r3, #0]
    BadPixelCount = 0;
3418f060:	4b05      	ldr	r3, [pc, #20]	@ (3418f078 <ISP_Algo_BadPixel_Process+0x104>)
3418f062:	2200      	movs	r2, #0
3418f064:	601a      	str	r2, [r3, #0]
  }

  return ISP_OK;
3418f066:	2300      	movs	r3, #0
}
3418f068:	4618      	mov	r0, r3
3418f06a:	3720      	adds	r7, #32
3418f06c:	46bd      	mov	sp, r7
3418f06e:	bd80      	pop	{r7, pc}
3418f070:	341c11d4 	.word	0x341c11d4
3418f074:	341c11d8 	.word	0x341c11d8
3418f078:	341c11dc 	.word	0x341c11dc
3418f07c:	cccccccd 	.word	0xcccccccd

3418f080 <log_cb>:

#if defined(ISP_MW_SW_AEC_ALGO_SUPPORT) || defined(ISP_MW_SW_AWB_ALGO_SUPPORT)
static void log_cb(const char *const msg)
{
3418f080:	b580      	push	{r7, lr}
3418f082:	b082      	sub	sp, #8
3418f084:	af00      	add	r7, sp, #0
3418f086:	6078      	str	r0, [r7, #4]
  printf("%s", msg);
3418f088:	6879      	ldr	r1, [r7, #4]
3418f08a:	4805      	ldr	r0, [pc, #20]	@ (3418f0a0 <log_cb+0x20>)
3418f08c:	f003 fef2 	bl	34192e74 <iprintf>
  printf("\r\n");
3418f090:	4804      	ldr	r0, [pc, #16]	@ (3418f0a4 <log_cb+0x24>)
3418f092:	f003 ff57 	bl	34192f44 <puts>
}
3418f096:	bf00      	nop
3418f098:	3708      	adds	r7, #8
3418f09a:	46bd      	mov	sp, r7
3418f09c:	bd80      	pop	{r7, pc}
3418f09e:	bf00      	nop
3418f0a0:	34194f28 	.word	0x34194f28
3418f0a4:	34194f2c 	.word	0x34194f2c

3418f0a8 <ISP_Algo_AEC_Init>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_Init(void *hIsp, void *pAlgo)
{
3418f0a8:	b580      	push	{r7, lr}
3418f0aa:	b088      	sub	sp, #32
3418f0ac:	af00      	add	r7, sp, #0
3418f0ae:	6078      	str	r0, [r7, #4]
3418f0b0:	6039      	str	r1, [r7, #0]
  ISP_HandleTypeDef *pIsp_handle = (ISP_HandleTypeDef*) hIsp;
3418f0b2:	687b      	ldr	r3, [r7, #4]
3418f0b4:	61fb      	str	r3, [r7, #28]
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3418f0b6:	683b      	ldr	r3, [r7, #0]
3418f0b8:	61bb      	str	r3, [r7, #24]
  ISP_SensorExposureTypeDef exposureConfig;
  ISP_SensorGainTypeDef gainConfig;
  ISP_IQParamTypeDef *IQParamConfig;
  evision_return_t e_ret;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418f0ba:	6878      	ldr	r0, [r7, #4]
3418f0bc:	f002 fcf2 	bl	34191aa4 <ISP_SVC_IQParam_Get>
3418f0c0:	6178      	str	r0, [r7, #20]

  if (IQParamConfig->sensorDelay.delay == 0)
3418f0c2:	697b      	ldr	r3, [r7, #20]
3418f0c4:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
3418f0c8:	2b00      	cmp	r3, #0
3418f0ca:	d103      	bne.n	3418f0d4 <ISP_Algo_AEC_Init+0x2c>
  {
    /* A value of 0 is invalid, it would break the AEC algo */
    IQParamConfig->sensorDelay.delay = 1;
3418f0cc:	697b      	ldr	r3, [r7, #20]
3418f0ce:	2201      	movs	r2, #1
3418f0d0:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
  }

  /* Create st_ae_process instance */
  pIspAEprocess = evision_api_st_ae_new(log_cb);
3418f0d4:	4830      	ldr	r0, [pc, #192]	@ (3418f198 <ISP_Algo_AEC_Init+0xf0>)
3418f0d6:	f7f1 fb5b 	bl	34180790 <evision_api_st_ae_new>
3418f0da:	4603      	mov	r3, r0
3418f0dc:	4a2f      	ldr	r2, [pc, #188]	@ (3418f19c <ISP_Algo_AEC_Init+0xf4>)
3418f0de:	6013      	str	r3, [r2, #0]
  if (pIspAEprocess == NULL)
3418f0e0:	4b2e      	ldr	r3, [pc, #184]	@ (3418f19c <ISP_Algo_AEC_Init+0xf4>)
3418f0e2:	681b      	ldr	r3, [r3, #0]
3418f0e4:	2b00      	cmp	r3, #0
3418f0e6:	d101      	bne.n	3418f0ec <ISP_Algo_AEC_Init+0x44>
  {
    return ISP_ERR_ALGO;
3418f0e8:	23be      	movs	r3, #190	@ 0xbe
3418f0ea:	e050      	b.n	3418f18e <ISP_Algo_AEC_Init+0xe6>
  }

  /* Initialize st_ae_process instance */
  e_ret = evision_api_st_ae_init(pIspAEprocess);
3418f0ec:	4b2b      	ldr	r3, [pc, #172]	@ (3418f19c <ISP_Algo_AEC_Init+0xf4>)
3418f0ee:	681b      	ldr	r3, [r3, #0]
3418f0f0:	4618      	mov	r0, r3
3418f0f2:	f7f1 fba1 	bl	34180838 <evision_api_st_ae_init>
3418f0f6:	4603      	mov	r3, r0
3418f0f8:	74fb      	strb	r3, [r7, #19]
  if (e_ret != EVISION_RET_SUCCESS)
3418f0fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
3418f0fe:	2b01      	cmp	r3, #1
3418f100:	d006      	beq.n	3418f110 <ISP_Algo_AEC_Init+0x68>
  {
    evision_api_st_ae_delete(pIspAEprocess);
3418f102:	4b26      	ldr	r3, [pc, #152]	@ (3418f19c <ISP_Algo_AEC_Init+0xf4>)
3418f104:	681b      	ldr	r3, [r3, #0]
3418f106:	4618      	mov	r0, r3
3418f108:	f7f1 fb5c 	bl	341807c4 <evision_api_st_ae_delete>
    return ISP_ERR_ALGO;
3418f10c:	23be      	movs	r3, #190	@ 0xbe
3418f10e:	e03e      	b.n	3418f18e <ISP_Algo_AEC_Init+0xe6>
  }

  /* Configure algo (AEC target) */
  pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3418f110:	4b22      	ldr	r3, [pc, #136]	@ (3418f19c <ISP_Algo_AEC_Init+0xf4>)
3418f112:	681b      	ldr	r3, [r3, #0]
3418f114:	697a      	ldr	r2, [r7, #20]
3418f116:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
3418f118:	611a      	str	r2, [r3, #16]

  /* Configure algo (sensor config) */
  pIspAEprocess->hyper_params.exposure_min = pIsp_handle->sensorInfo.exposure_min;
3418f11a:	4b20      	ldr	r3, [pc, #128]	@ (3418f19c <ISP_Algo_AEC_Init+0xf4>)
3418f11c:	681b      	ldr	r3, [r3, #0]
3418f11e:	69fa      	ldr	r2, [r7, #28]
3418f120:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
3418f124:	641a      	str	r2, [r3, #64]	@ 0x40
  pIspAEprocess->hyper_params.exposure_max = pIsp_handle->sensorInfo.exposure_max;
3418f126:	4b1d      	ldr	r3, [pc, #116]	@ (3418f19c <ISP_Algo_AEC_Init+0xf4>)
3418f128:	681b      	ldr	r3, [r3, #0]
3418f12a:	69fa      	ldr	r2, [r7, #28]
3418f12c:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
3418f130:	645a      	str	r2, [r3, #68]	@ 0x44
  pIspAEprocess->hyper_params.gain_min = pIsp_handle->sensorInfo.gain_min;
3418f132:	4b1a      	ldr	r3, [pc, #104]	@ (3418f19c <ISP_Algo_AEC_Init+0xf4>)
3418f134:	681b      	ldr	r3, [r3, #0]
3418f136:	69fa      	ldr	r2, [r7, #28]
3418f138:	6f92      	ldr	r2, [r2, #120]	@ 0x78
3418f13a:	649a      	str	r2, [r3, #72]	@ 0x48
  pIspAEprocess->hyper_params.gain_max = pIsp_handle->sensorInfo.gain_max;
3418f13c:	4b17      	ldr	r3, [pc, #92]	@ (3418f19c <ISP_Algo_AEC_Init+0xf4>)
3418f13e:	681b      	ldr	r3, [r3, #0]
3418f140:	69fa      	ldr	r2, [r7, #28]
3418f142:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3418f144:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize exposure and gain at min value */
  if (IQParamConfig->AECAlgo.enable == true)
3418f146:	697b      	ldr	r3, [r7, #20]
3418f148:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3418f14c:	2b01      	cmp	r3, #1
3418f14e:	d11a      	bne.n	3418f186 <ISP_Algo_AEC_Init+0xde>
  {
    exposureConfig.exposure = pIsp_handle->sensorInfo.exposure_min;
3418f150:	69fb      	ldr	r3, [r7, #28]
3418f152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418f156:	60fb      	str	r3, [r7, #12]
    gainConfig.gain = pIsp_handle->sensorInfo.gain_min;
3418f158:	69fb      	ldr	r3, [r7, #28]
3418f15a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3418f15c:	60bb      	str	r3, [r7, #8]
    if ((ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig) != ISP_OK) || (ISP_SVC_Sensor_SetGain(hIsp, &gainConfig)!= ISP_OK))
3418f15e:	f107 030c 	add.w	r3, r7, #12
3418f162:	4619      	mov	r1, r3
3418f164:	6878      	ldr	r0, [r7, #4]
3418f166:	f002 fb75 	bl	34191854 <ISP_SVC_Sensor_SetExposure>
3418f16a:	4603      	mov	r3, r0
3418f16c:	2b00      	cmp	r3, #0
3418f16e:	d108      	bne.n	3418f182 <ISP_Algo_AEC_Init+0xda>
3418f170:	f107 0308 	add.w	r3, r7, #8
3418f174:	4619      	mov	r1, r3
3418f176:	6878      	ldr	r0, [r7, #4]
3418f178:	f002 fb20 	bl	341917bc <ISP_SVC_Sensor_SetGain>
3418f17c:	4603      	mov	r3, r0
3418f17e:	2b00      	cmp	r3, #0
3418f180:	d001      	beq.n	3418f186 <ISP_Algo_AEC_Init+0xde>
    {
      return ISP_ERR_ALGO;
3418f182:	23be      	movs	r3, #190	@ 0xbe
3418f184:	e003      	b.n	3418f18e <ISP_Algo_AEC_Init+0xe6>
    }
  }

  /* Update State */
  algo->state = ISP_ALGO_STATE_INIT;
3418f186:	69bb      	ldr	r3, [r7, #24]
3418f188:	2200      	movs	r2, #0
3418f18a:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3418f18c:	2300      	movs	r3, #0
}
3418f18e:	4618      	mov	r0, r3
3418f190:	3720      	adds	r7, #32
3418f192:	46bd      	mov	sp, r7
3418f194:	bd80      	pop	{r7, pc}
3418f196:	bf00      	nop
3418f198:	3418f081 	.word	0x3418f081
3418f19c:	341c11b4 	.word	0x341c11b4

3418f1a0 <ISP_Algo_AEC_DeInit>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_DeInit(void *hIsp, void *pAlgo)
{
3418f1a0:	b580      	push	{r7, lr}
3418f1a2:	b082      	sub	sp, #8
3418f1a4:	af00      	add	r7, sp, #0
3418f1a6:	6078      	str	r0, [r7, #4]
3418f1a8:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  if (pIspAEprocess != NULL)
3418f1aa:	4b07      	ldr	r3, [pc, #28]	@ (3418f1c8 <ISP_Algo_AEC_DeInit+0x28>)
3418f1ac:	681b      	ldr	r3, [r3, #0]
3418f1ae:	2b00      	cmp	r3, #0
3418f1b0:	d004      	beq.n	3418f1bc <ISP_Algo_AEC_DeInit+0x1c>
  {
    evision_api_st_ae_delete(pIspAEprocess);
3418f1b2:	4b05      	ldr	r3, [pc, #20]	@ (3418f1c8 <ISP_Algo_AEC_DeInit+0x28>)
3418f1b4:	681b      	ldr	r3, [r3, #0]
3418f1b6:	4618      	mov	r0, r3
3418f1b8:	f7f1 fb04 	bl	341807c4 <evision_api_st_ae_delete>
  }
  return ISP_OK;
3418f1bc:	2300      	movs	r3, #0
}
3418f1be:	4618      	mov	r0, r3
3418f1c0:	3708      	adds	r7, #8
3418f1c2:	46bd      	mov	sp, r7
3418f1c4:	bd80      	pop	{r7, pc}
3418f1c6:	bf00      	nop
3418f1c8:	341c11b4 	.word	0x341c11b4

3418f1cc <ISP_Algo_AEC_StatCb>:
  *         Callback informing that statistics are available
  * @param  pAlgo: ISP algorithm handle.
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_StatCb(ISP_AlgoTypeDef *pAlgo)
{
3418f1cc:	b480      	push	{r7}
3418f1ce:	b083      	sub	sp, #12
3418f1d0:	af00      	add	r7, sp, #0
3418f1d2:	6078      	str	r0, [r7, #4]
  /* Update State */
  pAlgo->state = ISP_ALGO_STATE_STAT_READY;
3418f1d4:	687b      	ldr	r3, [r7, #4]
3418f1d6:	2203      	movs	r2, #3
3418f1d8:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3418f1da:	2300      	movs	r3, #0
}
3418f1dc:	4618      	mov	r0, r3
3418f1de:	370c      	adds	r7, #12
3418f1e0:	46bd      	mov	sp, r7
3418f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f1e6:	4770      	bx	lr

3418f1e8 <ISP_Algo_AEC_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_Process(void *hIsp, void *pAlgo)
{
3418f1e8:	b580      	push	{r7, lr}
3418f1ea:	b08e      	sub	sp, #56	@ 0x38
3418f1ec:	af04      	add	r7, sp, #16
3418f1ee:	6078      	str	r0, [r7, #4]
3418f1f0:	6039      	str	r1, [r7, #0]
  static ISP_SVC_StatStateTypeDef stats;
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3418f1f2:	683b      	ldr	r3, [r7, #0]
3418f1f4:	623b      	str	r3, [r7, #32]
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret = ISP_OK;
3418f1f6:	2300      	movs	r3, #0
3418f1f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#ifdef ALGO_AEC_DBG_LOGS
  static uint32_t currentL;
#endif
  evision_return_t e_ret;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418f1fc:	6878      	ldr	r0, [r7, #4]
3418f1fe:	f002 fc51 	bl	34191aa4 <ISP_SVC_IQParam_Get>
3418f202:	61f8      	str	r0, [r7, #28]
  if (IQParamConfig->AECAlgo.enable == false)
3418f204:	69fb      	ldr	r3, [r7, #28]
3418f206:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3418f20a:	2b00      	cmp	r3, #0
3418f20c:	d101      	bne.n	3418f212 <ISP_Algo_AEC_Process+0x2a>
  {
    return ISP_OK;
3418f20e:	2300      	movs	r3, #0
3418f210:	e0b3      	b.n	3418f37a <ISP_Algo_AEC_Process+0x192>
  }

  switch(algo->state)
3418f212:	6a3b      	ldr	r3, [r7, #32]
3418f214:	785b      	ldrb	r3, [r3, #1]
3418f216:	2b03      	cmp	r3, #3
3418f218:	d025      	beq.n	3418f266 <ISP_Algo_AEC_Process+0x7e>
3418f21a:	2b03      	cmp	r3, #3
3418f21c:	f300 80ab 	bgt.w	3418f376 <ISP_Algo_AEC_Process+0x18e>
3418f220:	2b01      	cmp	r3, #1
3418f222:	dc02      	bgt.n	3418f22a <ISP_Algo_AEC_Process+0x42>
3418f224:	2b00      	cmp	r3, #0
3418f226:	da02      	bge.n	3418f22e <ISP_Algo_AEC_Process+0x46>
3418f228:	e0a5      	b.n	3418f376 <ISP_Algo_AEC_Process+0x18e>
3418f22a:	2b02      	cmp	r3, #2
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
    break;

  case ISP_ALGO_STATE_WAITING_STAT:
    /* Do nothing */
    break;
3418f22c:	e0a3      	b.n	3418f376 <ISP_Algo_AEC_Process+0x18e>
                                ISP_STAT_TYPE_AVG, IQParamConfig->sensorDelay.delay);
3418f22e:	69fb      	ldr	r3, [r7, #28]
3418f230:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3418f234:	9302      	str	r3, [sp, #8]
3418f236:	2301      	movs	r3, #1
3418f238:	9301      	str	r3, [sp, #4]
3418f23a:	2302      	movs	r3, #2
3418f23c:	9300      	str	r3, [sp, #0]
3418f23e:	4b51      	ldr	r3, [pc, #324]	@ (3418f384 <ISP_Algo_AEC_Process+0x19c>)
3418f240:	683a      	ldr	r2, [r7, #0]
3418f242:	4951      	ldr	r1, [pc, #324]	@ (3418f388 <ISP_Algo_AEC_Process+0x1a0>)
3418f244:	6878      	ldr	r0, [r7, #4]
3418f246:	f002 ff7d 	bl	34192144 <ISP_SVC_Stats_GetNext>
3418f24a:	4603      	mov	r3, r0
3418f24c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != ISP_OK)
3418f250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f254:	2b00      	cmp	r3, #0
3418f256:	d002      	beq.n	3418f25e <ISP_Algo_AEC_Process+0x76>
      return ret;
3418f258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f25c:	e08d      	b.n	3418f37a <ISP_Algo_AEC_Process+0x192>
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3418f25e:	6a3b      	ldr	r3, [r7, #32]
3418f260:	2202      	movs	r2, #2
3418f262:	705a      	strb	r2, [r3, #1]
    break;
3418f264:	e087      	b.n	3418f376 <ISP_Algo_AEC_Process+0x18e>

  case ISP_ALGO_STATE_STAT_READY:
    /* Align on the target update (may have been updated with ISP_SetExposureTarget()) */
    pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3418f266:	4b49      	ldr	r3, [pc, #292]	@ (3418f38c <ISP_Algo_AEC_Process+0x1a4>)
3418f268:	681b      	ldr	r3, [r3, #0]
3418f26a:	69fa      	ldr	r2, [r7, #28]
3418f26c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
3418f26e:	611a      	str	r2, [r3, #16]
    avgL = stats.down.averageL;
3418f270:	4b44      	ldr	r3, [pc, #272]	@ (3418f384 <ISP_Algo_AEC_Process+0x19c>)
3418f272:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
3418f276:	61bb      	str	r3, [r7, #24]
      printf("L = %ld\r\n", avgL);
      currentL = avgL;
    }
#endif
    /* Read the current sensor gain */
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
3418f278:	f107 0310 	add.w	r3, r7, #16
3418f27c:	4619      	mov	r1, r3
3418f27e:	6878      	ldr	r0, [r7, #4]
3418f280:	f002 fac6 	bl	34191810 <ISP_SVC_Sensor_GetGain>
3418f284:	4603      	mov	r3, r0
3418f286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != ISP_OK)
3418f28a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f28e:	2b00      	cmp	r3, #0
3418f290:	d002      	beq.n	3418f298 <ISP_Algo_AEC_Process+0xb0>
    {
      return ret;
3418f292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f296:	e070      	b.n	3418f37a <ISP_Algo_AEC_Process+0x192>
    }

    ret = ISP_SVC_Sensor_GetExposure(hIsp, &exposureConfig);
3418f298:	f107 030c 	add.w	r3, r7, #12
3418f29c:	4619      	mov	r1, r3
3418f29e:	6878      	ldr	r0, [r7, #4]
3418f2a0:	f002 fb02 	bl	341918a8 <ISP_SVC_Sensor_GetExposure>
3418f2a4:	4603      	mov	r3, r0
3418f2a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != ISP_OK)
3418f2aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f2ae:	2b00      	cmp	r3, #0
3418f2b0:	d002      	beq.n	3418f2b8 <ISP_Algo_AEC_Process+0xd0>
    {
      return ret;
3418f2b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f2b6:	e060      	b.n	3418f37a <ISP_Algo_AEC_Process+0x192>
    }

    /* Store meta data */
    Meta.averageL = avgL;
3418f2b8:	69bb      	ldr	r3, [r7, #24]
3418f2ba:	b2da      	uxtb	r2, r3
3418f2bc:	4b34      	ldr	r3, [pc, #208]	@ (3418f390 <ISP_Algo_AEC_Process+0x1a8>)
3418f2be:	705a      	strb	r2, [r3, #1]
    Meta.exposureTarget = IQParamConfig->AECAlgo.exposureTarget;
3418f2c0:	69fb      	ldr	r3, [r7, #28]
3418f2c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418f2c4:	4a32      	ldr	r2, [pc, #200]	@ (3418f390 <ISP_Algo_AEC_Process+0x1a8>)
3418f2c6:	6053      	str	r3, [r2, #4]

    /* Run algo to calculate new gain and exposure */
    e_ret = evision_api_st_ae_process(pIspAEprocess, gainConfig.gain, exposureConfig.exposure, avgL);
3418f2c8:	4b30      	ldr	r3, [pc, #192]	@ (3418f38c <ISP_Algo_AEC_Process+0x1a4>)
3418f2ca:	6818      	ldr	r0, [r3, #0]
3418f2cc:	6939      	ldr	r1, [r7, #16]
3418f2ce:	68fa      	ldr	r2, [r7, #12]
3418f2d0:	69bb      	ldr	r3, [r7, #24]
3418f2d2:	b2db      	uxtb	r3, r3
3418f2d4:	f7f1 fabb 	bl	3418084e <evision_api_st_ae_process>
3418f2d8:	4603      	mov	r3, r0
3418f2da:	75fb      	strb	r3, [r7, #23]
    if (e_ret == EVISION_RET_SUCCESS)
3418f2dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
3418f2e0:	2b01      	cmp	r3, #1
3418f2e2:	d133      	bne.n	3418f34c <ISP_Algo_AEC_Process+0x164>
    {
      if (gainConfig.gain != pIspAEprocess->new_gain)
3418f2e4:	693a      	ldr	r2, [r7, #16]
3418f2e6:	4b29      	ldr	r3, [pc, #164]	@ (3418f38c <ISP_Algo_AEC_Process+0x1a4>)
3418f2e8:	681b      	ldr	r3, [r3, #0]
3418f2ea:	689b      	ldr	r3, [r3, #8]
3418f2ec:	429a      	cmp	r2, r3
3418f2ee:	d013      	beq.n	3418f318 <ISP_Algo_AEC_Process+0x130>
      {
        /* Set new gain */
        gainConfig.gain = pIspAEprocess->new_gain;
3418f2f0:	4b26      	ldr	r3, [pc, #152]	@ (3418f38c <ISP_Algo_AEC_Process+0x1a4>)
3418f2f2:	681b      	ldr	r3, [r3, #0]
3418f2f4:	689b      	ldr	r3, [r3, #8]
3418f2f6:	613b      	str	r3, [r7, #16]

        ret = ISP_SVC_Sensor_SetGain(hIsp, &gainConfig);
3418f2f8:	f107 0310 	add.w	r3, r7, #16
3418f2fc:	4619      	mov	r1, r3
3418f2fe:	6878      	ldr	r0, [r7, #4]
3418f300:	f002 fa5c 	bl	341917bc <ISP_SVC_Sensor_SetGain>
3418f304:	4603      	mov	r3, r0
3418f306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret != ISP_OK)
3418f30a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f30e:	2b00      	cmp	r3, #0
3418f310:	d002      	beq.n	3418f318 <ISP_Algo_AEC_Process+0x130>
        {
          return ret;
3418f312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f316:	e030      	b.n	3418f37a <ISP_Algo_AEC_Process+0x192>
#ifdef ALGO_AEC_DBG_LOGS
        printf("New gain = %ld\r\n", gainConfig.gain);
#endif
      }

      if (exposureConfig.exposure != pIspAEprocess->new_exposure)
3418f318:	68fa      	ldr	r2, [r7, #12]
3418f31a:	4b1c      	ldr	r3, [pc, #112]	@ (3418f38c <ISP_Algo_AEC_Process+0x1a4>)
3418f31c:	681b      	ldr	r3, [r3, #0]
3418f31e:	685b      	ldr	r3, [r3, #4]
3418f320:	429a      	cmp	r2, r3
3418f322:	d013      	beq.n	3418f34c <ISP_Algo_AEC_Process+0x164>
      {
        /* Set new exposure */
        exposureConfig.exposure = pIspAEprocess->new_exposure;
3418f324:	4b19      	ldr	r3, [pc, #100]	@ (3418f38c <ISP_Algo_AEC_Process+0x1a4>)
3418f326:	681b      	ldr	r3, [r3, #0]
3418f328:	685b      	ldr	r3, [r3, #4]
3418f32a:	60fb      	str	r3, [r7, #12]

        ret = ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig);
3418f32c:	f107 030c 	add.w	r3, r7, #12
3418f330:	4619      	mov	r1, r3
3418f332:	6878      	ldr	r0, [r7, #4]
3418f334:	f002 fa8e 	bl	34191854 <ISP_SVC_Sensor_SetExposure>
3418f338:	4603      	mov	r3, r0
3418f33a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret != ISP_OK)
3418f33e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f342:	2b00      	cmp	r3, #0
3418f344:	d002      	beq.n	3418f34c <ISP_Algo_AEC_Process+0x164>
        {
          return ret;
3418f346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f34a:	e016      	b.n	3418f37a <ISP_Algo_AEC_Process+0x192>
      }
    }

    /* Ask for stats */
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
                                ISP_STAT_TYPE_AVG, IQParamConfig->sensorDelay.delay);
3418f34c:	69fb      	ldr	r3, [r7, #28]
3418f34e:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3418f352:	9302      	str	r3, [sp, #8]
3418f354:	2301      	movs	r3, #1
3418f356:	9301      	str	r3, [sp, #4]
3418f358:	2302      	movs	r3, #2
3418f35a:	9300      	str	r3, [sp, #0]
3418f35c:	4b09      	ldr	r3, [pc, #36]	@ (3418f384 <ISP_Algo_AEC_Process+0x19c>)
3418f35e:	683a      	ldr	r2, [r7, #0]
3418f360:	4909      	ldr	r1, [pc, #36]	@ (3418f388 <ISP_Algo_AEC_Process+0x1a0>)
3418f362:	6878      	ldr	r0, [r7, #4]
3418f364:	f002 feee 	bl	34192144 <ISP_SVC_Stats_GetNext>
3418f368:	4603      	mov	r3, r0
3418f36a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3418f36e:	6a3b      	ldr	r3, [r7, #32]
3418f370:	2202      	movs	r2, #2
3418f372:	705a      	strb	r2, [r3, #1]
    break;
3418f374:	bf00      	nop
  }

  return ret;
3418f376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418f37a:	4618      	mov	r0, r3
3418f37c:	3728      	adds	r7, #40	@ 0x28
3418f37e:	46bd      	mov	sp, r7
3418f380:	bd80      	pop	{r7, pc}
3418f382:	bf00      	nop
3418f384:	341c11e0 	.word	0x341c11e0
3418f388:	3418f1cd 	.word	0x3418f1cd
3418f38c:	341c11b4 	.word	0x341c11b4
3418f390:	341c11c0 	.word	0x341c11c0
3418f394:	00000000 	.word	0x00000000

3418f398 <ISP_Algo_ApplyGammaInverse>:
  * @param  hIsp:  ISP device handle.
  * @param  comp: component value
  * @retval gamma corrected value
  */
double ISP_Algo_ApplyGammaInverse(ISP_HandleTypeDef *hIsp, uint32_t comp)
{
3418f398:	b580      	push	{r7, lr}
3418f39a:	b084      	sub	sp, #16
3418f39c:	af00      	add	r7, sp, #0
3418f39e:	6078      	str	r0, [r7, #4]
3418f3a0:	6039      	str	r1, [r7, #0]
  double out;

  /* Check if gamma is enabled */
  if (ISP_SVC_Misc_IsGammaEnabled(hIsp, 1 /*main pipe*/) != 0) {
3418f3a2:	2101      	movs	r1, #1
3418f3a4:	6878      	ldr	r0, [r7, #4]
3418f3a6:	f002 faf2 	bl	3419198e <ISP_SVC_Misc_IsGammaEnabled>
3418f3aa:	4603      	mov	r3, r0
3418f3ac:	2b00      	cmp	r3, #0
3418f3ae:	d019      	beq.n	3418f3e4 <ISP_Algo_ApplyGammaInverse+0x4c>
    out = 255 * pow((float)comp / 255, 1.0 / 2.2);
3418f3b0:	683b      	ldr	r3, [r7, #0]
3418f3b2:	ee07 3a90 	vmov	s15, r3
3418f3b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418f3ba:	eddf 6a17 	vldr	s13, [pc, #92]	@ 3418f418 <ISP_Algo_ApplyGammaInverse+0x80>
3418f3be:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418f3c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
3418f3c6:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 3418f408 <ISP_Algo_ApplyGammaInverse+0x70>
3418f3ca:	eeb0 0b47 	vmov.f64	d0, d7
3418f3ce:	f004 fea7 	bl	34194120 <pow>
3418f3d2:	eeb0 7b40 	vmov.f64	d7, d0
3418f3d6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 3418f410 <ISP_Algo_ApplyGammaInverse+0x78>
3418f3da:	ee27 7b06 	vmul.f64	d7, d7, d6
3418f3de:	ed87 7b02 	vstr	d7, [r7, #8]
3418f3e2:	e006      	b.n	3418f3f2 <ISP_Algo_ApplyGammaInverse+0x5a>
  }
  else
  {
    out = (double) comp;
3418f3e4:	683b      	ldr	r3, [r7, #0]
3418f3e6:	ee07 3a90 	vmov	s15, r3
3418f3ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3418f3ee:	ed87 7b02 	vstr	d7, [r7, #8]
  }
  return out;
3418f3f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
3418f3f6:	ec43 2b17 	vmov	d7, r2, r3
}
3418f3fa:	eeb0 0b47 	vmov.f64	d0, d7
3418f3fe:	3710      	adds	r7, #16
3418f400:	46bd      	mov	sp, r7
3418f402:	bd80      	pop	{r7, pc}
3418f404:	f3af 8000 	nop.w
3418f408:	d1745d17 	.word	0xd1745d17
3418f40c:	3fdd1745 	.word	0x3fdd1745
3418f410:	00000000 	.word	0x00000000
3418f414:	406fe000 	.word	0x406fe000
3418f418:	437f0000 	.word	0x437f0000

3418f41c <ISP_Algo_GetUpStat>:
  *         Recalculate average up statistics from collected down statistics
  * @param  hIsp:  ISP device handle.
  * @param  pStats: pointer to the statistics
  */
void ISP_Algo_GetUpStat(ISP_HandleTypeDef *hIsp, ISP_SVC_StatStateTypeDef *pStats)
{
3418f41c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418f420:	b09a      	sub	sp, #104	@ 0x68
3418f422:	af00      	add	r7, sp, #0
3418f424:	6378      	str	r0, [r7, #52]	@ 0x34
3418f426:	6339      	str	r1, [r7, #48]	@ 0x30
  ISP_ISPGainTypeDef ISPGain;
  ISP_BlackLevelTypeDef BlackLevel;
  int64_t upR, upG, upB;

  if ((ISP_SVC_ISP_GetGain(hIsp, &ISPGain) == ISP_OK) && (ISPGain.enable == 1))
3418f428:	f107 0340 	add.w	r3, r7, #64	@ 0x40
3418f42c:	4619      	mov	r1, r3
3418f42e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
3418f430:	f002 f840 	bl	341914b4 <ISP_SVC_ISP_GetGain>
3418f434:	4603      	mov	r3, r0
3418f436:	2b00      	cmp	r3, #0
3418f438:	f040 80a8 	bne.w	3418f58c <ISP_Algo_GetUpStat+0x170>
3418f43c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
3418f440:	2b01      	cmp	r3, #1
3418f442:	f040 80a3 	bne.w	3418f58c <ISP_Algo_GetUpStat+0x170>
  {

    /* reverse gain */
    upR = (int64_t) pStats->down.averageR * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainR;
3418f446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f448:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
3418f44c:	b2db      	uxtb	r3, r3
3418f44e:	2200      	movs	r2, #0
3418f450:	461c      	mov	r4, r3
3418f452:	4615      	mov	r5, r2
3418f454:	4b58      	ldr	r3, [pc, #352]	@ (3418f5b8 <ISP_Algo_GetUpStat+0x19c>)
3418f456:	fb03 f205 	mul.w	r2, r3, r5
3418f45a:	2300      	movs	r3, #0
3418f45c:	fb04 f303 	mul.w	r3, r4, r3
3418f460:	441a      	add	r2, r3
3418f462:	4b55      	ldr	r3, [pc, #340]	@ (3418f5b8 <ISP_Algo_GetUpStat+0x19c>)
3418f464:	fba4 1303 	umull	r1, r3, r4, r3
3418f468:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418f46a:	460b      	mov	r3, r1
3418f46c:	62bb      	str	r3, [r7, #40]	@ 0x28
3418f46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418f470:	18d3      	adds	r3, r2, r3
3418f472:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418f474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418f476:	2200      	movs	r2, #0
3418f478:	623b      	str	r3, [r7, #32]
3418f47a:	627a      	str	r2, [r7, #36]	@ 0x24
3418f47c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
3418f480:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3418f484:	f7f2 f85a 	bl	3418153c <__aeabi_ldivmod>
3418f488:	4602      	mov	r2, r0
3418f48a:	460b      	mov	r3, r1
3418f48c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    upG = (int64_t) pStats->down.averageG * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainG;
3418f490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f492:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
3418f496:	b2db      	uxtb	r3, r3
3418f498:	2200      	movs	r2, #0
3418f49a:	61bb      	str	r3, [r7, #24]
3418f49c:	61fa      	str	r2, [r7, #28]
3418f49e:	4b46      	ldr	r3, [pc, #280]	@ (3418f5b8 <ISP_Algo_GetUpStat+0x19c>)
3418f4a0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
3418f4a4:	462a      	mov	r2, r5
3418f4a6:	fb03 f202 	mul.w	r2, r3, r2
3418f4aa:	2300      	movs	r3, #0
3418f4ac:	4621      	mov	r1, r4
3418f4ae:	fb01 f303 	mul.w	r3, r1, r3
3418f4b2:	4413      	add	r3, r2
3418f4b4:	4a40      	ldr	r2, [pc, #256]	@ (3418f5b8 <ISP_Algo_GetUpStat+0x19c>)
3418f4b6:	4621      	mov	r1, r4
3418f4b8:	fba1 ab02 	umull	sl, fp, r1, r2
3418f4bc:	445b      	add	r3, fp
3418f4be:	469b      	mov	fp, r3
3418f4c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418f4c2:	2200      	movs	r2, #0
3418f4c4:	613b      	str	r3, [r7, #16]
3418f4c6:	617a      	str	r2, [r7, #20]
3418f4c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3418f4cc:	4650      	mov	r0, sl
3418f4ce:	4659      	mov	r1, fp
3418f4d0:	f7f2 f834 	bl	3418153c <__aeabi_ldivmod>
3418f4d4:	4602      	mov	r2, r0
3418f4d6:	460b      	mov	r3, r1
3418f4d8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
3418f4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f4de:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3418f4e2:	b2db      	uxtb	r3, r3
3418f4e4:	2200      	movs	r2, #0
3418f4e6:	60bb      	str	r3, [r7, #8]
3418f4e8:	60fa      	str	r2, [r7, #12]
3418f4ea:	4b33      	ldr	r3, [pc, #204]	@ (3418f5b8 <ISP_Algo_GetUpStat+0x19c>)
3418f4ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
3418f4f0:	462a      	mov	r2, r5
3418f4f2:	fb03 f202 	mul.w	r2, r3, r2
3418f4f6:	2300      	movs	r3, #0
3418f4f8:	4621      	mov	r1, r4
3418f4fa:	fb01 f303 	mul.w	r3, r1, r3
3418f4fe:	4413      	add	r3, r2
3418f500:	4a2d      	ldr	r2, [pc, #180]	@ (3418f5b8 <ISP_Algo_GetUpStat+0x19c>)
3418f502:	4621      	mov	r1, r4
3418f504:	fba1 8902 	umull	r8, r9, r1, r2
3418f508:	444b      	add	r3, r9
3418f50a:	4699      	mov	r9, r3
3418f50c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418f50e:	2200      	movs	r2, #0
3418f510:	603b      	str	r3, [r7, #0]
3418f512:	607a      	str	r2, [r7, #4]
3418f514:	e9d7 2300 	ldrd	r2, r3, [r7]
3418f518:	4640      	mov	r0, r8
3418f51a:	4649      	mov	r1, r9
3418f51c:	f7f2 f80e 	bl	3418153c <__aeabi_ldivmod>
3418f520:	4602      	mov	r2, r0
3418f522:	460b      	mov	r3, r1
3418f524:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    pStats->up.averageR = (uint32_t) upR;
3418f528:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
3418f52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f52e:	701a      	strb	r2, [r3, #0]
    pStats->up.averageG = (uint32_t) upG;
3418f530:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
3418f534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f536:	705a      	strb	r2, [r3, #1]
    pStats->up.averageB = (uint32_t) upB;
3418f538:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
3418f53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f53e:	709a      	strb	r2, [r3, #2]

    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
3418f540:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
3418f544:	4619      	mov	r1, r3
3418f546:	6b78      	ldr	r0, [r7, #52]	@ 0x34
3418f548:	f001 ff1c 	bl	34191384 <ISP_SVC_ISP_GetBlackLevel>
3418f54c:	4603      	mov	r3, r0
3418f54e:	2b00      	cmp	r3, #0
3418f550:	d12c      	bne.n	3418f5ac <ISP_Algo_GetUpStat+0x190>
3418f552:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
3418f556:	2b01      	cmp	r3, #1
3418f558:	d128      	bne.n	3418f5ac <ISP_Algo_GetUpStat+0x190>
    {
        /* reverse black level */
    pStats->up.averageR += BlackLevel.BLCR;
3418f55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f55c:	781a      	ldrb	r2, [r3, #0]
3418f55e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
3418f562:	4413      	add	r3, r2
3418f564:	b2da      	uxtb	r2, r3
3418f566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f568:	701a      	strb	r2, [r3, #0]
    pStats->up.averageG += BlackLevel.BLCG;
3418f56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f56c:	785a      	ldrb	r2, [r3, #1]
3418f56e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
3418f572:	4413      	add	r3, r2
3418f574:	b2da      	uxtb	r2, r3
3418f576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f578:	705a      	strb	r2, [r3, #1]
    pStats->up.averageB += BlackLevel.BLCB;
3418f57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f57c:	789a      	ldrb	r2, [r3, #2]
3418f57e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
3418f582:	4413      	add	r3, r2
3418f584:	b2da      	uxtb	r2, r3
3418f586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f588:	709a      	strb	r2, [r3, #2]
    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
3418f58a:	e00f      	b.n	3418f5ac <ISP_Algo_GetUpStat+0x190>
    }
  }
  else
  {
    pStats->up.averageR = pStats->down.averageR;
3418f58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f58e:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
3418f592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f594:	701a      	strb	r2, [r3, #0]
    pStats->up.averageG = pStats->down.averageG;
3418f596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f598:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
3418f59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f59e:	705a      	strb	r2, [r3, #1]
    pStats->up.averageB = pStats->down.averageB;
3418f5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f5a2:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
3418f5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f5a8:	709a      	strb	r2, [r3, #2]
  }
}
3418f5aa:	e000      	b.n	3418f5ae <ISP_Algo_GetUpStat+0x192>
    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
3418f5ac:	bf00      	nop
}
3418f5ae:	bf00      	nop
3418f5b0:	3768      	adds	r7, #104	@ 0x68
3418f5b2:	46bd      	mov	sp, r7
3418f5b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418f5b8:	05f5e100 	.word	0x05f5e100
3418f5bc:	00000000 	.word	0x00000000

3418f5c0 <ISP_Algo_ApplyCConv>:
  * @param  outG: pointer to Green component value after color conversion
  * @param  outB: pointer to Blue component value after color conversion
  * @retval None
  */
void ISP_Algo_ApplyCConv(ISP_HandleTypeDef *hIsp, uint32_t inR, uint32_t inG, uint32_t inB, uint32_t *outR, uint32_t *outG, uint32_t *outB)
{
3418f5c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418f5c4:	b0d0      	sub	sp, #320	@ 0x140
3418f5c6:	af00      	add	r7, sp, #0
3418f5c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
3418f5cc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
3418f5d0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
3418f5d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  ISP_ColorConvTypeDef colorConv;
  int64_t ccR, ccG, ccB;

  if ((ISP_SVC_ISP_GetColorConv(hIsp, &colorConv) == ISP_OK) && (colorConv.enable == 1))
3418f5d8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
3418f5dc:	4619      	mov	r1, r3
3418f5de:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
3418f5e2:	f002 f85d 	bl	341916a0 <ISP_SVC_ISP_GetColorConv>
3418f5e6:	4603      	mov	r3, r0
3418f5e8:	2b00      	cmp	r3, #0
3418f5ea:	f040 8216 	bne.w	3418fa1a <ISP_Algo_ApplyCConv+0x45a>
3418f5ee:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
3418f5f2:	2b01      	cmp	r3, #1
3418f5f4:	f040 8211 	bne.w	3418fa1a <ISP_Algo_ApplyCConv+0x45a>
  {
    /* Apply ColorConversion matrix to the input components */
    ccR = (int64_t) inR * colorConv.coeff[0][0] + (int64_t) inG * colorConv.coeff[0][1] + (int64_t) inB * colorConv.coeff[0][2];
3418f5f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
3418f5fc:	2200      	movs	r2, #0
3418f5fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
3418f602:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
3418f606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
3418f60a:	17da      	asrs	r2, r3, #31
3418f60c:	461c      	mov	r4, r3
3418f60e:	4615      	mov	r5, r2
3418f610:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
3418f614:	460b      	mov	r3, r1
3418f616:	fb04 f203 	mul.w	r2, r4, r3
3418f61a:	4603      	mov	r3, r0
3418f61c:	fb03 f305 	mul.w	r3, r3, r5
3418f620:	4413      	add	r3, r2
3418f622:	4602      	mov	r2, r0
3418f624:	fba2 ab04 	umull	sl, fp, r2, r4
3418f628:	445b      	add	r3, fp
3418f62a:	469b      	mov	fp, r3
3418f62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
3418f630:	2200      	movs	r2, #0
3418f632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
3418f636:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
3418f63a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
3418f63e:	17da      	asrs	r2, r3, #31
3418f640:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3418f644:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
3418f648:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
3418f64c:	460b      	mov	r3, r1
3418f64e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
3418f652:	4622      	mov	r2, r4
3418f654:	fb02 f203 	mul.w	r2, r2, r3
3418f658:	e9c7 453a 	strd	r4, r5, [r7, #232]	@ 0xe8
3418f65c:	462b      	mov	r3, r5
3418f65e:	4604      	mov	r4, r0
3418f660:	460d      	mov	r5, r1
3418f662:	4621      	mov	r1, r4
3418f664:	fb01 f303 	mul.w	r3, r1, r3
3418f668:	4413      	add	r3, r2
3418f66a:	4622      	mov	r2, r4
3418f66c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
3418f670:	fba2 8901 	umull	r8, r9, r2, r1
3418f674:	444b      	add	r3, r9
3418f676:	4699      	mov	r9, r3
3418f678:	eb1a 0308 	adds.w	r3, sl, r8
3418f67c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
3418f680:	eb4b 0309 	adc.w	r3, fp, r9
3418f684:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3418f688:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
3418f68c:	2200      	movs	r2, #0
3418f68e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
3418f692:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
3418f696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
3418f69a:	17da      	asrs	r2, r3, #31
3418f69c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
3418f6a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
3418f6a4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
3418f6a8:	462b      	mov	r3, r5
3418f6aa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
3418f6ae:	4642      	mov	r2, r8
3418f6b0:	fb02 f203 	mul.w	r2, r2, r3
3418f6b4:	464b      	mov	r3, r9
3418f6b6:	4621      	mov	r1, r4
3418f6b8:	fb01 f303 	mul.w	r3, r1, r3
3418f6bc:	4413      	add	r3, r2
3418f6be:	4622      	mov	r2, r4
3418f6c0:	4641      	mov	r1, r8
3418f6c2:	fba2 1201 	umull	r1, r2, r2, r1
3418f6c6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
3418f6ca:	460a      	mov	r2, r1
3418f6cc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
3418f6d0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
3418f6d4:	4413      	add	r3, r2
3418f6d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3418f6da:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
3418f6de:	4623      	mov	r3, r4
3418f6e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3418f6e4:	4602      	mov	r2, r0
3418f6e6:	189b      	adds	r3, r3, r2
3418f6e8:	613b      	str	r3, [r7, #16]
3418f6ea:	460b      	mov	r3, r1
3418f6ec:	462a      	mov	r2, r5
3418f6ee:	eb42 0303 	adc.w	r3, r2, r3
3418f6f2:	617b      	str	r3, [r7, #20]
3418f6f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3418f6f8:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    ccG = (int64_t) inR * colorConv.coeff[1][0] + (int64_t) inG * colorConv.coeff[1][1] + (int64_t) inB * colorConv.coeff[1][2];
3418f6fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
3418f700:	2200      	movs	r2, #0
3418f702:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
3418f706:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
3418f70a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
3418f70e:	17da      	asrs	r2, r3, #31
3418f710:	67bb      	str	r3, [r7, #120]	@ 0x78
3418f712:	67fa      	str	r2, [r7, #124]	@ 0x7c
3418f714:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
3418f718:	462b      	mov	r3, r5
3418f71a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
3418f71e:	4642      	mov	r2, r8
3418f720:	fb02 f203 	mul.w	r2, r2, r3
3418f724:	464b      	mov	r3, r9
3418f726:	4621      	mov	r1, r4
3418f728:	fb01 f303 	mul.w	r3, r1, r3
3418f72c:	4413      	add	r3, r2
3418f72e:	4622      	mov	r2, r4
3418f730:	4641      	mov	r1, r8
3418f732:	fba2 1201 	umull	r1, r2, r2, r1
3418f736:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
3418f73a:	460a      	mov	r2, r1
3418f73c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
3418f740:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
3418f744:	4413      	add	r3, r2
3418f746:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3418f74a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
3418f74e:	2200      	movs	r2, #0
3418f750:	673b      	str	r3, [r7, #112]	@ 0x70
3418f752:	677a      	str	r2, [r7, #116]	@ 0x74
3418f754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
3418f758:	17da      	asrs	r2, r3, #31
3418f75a:	66bb      	str	r3, [r7, #104]	@ 0x68
3418f75c:	66fa      	str	r2, [r7, #108]	@ 0x6c
3418f75e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
3418f762:	462b      	mov	r3, r5
3418f764:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
3418f768:	4642      	mov	r2, r8
3418f76a:	fb02 f203 	mul.w	r2, r2, r3
3418f76e:	464b      	mov	r3, r9
3418f770:	4621      	mov	r1, r4
3418f772:	fb01 f303 	mul.w	r3, r1, r3
3418f776:	4413      	add	r3, r2
3418f778:	4622      	mov	r2, r4
3418f77a:	4641      	mov	r1, r8
3418f77c:	fba2 1201 	umull	r1, r2, r2, r1
3418f780:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
3418f784:	460a      	mov	r2, r1
3418f786:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
3418f78a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
3418f78e:	4413      	add	r3, r2
3418f790:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3418f794:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
3418f798:	4623      	mov	r3, r4
3418f79a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3418f79e:	4602      	mov	r2, r0
3418f7a0:	189b      	adds	r3, r3, r2
3418f7a2:	663b      	str	r3, [r7, #96]	@ 0x60
3418f7a4:	460b      	mov	r3, r1
3418f7a6:	462a      	mov	r2, r5
3418f7a8:	eb42 0303 	adc.w	r3, r2, r3
3418f7ac:	667b      	str	r3, [r7, #100]	@ 0x64
3418f7ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
3418f7b2:	2200      	movs	r2, #0
3418f7b4:	65bb      	str	r3, [r7, #88]	@ 0x58
3418f7b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
3418f7b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
3418f7bc:	17da      	asrs	r2, r3, #31
3418f7be:	653b      	str	r3, [r7, #80]	@ 0x50
3418f7c0:	657a      	str	r2, [r7, #84]	@ 0x54
3418f7c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
3418f7c6:	462b      	mov	r3, r5
3418f7c8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
3418f7cc:	4642      	mov	r2, r8
3418f7ce:	fb02 f203 	mul.w	r2, r2, r3
3418f7d2:	464b      	mov	r3, r9
3418f7d4:	4621      	mov	r1, r4
3418f7d6:	fb01 f303 	mul.w	r3, r1, r3
3418f7da:	4413      	add	r3, r2
3418f7dc:	4622      	mov	r2, r4
3418f7de:	4641      	mov	r1, r8
3418f7e0:	fba2 1201 	umull	r1, r2, r2, r1
3418f7e4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
3418f7e8:	460a      	mov	r2, r1
3418f7ea:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
3418f7ee:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
3418f7f2:	4413      	add	r3, r2
3418f7f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3418f7f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
3418f7fc:	4623      	mov	r3, r4
3418f7fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3418f802:	4602      	mov	r2, r0
3418f804:	189b      	adds	r3, r3, r2
3418f806:	60bb      	str	r3, [r7, #8]
3418f808:	460b      	mov	r3, r1
3418f80a:	462a      	mov	r2, r5
3418f80c:	eb42 0303 	adc.w	r3, r2, r3
3418f810:	60fb      	str	r3, [r7, #12]
3418f812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
3418f816:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    ccB = (int64_t) inR * colorConv.coeff[2][0] + (int64_t) inG * colorConv.coeff[2][1] + (int64_t) inB * colorConv.coeff[2][2];
3418f81a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
3418f81e:	2200      	movs	r2, #0
3418f820:	64bb      	str	r3, [r7, #72]	@ 0x48
3418f822:	64fa      	str	r2, [r7, #76]	@ 0x4c
3418f824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
3418f828:	17da      	asrs	r2, r3, #31
3418f82a:	643b      	str	r3, [r7, #64]	@ 0x40
3418f82c:	647a      	str	r2, [r7, #68]	@ 0x44
3418f82e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
3418f832:	462b      	mov	r3, r5
3418f834:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
3418f838:	4642      	mov	r2, r8
3418f83a:	fb02 f203 	mul.w	r2, r2, r3
3418f83e:	464b      	mov	r3, r9
3418f840:	4621      	mov	r1, r4
3418f842:	fb01 f303 	mul.w	r3, r1, r3
3418f846:	4413      	add	r3, r2
3418f848:	4622      	mov	r2, r4
3418f84a:	4641      	mov	r1, r8
3418f84c:	fba2 1201 	umull	r1, r2, r2, r1
3418f850:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
3418f854:	460a      	mov	r2, r1
3418f856:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
3418f85a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
3418f85e:	4413      	add	r3, r2
3418f860:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3418f864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
3418f868:	2200      	movs	r2, #0
3418f86a:	63bb      	str	r3, [r7, #56]	@ 0x38
3418f86c:	63fa      	str	r2, [r7, #60]	@ 0x3c
3418f86e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
3418f872:	17da      	asrs	r2, r3, #31
3418f874:	633b      	str	r3, [r7, #48]	@ 0x30
3418f876:	637a      	str	r2, [r7, #52]	@ 0x34
3418f878:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
3418f87c:	462b      	mov	r3, r5
3418f87e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
3418f882:	4642      	mov	r2, r8
3418f884:	fb02 f203 	mul.w	r2, r2, r3
3418f888:	464b      	mov	r3, r9
3418f88a:	4621      	mov	r1, r4
3418f88c:	fb01 f303 	mul.w	r3, r1, r3
3418f890:	4413      	add	r3, r2
3418f892:	4622      	mov	r2, r4
3418f894:	4641      	mov	r1, r8
3418f896:	fba2 1201 	umull	r1, r2, r2, r1
3418f89a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
3418f89e:	460a      	mov	r2, r1
3418f8a0:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
3418f8a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
3418f8a8:	4413      	add	r3, r2
3418f8aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3418f8ae:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
3418f8b2:	4623      	mov	r3, r4
3418f8b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3418f8b8:	4602      	mov	r2, r0
3418f8ba:	189b      	adds	r3, r3, r2
3418f8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
3418f8be:	460b      	mov	r3, r1
3418f8c0:	462a      	mov	r2, r5
3418f8c2:	eb42 0303 	adc.w	r3, r2, r3
3418f8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418f8c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
3418f8cc:	2200      	movs	r2, #0
3418f8ce:	623b      	str	r3, [r7, #32]
3418f8d0:	627a      	str	r2, [r7, #36]	@ 0x24
3418f8d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
3418f8d6:	17da      	asrs	r2, r3, #31
3418f8d8:	61bb      	str	r3, [r7, #24]
3418f8da:	61fa      	str	r2, [r7, #28]
3418f8dc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
3418f8e0:	462b      	mov	r3, r5
3418f8e2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
3418f8e6:	4642      	mov	r2, r8
3418f8e8:	fb02 f203 	mul.w	r2, r2, r3
3418f8ec:	464b      	mov	r3, r9
3418f8ee:	4621      	mov	r1, r4
3418f8f0:	fb01 f303 	mul.w	r3, r1, r3
3418f8f4:	4413      	add	r3, r2
3418f8f6:	4622      	mov	r2, r4
3418f8f8:	4641      	mov	r1, r8
3418f8fa:	fba2 1201 	umull	r1, r2, r2, r1
3418f8fe:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
3418f902:	460a      	mov	r2, r1
3418f904:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
3418f908:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
3418f90c:	4413      	add	r3, r2
3418f90e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3418f912:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
3418f916:	4623      	mov	r3, r4
3418f918:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3418f91c:	4602      	mov	r2, r0
3418f91e:	189b      	adds	r3, r3, r2
3418f920:	603b      	str	r3, [r7, #0]
3418f922:	460b      	mov	r3, r1
3418f924:	462a      	mov	r2, r5
3418f926:	eb42 0303 	adc.w	r3, r2, r3
3418f92a:	607b      	str	r3, [r7, #4]
3418f92c:	e9d7 2300 	ldrd	r2, r3, [r7]
3418f930:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    ccR /= ISP_CCM_PRECISION_FACTOR;
3418f934:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3418f938:	a343      	add	r3, pc, #268	@ (adr r3, 3418fa48 <ISP_Algo_ApplyCConv+0x488>)
3418f93a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f93e:	f7f1 fdfd 	bl	3418153c <__aeabi_ldivmod>
3418f942:	4602      	mov	r2, r0
3418f944:	460b      	mov	r3, r1
3418f946:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    ccG /= ISP_CCM_PRECISION_FACTOR;
3418f94a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3418f94e:	a33e      	add	r3, pc, #248	@ (adr r3, 3418fa48 <ISP_Algo_ApplyCConv+0x488>)
3418f950:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f954:	f7f1 fdf2 	bl	3418153c <__aeabi_ldivmod>
3418f958:	4602      	mov	r2, r0
3418f95a:	460b      	mov	r3, r1
3418f95c:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    ccB /= ISP_CCM_PRECISION_FACTOR;
3418f960:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3418f964:	a338      	add	r3, pc, #224	@ (adr r3, 3418fa48 <ISP_Algo_ApplyCConv+0x488>)
3418f966:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f96a:	f7f1 fde7 	bl	3418153c <__aeabi_ldivmod>
3418f96e:	4602      	mov	r2, r0
3418f970:	460b      	mov	r3, r1
3418f972:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    /* Clamp values to 0-255 */
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
3418f976:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
3418f97a:	2b00      	cmp	r3, #0
3418f97c:	db0b      	blt.n	3418f996 <ISP_Algo_ApplyCConv+0x3d6>
3418f97e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
3418f982:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3418f986:	f173 0100 	sbcs.w	r1, r3, #0
3418f98a:	db08      	blt.n	3418f99e <ISP_Algo_ApplyCConv+0x3de>
3418f98c:	f04f 02ff 	mov.w	r2, #255	@ 0xff
3418f990:	f04f 0300 	mov.w	r3, #0
3418f994:	e003      	b.n	3418f99e <ISP_Algo_ApplyCConv+0x3de>
3418f996:	f04f 0200 	mov.w	r2, #0
3418f99a:	f04f 0300 	mov.w	r3, #0
3418f99e:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
3418f9a2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
3418f9a6:	2b00      	cmp	r3, #0
3418f9a8:	db0b      	blt.n	3418f9c2 <ISP_Algo_ApplyCConv+0x402>
3418f9aa:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
3418f9ae:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3418f9b2:	f173 0100 	sbcs.w	r1, r3, #0
3418f9b6:	db08      	blt.n	3418f9ca <ISP_Algo_ApplyCConv+0x40a>
3418f9b8:	f04f 02ff 	mov.w	r2, #255	@ 0xff
3418f9bc:	f04f 0300 	mov.w	r3, #0
3418f9c0:	e003      	b.n	3418f9ca <ISP_Algo_ApplyCConv+0x40a>
3418f9c2:	f04f 0200 	mov.w	r2, #0
3418f9c6:	f04f 0300 	mov.w	r3, #0
3418f9ca:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
3418f9ce:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
3418f9d2:	2b00      	cmp	r3, #0
3418f9d4:	db0b      	blt.n	3418f9ee <ISP_Algo_ApplyCConv+0x42e>
3418f9d6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
3418f9da:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3418f9de:	f173 0100 	sbcs.w	r1, r3, #0
3418f9e2:	db08      	blt.n	3418f9f6 <ISP_Algo_ApplyCConv+0x436>
3418f9e4:	f04f 02ff 	mov.w	r2, #255	@ 0xff
3418f9e8:	f04f 0300 	mov.w	r3, #0
3418f9ec:	e003      	b.n	3418f9f6 <ISP_Algo_ApplyCConv+0x436>
3418f9ee:	f04f 0200 	mov.w	r2, #0
3418f9f2:	f04f 0300 	mov.w	r3, #0
3418f9f6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    *outR = (uint32_t) ccR;
3418f9fa:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
3418f9fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
3418fa02:	601a      	str	r2, [r3, #0]
    *outG = (uint32_t) ccG;
3418fa04:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
3418fa08:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
3418fa0c:	601a      	str	r2, [r3, #0]
    *outB = (uint32_t) ccB;
3418fa0e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
3418fa12:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
3418fa16:	601a      	str	r2, [r3, #0]
3418fa18:	e00f      	b.n	3418fa3a <ISP_Algo_ApplyCConv+0x47a>
  }
  else
  {
    *outR = inR;
3418fa1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
3418fa1e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
3418fa22:	601a      	str	r2, [r3, #0]
    *outG = inG;
3418fa24:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
3418fa28:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
3418fa2c:	601a      	str	r2, [r3, #0]
    *outB = inB;
3418fa2e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
3418fa32:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
3418fa36:	601a      	str	r2, [r3, #0]
  }
}
3418fa38:	bf00      	nop
3418fa3a:	bf00      	nop
3418fa3c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
3418fa40:	46bd      	mov	sp, r7
3418fa42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418fa46:	bf00      	nop
3418fa48:	05f5e100 	.word	0x05f5e100
3418fa4c:	00000000 	.word	0x00000000

3418fa50 <ISP_Algo_AWB_Init>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_Init(void *hIsp, void *pAlgo)
{
3418fa50:	b580      	push	{r7, lr}
3418fa52:	b084      	sub	sp, #16
3418fa54:	af00      	add	r7, sp, #0
3418fa56:	6078      	str	r0, [r7, #4]
3418fa58:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3418fa5a:	683b      	ldr	r3, [r7, #0]
3418fa5c:	60fb      	str	r3, [r7, #12]

  /* Create estimator */
  pIspAWBestimator = evision_api_awb_new(log_cb);
3418fa5e:	480a      	ldr	r0, [pc, #40]	@ (3418fa88 <ISP_Algo_AWB_Init+0x38>)
3418fa60:	f7f1 fa60 	bl	34180f24 <evision_api_awb_new>
3418fa64:	4603      	mov	r3, r0
3418fa66:	4a09      	ldr	r2, [pc, #36]	@ (3418fa8c <ISP_Algo_AWB_Init+0x3c>)
3418fa68:	6013      	str	r3, [r2, #0]
  if (pIspAWBestimator == NULL)
3418fa6a:	4b08      	ldr	r3, [pc, #32]	@ (3418fa8c <ISP_Algo_AWB_Init+0x3c>)
3418fa6c:	681b      	ldr	r3, [r3, #0]
3418fa6e:	2b00      	cmp	r3, #0
3418fa70:	d101      	bne.n	3418fa76 <ISP_Algo_AWB_Init+0x26>
  {
    return ISP_ERR_ALGO;
3418fa72:	23be      	movs	r3, #190	@ 0xbe
3418fa74:	e003      	b.n	3418fa7e <ISP_Algo_AWB_Init+0x2e>
  }

  /* Continue the initialization in ISP_Algo_AWB_Process() function when state is ISP_ALGO_STATE_INIT.
   * This allows to read the IQ params after an algo stop/start cycle */
  algo->state = ISP_ALGO_STATE_INIT;
3418fa76:	68fb      	ldr	r3, [r7, #12]
3418fa78:	2200      	movs	r2, #0
3418fa7a:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3418fa7c:	2300      	movs	r3, #0
}
3418fa7e:	4618      	mov	r0, r3
3418fa80:	3710      	adds	r7, #16
3418fa82:	46bd      	mov	sp, r7
3418fa84:	bd80      	pop	{r7, pc}
3418fa86:	bf00      	nop
3418fa88:	3418f081 	.word	0x3418f081
3418fa8c:	341c11b8 	.word	0x341c11b8

3418fa90 <ISP_Algo_AWB_DeInit>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_DeInit(void *hIsp, void *pAlgo)
{
3418fa90:	b580      	push	{r7, lr}
3418fa92:	b082      	sub	sp, #8
3418fa94:	af00      	add	r7, sp, #0
3418fa96:	6078      	str	r0, [r7, #4]
3418fa98:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  if (pIspAWBestimator != NULL)
3418fa9a:	4b07      	ldr	r3, [pc, #28]	@ (3418fab8 <ISP_Algo_AWB_DeInit+0x28>)
3418fa9c:	681b      	ldr	r3, [r3, #0]
3418fa9e:	2b00      	cmp	r3, #0
3418faa0:	d004      	beq.n	3418faac <ISP_Algo_AWB_DeInit+0x1c>
  {
    evision_api_awb_delete(pIspAWBestimator);
3418faa2:	4b05      	ldr	r3, [pc, #20]	@ (3418fab8 <ISP_Algo_AWB_DeInit+0x28>)
3418faa4:	681b      	ldr	r3, [r3, #0]
3418faa6:	4618      	mov	r0, r3
3418faa8:	f7f1 fa58 	bl	34180f5c <evision_api_awb_delete>
  }

  return ISP_OK;
3418faac:	2300      	movs	r3, #0
}
3418faae:	4618      	mov	r0, r3
3418fab0:	3708      	adds	r7, #8
3418fab2:	46bd      	mov	sp, r7
3418fab4:	bd80      	pop	{r7, pc}
3418fab6:	bf00      	nop
3418fab8:	341c11b8 	.word	0x341c11b8

3418fabc <ISP_Algo_AWB_StatCb>:
  *         Callback informing that statistics are available
  * @param  pAlgo: ISP algorithm handle.
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_StatCb(ISP_AlgoTypeDef *pAlgo)
{
3418fabc:	b480      	push	{r7}
3418fabe:	b083      	sub	sp, #12
3418fac0:	af00      	add	r7, sp, #0
3418fac2:	6078      	str	r0, [r7, #4]
  /* Update State */
  if (pAlgo->state != ISP_ALGO_STATE_INIT)
3418fac4:	687b      	ldr	r3, [r7, #4]
3418fac6:	785b      	ldrb	r3, [r3, #1]
3418fac8:	2b00      	cmp	r3, #0
3418faca:	d002      	beq.n	3418fad2 <ISP_Algo_AWB_StatCb+0x16>
  {
    pAlgo->state = ISP_ALGO_STATE_STAT_READY;
3418facc:	687b      	ldr	r3, [r7, #4]
3418face:	2203      	movs	r2, #3
3418fad0:	705a      	strb	r2, [r3, #1]
  }

  return ISP_OK;
3418fad2:	2300      	movs	r3, #0
}
3418fad4:	4618      	mov	r0, r3
3418fad6:	370c      	adds	r7, #12
3418fad8:	46bd      	mov	sp, r7
3418fada:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fade:	4770      	bx	lr

3418fae0 <ISP_Algo_AWB_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_Process(void *hIsp, void *pAlgo)
{
3418fae0:	b580      	push	{r7, lr}
3418fae2:	b0b6      	sub	sp, #216	@ 0xd8
3418fae4:	af04      	add	r7, sp, #16
3418fae6:	6078      	str	r0, [r7, #4]
3418fae8:	6039      	str	r1, [r7, #0]
  static evision_awb_profile_t awbProfiles[ISP_AWB_COLORTEMP_REF];
  static float colorTempThresholds[ISP_AWB_COLORTEMP_REF - 1];
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_ColorConvTypeDef ColorConvConfig;
  ISP_ISPGainTypeDef ISPGainConfig;
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3418faea:	683b      	ldr	r3, [r7, #0]
3418faec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  ISP_StatusTypeDef ret_stat, ret = ISP_OK;
3418faf0:	2300      	movs	r3, #0
3418faf2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  evision_return_t e_ret;
  uint32_t ccAvgR, ccAvgG, ccAvgB, colorTemp, i, j, profId, profNb;
  float cfaGains[4], ccmCoeffs[3][3], ccmOffsets[3] = { 0 };
3418faf6:	f107 0320 	add.w	r3, r7, #32
3418fafa:	2200      	movs	r2, #0
3418fafc:	601a      	str	r2, [r3, #0]
3418fafe:	605a      	str	r2, [r3, #4]
3418fb00:	609a      	str	r2, [r3, #8]
  double meas[3];
  static uint32_t statsHistory[3][3] = { 0 };
  static uint32_t colorTempHistory[2] = { 0 };
  static uint8_t skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_INIT;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418fb02:	6878      	ldr	r0, [r7, #4]
3418fb04:	f001 ffce 	bl	34191aa4 <ISP_SVC_IQParam_Get>
3418fb08:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

  if (IQParamConfig->AWBAlgo.enable == false)
3418fb0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418fb10:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3418fb14:	2b00      	cmp	r3, #0
3418fb16:	d104      	bne.n	3418fb22 <ISP_Algo_AWB_Process+0x42>
  {
    enableCurrent = false;
3418fb18:	4bcd      	ldr	r3, [pc, #820]	@ (3418fe50 <ISP_Algo_AWB_Process+0x370>)
3418fb1a:	2200      	movs	r2, #0
3418fb1c:	701a      	strb	r2, [r3, #0]
    return ISP_OK;
3418fb1e:	2300      	movs	r3, #0
3418fb20:	e38a      	b.n	34190238 <ISP_Algo_AWB_Process+0x758>
  }
  else if ((enableCurrent == false) || (IQParamConfig->AWBAlgo.enable == ISP_AWB_ENABLE_RECONFIGURE))
3418fb22:	4bcb      	ldr	r3, [pc, #812]	@ (3418fe50 <ISP_Algo_AWB_Process+0x370>)
3418fb24:	781b      	ldrb	r3, [r3, #0]
3418fb26:	2b00      	cmp	r3, #0
3418fb28:	d005      	beq.n	3418fb36 <ISP_Algo_AWB_Process+0x56>
3418fb2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418fb2e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3418fb32:	2bff      	cmp	r3, #255	@ 0xff
3418fb34:	d10e      	bne.n	3418fb54 <ISP_Algo_AWB_Process+0x74>
  {
    /* Start or resume algo : set state to INIT in order to read the IQ params */
    algo->state = ISP_ALGO_STATE_INIT;
3418fb36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3418fb3a:	2200      	movs	r2, #0
3418fb3c:	705a      	strb	r2, [r3, #1]
    IQParamConfig->AWBAlgo.enable = true;
3418fb3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418fb42:	2201      	movs	r2, #1
3418fb44:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
    reconfigureRequest = true;
3418fb48:	4bc2      	ldr	r3, [pc, #776]	@ (3418fe54 <ISP_Algo_AWB_Process+0x374>)
3418fb4a:	2201      	movs	r2, #1
3418fb4c:	701a      	strb	r2, [r3, #0]
    enableCurrent = true;
3418fb4e:	4bc0      	ldr	r3, [pc, #768]	@ (3418fe50 <ISP_Algo_AWB_Process+0x370>)
3418fb50:	2201      	movs	r2, #1
3418fb52:	701a      	strb	r2, [r3, #0]
  }

  switch(algo->state)
3418fb54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3418fb58:	785b      	ldrb	r3, [r3, #1]
3418fb5a:	2b03      	cmp	r3, #3
3418fb5c:	f200 836a 	bhi.w	34190234 <ISP_Algo_AWB_Process+0x754>
3418fb60:	a201      	add	r2, pc, #4	@ (adr r2, 3418fb68 <ISP_Algo_AWB_Process+0x88>)
3418fb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418fb66:	bf00      	nop
3418fb68:	3418fb79 	.word	0x3418fb79
3418fb6c:	3418fe07 	.word	0x3418fe07
3418fb70:	34190235 	.word	0x34190235
3418fb74:	3418fe75 	.word	0x3418fe75
  {
  case ISP_ALGO_STATE_INIT:
    /* Set profiles (color temperature, gains, color conv matrix) */
    profNb = 0;
3418fb78:	2300      	movs	r3, #0
3418fb7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3418fb7e:	2300      	movs	r3, #0
3418fb80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3418fb84:	e0ca      	b.n	3418fd1c <ISP_Algo_AWB_Process+0x23c>
    {
      colorTemp = IQParamConfig->AWBAlgo.referenceColorTemp[profId];
3418fb86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418fb8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418fb8e:	3344      	adds	r3, #68	@ 0x44
3418fb90:	009b      	lsls	r3, r3, #2
3418fb92:	4413      	add	r3, r2
3418fb94:	685b      	ldr	r3, [r3, #4]
3418fb96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if (colorTemp == 0)
3418fb9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
3418fb9e:	2b00      	cmp	r3, #0
3418fba0:	f000 80c2 	beq.w	3418fd28 <ISP_Algo_AWB_Process+0x248>
        break;

      if (profNb > 0)
3418fba4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418fba8:	2b00      	cmp	r3, #0
3418fbaa:	d01b      	beq.n	3418fbe4 <ISP_Algo_AWB_Process+0x104>
      {
        /* Profile decision threshold = lowest ref. temperature + 1/4 of the distance between two reference temperatures */
        colorTempThresholds[profNb - 1] = (float) ((colorTemp + 3 * IQParamConfig->AWBAlgo.referenceColorTemp[profId - 1]) /4 );
3418fbac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418fbb0:	3b01      	subs	r3, #1
3418fbb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418fbb6:	3344      	adds	r3, #68	@ 0x44
3418fbb8:	009b      	lsls	r3, r3, #2
3418fbba:	4413      	add	r3, r2
3418fbbc:	685a      	ldr	r2, [r3, #4]
3418fbbe:	4613      	mov	r3, r2
3418fbc0:	005b      	lsls	r3, r3, #1
3418fbc2:	441a      	add	r2, r3
3418fbc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
3418fbc8:	4413      	add	r3, r2
3418fbca:	089a      	lsrs	r2, r3, #2
3418fbcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418fbd0:	3b01      	subs	r3, #1
3418fbd2:	ee07 2a90 	vmov	s15, r2
3418fbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
3418fbda:	4a9f      	ldr	r2, [pc, #636]	@ (3418fe58 <ISP_Algo_AWB_Process+0x378>)
3418fbdc:	009b      	lsls	r3, r3, #2
3418fbde:	4413      	add	r3, r2
3418fbe0:	edc3 7a00 	vstr	s15, [r3]
      }

      /* Set cfa gains (RGGB) */
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
3418fbe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418fbe8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3418fbec:	324a      	adds	r2, #74	@ 0x4a
3418fbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3418fbf2:	ee07 3a90 	vmov	s15, r3
3418fbf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418fbfa:	eddf 6a98 	vldr	s13, [pc, #608]	@ 3418fe5c <ISP_Algo_AWB_Process+0x37c>
3418fbfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418fc02:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
3418fc06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418fc0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418fc0e:	334e      	adds	r3, #78	@ 0x4e
3418fc10:	009b      	lsls	r3, r3, #2
3418fc12:	4413      	add	r3, r2
3418fc14:	685b      	ldr	r3, [r3, #4]
3418fc16:	ee07 3a90 	vmov	s15, r3
3418fc1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418fc1e:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 3418fe5c <ISP_Algo_AWB_Process+0x37c>
3418fc22:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418fc26:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      cfaGains[2] = cfaGains[1];
3418fc2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418fc2c:	65bb      	str	r3, [r7, #88]	@ 0x58
      cfaGains[3] = (float) IQParamConfig->AWBAlgo.ispGainB[profId] / ISP_GAIN_PRECISION_FACTOR;
3418fc2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418fc32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3418fc36:	3254      	adds	r2, #84	@ 0x54
3418fc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3418fc3c:	ee07 3a90 	vmov	s15, r3
3418fc40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418fc44:	eddf 6a85 	vldr	s13, [pc, #532]	@ 3418fe5c <ISP_Algo_AWB_Process+0x37c>
3418fc48:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418fc4c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

      /* Set CCM Coeff */
      for (i = 0; i < 3; i++)
3418fc50:	2300      	movs	r3, #0
3418fc52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3418fc56:	e03b      	b.n	3418fcd0 <ISP_Algo_AWB_Process+0x1f0>
      {
        for (j = 0; j < 3; j++)
3418fc58:	2300      	movs	r3, #0
3418fc5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3418fc5e:	e02e      	b.n	3418fcbe <ISP_Algo_AWB_Process+0x1de>
        {
          ccmCoeffs[i][j] = (float) IQParamConfig->AWBAlgo.coeff[profId][i][j] / ISP_CCM_PRECISION_FACTOR;
3418fc60:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
3418fc64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3418fc68:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
3418fc6c:	461a      	mov	r2, r3
3418fc6e:	0052      	lsls	r2, r2, #1
3418fc70:	441a      	add	r2, r3
3418fc72:	460b      	mov	r3, r1
3418fc74:	00db      	lsls	r3, r3, #3
3418fc76:	440b      	add	r3, r1
3418fc78:	441a      	add	r2, r3
3418fc7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
3418fc7e:	4413      	add	r3, r2
3418fc80:	3358      	adds	r3, #88	@ 0x58
3418fc82:	009b      	lsls	r3, r3, #2
3418fc84:	4403      	add	r3, r0
3418fc86:	685b      	ldr	r3, [r3, #4]
3418fc88:	ee07 3a90 	vmov	s15, r3
3418fc8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3418fc90:	eddf 6a72 	vldr	s13, [pc, #456]	@ 3418fe5c <ISP_Algo_AWB_Process+0x37c>
3418fc94:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418fc98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
3418fc9c:	4613      	mov	r3, r2
3418fc9e:	005b      	lsls	r3, r3, #1
3418fca0:	4413      	add	r3, r2
3418fca2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
3418fca6:	4413      	add	r3, r2
3418fca8:	009b      	lsls	r3, r3, #2
3418fcaa:	33c8      	adds	r3, #200	@ 0xc8
3418fcac:	443b      	add	r3, r7
3418fcae:	3b9c      	subs	r3, #156	@ 0x9c
3418fcb0:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0; j < 3; j++)
3418fcb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
3418fcb8:	3301      	adds	r3, #1
3418fcba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3418fcbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
3418fcc2:	2b02      	cmp	r3, #2
3418fcc4:	d9cc      	bls.n	3418fc60 <ISP_Algo_AWB_Process+0x180>
      for (i = 0; i < 3; i++)
3418fcc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3418fcca:	3301      	adds	r3, #1
3418fccc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3418fcd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3418fcd4:	2b02      	cmp	r3, #2
3418fcd6:	d9bf      	bls.n	3418fc58 <ISP_Algo_AWB_Process+0x178>
        }
      }

      /* Set profile */
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
3418fcd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3418fcdc:	4613      	mov	r3, r2
3418fcde:	011b      	lsls	r3, r3, #4
3418fce0:	4413      	add	r3, r2
3418fce2:	009b      	lsls	r3, r3, #2
3418fce4:	4a5e      	ldr	r2, [pc, #376]	@ (3418fe60 <ISP_Algo_AWB_Process+0x380>)
3418fce6:	1898      	adds	r0, r3, r2
3418fce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
3418fcec:	ee07 3a90 	vmov	s15, r3
3418fcf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
3418fcf4:	f107 0320 	add.w	r3, r7, #32
3418fcf8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
3418fcfc:	f107 0150 	add.w	r1, r7, #80	@ 0x50
3418fd00:	eeb0 0a67 	vmov.f32	s0, s15
3418fd04:	f7f1 f930 	bl	34180f68 <evision_api_awb_set_profile>
      profNb++;
3418fd08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418fd0c:	3301      	adds	r3, #1
3418fd0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3418fd12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418fd16:	3301      	adds	r3, #1
3418fd18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3418fd1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418fd20:	2b04      	cmp	r3, #4
3418fd22:	f67f af30 	bls.w	3418fb86 <ISP_Algo_AWB_Process+0xa6>
3418fd26:	e000      	b.n	3418fd2a <ISP_Algo_AWB_Process+0x24a>
        break;
3418fd28:	bf00      	nop
    }

    if (profNb == 0)
3418fd2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418fd2e:	2b00      	cmp	r3, #0
3418fd30:	d101      	bne.n	3418fd36 <ISP_Algo_AWB_Process+0x256>
    {
      return ISP_ERR_WB_COLORTEMP;
3418fd32:	2396      	movs	r3, #150	@ 0x96
3418fd34:	e280      	b.n	34190238 <ISP_Algo_AWB_Process+0x758>
    }

    /* Register profiles */
    e_ret = evision_api_awb_init_profiles(pIspAWBestimator, (double) IQParamConfig->AWBAlgo.referenceColorTemp[0],
3418fd36:	4b4b      	ldr	r3, [pc, #300]	@ (3418fe64 <ISP_Algo_AWB_Process+0x384>)
3418fd38:	6818      	ldr	r0, [r3, #0]
3418fd3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418fd3e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418fd42:	ee07 3a90 	vmov	s15, r3
3418fd46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
                                          (double) IQParamConfig->AWBAlgo.referenceColorTemp[profNb - 1], profNb,
3418fd4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418fd4e:	3b01      	subs	r3, #1
3418fd50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418fd54:	3344      	adds	r3, #68	@ 0x44
3418fd56:	009b      	lsls	r3, r3, #2
3418fd58:	4413      	add	r3, r2
3418fd5a:	685b      	ldr	r3, [r3, #4]
    e_ret = evision_api_awb_init_profiles(pIspAWBestimator, (double) IQParamConfig->AWBAlgo.referenceColorTemp[0],
3418fd5c:	ee06 3a90 	vmov	s13, r3
3418fd60:	eeb8 6b66 	vcvt.f64.u32	d6, s13
3418fd64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418fd68:	b299      	uxth	r1, r3
3418fd6a:	4b3d      	ldr	r3, [pc, #244]	@ (3418fe60 <ISP_Algo_AWB_Process+0x380>)
3418fd6c:	4a3a      	ldr	r2, [pc, #232]	@ (3418fe58 <ISP_Algo_AWB_Process+0x378>)
3418fd6e:	eeb0 1b46 	vmov.f64	d1, d6
3418fd72:	eeb0 0b47 	vmov.f64	d0, d7
3418fd76:	f7f1 f917 	bl	34180fa8 <evision_api_awb_init_profiles>
3418fd7a:	4603      	mov	r3, r0
3418fd7c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
                                          colorTempThresholds, awbProfiles);
    if (e_ret != EVISION_RET_SUCCESS)
3418fd80:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
3418fd84:	2b01      	cmp	r3, #1
3418fd86:	d001      	beq.n	3418fd8c <ISP_Algo_AWB_Process+0x2ac>
    {
      return ISP_ERR_ALGO;
3418fd88:	23be      	movs	r3, #190	@ 0xbe
3418fd8a:	e255      	b.n	34190238 <ISP_Algo_AWB_Process+0x758>
    }

    /* Configure algo */
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
3418fd8c:	4b35      	ldr	r3, [pc, #212]	@ (3418fe64 <ISP_Algo_AWB_Process+0x384>)
3418fd8e:	6819      	ldr	r1, [r3, #0]
3418fd90:	a32b      	add	r3, pc, #172	@ (adr r3, 3418fe40 <ISP_Algo_AWB_Process+0x360>)
3418fd92:	e9d3 2300 	ldrd	r2, r3, [r3]
3418fd96:	e9c1 23a6 	strd	r2, r3, [r1, #664]	@ 0x298
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
3418fd9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418fd9e:	2b03      	cmp	r3, #3
3418fda0:	d803      	bhi.n	3418fdaa <ISP_Algo_AWB_Process+0x2ca>
3418fda2:	a329      	add	r3, pc, #164	@ (adr r3, 3418fe48 <ISP_Algo_AWB_Process+0x368>)
3418fda4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418fda8:	e003      	b.n	3418fdb2 <ISP_Algo_AWB_Process+0x2d2>
3418fdaa:	f04f 0200 	mov.w	r2, #0
3418fdae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
3418fdb2:	492c      	ldr	r1, [pc, #176]	@ (3418fe64 <ISP_Algo_AWB_Process+0x384>)
3418fdb4:	6809      	ldr	r1, [r1, #0]
3418fdb6:	e9c1 23a8 	strd	r2, r3, [r1, #672]	@ 0x2a0
    pIspAWBestimator->hyper_params.gm_tolerance = 1;
3418fdba:	4b2a      	ldr	r3, [pc, #168]	@ (3418fe64 <ISP_Algo_AWB_Process+0x384>)
3418fdbc:	681b      	ldr	r3, [r3, #0]
3418fdbe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
3418fdc2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pIspAWBestimator->hyper_params.conv_criterion = 3;
3418fdc6:	4b27      	ldr	r3, [pc, #156]	@ (3418fe64 <ISP_Algo_AWB_Process+0x384>)
3418fdc8:	681b      	ldr	r3, [r3, #0]
3418fdca:	4a27      	ldr	r2, [pc, #156]	@ (3418fe68 <ISP_Algo_AWB_Process+0x388>)
3418fdcc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

    /* Ask for stats */
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3418fdd0:	2305      	movs	r3, #5
3418fdd2:	9302      	str	r3, [sp, #8]
3418fdd4:	2301      	movs	r3, #1
3418fdd6:	9301      	str	r3, [sp, #4]
3418fdd8:	2302      	movs	r3, #2
3418fdda:	9300      	str	r3, [sp, #0]
3418fddc:	4b23      	ldr	r3, [pc, #140]	@ (3418fe6c <ISP_Algo_AWB_Process+0x38c>)
3418fdde:	683a      	ldr	r2, [r7, #0]
3418fde0:	4923      	ldr	r1, [pc, #140]	@ (3418fe70 <ISP_Algo_AWB_Process+0x390>)
3418fde2:	6878      	ldr	r0, [r7, #4]
3418fde4:	f002 f9ae 	bl	34192144 <ISP_SVC_Stats_GetNext>
3418fde8:	4603      	mov	r3, r0
3418fdea:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
                                ISP_STAT_TYPE_AVG, ALGO_ISP_LATENCY + ALGO_AWB_ADDITIONAL_LATENCY);
    if (ret != ISP_OK)
3418fdee:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418fdf2:	2b00      	cmp	r3, #0
3418fdf4:	d002      	beq.n	3418fdfc <ISP_Algo_AWB_Process+0x31c>
    {
      return ret;
3418fdf6:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418fdfa:	e21d      	b.n	34190238 <ISP_Algo_AWB_Process+0x758>
    }

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3418fdfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3418fe00:	2202      	movs	r2, #2
3418fe02:	705a      	strb	r2, [r3, #1]
    break;
3418fe04:	e216      	b.n	34190234 <ISP_Algo_AWB_Process+0x754>

  case ISP_ALGO_STATE_NEED_STAT:
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3418fe06:	2305      	movs	r3, #5
3418fe08:	9302      	str	r3, [sp, #8]
3418fe0a:	2301      	movs	r3, #1
3418fe0c:	9301      	str	r3, [sp, #4]
3418fe0e:	2302      	movs	r3, #2
3418fe10:	9300      	str	r3, [sp, #0]
3418fe12:	4b16      	ldr	r3, [pc, #88]	@ (3418fe6c <ISP_Algo_AWB_Process+0x38c>)
3418fe14:	683a      	ldr	r2, [r7, #0]
3418fe16:	4916      	ldr	r1, [pc, #88]	@ (3418fe70 <ISP_Algo_AWB_Process+0x390>)
3418fe18:	6878      	ldr	r0, [r7, #4]
3418fe1a:	f002 f993 	bl	34192144 <ISP_SVC_Stats_GetNext>
3418fe1e:	4603      	mov	r3, r0
3418fe20:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
                                ISP_STAT_TYPE_AVG, ALGO_ISP_LATENCY + ALGO_AWB_ADDITIONAL_LATENCY);
    if (ret != ISP_OK)
3418fe24:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418fe28:	2b00      	cmp	r3, #0
3418fe2a:	d002      	beq.n	3418fe32 <ISP_Algo_AWB_Process+0x352>
    {
      return ret;
3418fe2c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418fe30:	e202      	b.n	34190238 <ISP_Algo_AWB_Process+0x758>
    }

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3418fe32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3418fe36:	2202      	movs	r2, #2
3418fe38:	705a      	strb	r2, [r3, #1]
    break;
3418fe3a:	e1fb      	b.n	34190234 <ISP_Algo_AWB_Process+0x754>
3418fe3c:	f3af 8000 	nop.w
3418fe40:	9999999a 	.word	0x9999999a
3418fe44:	3ff59999 	.word	0x3ff59999
3418fe48:	cccccccd 	.word	0xcccccccd
3418fe4c:	3ffccccc 	.word	0x3ffccccc
3418fe50:	341c1258 	.word	0x341c1258
3418fe54:	341c1259 	.word	0x341c1259
3418fe58:	341c125c 	.word	0x341c125c
3418fe5c:	4cbebc20 	.word	0x4cbebc20
3418fe60:	341c126c 	.word	0x341c126c
3418fe64:	341c11b8 	.word	0x341c11b8
3418fe68:	40400000 	.word	0x40400000
3418fe6c:	341c13c0 	.word	0x341c13c0
3418fe70:	3418fabd 	.word	0x3418fabd
  case ISP_ALGO_STATE_WAITING_STAT:
    /* Do nothing */
    break;

  case ISP_ALGO_STATE_STAT_READY:
    ISP_Algo_GetUpStat(hIsp, &stats);
3418fe74:	4992      	ldr	r1, [pc, #584]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418fe76:	6878      	ldr	r0, [r7, #4]
3418fe78:	f7ff fad0 	bl	3418f41c <ISP_Algo_GetUpStat>

    if (!(!skip_stat_check_count && (abs(stats.up.averageR - statsHistory[0][0]) <= 2) && (abs(stats.up.averageG - statsHistory[0][1]) <= 2) && (abs(stats.up.averageB - statsHistory[0][2]) <= 2)
3418fe7c:	4b91      	ldr	r3, [pc, #580]	@ (341900c4 <ISP_Algo_AWB_Process+0x5e4>)
3418fe7e:	781b      	ldrb	r3, [r3, #0]
3418fe80:	2b00      	cmp	r3, #0
3418fe82:	d163      	bne.n	3418ff4c <ISP_Algo_AWB_Process+0x46c>
3418fe84:	4b8e      	ldr	r3, [pc, #568]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418fe86:	781b      	ldrb	r3, [r3, #0]
3418fe88:	461a      	mov	r2, r3
3418fe8a:	4b8f      	ldr	r3, [pc, #572]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418fe8c:	681b      	ldr	r3, [r3, #0]
3418fe8e:	1ad3      	subs	r3, r2, r3
3418fe90:	2b00      	cmp	r3, #0
3418fe92:	bfb8      	it	lt
3418fe94:	425b      	neglt	r3, r3
3418fe96:	2b02      	cmp	r3, #2
3418fe98:	dc58      	bgt.n	3418ff4c <ISP_Algo_AWB_Process+0x46c>
3418fe9a:	4b89      	ldr	r3, [pc, #548]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418fe9c:	785b      	ldrb	r3, [r3, #1]
3418fe9e:	461a      	mov	r2, r3
3418fea0:	4b89      	ldr	r3, [pc, #548]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418fea2:	685b      	ldr	r3, [r3, #4]
3418fea4:	1ad3      	subs	r3, r2, r3
3418fea6:	2b00      	cmp	r3, #0
3418fea8:	bfb8      	it	lt
3418feaa:	425b      	neglt	r3, r3
3418feac:	2b02      	cmp	r3, #2
3418feae:	dc4d      	bgt.n	3418ff4c <ISP_Algo_AWB_Process+0x46c>
3418feb0:	4b83      	ldr	r3, [pc, #524]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418feb2:	789b      	ldrb	r3, [r3, #2]
3418feb4:	461a      	mov	r2, r3
3418feb6:	4b84      	ldr	r3, [pc, #528]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418feb8:	689b      	ldr	r3, [r3, #8]
3418feba:	1ad3      	subs	r3, r2, r3
3418febc:	2b00      	cmp	r3, #0
3418febe:	bfb8      	it	lt
3418fec0:	425b      	neglt	r3, r3
3418fec2:	2b02      	cmp	r3, #2
3418fec4:	dc42      	bgt.n	3418ff4c <ISP_Algo_AWB_Process+0x46c>
        && (abs(stats.up.averageR - statsHistory[1][0]) <= 2) && (abs(stats.up.averageG - statsHistory[1][1]) <= 2) && (abs(stats.up.averageB - statsHistory[1][2]) <= 2)
3418fec6:	4b7e      	ldr	r3, [pc, #504]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418fec8:	781b      	ldrb	r3, [r3, #0]
3418feca:	461a      	mov	r2, r3
3418fecc:	4b7e      	ldr	r3, [pc, #504]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418fece:	68db      	ldr	r3, [r3, #12]
3418fed0:	1ad3      	subs	r3, r2, r3
3418fed2:	2b00      	cmp	r3, #0
3418fed4:	bfb8      	it	lt
3418fed6:	425b      	neglt	r3, r3
3418fed8:	2b02      	cmp	r3, #2
3418feda:	dc37      	bgt.n	3418ff4c <ISP_Algo_AWB_Process+0x46c>
3418fedc:	4b78      	ldr	r3, [pc, #480]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418fede:	785b      	ldrb	r3, [r3, #1]
3418fee0:	461a      	mov	r2, r3
3418fee2:	4b79      	ldr	r3, [pc, #484]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418fee4:	691b      	ldr	r3, [r3, #16]
3418fee6:	1ad3      	subs	r3, r2, r3
3418fee8:	2b00      	cmp	r3, #0
3418feea:	bfb8      	it	lt
3418feec:	425b      	neglt	r3, r3
3418feee:	2b02      	cmp	r3, #2
3418fef0:	dc2c      	bgt.n	3418ff4c <ISP_Algo_AWB_Process+0x46c>
3418fef2:	4b73      	ldr	r3, [pc, #460]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418fef4:	789b      	ldrb	r3, [r3, #2]
3418fef6:	461a      	mov	r2, r3
3418fef8:	4b73      	ldr	r3, [pc, #460]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418fefa:	695b      	ldr	r3, [r3, #20]
3418fefc:	1ad3      	subs	r3, r2, r3
3418fefe:	2b00      	cmp	r3, #0
3418ff00:	bfb8      	it	lt
3418ff02:	425b      	neglt	r3, r3
3418ff04:	2b02      	cmp	r3, #2
3418ff06:	dc21      	bgt.n	3418ff4c <ISP_Algo_AWB_Process+0x46c>
        && (abs(stats.up.averageR - statsHistory[2][0]) <= 2) && (abs(stats.up.averageG - statsHistory[2][1]) <= 2) && (abs(stats.up.averageB - statsHistory[2][2]) <= 2)))
3418ff08:	4b6d      	ldr	r3, [pc, #436]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418ff0a:	781b      	ldrb	r3, [r3, #0]
3418ff0c:	461a      	mov	r2, r3
3418ff0e:	4b6e      	ldr	r3, [pc, #440]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418ff10:	699b      	ldr	r3, [r3, #24]
3418ff12:	1ad3      	subs	r3, r2, r3
3418ff14:	2b00      	cmp	r3, #0
3418ff16:	bfb8      	it	lt
3418ff18:	425b      	neglt	r3, r3
3418ff1a:	2b02      	cmp	r3, #2
3418ff1c:	dc16      	bgt.n	3418ff4c <ISP_Algo_AWB_Process+0x46c>
3418ff1e:	4b68      	ldr	r3, [pc, #416]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418ff20:	785b      	ldrb	r3, [r3, #1]
3418ff22:	461a      	mov	r2, r3
3418ff24:	4b68      	ldr	r3, [pc, #416]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418ff26:	69db      	ldr	r3, [r3, #28]
3418ff28:	1ad3      	subs	r3, r2, r3
3418ff2a:	2b00      	cmp	r3, #0
3418ff2c:	bfb8      	it	lt
3418ff2e:	425b      	neglt	r3, r3
3418ff30:	2b02      	cmp	r3, #2
3418ff32:	dc0b      	bgt.n	3418ff4c <ISP_Algo_AWB_Process+0x46c>
3418ff34:	4b62      	ldr	r3, [pc, #392]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418ff36:	789b      	ldrb	r3, [r3, #2]
3418ff38:	461a      	mov	r2, r3
3418ff3a:	4b63      	ldr	r3, [pc, #396]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418ff3c:	6a1b      	ldr	r3, [r3, #32]
3418ff3e:	1ad3      	subs	r3, r2, r3
3418ff40:	2b00      	cmp	r3, #0
3418ff42:	bfb8      	it	lt
3418ff44:	425b      	neglt	r3, r3
    if (!(!skip_stat_check_count && (abs(stats.up.averageR - statsHistory[0][0]) <= 2) && (abs(stats.up.averageG - statsHistory[0][1]) <= 2) && (abs(stats.up.averageB - statsHistory[0][2]) <= 2)
3418ff46:	2b02      	cmp	r3, #2
3418ff48:	f340 8128 	ble.w	3419019c <ISP_Algo_AWB_Process+0x6bc>
    {
        statsHistory[2][0] = stats.up.averageR;
3418ff4c:	4b5c      	ldr	r3, [pc, #368]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418ff4e:	781b      	ldrb	r3, [r3, #0]
3418ff50:	461a      	mov	r2, r3
3418ff52:	4b5d      	ldr	r3, [pc, #372]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418ff54:	619a      	str	r2, [r3, #24]
        statsHistory[2][1] = stats.up.averageG;
3418ff56:	4b5a      	ldr	r3, [pc, #360]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418ff58:	785b      	ldrb	r3, [r3, #1]
3418ff5a:	461a      	mov	r2, r3
3418ff5c:	4b5a      	ldr	r3, [pc, #360]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418ff5e:	61da      	str	r2, [r3, #28]
        statsHistory[2][2] = stats.up.averageB;
3418ff60:	4b57      	ldr	r3, [pc, #348]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418ff62:	789b      	ldrb	r3, [r3, #2]
3418ff64:	461a      	mov	r2, r3
3418ff66:	4b58      	ldr	r3, [pc, #352]	@ (341900c8 <ISP_Algo_AWB_Process+0x5e8>)
3418ff68:	621a      	str	r2, [r3, #32]

        /* Get stats after color conversion */
        ISP_Algo_ApplyCConv(hIsp, stats.down.averageR, stats.down.averageG, stats.down.averageB, &ccAvgR, &ccAvgG, &ccAvgB);
3418ff6a:	4b55      	ldr	r3, [pc, #340]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418ff6c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
3418ff70:	4619      	mov	r1, r3
3418ff72:	4b53      	ldr	r3, [pc, #332]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418ff74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
3418ff78:	461a      	mov	r2, r3
3418ff7a:	4b51      	ldr	r3, [pc, #324]	@ (341900c0 <ISP_Algo_AWB_Process+0x5e0>)
3418ff7c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3418ff80:	4618      	mov	r0, r3
3418ff82:	f107 0360 	add.w	r3, r7, #96	@ 0x60
3418ff86:	9302      	str	r3, [sp, #8]
3418ff88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
3418ff8c:	9301      	str	r3, [sp, #4]
3418ff8e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
3418ff92:	9300      	str	r3, [sp, #0]
3418ff94:	4603      	mov	r3, r0
3418ff96:	6878      	ldr	r0, [r7, #4]
3418ff98:	f7ff fb12 	bl	3418f5c0 <ISP_Algo_ApplyCConv>

        /* Apply gamma */
        meas[0] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgR);
3418ff9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418ff9e:	4619      	mov	r1, r3
3418ffa0:	6878      	ldr	r0, [r7, #4]
3418ffa2:	f7ff f9f9 	bl	3418f398 <ISP_Algo_ApplyGammaInverse>
3418ffa6:	eeb0 7b40 	vmov.f64	d7, d0
3418ffaa:	ed87 7b02 	vstr	d7, [r7, #8]
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
3418ffae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
3418ffb0:	4619      	mov	r1, r3
3418ffb2:	6878      	ldr	r0, [r7, #4]
3418ffb4:	f7ff f9f0 	bl	3418f398 <ISP_Algo_ApplyGammaInverse>
3418ffb8:	eeb0 7b40 	vmov.f64	d7, d0
3418ffbc:	ed87 7b04 	vstr	d7, [r7, #16]
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
3418ffc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418ffc2:	4619      	mov	r1, r3
3418ffc4:	6878      	ldr	r0, [r7, #4]
3418ffc6:	f7ff f9e7 	bl	3418f398 <ISP_Algo_ApplyGammaInverse>
3418ffca:	eeb0 7b40 	vmov.f64	d7, d0
3418ffce:	ed87 7b06 	vstr	d7, [r7, #24]

        /* Run algo to estimate gain and color conversion to apply */
        e_ret = evision_api_awb_run_average(pIspAWBestimator, NULL, 1, meas);
3418ffd2:	4b3e      	ldr	r3, [pc, #248]	@ (341900cc <ISP_Algo_AWB_Process+0x5ec>)
3418ffd4:	6818      	ldr	r0, [r3, #0]
3418ffd6:	f107 0308 	add.w	r3, r7, #8
3418ffda:	2201      	movs	r2, #1
3418ffdc:	2100      	movs	r1, #0
3418ffde:	f7f1 f9b9 	bl	34181354 <evision_api_awb_run_average>
3418ffe2:	4603      	mov	r3, r0
3418ffe4:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
        if (e_ret == EVISION_RET_SUCCESS)
3418ffe8:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
3418ffec:	2b01      	cmp	r3, #1
3418ffee:	f040 80d2 	bne.w	34190196 <ISP_Algo_AWB_Process+0x6b6>
            for (int i = 0; i < ISP_AWB_COLORTEMP_REF; i++) {
              nb_colortemp_change[i] = 0;
            }
          }
#endif
          if (pIspAWBestimator->out_temp != currentColorTemp || reconfigureRequest == true)
3418fff2:	4b36      	ldr	r3, [pc, #216]	@ (341900cc <ISP_Algo_AWB_Process+0x5ec>)
3418fff4:	681b      	ldr	r3, [r3, #0]
3418fff6:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
3418fffa:	4b35      	ldr	r3, [pc, #212]	@ (341900d0 <ISP_Algo_AWB_Process+0x5f0>)
3418fffc:	681b      	ldr	r3, [r3, #0]
3418fffe:	ee07 3a90 	vmov	s15, r3
34190002:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34190006:	eeb4 6b47 	vcmp.f64	d6, d7
3419000a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419000e:	d104      	bne.n	3419001a <ISP_Algo_AWB_Process+0x53a>
34190010:	4b30      	ldr	r3, [pc, #192]	@ (341900d4 <ISP_Algo_AWB_Process+0x5f4>)
34190012:	781b      	ldrb	r3, [r3, #0]
34190014:	2b01      	cmp	r3, #1
34190016:	f040 80c1 	bne.w	3419019c <ISP_Algo_AWB_Process+0x6bc>
          {
            /* Force to apply a WB profile when reconfigureRequest is true */
            reconfigureRequest = false;
3419001a:	4b2e      	ldr	r3, [pc, #184]	@ (341900d4 <ISP_Algo_AWB_Process+0x5f4>)
3419001c:	2200      	movs	r2, #0
3419001e:	701a      	strb	r2, [r3, #0]
#ifdef ALGO_AWB_DBG_LOGS
            printf("Color temperature = %ld\r\n", (uint32_t) pIspAWBestimator->out_temp);
#endif
            if (pIspAWBestimator->out_temp == colorTempHistory[1])
34190020:	4b2a      	ldr	r3, [pc, #168]	@ (341900cc <ISP_Algo_AWB_Process+0x5ec>)
34190022:	681b      	ldr	r3, [r3, #0]
34190024:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
34190028:	4b2b      	ldr	r3, [pc, #172]	@ (341900d8 <ISP_Algo_AWB_Process+0x5f8>)
3419002a:	685b      	ldr	r3, [r3, #4]
3419002c:	ee07 3a90 	vmov	s15, r3
34190030:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34190034:	eeb4 6b47 	vcmp.f64	d6, d7
34190038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419003c:	d103      	bne.n	34190046 <ISP_Algo_AWB_Process+0x566>
            {
              skip_stat_check_count = 0; //oscillation detected
3419003e:	4b21      	ldr	r3, [pc, #132]	@ (341900c4 <ISP_Algo_AWB_Process+0x5e4>)
34190040:	2200      	movs	r2, #0
34190042:	701a      	strb	r2, [r3, #0]
34190044:	e0aa      	b.n	3419019c <ISP_Algo_AWB_Process+0x6bc>
            }
            else
            {
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
34190046:	4b1f      	ldr	r3, [pc, #124]	@ (341900c4 <ISP_Algo_AWB_Process+0x5e4>)
34190048:	781b      	ldrb	r3, [r3, #0]
3419004a:	2b04      	cmp	r3, #4
3419004c:	d802      	bhi.n	34190054 <ISP_Algo_AWB_Process+0x574>
3419004e:	4b1d      	ldr	r3, [pc, #116]	@ (341900c4 <ISP_Algo_AWB_Process+0x5e4>)
34190050:	2204      	movs	r2, #4
34190052:	701a      	strb	r2, [r3, #0]

              /* Store meta data */
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
34190054:	4b1d      	ldr	r3, [pc, #116]	@ (341900cc <ISP_Algo_AWB_Process+0x5ec>)
34190056:	681b      	ldr	r3, [r3, #0]
34190058:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
3419005c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
34190060:	ee17 2a90 	vmov	r2, s15
34190064:	4b1d      	ldr	r3, [pc, #116]	@ (341900dc <ISP_Algo_AWB_Process+0x5fc>)
34190066:	611a      	str	r2, [r3, #16]

              /* Find the index profile for this referenceColorTemp */
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
34190068:	2300      	movs	r3, #0
3419006a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3419006e:	e019      	b.n	341900a4 <ISP_Algo_AWB_Process+0x5c4>
              {
                if (pIspAWBestimator->out_temp == IQParamConfig->AWBAlgo.referenceColorTemp[profId])
34190070:	4b16      	ldr	r3, [pc, #88]	@ (341900cc <ISP_Algo_AWB_Process+0x5ec>)
34190072:	681b      	ldr	r3, [r3, #0]
34190074:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
34190078:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3419007c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
34190080:	3344      	adds	r3, #68	@ 0x44
34190082:	009b      	lsls	r3, r3, #2
34190084:	4413      	add	r3, r2
34190086:	685b      	ldr	r3, [r3, #4]
34190088:	ee07 3a90 	vmov	s15, r3
3419008c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34190090:	eeb4 6b47 	vcmp.f64	d6, d7
34190094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34190098:	d009      	beq.n	341900ae <ISP_Algo_AWB_Process+0x5ce>
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3419009a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419009e:	3301      	adds	r3, #1
341900a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
341900a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
341900a8:	2b04      	cmp	r3, #4
341900aa:	d9e1      	bls.n	34190070 <ISP_Algo_AWB_Process+0x590>
341900ac:	e000      	b.n	341900b0 <ISP_Algo_AWB_Process+0x5d0>
                  break;
341900ae:	bf00      	nop
              }

              if (profId == ISP_AWB_COLORTEMP_REF)
341900b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
341900b4:	2b05      	cmp	r3, #5
341900b6:	d113      	bne.n	341900e0 <ISP_Algo_AWB_Process+0x600>
              {
                /* Unknown profile */
                ret  = ISP_ERR_WB_COLORTEMP;
341900b8:	2396      	movs	r3, #150	@ 0x96
341900ba:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
341900be:	e06d      	b.n	3419019c <ISP_Algo_AWB_Process+0x6bc>
341900c0:	341c13c0 	.word	0x341c13c0
341900c4:	341c0130 	.word	0x341c0130
341900c8:	341c1438 	.word	0x341c1438
341900cc:	341c11b8 	.word	0x341c11b8
341900d0:	341c145c 	.word	0x341c145c
341900d4:	341c1259 	.word	0x341c1259
341900d8:	341c1460 	.word	0x341c1460
341900dc:	341c11c0 	.word	0x341c11c0
              }
              else
              {
                /* Apply Color Conversion */
                ColorConvConfig.enable = 1;
341900e0:	2301      	movs	r3, #1
341900e2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
341900e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
341900ea:	4613      	mov	r3, r2
341900ec:	00db      	lsls	r3, r3, #3
341900ee:	4413      	add	r3, r2
341900f0:	009b      	lsls	r3, r3, #2
341900f2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
341900f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
341900fa:	4413      	add	r3, r2
341900fc:	1d19      	adds	r1, r3, #4
341900fe:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
34190102:	3304      	adds	r3, #4
34190104:	2224      	movs	r2, #36	@ 0x24
34190106:	4618      	mov	r0, r3
34190108:	f003 f8c7 	bl	3419329a <memcpy>
                ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConvConfig);
3419010c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
34190110:	4619      	mov	r1, r3
34190112:	6878      	ldr	r0, [r7, #4]
34190114:	f001 fa0e 	bl	34191534 <ISP_SVC_ISP_SetColorConv>
34190118:	4603      	mov	r3, r0
3419011a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

                /* Apply gain */
                if (ret == ISP_OK)
3419011e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
34190122:	2b00      	cmp	r3, #0
34190124:	d13a      	bne.n	3419019c <ISP_Algo_AWB_Process+0x6bc>
                {
                  ISPGainConfig.enable = 1;
34190126:	2301      	movs	r3, #1
34190128:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
                  ISPGainConfig.ispGainR = IQParamConfig->AWBAlgo.ispGainR[profId];
3419012c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
34190130:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
34190134:	324a      	adds	r2, #74	@ 0x4a
34190136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3419013a:	673b      	str	r3, [r7, #112]	@ 0x70
                  ISPGainConfig.ispGainG = IQParamConfig->AWBAlgo.ispGainG[profId];
3419013c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
34190140:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
34190144:	334e      	adds	r3, #78	@ 0x4e
34190146:	009b      	lsls	r3, r3, #2
34190148:	4413      	add	r3, r2
3419014a:	685b      	ldr	r3, [r3, #4]
3419014c:	677b      	str	r3, [r7, #116]	@ 0x74
                  ISPGainConfig.ispGainB = IQParamConfig->AWBAlgo.ispGainB[profId];
3419014e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
34190152:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
34190156:	3254      	adds	r2, #84	@ 0x54
34190158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3419015c:	67bb      	str	r3, [r7, #120]	@ 0x78
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
3419015e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
34190162:	4619      	mov	r1, r3
34190164:	6878      	ldr	r0, [r7, #4]
34190166:	f001 f93b 	bl	341913e0 <ISP_SVC_ISP_SetGain>
3419016a:	4603      	mov	r3, r0
3419016c:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
                  if (ret == ISP_OK)
34190170:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
34190174:	2b00      	cmp	r3, #0
34190176:	d111      	bne.n	3419019c <ISP_Algo_AWB_Process+0x6bc>
                  {
                    currentColorTemp = (uint32_t) pIspAWBestimator->out_temp ;
34190178:	4b31      	ldr	r3, [pc, #196]	@ (34190240 <ISP_Algo_AWB_Process+0x760>)
3419017a:	681b      	ldr	r3, [r3, #0]
3419017c:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
34190180:	eefc 7bc7 	vcvt.u32.f64	s15, d7
34190184:	ee17 2a90 	vmov	r2, s15
34190188:	4b2e      	ldr	r3, [pc, #184]	@ (34190244 <ISP_Algo_AWB_Process+0x764>)
3419018a:	601a      	str	r2, [r3, #0]
                    current_awb_profId = profId;
3419018c:	4a2e      	ldr	r2, [pc, #184]	@ (34190248 <ISP_Algo_AWB_Process+0x768>)
3419018e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
34190192:	6013      	str	r3, [r2, #0]
34190194:	e002      	b.n	3419019c <ISP_Algo_AWB_Process+0x6bc>
            }
          }
        }
        else
        {
          ret = ISP_ERR_ALGO;
34190196:	23be      	movs	r3, #190	@ 0xbe
34190198:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
        }
    }

    /* Decrease counter to limit the number of estimations before reaching convergence */
    if (skip_stat_check_count > 0) skip_stat_check_count--;
3419019c:	4b2b      	ldr	r3, [pc, #172]	@ (3419024c <ISP_Algo_AWB_Process+0x76c>)
3419019e:	781b      	ldrb	r3, [r3, #0]
341901a0:	2b00      	cmp	r3, #0
341901a2:	d005      	beq.n	341901b0 <ISP_Algo_AWB_Process+0x6d0>
341901a4:	4b29      	ldr	r3, [pc, #164]	@ (3419024c <ISP_Algo_AWB_Process+0x76c>)
341901a6:	781b      	ldrb	r3, [r3, #0]
341901a8:	3b01      	subs	r3, #1
341901aa:	b2da      	uxtb	r2, r3
341901ac:	4b27      	ldr	r3, [pc, #156]	@ (3419024c <ISP_Algo_AWB_Process+0x76c>)
341901ae:	701a      	strb	r2, [r3, #0]

    /* Store history to be able to detect variations*/
    statsHistory[1][0] = statsHistory[0][0];
341901b0:	4b27      	ldr	r3, [pc, #156]	@ (34190250 <ISP_Algo_AWB_Process+0x770>)
341901b2:	681b      	ldr	r3, [r3, #0]
341901b4:	4a26      	ldr	r2, [pc, #152]	@ (34190250 <ISP_Algo_AWB_Process+0x770>)
341901b6:	60d3      	str	r3, [r2, #12]
    statsHistory[1][1] = statsHistory[0][1];
341901b8:	4b25      	ldr	r3, [pc, #148]	@ (34190250 <ISP_Algo_AWB_Process+0x770>)
341901ba:	685b      	ldr	r3, [r3, #4]
341901bc:	4a24      	ldr	r2, [pc, #144]	@ (34190250 <ISP_Algo_AWB_Process+0x770>)
341901be:	6113      	str	r3, [r2, #16]
    statsHistory[1][2] = statsHistory[0][2];
341901c0:	4b23      	ldr	r3, [pc, #140]	@ (34190250 <ISP_Algo_AWB_Process+0x770>)
341901c2:	689b      	ldr	r3, [r3, #8]
341901c4:	4a22      	ldr	r2, [pc, #136]	@ (34190250 <ISP_Algo_AWB_Process+0x770>)
341901c6:	6153      	str	r3, [r2, #20]
    statsHistory[0][0] = stats.up.averageR;
341901c8:	4b22      	ldr	r3, [pc, #136]	@ (34190254 <ISP_Algo_AWB_Process+0x774>)
341901ca:	781b      	ldrb	r3, [r3, #0]
341901cc:	461a      	mov	r2, r3
341901ce:	4b20      	ldr	r3, [pc, #128]	@ (34190250 <ISP_Algo_AWB_Process+0x770>)
341901d0:	601a      	str	r2, [r3, #0]
    statsHistory[0][1] = stats.up.averageG;
341901d2:	4b20      	ldr	r3, [pc, #128]	@ (34190254 <ISP_Algo_AWB_Process+0x774>)
341901d4:	785b      	ldrb	r3, [r3, #1]
341901d6:	461a      	mov	r2, r3
341901d8:	4b1d      	ldr	r3, [pc, #116]	@ (34190250 <ISP_Algo_AWB_Process+0x770>)
341901da:	605a      	str	r2, [r3, #4]
    statsHistory[0][2] = stats.up.averageB;
341901dc:	4b1d      	ldr	r3, [pc, #116]	@ (34190254 <ISP_Algo_AWB_Process+0x774>)
341901de:	789b      	ldrb	r3, [r3, #2]
341901e0:	461a      	mov	r2, r3
341901e2:	4b1b      	ldr	r3, [pc, #108]	@ (34190250 <ISP_Algo_AWB_Process+0x770>)
341901e4:	609a      	str	r2, [r3, #8]
    colorTempHistory[1] = colorTempHistory[0];
341901e6:	4b1c      	ldr	r3, [pc, #112]	@ (34190258 <ISP_Algo_AWB_Process+0x778>)
341901e8:	681b      	ldr	r3, [r3, #0]
341901ea:	4a1b      	ldr	r2, [pc, #108]	@ (34190258 <ISP_Algo_AWB_Process+0x778>)
341901ec:	6053      	str	r3, [r2, #4]
    colorTempHistory[0] = currentColorTemp;
341901ee:	4b15      	ldr	r3, [pc, #84]	@ (34190244 <ISP_Algo_AWB_Process+0x764>)
341901f0:	681b      	ldr	r3, [r3, #0]
341901f2:	4a19      	ldr	r2, [pc, #100]	@ (34190258 <ISP_Algo_AWB_Process+0x778>)
341901f4:	6013      	str	r3, [r2, #0]

    /* Ask for stats */
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
341901f6:	2305      	movs	r3, #5
341901f8:	9302      	str	r3, [sp, #8]
341901fa:	2301      	movs	r3, #1
341901fc:	9301      	str	r3, [sp, #4]
341901fe:	2302      	movs	r3, #2
34190200:	9300      	str	r3, [sp, #0]
34190202:	4b14      	ldr	r3, [pc, #80]	@ (34190254 <ISP_Algo_AWB_Process+0x774>)
34190204:	683a      	ldr	r2, [r7, #0]
34190206:	4915      	ldr	r1, [pc, #84]	@ (3419025c <ISP_Algo_AWB_Process+0x77c>)
34190208:	6878      	ldr	r0, [r7, #4]
3419020a:	f001 ff9b 	bl	34192144 <ISP_SVC_Stats_GetNext>
3419020e:	4603      	mov	r3, r0
34190210:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
                                     ISP_STAT_TYPE_AVG, ALGO_ISP_LATENCY + ALGO_AWB_ADDITIONAL_LATENCY);
    ret = (ret != ISP_OK) ? ret : ret_stat;
34190214:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
34190218:	2b00      	cmp	r3, #0
3419021a:	d002      	beq.n	34190222 <ISP_Algo_AWB_Process+0x742>
3419021c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
34190220:	e001      	b.n	34190226 <ISP_Algo_AWB_Process+0x746>
34190222:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
34190226:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3419022a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3419022e:	2202      	movs	r2, #2
34190230:	705a      	strb	r2, [r3, #1]
    break;
34190232:	bf00      	nop
  }

  return ret;
34190234:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
}
34190238:	4618      	mov	r0, r3
3419023a:	37c8      	adds	r7, #200	@ 0xc8
3419023c:	46bd      	mov	sp, r7
3419023e:	bd80      	pop	{r7, pc}
34190240:	341c11b8 	.word	0x341c11b8
34190244:	341c145c 	.word	0x341c145c
34190248:	341c11bc 	.word	0x341c11bc
3419024c:	341c0130 	.word	0x341c0130
34190250:	341c1438 	.word	0x341c1438
34190254:	341c13c0 	.word	0x341c13c0
34190258:	341c1460 	.word	0x341c1460
3419025c:	3418fabd 	.word	0x3418fabd

34190260 <ISP_Algo_Init>:
  *         Register and initialize all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Init(ISP_HandleTypeDef *hIsp)
{
34190260:	b580      	push	{r7, lr}
34190262:	b086      	sub	sp, #24
34190264:	af00      	add	r7, sp, #0
34190266:	6078      	str	r0, [r7, #4]
  ISP_AlgoTypeDef *algo;
  ISP_StatusTypeDef ret;
  uint8_t i;

  hIsp->algorithm = ISP_Algo_List;
34190268:	687b      	ldr	r3, [r7, #4]
3419026a:	4a15      	ldr	r2, [pc, #84]	@ (341902c0 <ISP_Algo_Init+0x60>)
3419026c:	619a      	str	r2, [r3, #24]

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3419026e:	2300      	movs	r3, #0
34190270:	75fb      	strb	r3, [r7, #23]
34190272:	e01c      	b.n	341902ae <ISP_Algo_Init+0x4e>
  {
    algo = hIsp->algorithm[i];
34190274:	687b      	ldr	r3, [r7, #4]
34190276:	699a      	ldr	r2, [r3, #24]
34190278:	7dfb      	ldrb	r3, [r7, #23]
3419027a:	009b      	lsls	r3, r3, #2
3419027c:	4413      	add	r3, r2
3419027e:	681b      	ldr	r3, [r3, #0]
34190280:	613b      	str	r3, [r7, #16]
    if ((algo != NULL) && (algo->Init != NULL))
34190282:	693b      	ldr	r3, [r7, #16]
34190284:	2b00      	cmp	r3, #0
34190286:	d00f      	beq.n	341902a8 <ISP_Algo_Init+0x48>
34190288:	693b      	ldr	r3, [r7, #16]
3419028a:	685b      	ldr	r3, [r3, #4]
3419028c:	2b00      	cmp	r3, #0
3419028e:	d00b      	beq.n	341902a8 <ISP_Algo_Init+0x48>
    {
      ret = algo->Init((void*)hIsp, (void*)algo);
34190290:	693b      	ldr	r3, [r7, #16]
34190292:	685b      	ldr	r3, [r3, #4]
34190294:	6939      	ldr	r1, [r7, #16]
34190296:	6878      	ldr	r0, [r7, #4]
34190298:	4798      	blx	r3
3419029a:	4603      	mov	r3, r0
3419029c:	73fb      	strb	r3, [r7, #15]
      if (ret != ISP_OK)
3419029e:	7bfb      	ldrb	r3, [r7, #15]
341902a0:	2b00      	cmp	r3, #0
341902a2:	d001      	beq.n	341902a8 <ISP_Algo_Init+0x48>
      {
        return ret;
341902a4:	7bfb      	ldrb	r3, [r7, #15]
341902a6:	e006      	b.n	341902b6 <ISP_Algo_Init+0x56>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
341902a8:	7dfb      	ldrb	r3, [r7, #23]
341902aa:	3301      	adds	r3, #1
341902ac:	75fb      	strb	r3, [r7, #23]
341902ae:	7dfb      	ldrb	r3, [r7, #23]
341902b0:	2b02      	cmp	r3, #2
341902b2:	d9df      	bls.n	34190274 <ISP_Algo_Init+0x14>
      }
    }
  }

  return ISP_OK;
341902b4:	2300      	movs	r3, #0
}
341902b6:	4618      	mov	r0, r3
341902b8:	3718      	adds	r7, #24
341902ba:	46bd      	mov	sp, r7
341902bc:	bd80      	pop	{r7, pc}
341902be:	bf00      	nop
341902c0:	341c0124 	.word	0x341c0124

341902c4 <ISP_Algo_Process>:
  *         Process all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Process(ISP_HandleTypeDef *hIsp)
{
341902c4:	b580      	push	{r7, lr}
341902c6:	b086      	sub	sp, #24
341902c8:	af00      	add	r7, sp, #0
341902ca:	6078      	str	r0, [r7, #4]
  ISP_AlgoTypeDef *algo;
  ISP_StatusTypeDef ret;
  uint8_t i;

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
341902cc:	2300      	movs	r3, #0
341902ce:	75fb      	strb	r3, [r7, #23]
341902d0:	e01c      	b.n	3419030c <ISP_Algo_Process+0x48>
  {
    algo = hIsp->algorithm[i];
341902d2:	687b      	ldr	r3, [r7, #4]
341902d4:	699a      	ldr	r2, [r3, #24]
341902d6:	7dfb      	ldrb	r3, [r7, #23]
341902d8:	009b      	lsls	r3, r3, #2
341902da:	4413      	add	r3, r2
341902dc:	681b      	ldr	r3, [r3, #0]
341902de:	613b      	str	r3, [r7, #16]
    if ((algo != NULL) && (algo->Process != NULL))
341902e0:	693b      	ldr	r3, [r7, #16]
341902e2:	2b00      	cmp	r3, #0
341902e4:	d00f      	beq.n	34190306 <ISP_Algo_Process+0x42>
341902e6:	693b      	ldr	r3, [r7, #16]
341902e8:	68db      	ldr	r3, [r3, #12]
341902ea:	2b00      	cmp	r3, #0
341902ec:	d00b      	beq.n	34190306 <ISP_Algo_Process+0x42>
    {
#ifdef ALGO_PERF_DBG_LOGS
      uint32_t tickstart = HAL_GetTick();
#endif
      ret = algo->Process((void*)hIsp, (void*)algo);
341902ee:	693b      	ldr	r3, [r7, #16]
341902f0:	68db      	ldr	r3, [r3, #12]
341902f2:	6939      	ldr	r1, [r7, #16]
341902f4:	6878      	ldr	r0, [r7, #4]
341902f6:	4798      	blx	r3
341902f8:	4603      	mov	r3, r0
341902fa:	73fb      	strb	r3, [r7, #15]
      if (ret != ISP_OK)
341902fc:	7bfb      	ldrb	r3, [r7, #15]
341902fe:	2b00      	cmp	r3, #0
34190300:	d001      	beq.n	34190306 <ISP_Algo_Process+0x42>
      {
        return ret;
34190302:	7bfb      	ldrb	r3, [r7, #15]
34190304:	e006      	b.n	34190314 <ISP_Algo_Process+0x50>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
34190306:	7dfb      	ldrb	r3, [r7, #23]
34190308:	3301      	adds	r3, #1
3419030a:	75fb      	strb	r3, [r7, #23]
3419030c:	7dfb      	ldrb	r3, [r7, #23]
3419030e:	2b02      	cmp	r3, #2
34190310:	d9df      	bls.n	341902d2 <ISP_Algo_Process+0xe>
      }
#endif
    }
  }

  return ISP_OK;
34190312:	2300      	movs	r3, #0
}
34190314:	4618      	mov	r0, r3
34190316:	3718      	adds	r7, #24
34190318:	46bd      	mov	sp, r7
3419031a:	bd80      	pop	{r7, pc}

3419031c <ISP_Init>:
ISP_StatusTypeDef ISP_Init(ISP_HandleTypeDef *hIsp,
                           void *hDcmipp,
                           uint32_t CameraInstance,
                           ISP_AppliHelpersTypeDef *pAppliHelpers,
                           const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
3419031c:	b5b0      	push	{r4, r5, r7, lr}
3419031e:	b086      	sub	sp, #24
34190320:	af00      	add	r7, sp, #0
34190322:	60f8      	str	r0, [r7, #12]
34190324:	60b9      	str	r1, [r7, #8]
34190326:	607a      	str	r2, [r7, #4]
34190328:	603b      	str	r3, [r7, #0]
  ISP_StatusTypeDef ret;

  if ((hIsp == NULL) || (hDcmipp == NULL) || (pAppliHelpers == NULL))
3419032a:	68fb      	ldr	r3, [r7, #12]
3419032c:	2b00      	cmp	r3, #0
3419032e:	d005      	beq.n	3419033c <ISP_Init+0x20>
34190330:	68bb      	ldr	r3, [r7, #8]
34190332:	2b00      	cmp	r3, #0
34190334:	d002      	beq.n	3419033c <ISP_Init+0x20>
34190336:	683b      	ldr	r3, [r7, #0]
34190338:	2b00      	cmp	r3, #0
3419033a:	d101      	bne.n	34190340 <ISP_Init+0x24>
  {
    return ISP_ERR_EINVAL;
3419033c:	2301      	movs	r3, #1
3419033e:	e0a3      	b.n	34190488 <ISP_Init+0x16c>
  }

  memset(hIsp, 0, sizeof(*hIsp));
34190340:	2288      	movs	r2, #136	@ 0x88
34190342:	2100      	movs	r1, #0
34190344:	68f8      	ldr	r0, [r7, #12]
34190346:	f002 ff2d 	bl	341931a4 <memset>

#ifdef ISP_MW_TUNING_TOOL_SUPPORT
  ISP_ToolCom_Init();
#endif

  hIsp->hDcmipp = hDcmipp;
3419034a:	68fb      	ldr	r3, [r7, #12]
3419034c:	68ba      	ldr	r2, [r7, #8]
3419034e:	601a      	str	r2, [r3, #0]
  hIsp->cameraInstance = CameraInstance;
34190350:	68fb      	ldr	r3, [r7, #12]
34190352:	687a      	ldr	r2, [r7, #4]
34190354:	605a      	str	r2, [r3, #4]
  hIsp->MainPipe_FrameCount = 0;
34190356:	68fb      	ldr	r3, [r7, #12]
34190358:	2200      	movs	r2, #0
3419035a:	641a      	str	r2, [r3, #64]	@ 0x40
  hIsp->AncillaryPipe_FrameCount = 0;
3419035c:	68fb      	ldr	r3, [r7, #12]
3419035e:	2200      	movs	r2, #0
34190360:	645a      	str	r2, [r3, #68]	@ 0x44
  hIsp->DumpPipe_FrameCount = 0;
34190362:	68fb      	ldr	r3, [r7, #12]
34190364:	2200      	movs	r2, #0
34190366:	649a      	str	r2, [r3, #72]	@ 0x48

  hIsp->appliHelpers = *pAppliHelpers;
34190368:	68fb      	ldr	r3, [r7, #12]
3419036a:	683a      	ldr	r2, [r7, #0]
3419036c:	f103 041c 	add.w	r4, r3, #28
34190370:	4615      	mov	r5, r2
34190372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34190374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34190376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34190378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419037a:	682b      	ldr	r3, [r5, #0]
3419037c:	6023      	str	r3, [r4, #0]
  /* Appli CB is mandatory for the sensor get/set exp/gain function */
  if (hIsp->appliHelpers.GetSensorInfo == NULL)
3419037e:	68fb      	ldr	r3, [r7, #12]
34190380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190382:	2b00      	cmp	r3, #0
34190384:	d104      	bne.n	34190390 <ISP_Init+0x74>
  {
     printf("INFO: GetSensorInfo helper function is not implemented\r\n");
34190386:	4842      	ldr	r0, [pc, #264]	@ (34190490 <ISP_Init+0x174>)
34190388:	f002 fddc 	bl	34192f44 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
3419038c:	23b4      	movs	r3, #180	@ 0xb4
3419038e:	e07b      	b.n	34190488 <ISP_Init+0x16c>
   }
  if (hIsp->appliHelpers.SetSensorGain == NULL)
34190390:	68fb      	ldr	r3, [r7, #12]
34190392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190394:	2b00      	cmp	r3, #0
34190396:	d104      	bne.n	341903a2 <ISP_Init+0x86>
  {
      printf("INFO: SetSensorGain helper function is not implemented\r\n");
34190398:	483e      	ldr	r0, [pc, #248]	@ (34190494 <ISP_Init+0x178>)
3419039a:	f002 fdd3 	bl	34192f44 <puts>
      return ISP_ERR_APP_HELPER_UNDEFINED;
3419039e:	23b4      	movs	r3, #180	@ 0xb4
341903a0:	e072      	b.n	34190488 <ISP_Init+0x16c>
  }
  if (hIsp->appliHelpers.GetSensorGain == NULL)
341903a2:	68fb      	ldr	r3, [r7, #12]
341903a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
341903a6:	2b00      	cmp	r3, #0
341903a8:	d104      	bne.n	341903b4 <ISP_Init+0x98>
  {
     printf("INFO: GetSensorGain helper function is not implemented\r\n");
341903aa:	483b      	ldr	r0, [pc, #236]	@ (34190498 <ISP_Init+0x17c>)
341903ac:	f002 fdca 	bl	34192f44 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
341903b0:	23b4      	movs	r3, #180	@ 0xb4
341903b2:	e069      	b.n	34190488 <ISP_Init+0x16c>
   }
  if (hIsp->appliHelpers.SetSensorExposure == NULL)
341903b4:	68fb      	ldr	r3, [r7, #12]
341903b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
341903b8:	2b00      	cmp	r3, #0
341903ba:	d104      	bne.n	341903c6 <ISP_Init+0xaa>
  {
      printf("INFO: SetSensorExposure helper function is not implemented\r\n");
341903bc:	4837      	ldr	r0, [pc, #220]	@ (3419049c <ISP_Init+0x180>)
341903be:	f002 fdc1 	bl	34192f44 <puts>
      return ISP_ERR_APP_HELPER_UNDEFINED;
341903c2:	23b4      	movs	r3, #180	@ 0xb4
341903c4:	e060      	b.n	34190488 <ISP_Init+0x16c>
  }
  if (hIsp->appliHelpers.GetSensorExposure == NULL)
341903c6:	68fb      	ldr	r3, [r7, #12]
341903c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341903ca:	2b00      	cmp	r3, #0
341903cc:	d104      	bne.n	341903d8 <ISP_Init+0xbc>
  {
     printf("INFO: GetSensorExposure helper function is not implemented\r\n");
341903ce:	4834      	ldr	r0, [pc, #208]	@ (341904a0 <ISP_Init+0x184>)
341903d0:	f002 fdb8 	bl	34192f44 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
341903d4:	23b4      	movs	r3, #180	@ 0xb4
341903d6:	e057      	b.n	34190488 <ISP_Init+0x16c>
   }

  /* Initialize IQ param (read from non volatile memory) */
  ret = ISP_SVC_IQParam_Init(hIsp, ISP_IQParamCacheInit);
341903d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341903da:	68f8      	ldr	r0, [r7, #12]
341903dc:	f001 fb4c 	bl	34191a78 <ISP_SVC_IQParam_Init>
341903e0:	4603      	mov	r3, r0
341903e2:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
341903e4:	7dfb      	ldrb	r3, [r7, #23]
341903e6:	2b00      	cmp	r3, #0
341903e8:	d001      	beq.n	341903ee <ISP_Init+0xd2>
  {
    return ret;
341903ea:	7dfb      	ldrb	r3, [r7, #23]
341903ec:	e04c      	b.n	34190488 <ISP_Init+0x16c>
  }

  /* Set decimation configuration */
  /* Get Sensor Info */
  ret = ISP_SVC_Sensor_GetInfo(hIsp, &hIsp->sensorInfo);
341903ee:	68fb      	ldr	r3, [r7, #12]
341903f0:	334c      	adds	r3, #76	@ 0x4c
341903f2:	4619      	mov	r1, r3
341903f4:	68f8      	ldr	r0, [r7, #12]
341903f6:	f001 f9bf 	bl	34191778 <ISP_SVC_Sensor_GetInfo>
341903fa:	4603      	mov	r3, r0
341903fc:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
341903fe:	7dfb      	ldrb	r3, [r7, #23]
34190400:	2b00      	cmp	r3, #0
34190402:	d001      	beq.n	34190408 <ISP_Init+0xec>
  {
    return ret;
34190404:	7dfb      	ldrb	r3, [r7, #23]
34190406:	e03f      	b.n	34190488 <ISP_Init+0x16c>
  }
  /* Compute the ISP decimation value according to the sensor resolution and the maximum ISP resolution */
  /* It is mandatory to ensure that RAW frame size does not exceed 2688 width prior to demosaicing */
  ISP_DecimationTypeDef decimation;
  if ((hIsp->sensorInfo.width / ISP_DECIM_FACTOR_1) < ISP_RAW_MAX_WIDTH)
34190408:	68fb      	ldr	r3, [r7, #12]
3419040a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419040c:	f5b3 6f28 	cmp.w	r3, #2688	@ 0xa80
34190410:	d202      	bcs.n	34190418 <ISP_Init+0xfc>
  {
    decimation.factor = ISP_DECIM_FACTOR_1;
34190412:	2301      	movs	r3, #1
34190414:	753b      	strb	r3, [r7, #20]
34190416:	e01c      	b.n	34190452 <ISP_Init+0x136>
  }
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_2) < ISP_RAW_MAX_WIDTH)
34190418:	68fb      	ldr	r3, [r7, #12]
3419041a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419041c:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
34190420:	d202      	bcs.n	34190428 <ISP_Init+0x10c>
  {
    decimation.factor = ISP_DECIM_FACTOR_2;
34190422:	2302      	movs	r3, #2
34190424:	753b      	strb	r3, [r7, #20]
34190426:	e014      	b.n	34190452 <ISP_Init+0x136>
  }
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_4) < ISP_RAW_MAX_WIDTH)
34190428:	68fb      	ldr	r3, [r7, #12]
3419042a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419042c:	f5b3 5f28 	cmp.w	r3, #10752	@ 0x2a00
34190430:	d202      	bcs.n	34190438 <ISP_Init+0x11c>
  {
    decimation.factor = ISP_DECIM_FACTOR_4;
34190432:	2304      	movs	r3, #4
34190434:	753b      	strb	r3, [r7, #20]
34190436:	e00c      	b.n	34190452 <ISP_Init+0x136>
  }
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_8) < ISP_RAW_MAX_WIDTH)
34190438:	68fb      	ldr	r3, [r7, #12]
3419043a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419043c:	f5b3 4fa8 	cmp.w	r3, #21504	@ 0x5400
34190440:	d202      	bcs.n	34190448 <ISP_Init+0x12c>
  {
    decimation.factor = ISP_DECIM_FACTOR_8;
34190442:	2308      	movs	r3, #8
34190444:	753b      	strb	r3, [r7, #20]
34190446:	e004      	b.n	34190452 <ISP_Init+0x136>
  }
  else
  {
    printf("ERROR: No possible decimation factor to target ISP RAW width constraint\r\n");
34190448:	4816      	ldr	r0, [pc, #88]	@ (341904a4 <ISP_Init+0x188>)
3419044a:	f002 fd7b 	bl	34192f44 <puts>
    return ISP_ERR_DECIMATION_EINVAL;
3419044e:	231e      	movs	r3, #30
34190450:	e01a      	b.n	34190488 <ISP_Init+0x16c>
  }
  ret = ISP_SVC_ISP_SetDecimation(hIsp, &decimation);
34190452:	f107 0314 	add.w	r3, r7, #20
34190456:	4619      	mov	r1, r3
34190458:	68f8      	ldr	r0, [r7, #12]
3419045a:	f000 fd3b 	bl	34190ed4 <ISP_SVC_ISP_SetDecimation>
3419045e:	4603      	mov	r3, r0
34190460:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
34190462:	7dfb      	ldrb	r3, [r7, #23]
34190464:	2b00      	cmp	r3, #0
34190466:	d001      	beq.n	3419046c <ISP_Init+0x150>
  {
    return ret;
34190468:	7dfb      	ldrb	r3, [r7, #23]
3419046a:	e00d      	b.n	34190488 <ISP_Init+0x16c>
  }

  /* Initialize algorithms */
  ret = ISP_Algo_Init(hIsp);
3419046c:	68f8      	ldr	r0, [r7, #12]
3419046e:	f7ff fef7 	bl	34190260 <ISP_Algo_Init>
34190472:	4603      	mov	r3, r0
34190474:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
34190476:	7dfb      	ldrb	r3, [r7, #23]
34190478:	2b00      	cmp	r3, #0
3419047a:	d001      	beq.n	34190480 <ISP_Init+0x164>
  {
    return ret;
3419047c:	7dfb      	ldrb	r3, [r7, #23]
3419047e:	e003      	b.n	34190488 <ISP_Init+0x16c>
  }

  /* Initialize the statistic engine */
  ISP_SVC_Stats_Init(hIsp);
34190480:	68f8      	ldr	r0, [r7, #12]
34190482:	f001 fb1d 	bl	34191ac0 <ISP_SVC_Stats_Init>

  return ISP_OK;
34190486:	2300      	movs	r3, #0
}
34190488:	4618      	mov	r0, r3
3419048a:	3718      	adds	r7, #24
3419048c:	46bd      	mov	sp, r7
3419048e:	bdb0      	pop	{r4, r5, r7, pc}
34190490:	34194f30 	.word	0x34194f30
34190494:	34194f68 	.word	0x34194f68
34190498:	34194fa0 	.word	0x34194fa0
3419049c:	34194fd8 	.word	0x34194fd8
341904a0:	34195014 	.word	0x34195014
341904a4:	34195050 	.word	0x34195050

341904a8 <ISP_Start>:
  *         Configures the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_Start(ISP_HandleTypeDef *hIsp)
{
341904a8:	b580      	push	{r7, lr}
341904aa:	b084      	sub	sp, #16
341904ac:	af00      	add	r7, sp, #0
341904ae:	6078      	str	r0, [r7, #4]
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;

  if (hIsp == NULL)
341904b0:	687b      	ldr	r3, [r7, #4]
341904b2:	2b00      	cmp	r3, #0
341904b4:	d101      	bne.n	341904ba <ISP_Start+0x12>
  {
    return ISP_ERR_EINVAL;
341904b6:	2301      	movs	r3, #1
341904b8:	e0f6      	b.n	341906a8 <ISP_Start+0x200>
  }

  ret = ISP_SVC_Misc_IsDCMIPPReady(hIsp);
341904ba:	6878      	ldr	r0, [r7, #4]
341904bc:	f001 fa16 	bl	341918ec <ISP_SVC_Misc_IsDCMIPPReady>
341904c0:	4603      	mov	r3, r0
341904c2:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
341904c4:	7bfb      	ldrb	r3, [r7, #15]
341904c6:	2b00      	cmp	r3, #0
341904c8:	d001      	beq.n	341904ce <ISP_Start+0x26>
  {
    return ret;
341904ca:	7bfb      	ldrb	r3, [r7, #15]
341904cc:	e0ec      	b.n	341906a8 <ISP_Start+0x200>
  }

  /* Get IQ Param config */
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
341904ce:	6878      	ldr	r0, [r7, #4]
341904d0:	f001 fae8 	bl	34191aa4 <ISP_SVC_IQParam_Get>
341904d4:	60b8      	str	r0, [r7, #8]

  /* Set static configurations */
  ret = ISP_SVC_ISP_SetDemosaicing(hIsp, &IQParamConfig->demosaicing);
341904d6:	68bb      	ldr	r3, [r7, #8]
341904d8:	330c      	adds	r3, #12
341904da:	4619      	mov	r1, r3
341904dc:	6878      	ldr	r0, [r7, #4]
341904de:	f000 fc3d 	bl	34190d5c <ISP_SVC_ISP_SetDemosaicing>
341904e2:	4603      	mov	r3, r0
341904e4:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
341904e6:	7bfb      	ldrb	r3, [r7, #15]
341904e8:	2b00      	cmp	r3, #0
341904ea:	d001      	beq.n	341904f0 <ISP_Start+0x48>
  {
    return ret;
341904ec:	7bfb      	ldrb	r3, [r7, #15]
341904ee:	e0db      	b.n	341906a8 <ISP_Start+0x200>
  }

  ret = ISP_SVC_ISP_SetStatRemoval(hIsp, &IQParamConfig->statRemoval);
341904f0:	68bb      	ldr	r3, [r7, #8]
341904f2:	4619      	mov	r1, r3
341904f4:	6878      	ldr	r0, [r7, #4]
341904f6:	f000 fca9 	bl	34190e4c <ISP_SVC_ISP_SetStatRemoval>
341904fa:	4603      	mov	r3, r0
341904fc:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
341904fe:	7bfb      	ldrb	r3, [r7, #15]
34190500:	2b00      	cmp	r3, #0
34190502:	d001      	beq.n	34190508 <ISP_Start+0x60>
  {
    return ret;
34190504:	7bfb      	ldrb	r3, [r7, #15]
34190506:	e0cf      	b.n	341906a8 <ISP_Start+0x200>
  }

  ret = ISP_SVC_ISP_SetContrast(hIsp, &IQParamConfig->contrast);
34190508:	68bb      	ldr	r3, [r7, #8]
3419050a:	3314      	adds	r3, #20
3419050c:	4619      	mov	r1, r3
3419050e:	6878      	ldr	r0, [r7, #4]
34190510:	f000 fd42 	bl	34190f98 <ISP_SVC_ISP_SetContrast>
34190514:	4603      	mov	r3, r0
34190516:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
34190518:	7bfb      	ldrb	r3, [r7, #15]
3419051a:	2b00      	cmp	r3, #0
3419051c:	d001      	beq.n	34190522 <ISP_Start+0x7a>
  {
    return ret;
3419051e:	7bfb      	ldrb	r3, [r7, #15]
34190520:	e0c2      	b.n	341906a8 <ISP_Start+0x200>
  }

  /* Set optional static configurations */
  if ((IQParamConfig->sensorGainStatic.gain != 0) && (!IQParamConfig->AECAlgo.enable))
34190522:	68bb      	ldr	r3, [r7, #8]
34190524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34190526:	2b00      	cmp	r3, #0
34190528:	d011      	beq.n	3419054e <ISP_Start+0xa6>
3419052a:	68bb      	ldr	r3, [r7, #8]
3419052c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
34190530:	2b00      	cmp	r3, #0
34190532:	d10c      	bne.n	3419054e <ISP_Start+0xa6>
  {
    ret = ISP_SVC_Sensor_SetGain(hIsp, &IQParamConfig->sensorGainStatic);
34190534:	68bb      	ldr	r3, [r7, #8]
34190536:	334c      	adds	r3, #76	@ 0x4c
34190538:	4619      	mov	r1, r3
3419053a:	6878      	ldr	r0, [r7, #4]
3419053c:	f001 f93e 	bl	341917bc <ISP_SVC_Sensor_SetGain>
34190540:	4603      	mov	r3, r0
34190542:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
34190544:	7bfb      	ldrb	r3, [r7, #15]
34190546:	2b00      	cmp	r3, #0
34190548:	d001      	beq.n	3419054e <ISP_Start+0xa6>
    {
      return ret;
3419054a:	7bfb      	ldrb	r3, [r7, #15]
3419054c:	e0ac      	b.n	341906a8 <ISP_Start+0x200>
    }
  }

  if ((IQParamConfig->sensorExposureStatic.exposure != 0) && (!IQParamConfig->AECAlgo.enable))
3419054e:	68bb      	ldr	r3, [r7, #8]
34190550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34190552:	2b00      	cmp	r3, #0
34190554:	d011      	beq.n	3419057a <ISP_Start+0xd2>
34190556:	68bb      	ldr	r3, [r7, #8]
34190558:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3419055c:	2b00      	cmp	r3, #0
3419055e:	d10c      	bne.n	3419057a <ISP_Start+0xd2>
  {
    ret = ISP_SVC_Sensor_SetExposure(hIsp, &IQParamConfig->sensorExposureStatic);
34190560:	68bb      	ldr	r3, [r7, #8]
34190562:	3350      	adds	r3, #80	@ 0x50
34190564:	4619      	mov	r1, r3
34190566:	6878      	ldr	r0, [r7, #4]
34190568:	f001 f974 	bl	34191854 <ISP_SVC_Sensor_SetExposure>
3419056c:	4603      	mov	r3, r0
3419056e:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
34190570:	7bfb      	ldrb	r3, [r7, #15]
34190572:	2b00      	cmp	r3, #0
34190574:	d001      	beq.n	3419057a <ISP_Start+0xd2>
    {
      return ret;
34190576:	7bfb      	ldrb	r3, [r7, #15]
34190578:	e096      	b.n	341906a8 <ISP_Start+0x200>
    }
  }

  if (IQParamConfig->badPixelStatic.enable != 0)
3419057a:	68bb      	ldr	r3, [r7, #8]
3419057c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
34190580:	2b00      	cmp	r3, #0
34190582:	d00c      	beq.n	3419059e <ISP_Start+0xf6>
  {
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &IQParamConfig->badPixelStatic);
34190584:	68bb      	ldr	r3, [r7, #8]
34190586:	335c      	adds	r3, #92	@ 0x5c
34190588:	4619      	mov	r1, r3
3419058a:	6878      	ldr	r0, [r7, #4]
3419058c:	f000 fe44 	bl	34191218 <ISP_SVC_ISP_SetBadPixel>
34190590:	4603      	mov	r3, r0
34190592:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
34190594:	7bfb      	ldrb	r3, [r7, #15]
34190596:	2b00      	cmp	r3, #0
34190598:	d001      	beq.n	3419059e <ISP_Start+0xf6>
    {
      return ret;
3419059a:	7bfb      	ldrb	r3, [r7, #15]
3419059c:	e084      	b.n	341906a8 <ISP_Start+0x200>
    }
  }

  if (IQParamConfig->blackLevelStatic.enable != 0)
3419059e:	68bb      	ldr	r3, [r7, #8]
341905a0:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
341905a4:	2b00      	cmp	r3, #0
341905a6:	d00c      	beq.n	341905c2 <ISP_Start+0x11a>
  {
    ret = ISP_SVC_ISP_SetBlackLevel(hIsp, &IQParamConfig->blackLevelStatic);
341905a8:	68bb      	ldr	r3, [r7, #8]
341905aa:	3364      	adds	r3, #100	@ 0x64
341905ac:	4619      	mov	r1, r3
341905ae:	6878      	ldr	r0, [r7, #4]
341905b0:	f000 fea6 	bl	34191300 <ISP_SVC_ISP_SetBlackLevel>
341905b4:	4603      	mov	r3, r0
341905b6:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
341905b8:	7bfb      	ldrb	r3, [r7, #15]
341905ba:	2b00      	cmp	r3, #0
341905bc:	d001      	beq.n	341905c2 <ISP_Start+0x11a>
    {
      return ret;
341905be:	7bfb      	ldrb	r3, [r7, #15]
341905c0:	e072      	b.n	341906a8 <ISP_Start+0x200>
    }
  }

  if ((IQParamConfig->ispGainStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
341905c2:	68bb      	ldr	r3, [r7, #8]
341905c4:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
341905c8:	2b00      	cmp	r3, #0
341905ca:	d012      	beq.n	341905f2 <ISP_Start+0x14a>
341905cc:	68bb      	ldr	r3, [r7, #8]
341905ce:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
341905d2:	2b00      	cmp	r3, #0
341905d4:	d10d      	bne.n	341905f2 <ISP_Start+0x14a>
  {
    ret = ISP_SVC_ISP_SetGain(hIsp, &IQParamConfig->ispGainStatic);
341905d6:	68bb      	ldr	r3, [r7, #8]
341905d8:	f503 7306 	add.w	r3, r3, #536	@ 0x218
341905dc:	4619      	mov	r1, r3
341905de:	6878      	ldr	r0, [r7, #4]
341905e0:	f000 fefe 	bl	341913e0 <ISP_SVC_ISP_SetGain>
341905e4:	4603      	mov	r3, r0
341905e6:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
341905e8:	7bfb      	ldrb	r3, [r7, #15]
341905ea:	2b00      	cmp	r3, #0
341905ec:	d001      	beq.n	341905f2 <ISP_Start+0x14a>
    {
      return ret;
341905ee:	7bfb      	ldrb	r3, [r7, #15]
341905f0:	e05a      	b.n	341906a8 <ISP_Start+0x200>
    }
  }

  if ((IQParamConfig->colorConvStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
341905f2:	68bb      	ldr	r3, [r7, #8]
341905f4:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
341905f8:	2b00      	cmp	r3, #0
341905fa:	d012      	beq.n	34190622 <ISP_Start+0x17a>
341905fc:	68bb      	ldr	r3, [r7, #8]
341905fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
34190602:	2b00      	cmp	r3, #0
34190604:	d10d      	bne.n	34190622 <ISP_Start+0x17a>
  {
    ret = ISP_SVC_ISP_SetColorConv(hIsp, &IQParamConfig->colorConvStatic);
34190606:	68bb      	ldr	r3, [r7, #8]
34190608:	f503 730a 	add.w	r3, r3, #552	@ 0x228
3419060c:	4619      	mov	r1, r3
3419060e:	6878      	ldr	r0, [r7, #4]
34190610:	f000 ff90 	bl	34191534 <ISP_SVC_ISP_SetColorConv>
34190614:	4603      	mov	r3, r0
34190616:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
34190618:	7bfb      	ldrb	r3, [r7, #15]
3419061a:	2b00      	cmp	r3, #0
3419061c:	d001      	beq.n	34190622 <ISP_Start+0x17a>
    {
      return ret;
3419061e:	7bfb      	ldrb	r3, [r7, #15]
34190620:	e042      	b.n	341906a8 <ISP_Start+0x200>
    }
  }

  /* Configure statistic area if not already configured by ISP_SetStatArea() */
  if ((hIsp->statArea.XSize == 0) || (hIsp->statArea.YSize == 0))
34190622:	687b      	ldr	r3, [r7, #4]
34190624:	691b      	ldr	r3, [r3, #16]
34190626:	2b00      	cmp	r3, #0
34190628:	d003      	beq.n	34190632 <ISP_Start+0x18a>
3419062a:	687b      	ldr	r3, [r7, #4]
3419062c:	695b      	ldr	r3, [r3, #20]
3419062e:	2b00      	cmp	r3, #0
34190630:	d10c      	bne.n	3419064c <ISP_Start+0x1a4>
  {
    /* Configure statistic area from IQ params */
    ret = ISP_SVC_ISP_SetStatArea(hIsp, &IQParamConfig->statAreaStatic);
34190632:	68bb      	ldr	r3, [r7, #8]
34190634:	333c      	adds	r3, #60	@ 0x3c
34190636:	4619      	mov	r1, r3
34190638:	6878      	ldr	r0, [r7, #4]
3419063a:	f000 fd67 	bl	3419110c <ISP_SVC_ISP_SetStatArea>
3419063e:	4603      	mov	r3, r0
34190640:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
34190642:	7bfb      	ldrb	r3, [r7, #15]
34190644:	2b00      	cmp	r3, #0
34190646:	d001      	beq.n	3419064c <ISP_Start+0x1a4>
    {
      return ret;
34190648:	7bfb      	ldrb	r3, [r7, #15]
3419064a:	e02d      	b.n	341906a8 <ISP_Start+0x200>
    }
  }

  ret = ISP_SVC_ISP_SetGamma(hIsp, &IQParamConfig->gamma);
3419064c:	68bb      	ldr	r3, [r7, #8]
3419064e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
34190652:	4619      	mov	r1, r3
34190654:	6878      	ldr	r0, [r7, #4]
34190656:	f001 f9c9 	bl	341919ec <ISP_SVC_ISP_SetGamma>
3419065a:	4603      	mov	r3, r0
3419065c:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3419065e:	7bfb      	ldrb	r3, [r7, #15]
34190660:	2b00      	cmp	r3, #0
34190662:	d001      	beq.n	34190668 <ISP_Start+0x1c0>
  {
    return ret;
34190664:	7bfb      	ldrb	r3, [r7, #15]
34190666:	e01f      	b.n	341906a8 <ISP_Start+0x200>
  }

  /* Initialize the exposure target based on the selected exposure compensation */
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));
34190668:	68bb      	ldr	r3, [r7, #8]
3419066a:	f993 3069 	ldrsb.w	r3, [r3, #105]	@ 0x69
3419066e:	ee07 3a90 	vmov	s15, r3
34190672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
34190676:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
3419067a:	eec7 7a26 	vdiv.f32	s15, s14, s13
3419067e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
34190682:	eeb0 1b47 	vmov.f64	d1, d7
34190686:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
3419068a:	f003 fd49 	bl	34194120 <pow>
3419068e:	eeb0 7b40 	vmov.f64	d7, d0
34190692:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 341906b0 <ISP_Start+0x208>
34190696:	ee27 7b06 	vmul.f64	d7, d7, d6
3419069a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
3419069e:	ee17 2a90 	vmov	r2, s15
341906a2:	68bb      	ldr	r3, [r7, #8]
341906a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ISP_OK;
341906a6:	2300      	movs	r3, #0
}
341906a8:	4618      	mov	r0, r3
341906aa:	3710      	adds	r7, #16
341906ac:	46bd      	mov	sp, r7
341906ae:	bd80      	pop	{r7, pc}
341906b0:	00000000 	.word	0x00000000
341906b4:	404c0000 	.word	0x404c0000

341906b8 <ISP_BackgroundProcess>:
  *         Run the background process of the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_BackgroundProcess(ISP_HandleTypeDef *hIsp)
{
341906b8:	b580      	push	{r7, lr}
341906ba:	b084      	sub	sp, #16
341906bc:	af00      	add	r7, sp, #0
341906be:	6078      	str	r0, [r7, #4]
#ifdef ISP_MW_TUNING_TOOL_SUPPORT
  ISP_StatusTypeDef retCmdParser = ISP_OK;
  uint8_t *cmd;
#endif

  if (hIsp == NULL)
341906c0:	687b      	ldr	r3, [r7, #4]
341906c2:	2b00      	cmp	r3, #0
341906c4:	d101      	bne.n	341906ca <ISP_BackgroundProcess+0x12>
  {
    return ISP_ERR_EINVAL;
341906c6:	2301      	movs	r3, #1
341906c8:	e014      	b.n	341906f4 <ISP_BackgroundProcess+0x3c>
    retCmdParser = ISP_CmdParser_ProcessCommand(hIsp, cmd);
  }
#endif

  /* Check if a statistics gathering cycle has been completed to call the statistic callbacks */
  retStats = ISP_SVC_Stats_ProcessCallbacks(hIsp);
341906ca:	6878      	ldr	r0, [r7, #4]
341906cc:	f001 fcd2 	bl	34192074 <ISP_SVC_Stats_ProcessCallbacks>
341906d0:	4603      	mov	r3, r0
341906d2:	73fb      	strb	r3, [r7, #15]

  /* Process the algorithms */
  retAlgo = ISP_Algo_Process(hIsp);
341906d4:	6878      	ldr	r0, [r7, #4]
341906d6:	f7ff fdf5 	bl	341902c4 <ISP_Algo_Process>
341906da:	4603      	mov	r3, r0
341906dc:	73bb      	strb	r3, [r7, #14]
  if (retCmdParser != ISP_OK)
  {
    return retCmdParser;
  }
#endif
  if (retStats != ISP_OK)
341906de:	7bfb      	ldrb	r3, [r7, #15]
341906e0:	2b00      	cmp	r3, #0
341906e2:	d001      	beq.n	341906e8 <ISP_BackgroundProcess+0x30>
  {
    return retStats;
341906e4:	7bfb      	ldrb	r3, [r7, #15]
341906e6:	e005      	b.n	341906f4 <ISP_BackgroundProcess+0x3c>
  }
  else if (retAlgo != ISP_OK)
341906e8:	7bbb      	ldrb	r3, [r7, #14]
341906ea:	2b00      	cmp	r3, #0
341906ec:	d001      	beq.n	341906f2 <ISP_BackgroundProcess+0x3a>
  {
    return retAlgo;
341906ee:	7bbb      	ldrb	r3, [r7, #14]
341906f0:	e000      	b.n	341906f4 <ISP_BackgroundProcess+0x3c>
  }

  return ISP_OK;
341906f2:	2300      	movs	r3, #0
}
341906f4:	4618      	mov	r0, r3
341906f6:	3710      	adds	r7, #16
341906f8:	46bd      	mov	sp, r7
341906fa:	bd80      	pop	{r7, pc}

341906fc <ISP_GatherStatistics>:
  *         Gather statistics
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_GatherStatistics(ISP_HandleTypeDef *hIsp)
{
341906fc:	b580      	push	{r7, lr}
341906fe:	b082      	sub	sp, #8
34190700:	af00      	add	r7, sp, #0
34190702:	6078      	str	r0, [r7, #4]
  ISP_SVC_Stats_Gather(hIsp);
34190704:	6878      	ldr	r0, [r7, #4]
34190706:	f001 f9eb 	bl	34191ae0 <ISP_SVC_Stats_Gather>
}
3419070a:	bf00      	nop
3419070c:	3708      	adds	r7, #8
3419070e:	46bd      	mov	sp, r7
34190710:	bd80      	pop	{r7, pc}

34190712 <ISP_IncMainFrameId>:
  *         Increment the frame ID of the frame output on the main pipe
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
34190712:	b580      	push	{r7, lr}
34190714:	b082      	sub	sp, #8
34190716:	af00      	add	r7, sp, #0
34190718:	6078      	str	r0, [r7, #4]
  ISP_SVC_Misc_IncMainFrameId(hIsp);
3419071a:	6878      	ldr	r0, [r7, #4]
3419071c:	f001 f8fe 	bl	3419191c <ISP_SVC_Misc_IncMainFrameId>
}
34190720:	bf00      	nop
34190722:	3708      	adds	r7, #8
34190724:	46bd      	mov	sp, r7
34190726:	bd80      	pop	{r7, pc}

34190728 <ISP_IncAncillaryFrameId>:
  *         Increment the frame ID of the frame output on the ancillary pipe
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
34190728:	b580      	push	{r7, lr}
3419072a:	b082      	sub	sp, #8
3419072c:	af00      	add	r7, sp, #0
3419072e:	6078      	str	r0, [r7, #4]
	ISP_SVC_Misc_IncAncillaryFrameId(hIsp);
34190730:	6878      	ldr	r0, [r7, #4]
34190732:	f001 f90e 	bl	34191952 <ISP_SVC_Misc_IncAncillaryFrameId>
}
34190736:	bf00      	nop
34190738:	3708      	adds	r7, #8
3419073a:	46bd      	mov	sp, r7
3419073c:	bd80      	pop	{r7, pc}

3419073e <ISP_IncDumpFrameId>:
  *         Increment the frame ID of the frame output on the dump pipe
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
3419073e:	b580      	push	{r7, lr}
34190740:	b082      	sub	sp, #8
34190742:	af00      	add	r7, sp, #0
34190744:	6078      	str	r0, [r7, #4]
  ISP_SVC_Misc_IncDumpFrameId(hIsp);
34190746:	6878      	ldr	r0, [r7, #4]
34190748:	f001 f912 	bl	34191970 <ISP_SVC_Misc_IncDumpFrameId>
}
3419074c:	bf00      	nop
3419074e:	3708      	adds	r7, #8
34190750:	46bd      	mov	sp, r7
34190752:	bd80      	pop	{r7, pc}
34190754:	0000      	movs	r0, r0
	...

34190758 <To_Shift_Multiplier>:
/* Exported variables --------------------------------------------------------*/
extern ISP_MetaTypeDef Meta;

/* Private functions ---------------------------------------------------------*/
static void To_Shift_Multiplier(uint32_t Factor, uint8_t *pShift, uint8_t *pMultiplier)
{
34190758:	b5b0      	push	{r4, r5, r7, lr}
3419075a:	b086      	sub	sp, #24
3419075c:	af00      	add	r7, sp, #0
3419075e:	60f8      	str	r0, [r7, #12]
34190760:	60b9      	str	r1, [r7, #8]
34190762:	607a      	str	r2, [r7, #4]
  /* Convert Factor (Unit = 100000000 for "x1.0") to Multiplier (where 128 means "x1.0") */
  uint64_t Val = Factor;
34190764:	68fb      	ldr	r3, [r7, #12]
34190766:	2200      	movs	r2, #0
34190768:	461c      	mov	r4, r3
3419076a:	4615      	mov	r5, r2
3419076c:	e9c7 4504 	strd	r4, r5, [r7, #16]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34190770:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
34190774:	4610      	mov	r0, r2
34190776:	4619      	mov	r1, r3
34190778:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
3419077c:	a314      	add	r3, pc, #80	@ (adr r3, 341907d0 <To_Shift_Multiplier+0x78>)
3419077e:	e9d3 2300 	ldrd	r2, r3, [r3]
34190782:	f7f0 ff2b 	bl	341815dc <__aeabi_uldivmod>
34190786:	4602      	mov	r2, r0
34190788:	460b      	mov	r3, r1
3419078a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Get Shift + Multiplier where Multiplier < 256 */
  *pShift = 0;
3419078e:	68bb      	ldr	r3, [r7, #8]
34190790:	2200      	movs	r2, #0
34190792:	701a      	strb	r2, [r3, #0]
  while (Val >= 256)
34190794:	e00b      	b.n	341907ae <To_Shift_Multiplier+0x56>
  {
    Val /= 2;
34190796:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3419079a:	ea52 035f 	orrs.w	r3, r2, pc, lsr #1
3419079e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    (*pShift)++;
341907a2:	68bb      	ldr	r3, [r7, #8]
341907a4:	781b      	ldrb	r3, [r3, #0]
341907a6:	3301      	adds	r3, #1
341907a8:	b2da      	uxtb	r2, r3
341907aa:	68bb      	ldr	r3, [r7, #8]
341907ac:	701a      	strb	r2, [r3, #0]
  while (Val >= 256)
341907ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
341907b2:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
341907b6:	f173 0300 	sbcs.w	r3, r3, #0
341907ba:	d2ec      	bcs.n	34190796 <To_Shift_Multiplier+0x3e>
  }

  *pMultiplier = Val;
341907bc:	7c3a      	ldrb	r2, [r7, #16]
341907be:	687b      	ldr	r3, [r7, #4]
341907c0:	701a      	strb	r2, [r3, #0]
}
341907c2:	bf00      	nop
341907c4:	3718      	adds	r7, #24
341907c6:	46bd      	mov	sp, r7
341907c8:	bdb0      	pop	{r4, r5, r7, pc}
341907ca:	bf00      	nop
341907cc:	f3af 8000 	nop.w
341907d0:	05f5e100 	.word	0x05f5e100
341907d4:	00000000 	.word	0x00000000

341907d8 <From_Shift_Multiplier>:

static uint32_t From_Shift_Multiplier(uint8_t Shift, uint8_t Multiplier)
{
341907d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
341907dc:	b084      	sub	sp, #16
341907de:	af00      	add	r7, sp, #0
341907e0:	4606      	mov	r6, r0
341907e2:	4608      	mov	r0, r1
341907e4:	4631      	mov	r1, r6
341907e6:	71f9      	strb	r1, [r7, #7]
341907e8:	4601      	mov	r1, r0
341907ea:	71b9      	strb	r1, [r7, #6]
  /* Convert Shift + Multiplier to Factor (Unit = 100000000 for "x1.0") */
  uint64_t Val = (1 << Shift);
341907ec:	79f9      	ldrb	r1, [r7, #7]
341907ee:	2001      	movs	r0, #1
341907f0:	fa00 f101 	lsl.w	r1, r0, r1
341907f4:	17c8      	asrs	r0, r1, #31
341907f6:	468a      	mov	sl, r1
341907f8:	4683      	mov	fp, r0
341907fa:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
341907fe:	79b9      	ldrb	r1, [r7, #6]
34190800:	2000      	movs	r0, #0
34190802:	4688      	mov	r8, r1
34190804:	4681      	mov	r9, r0
34190806:	68b9      	ldr	r1, [r7, #8]
34190808:	fb09 f001 	mul.w	r0, r9, r1
3419080c:	68f9      	ldr	r1, [r7, #12]
3419080e:	fb08 f101 	mul.w	r1, r8, r1
34190812:	4401      	add	r1, r0
34190814:	68b8      	ldr	r0, [r7, #8]
34190816:	fba0 2308 	umull	r2, r3, r0, r8
3419081a:	4419      	add	r1, r3
3419081c:	460b      	mov	r3, r1
3419081e:	490c      	ldr	r1, [pc, #48]	@ (34190850 <From_Shift_Multiplier+0x78>)
34190820:	fb01 f003 	mul.w	r0, r1, r3
34190824:	2100      	movs	r1, #0
34190826:	fb02 f101 	mul.w	r1, r2, r1
3419082a:	4401      	add	r1, r0
3419082c:	4808      	ldr	r0, [pc, #32]	@ (34190850 <From_Shift_Multiplier+0x78>)
3419082e:	fba2 4500 	umull	r4, r5, r2, r0
34190832:	194b      	adds	r3, r1, r5
34190834:	461d      	mov	r5, r3
34190836:	4622      	mov	r2, r4
34190838:	462b      	mov	r3, r5
3419083a:	ea52 13df 	orrs.w	r3, r2, pc, lsr #7
3419083e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return (uint32_t) Val;
34190842:	68bb      	ldr	r3, [r7, #8]
}
34190844:	4618      	mov	r0, r3
34190846:	3710      	adds	r7, #16
34190848:	46bd      	mov	sp, r7
3419084a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
3419084e:	4770      	bx	lr
34190850:	05f5e100 	.word	0x05f5e100

34190854 <To_CConv_Reg>:

static int16_t To_CConv_Reg(int32_t Coeff)
{
34190854:	b580      	push	{r7, lr}
34190856:	b084      	sub	sp, #16
34190858:	af00      	add	r7, sp, #0
3419085a:	6078      	str	r0, [r7, #4]
  /* Convert Coefficient (Unit = 100000000 for "x1.0") to register format */
  int64_t Val = Coeff;
3419085c:	6879      	ldr	r1, [r7, #4]
3419085e:	17c8      	asrs	r0, r1, #31
34190860:	460a      	mov	r2, r1
34190862:	4603      	mov	r3, r0
34190864:	e9c7 2302 	strd	r2, r3, [r7, #8]

  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34190868:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3419086c:	4a07      	ldr	r2, [pc, #28]	@ (3419088c <To_CConv_Reg+0x38>)
3419086e:	f04f 0300 	mov.w	r3, #0
34190872:	f7f0 fe63 	bl	3418153c <__aeabi_ldivmod>
34190876:	4602      	mov	r2, r0
34190878:	460b      	mov	r3, r1
3419087a:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return (int16_t) Val;
3419087e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
34190882:	4618      	mov	r0, r3
34190884:	3710      	adds	r7, #16
34190886:	46bd      	mov	sp, r7
34190888:	bd80      	pop	{r7, pc}
3419088a:	bf00      	nop
3419088c:	0005f5e1 	.word	0x0005f5e1

34190890 <From_CConv_Reg>:

static int32_t From_CConv_Reg(int16_t Reg)
{
34190890:	b4b0      	push	{r4, r5, r7}
34190892:	b085      	sub	sp, #20
34190894:	af00      	add	r7, sp, #0
34190896:	4601      	mov	r1, r0
34190898:	80f9      	strh	r1, [r7, #6]
  /* Convert from register format to Coefficient (Unit = 100000000 for "x1.0") */
  int64_t Val = Reg;
3419089a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
3419089e:	17c8      	asrs	r0, r1, #31
341908a0:	460c      	mov	r4, r1
341908a2:	4605      	mov	r5, r0
341908a4:	e9c7 4502 	strd	r4, r5, [r7, #8]

  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
341908a8:	68f9      	ldr	r1, [r7, #12]
341908aa:	480c      	ldr	r0, [pc, #48]	@ (341908dc <From_CConv_Reg+0x4c>)
341908ac:	fb01 f000 	mul.w	r0, r1, r0
341908b0:	68b9      	ldr	r1, [r7, #8]
341908b2:	2400      	movs	r4, #0
341908b4:	fb04 f101 	mul.w	r1, r4, r1
341908b8:	4401      	add	r1, r0
341908ba:	68b8      	ldr	r0, [r7, #8]
341908bc:	4c07      	ldr	r4, [pc, #28]	@ (341908dc <From_CConv_Reg+0x4c>)
341908be:	fba0 2304 	umull	r2, r3, r0, r4
341908c2:	4419      	add	r1, r3
341908c4:	460b      	mov	r3, r1
341908c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
341908ca:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return (int32_t) Val;
341908ce:	68bb      	ldr	r3, [r7, #8]
}
341908d0:	4618      	mov	r0, r3
341908d2:	3714      	adds	r7, #20
341908d4:	46bd      	mov	sp, r7
341908d6:	bcb0      	pop	{r4, r5, r7}
341908d8:	4770      	bx	lr
341908da:	bf00      	nop
341908dc:	0005f5e1 	.word	0x0005f5e1

341908e0 <GetAvgStats>:

static uint8_t GetAvgStats(ISP_HandleTypeDef *hIsp, ISP_SVC_StatLocation location, ISP_SVC_Component component, uint32_t accu)
{
341908e0:	b480      	push	{r7}
341908e2:	b087      	sub	sp, #28
341908e4:	af00      	add	r7, sp, #0
341908e6:	60f8      	str	r0, [r7, #12]
341908e8:	607b      	str	r3, [r7, #4]
341908ea:	460b      	mov	r3, r1
341908ec:	72fb      	strb	r3, [r7, #11]
341908ee:	4613      	mov	r3, r2
341908f0:	72bb      	strb	r3, [r7, #10]
  uint32_t nb_comp_pix, comp_divider;

  /* Number of pixels computed from Stat Area and considering decimation */
  nb_comp_pix = hIsp->statArea.XSize * hIsp->statArea.YSize;
341908f2:	68fb      	ldr	r3, [r7, #12]
341908f4:	691b      	ldr	r3, [r3, #16]
341908f6:	68fa      	ldr	r2, [r7, #12]
341908f8:	6952      	ldr	r2, [r2, #20]
341908fa:	fb02 f303 	mul.w	r3, r2, r3
341908fe:	613b      	str	r3, [r7, #16]
  nb_comp_pix /= ISP_DecimationValue.factor * ISP_DecimationValue.factor;
34190900:	4b18      	ldr	r3, [pc, #96]	@ (34190964 <GetAvgStats+0x84>)
34190902:	781b      	ldrb	r3, [r3, #0]
34190904:	461a      	mov	r2, r3
34190906:	4b17      	ldr	r3, [pc, #92]	@ (34190964 <GetAvgStats+0x84>)
34190908:	781b      	ldrb	r3, [r3, #0]
3419090a:	fb02 f303 	mul.w	r3, r2, r3
3419090e:	461a      	mov	r2, r3
34190910:	693b      	ldr	r3, [r7, #16]
34190912:	fbb3 f3f2 	udiv	r3, r3, r2
34190916:	613b      	str	r3, [r7, #16]

  if (location == ISP_STAT_LOC_DOWN)
34190918:	7afb      	ldrb	r3, [r7, #11]
3419091a:	2b02      	cmp	r3, #2
3419091c:	d102      	bne.n	34190924 <GetAvgStats+0x44>
  {
    /* RGB format after demosaicing : 1 component per pixel */
    comp_divider = 1;
3419091e:	2301      	movs	r3, #1
34190920:	617b      	str	r3, [r7, #20]
34190922:	e006      	b.n	34190932 <GetAvgStats+0x52>
  }
  else
  {
    /* Only raw bayer sensor expected */
    /* raw bayer: RGB component not present for all pixels */
    comp_divider = (component == ISP_GREEN) ? 2 : 4;
34190924:	7abb      	ldrb	r3, [r7, #10]
34190926:	2b01      	cmp	r3, #1
34190928:	d101      	bne.n	3419092e <GetAvgStats+0x4e>
3419092a:	2302      	movs	r3, #2
3419092c:	e000      	b.n	34190930 <GetAvgStats+0x50>
3419092e:	2304      	movs	r3, #4
34190930:	617b      	str	r3, [r7, #20]
  }

  /* Number of pixels per component */
  nb_comp_pix /= comp_divider;
34190932:	693a      	ldr	r2, [r7, #16]
34190934:	697b      	ldr	r3, [r7, #20]
34190936:	fbb2 f3f3 	udiv	r3, r2, r3
3419093a:	613b      	str	r3, [r7, #16]

  /* Compute average (rounding to closest integer) */
  if (nb_comp_pix == 0)
3419093c:	693b      	ldr	r3, [r7, #16]
3419093e:	2b00      	cmp	r3, #0
34190940:	d101      	bne.n	34190946 <GetAvgStats+0x66>
  {
    return 0;
34190942:	2300      	movs	r3, #0
34190944:	e008      	b.n	34190958 <GetAvgStats+0x78>
  }

  return ((accu * 256) + (nb_comp_pix / 2)) / nb_comp_pix;
34190946:	687b      	ldr	r3, [r7, #4]
34190948:	021a      	lsls	r2, r3, #8
3419094a:	693b      	ldr	r3, [r7, #16]
3419094c:	085b      	lsrs	r3, r3, #1
3419094e:	441a      	add	r2, r3
34190950:	693b      	ldr	r3, [r7, #16]
34190952:	fbb2 f3f3 	udiv	r3, r2, r3
34190956:	b2db      	uxtb	r3, r3
}
34190958:	4618      	mov	r0, r3
3419095a:	371c      	adds	r7, #28
3419095c:	46bd      	mov	sp, r7
3419095e:	f85d 7b04 	ldr.w	r7, [sp], #4
34190962:	4770      	bx	lr
34190964:	341c0134 	.word	0x341c0134

34190968 <ReadStatHistogram>:

static void ReadStatHistogram(ISP_HandleTypeDef *hIsp, uint32_t *histogram)
{
34190968:	b580      	push	{r7, lr}
3419096a:	b084      	sub	sp, #16
3419096c:	af00      	add	r7, sp, #0
3419096e:	6078      	str	r0, [r7, #4]
34190970:	6039      	str	r1, [r7, #0]
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34190972:	2301      	movs	r3, #1
34190974:	60fb      	str	r3, [r7, #12]
34190976:	e011      	b.n	3419099c <ReadStatHistogram+0x34>
  {
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
34190978:	687b      	ldr	r3, [r7, #4]
3419097a:	6818      	ldr	r0, [r3, #0]
3419097c:	68fb      	ldr	r3, [r7, #12]
3419097e:	b2d9      	uxtb	r1, r3
34190980:	68fb      	ldr	r3, [r7, #12]
34190982:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
34190986:	3b01      	subs	r3, #1
34190988:	009b      	lsls	r3, r3, #2
3419098a:	683a      	ldr	r2, [r7, #0]
3419098c:	4413      	add	r3, r2
3419098e:	460a      	mov	r2, r1
34190990:	2101      	movs	r1, #1
34190992:	f7f6 f81f 	bl	341869d4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34190996:	68fb      	ldr	r3, [r7, #12]
34190998:	3301      	adds	r3, #1
3419099a:	60fb      	str	r3, [r7, #12]
3419099c:	68fb      	ldr	r3, [r7, #12]
3419099e:	2b03      	cmp	r3, #3
341909a0:	d9ea      	bls.n	34190978 <ReadStatHistogram+0x10>
  }
}
341909a2:	bf00      	nop
341909a4:	bf00      	nop
341909a6:	3710      	adds	r7, #16
341909a8:	46bd      	mov	sp, r7
341909aa:	bd80      	pop	{r7, pc}

341909ac <SetStatConfig>:

static void SetStatConfig(DCMIPP_StatisticExtractionConfTypeDef *statConf, const DCMIPP_StatisticExtractionConfTypeDef *refConfig)
{
341909ac:	b480      	push	{r7}
341909ae:	b085      	sub	sp, #20
341909b0:	af00      	add	r7, sp, #0
341909b2:	6078      	str	r0, [r7, #4]
341909b4:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 3; i++)
341909b6:	2300      	movs	r3, #0
341909b8:	60fb      	str	r3, [r7, #12]
341909ba:	e00e      	b.n	341909da <SetStatConfig+0x2e>
  {
    statConf[i] = *refConfig;
341909bc:	68fa      	ldr	r2, [r7, #12]
341909be:	4613      	mov	r3, r2
341909c0:	005b      	lsls	r3, r3, #1
341909c2:	4413      	add	r3, r2
341909c4:	009b      	lsls	r3, r3, #2
341909c6:	461a      	mov	r2, r3
341909c8:	687b      	ldr	r3, [r7, #4]
341909ca:	4413      	add	r3, r2
341909cc:	683a      	ldr	r2, [r7, #0]
341909ce:	ca07      	ldmia	r2, {r0, r1, r2}
341909d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for (int i = 0; i < 3; i++)
341909d4:	68fb      	ldr	r3, [r7, #12]
341909d6:	3301      	adds	r3, #1
341909d8:	60fb      	str	r3, [r7, #12]
341909da:	68fb      	ldr	r3, [r7, #12]
341909dc:	2b02      	cmp	r3, #2
341909de:	dded      	ble.n	341909bc <SetStatConfig+0x10>
  }
}
341909e0:	bf00      	nop
341909e2:	bf00      	nop
341909e4:	3714      	adds	r7, #20
341909e6:	46bd      	mov	sp, r7
341909e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341909ec:	4770      	bx	lr
	...

341909f0 <GetNextStatStage>:

static ISP_SVC_StatEngineStage GetNextStatStage(ISP_SVC_StatEngineStage current)
{
341909f0:	b480      	push	{r7}
341909f2:	b085      	sub	sp, #20
341909f4:	af00      	add	r7, sp, #0
341909f6:	4603      	mov	r3, r0
341909f8:	71fb      	strb	r3, [r7, #7]
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
341909fa:	2309      	movs	r3, #9
341909fc:	73fb      	strb	r3, [r7, #15]

  /* Special mode for IQ tuning tool asking for all stats : go the the next step, no skip */
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
341909fe:	4b73      	ldr	r3, [pc, #460]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190a00:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190a04:	f003 0304 	and.w	r3, r3, #4
34190a08:	2b00      	cmp	r3, #0
34190a0a:	d106      	bne.n	34190a1a <GetNextStatStage+0x2a>
      (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
34190a0c:	4b6f      	ldr	r3, [pc, #444]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190a0e:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190a12:	f003 0304 	and.w	r3, r3, #4
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34190a16:	2b00      	cmp	r3, #0
34190a18:	d00a      	beq.n	34190a30 <GetNextStatStage+0x40>
  {
    next = (ISP_SVC_StatEngineStage) ((current < ISP_STAT_CFG_LAST) ? current + 1 : ISP_STAT_CFG_UP_AVG);
34190a1a:	79fb      	ldrb	r3, [r7, #7]
34190a1c:	2b08      	cmp	r3, #8
34190a1e:	d803      	bhi.n	34190a28 <GetNextStatStage+0x38>
34190a20:	79fb      	ldrb	r3, [r7, #7]
34190a22:	3301      	adds	r3, #1
34190a24:	b2db      	uxtb	r3, r3
34190a26:	e000      	b.n	34190a2a <GetNextStatStage+0x3a>
34190a28:	2300      	movs	r3, #0
34190a2a:	73fb      	strb	r3, [r7, #15]
    return next;
34190a2c:	7bfb      	ldrb	r3, [r7, #15]
34190a2e:	e0c7      	b.n	34190bc0 <GetNextStatStage+0x1d0>
   * - ISP_STAT_CFG_UP_AVG
   * - ISP_STAT_CFG_UP_BINS_0_2 + BINS_3_5 + BINS_6_8 + BINS_9_11
   * - ISP_STAT_CFG_DOWN_AVG
   * - ISP_STAT_CFG_DOWN_BINS_0_2 + BINS_3_5 + BINS_6_8 + BINS_9_11
  */
  switch (current)
34190a30:	79fb      	ldrb	r3, [r7, #7]
34190a32:	2b09      	cmp	r3, #9
34190a34:	f200 80b8 	bhi.w	34190ba8 <GetNextStatStage+0x1b8>
34190a38:	a201      	add	r2, pc, #4	@ (adr r2, 34190a40 <GetNextStatStage+0x50>)
34190a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34190a3e:	bf00      	nop
34190a40:	34190a69 	.word	0x34190a69
34190a44:	34190ba9 	.word	0x34190ba9
34190a48:	34190ba9 	.word	0x34190ba9
34190a4c:	34190ba9 	.word	0x34190ba9
34190a50:	34190ab9 	.word	0x34190ab9
34190a54:	34190b09 	.word	0x34190b09
34190a58:	34190ba9 	.word	0x34190ba9
34190a5c:	34190ba9 	.word	0x34190ba9
34190a60:	34190ba9 	.word	0x34190ba9
34190a64:	34190b59 	.word	0x34190b59
  {
  case ISP_STAT_CFG_UP_AVG:
    /* Try Up Bins */
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34190a68:	4b58      	ldr	r3, [pc, #352]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190a6a:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190a6e:	f003 0302 	and.w	r3, r3, #2
34190a72:	2b00      	cmp	r3, #0
34190a74:	d002      	beq.n	34190a7c <GetNextStatStage+0x8c>
    {
      next = ISP_STAT_CFG_UP_BINS_0_2;
34190a76:	2301      	movs	r3, #1
34190a78:	73fb      	strb	r3, [r7, #15]
    /* Skip Down Bins : try Up Avg */
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
    {
      next = ISP_STAT_CFG_UP_AVG;
    }
    break;
34190a7a:	e099      	b.n	34190bb0 <GetNextStatStage+0x1c0>
    else if (ISP_SVC_StatEngine.downRequest &  ISP_STAT_TYPE_AVG)
34190a7c:	4b53      	ldr	r3, [pc, #332]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190a7e:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190a82:	f003 0301 	and.w	r3, r3, #1
34190a86:	2b00      	cmp	r3, #0
34190a88:	d002      	beq.n	34190a90 <GetNextStatStage+0xa0>
      next = ISP_STAT_CFG_DOWN_AVG;
34190a8a:	2305      	movs	r3, #5
34190a8c:	73fb      	strb	r3, [r7, #15]
    break;
34190a8e:	e08f      	b.n	34190bb0 <GetNextStatStage+0x1c0>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
34190a90:	4b4e      	ldr	r3, [pc, #312]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190a92:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190a96:	f003 0302 	and.w	r3, r3, #2
34190a9a:	2b00      	cmp	r3, #0
34190a9c:	d002      	beq.n	34190aa4 <GetNextStatStage+0xb4>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
34190a9e:	2306      	movs	r3, #6
34190aa0:	73fb      	strb	r3, [r7, #15]
    break;
34190aa2:	e085      	b.n	34190bb0 <GetNextStatStage+0x1c0>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34190aa4:	4b49      	ldr	r3, [pc, #292]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190aa6:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190aaa:	f003 0301 	and.w	r3, r3, #1
34190aae:	2b00      	cmp	r3, #0
34190ab0:	d07e      	beq.n	34190bb0 <GetNextStatStage+0x1c0>
      next = ISP_STAT_CFG_UP_AVG;
34190ab2:	2300      	movs	r3, #0
34190ab4:	73fb      	strb	r3, [r7, #15]
    break;
34190ab6:	e07b      	b.n	34190bb0 <GetNextStatStage+0x1c0>

  case ISP_STAT_CFG_UP_BINS_9_11:
    /* Try Down Avg */
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
34190ab8:	4b44      	ldr	r3, [pc, #272]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190aba:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190abe:	f003 0301 	and.w	r3, r3, #1
34190ac2:	2b00      	cmp	r3, #0
34190ac4:	d002      	beq.n	34190acc <GetNextStatStage+0xdc>
    {
      next = ISP_STAT_CFG_DOWN_AVG;
34190ac6:	2305      	movs	r3, #5
34190ac8:	73fb      	strb	r3, [r7, #15]
    /* Skip Up Avg : try on Up Bins */
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
    {
      next = ISP_STAT_CFG_UP_BINS_0_2;
    }
    break;
34190aca:	e073      	b.n	34190bb4 <GetNextStatStage+0x1c4>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
34190acc:	4b3f      	ldr	r3, [pc, #252]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190ace:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190ad2:	f003 0302 	and.w	r3, r3, #2
34190ad6:	2b00      	cmp	r3, #0
34190ad8:	d002      	beq.n	34190ae0 <GetNextStatStage+0xf0>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
34190ada:	2306      	movs	r3, #6
34190adc:	73fb      	strb	r3, [r7, #15]
    break;
34190ade:	e069      	b.n	34190bb4 <GetNextStatStage+0x1c4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34190ae0:	4b3a      	ldr	r3, [pc, #232]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190ae2:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190ae6:	f003 0301 	and.w	r3, r3, #1
34190aea:	2b00      	cmp	r3, #0
34190aec:	d002      	beq.n	34190af4 <GetNextStatStage+0x104>
      next = ISP_STAT_CFG_UP_AVG;
34190aee:	2300      	movs	r3, #0
34190af0:	73fb      	strb	r3, [r7, #15]
    break;
34190af2:	e05f      	b.n	34190bb4 <GetNextStatStage+0x1c4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34190af4:	4b35      	ldr	r3, [pc, #212]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190af6:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190afa:	f003 0302 	and.w	r3, r3, #2
34190afe:	2b00      	cmp	r3, #0
34190b00:	d058      	beq.n	34190bb4 <GetNextStatStage+0x1c4>
      next = ISP_STAT_CFG_UP_BINS_0_2;
34190b02:	2301      	movs	r3, #1
34190b04:	73fb      	strb	r3, [r7, #15]
    break;
34190b06:	e055      	b.n	34190bb4 <GetNextStatStage+0x1c4>

  case ISP_STAT_CFG_DOWN_AVG:
    /* Try Down Bins */
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
34190b08:	4b30      	ldr	r3, [pc, #192]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190b0a:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190b0e:	f003 0302 	and.w	r3, r3, #2
34190b12:	2b00      	cmp	r3, #0
34190b14:	d002      	beq.n	34190b1c <GetNextStatStage+0x12c>
    {
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
34190b16:	2306      	movs	r3, #6
34190b18:	73fb      	strb	r3, [r7, #15]
    /* Skip Up Bins : try Down Avg */
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
    {
      next = ISP_STAT_CFG_DOWN_AVG;
    }
    break;
34190b1a:	e04d      	b.n	34190bb8 <GetNextStatStage+0x1c8>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34190b1c:	4b2b      	ldr	r3, [pc, #172]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190b1e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190b22:	f003 0301 	and.w	r3, r3, #1
34190b26:	2b00      	cmp	r3, #0
34190b28:	d002      	beq.n	34190b30 <GetNextStatStage+0x140>
      next = ISP_STAT_CFG_UP_AVG;
34190b2a:	2300      	movs	r3, #0
34190b2c:	73fb      	strb	r3, [r7, #15]
    break;
34190b2e:	e043      	b.n	34190bb8 <GetNextStatStage+0x1c8>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34190b30:	4b26      	ldr	r3, [pc, #152]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190b32:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190b36:	f003 0302 	and.w	r3, r3, #2
34190b3a:	2b00      	cmp	r3, #0
34190b3c:	d002      	beq.n	34190b44 <GetNextStatStage+0x154>
      next = ISP_STAT_CFG_UP_BINS_0_2;
34190b3e:	2301      	movs	r3, #1
34190b40:	73fb      	strb	r3, [r7, #15]
    break;
34190b42:	e039      	b.n	34190bb8 <GetNextStatStage+0x1c8>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
34190b44:	4b21      	ldr	r3, [pc, #132]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190b46:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190b4a:	f003 0301 	and.w	r3, r3, #1
34190b4e:	2b00      	cmp	r3, #0
34190b50:	d032      	beq.n	34190bb8 <GetNextStatStage+0x1c8>
      next = ISP_STAT_CFG_DOWN_AVG;
34190b52:	2305      	movs	r3, #5
34190b54:	73fb      	strb	r3, [r7, #15]
    break;
34190b56:	e02f      	b.n	34190bb8 <GetNextStatStage+0x1c8>

  case ISP_STAT_CFG_DOWN_BINS_9_11:
    /* Try Up Avg */
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34190b58:	4b1c      	ldr	r3, [pc, #112]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190b5a:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190b5e:	f003 0301 	and.w	r3, r3, #1
34190b62:	2b00      	cmp	r3, #0
34190b64:	d002      	beq.n	34190b6c <GetNextStatStage+0x17c>
    {
      next = ISP_STAT_CFG_UP_AVG;
34190b66:	2300      	movs	r3, #0
34190b68:	73fb      	strb	r3, [r7, #15]
    /* Skip Down Avg : try Down Bins */
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
    {
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
    }
    break;
34190b6a:	e027      	b.n	34190bbc <GetNextStatStage+0x1cc>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34190b6c:	4b17      	ldr	r3, [pc, #92]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190b6e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190b72:	f003 0302 	and.w	r3, r3, #2
34190b76:	2b00      	cmp	r3, #0
34190b78:	d002      	beq.n	34190b80 <GetNextStatStage+0x190>
      next = ISP_STAT_CFG_UP_BINS_0_2;
34190b7a:	2301      	movs	r3, #1
34190b7c:	73fb      	strb	r3, [r7, #15]
    break;
34190b7e:	e01d      	b.n	34190bbc <GetNextStatStage+0x1cc>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
34190b80:	4b12      	ldr	r3, [pc, #72]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190b82:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190b86:	f003 0301 	and.w	r3, r3, #1
34190b8a:	2b00      	cmp	r3, #0
34190b8c:	d002      	beq.n	34190b94 <GetNextStatStage+0x1a4>
      next = ISP_STAT_CFG_DOWN_AVG;
34190b8e:	2305      	movs	r3, #5
34190b90:	73fb      	strb	r3, [r7, #15]
    break;
34190b92:	e013      	b.n	34190bbc <GetNextStatStage+0x1cc>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
34190b94:	4b0d      	ldr	r3, [pc, #52]	@ (34190bcc <GetNextStatStage+0x1dc>)
34190b96:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190b9a:	f003 0302 	and.w	r3, r3, #2
34190b9e:	2b00      	cmp	r3, #0
34190ba0:	d00c      	beq.n	34190bbc <GetNextStatStage+0x1cc>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
34190ba2:	2306      	movs	r3, #6
34190ba4:	73fb      	strb	r3, [r7, #15]
    break;
34190ba6:	e009      	b.n	34190bbc <GetNextStatStage+0x1cc>

  default:
    /* In the middle of the bins measurement: continue with the next bins part */
    next = (ISP_SVC_StatEngineStage) (current + 1);
34190ba8:	79fb      	ldrb	r3, [r7, #7]
34190baa:	3301      	adds	r3, #1
34190bac:	73fb      	strb	r3, [r7, #15]
    break;
34190bae:	e006      	b.n	34190bbe <GetNextStatStage+0x1ce>
    break;
34190bb0:	bf00      	nop
34190bb2:	e004      	b.n	34190bbe <GetNextStatStage+0x1ce>
    break;
34190bb4:	bf00      	nop
34190bb6:	e002      	b.n	34190bbe <GetNextStatStage+0x1ce>
    break;
34190bb8:	bf00      	nop
34190bba:	e000      	b.n	34190bbe <GetNextStatStage+0x1ce>
    break;
34190bbc:	bf00      	nop
  }

  return next;
34190bbe:	7bfb      	ldrb	r3, [r7, #15]
}
34190bc0:	4618      	mov	r0, r3
34190bc2:	3714      	adds	r7, #20
34190bc4:	46bd      	mov	sp, r7
34190bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
34190bca:	4770      	bx	lr
34190bcc:	341c16bc 	.word	0x341c16bc

34190bd0 <GetStatCycleStart>:

static ISP_SVC_StatEngineStage GetStatCycleStart(ISP_SVC_StatLocation location)
{
34190bd0:	b480      	push	{r7}
34190bd2:	b085      	sub	sp, #20
34190bd4:	af00      	add	r7, sp, #0
34190bd6:	4603      	mov	r3, r0
34190bd8:	71fb      	strb	r3, [r7, #7]
  ISP_SVC_StatEngineStage stage;

  if (location == ISP_STAT_LOC_UP)
34190bda:	79fb      	ldrb	r3, [r7, #7]
34190bdc:	2b01      	cmp	r3, #1
34190bde:	d113      	bne.n	34190c08 <GetStatCycleStart+0x38>
  {
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
34190be0:	4b16      	ldr	r3, [pc, #88]	@ (34190c3c <GetStatCycleStart+0x6c>)
34190be2:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190be6:	f003 0301 	and.w	r3, r3, #1
34190bea:	2b00      	cmp	r3, #0
34190bec:	d106      	bne.n	34190bfc <GetStatCycleStart+0x2c>
        (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP))
34190bee:	4b13      	ldr	r3, [pc, #76]	@ (34190c3c <GetStatCycleStart+0x6c>)
34190bf0:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190bf4:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
34190bf8:	2b00      	cmp	r3, #0
34190bfa:	d002      	beq.n	34190c02 <GetStatCycleStart+0x32>
    {
      /* Stat up cycle starts with AVG measurement */
      stage = ISP_STAT_CFG_UP_AVG;
34190bfc:	2300      	movs	r3, #0
34190bfe:	73fb      	strb	r3, [r7, #15]
34190c00:	e015      	b.n	34190c2e <GetStatCycleStart+0x5e>
    }
    else
    {
      /* Stat up cycle starts with 1st BIN measurement */
      stage = ISP_STAT_CFG_UP_BINS_0_2;
34190c02:	2301      	movs	r3, #1
34190c04:	73fb      	strb	r3, [r7, #15]
34190c06:	e012      	b.n	34190c2e <GetStatCycleStart+0x5e>
    }
  }
  else
  {
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG) ||
34190c08:	4b0c      	ldr	r3, [pc, #48]	@ (34190c3c <GetStatCycleStart+0x6c>)
34190c0a:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190c0e:	f003 0301 	and.w	r3, r3, #1
34190c12:	2b00      	cmp	r3, #0
34190c14:	d106      	bne.n	34190c24 <GetStatCycleStart+0x54>
        (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
34190c16:	4b09      	ldr	r3, [pc, #36]	@ (34190c3c <GetStatCycleStart+0x6c>)
34190c18:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190c1c:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG) ||
34190c20:	2b00      	cmp	r3, #0
34190c22:	d002      	beq.n	34190c2a <GetStatCycleStart+0x5a>
    {
      /* Stat down cycle starts with AVG measurement */
      stage = ISP_STAT_CFG_DOWN_AVG;
34190c24:	2305      	movs	r3, #5
34190c26:	73fb      	strb	r3, [r7, #15]
34190c28:	e001      	b.n	34190c2e <GetStatCycleStart+0x5e>
    }
    else
    {
      /* Stat down cycle starts with 1st BIN measurement */
      stage = ISP_STAT_CFG_DOWN_BINS_0_2;
34190c2a:	2306      	movs	r3, #6
34190c2c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return stage;
34190c2e:	7bfb      	ldrb	r3, [r7, #15]
}
34190c30:	4618      	mov	r0, r3
34190c32:	3714      	adds	r7, #20
34190c34:	46bd      	mov	sp, r7
34190c36:	f85d 7b04 	ldr.w	r7, [sp], #4
34190c3a:	4770      	bx	lr
34190c3c:	341c16bc 	.word	0x341c16bc

34190c40 <GetStatCycleEnd>:

static ISP_SVC_StatEngineStage GetStatCycleEnd(ISP_SVC_StatLocation location)
{
34190c40:	b480      	push	{r7}
34190c42:	b085      	sub	sp, #20
34190c44:	af00      	add	r7, sp, #0
34190c46:	4603      	mov	r3, r0
34190c48:	71fb      	strb	r3, [r7, #7]
  ISP_SVC_StatEngineStage stage;

  if (location == ISP_STAT_LOC_UP)
34190c4a:	79fb      	ldrb	r3, [r7, #7]
34190c4c:	2b01      	cmp	r3, #1
34190c4e:	d113      	bne.n	34190c78 <GetStatCycleEnd+0x38>
  {
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS) ||
34190c50:	4b16      	ldr	r3, [pc, #88]	@ (34190cac <GetStatCycleEnd+0x6c>)
34190c52:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190c56:	f003 0302 	and.w	r3, r3, #2
34190c5a:	2b00      	cmp	r3, #0
34190c5c:	d106      	bne.n	34190c6c <GetStatCycleEnd+0x2c>
        (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP))
34190c5e:	4b13      	ldr	r3, [pc, #76]	@ (34190cac <GetStatCycleEnd+0x6c>)
34190c60:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34190c64:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS) ||
34190c68:	2b00      	cmp	r3, #0
34190c6a:	d002      	beq.n	34190c72 <GetStatCycleEnd+0x32>
    {
      /* Stat up cycle ends with last BINS measurement */
      stage = ISP_STAT_CFG_UP_BINS_9_11;
34190c6c:	2304      	movs	r3, #4
34190c6e:	73fb      	strb	r3, [r7, #15]
34190c70:	e015      	b.n	34190c9e <GetStatCycleEnd+0x5e>
    }
    else
    {
      /* Stat up cycle ends with AVG measurement */
      stage = ISP_STAT_CFG_UP_AVG;
34190c72:	2300      	movs	r3, #0
34190c74:	73fb      	strb	r3, [r7, #15]
34190c76:	e012      	b.n	34190c9e <GetStatCycleEnd+0x5e>
    }
  }
  else
  {
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS) ||
34190c78:	4b0c      	ldr	r3, [pc, #48]	@ (34190cac <GetStatCycleEnd+0x6c>)
34190c7a:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190c7e:	f003 0302 	and.w	r3, r3, #2
34190c82:	2b00      	cmp	r3, #0
34190c84:	d106      	bne.n	34190c94 <GetStatCycleEnd+0x54>
        (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
34190c86:	4b09      	ldr	r3, [pc, #36]	@ (34190cac <GetStatCycleEnd+0x6c>)
34190c88:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190c8c:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS) ||
34190c90:	2b00      	cmp	r3, #0
34190c92:	d002      	beq.n	34190c9a <GetStatCycleEnd+0x5a>
    {
      /* Stat down cycle ends with last BINS measurement */
      stage = ISP_STAT_CFG_DOWN_BINS_9_11;
34190c94:	2309      	movs	r3, #9
34190c96:	73fb      	strb	r3, [r7, #15]
34190c98:	e001      	b.n	34190c9e <GetStatCycleEnd+0x5e>
    }
    else
    {
      /* Stat down cycle ends with AVG measurement */
      stage = ISP_STAT_CFG_DOWN_AVG;
34190c9a:	2305      	movs	r3, #5
34190c9c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return stage;
34190c9e:	7bfb      	ldrb	r3, [r7, #15]
}
34190ca0:	4618      	mov	r0, r3
34190ca2:	3714      	adds	r7, #20
34190ca4:	46bd      	mov	sp, r7
34190ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
34190caa:	4770      	bx	lr
34190cac:	341c16bc 	.word	0x341c16bc

34190cb0 <LuminanceFromRGB>:

uint8_t LuminanceFromRGB(uint8_t r, uint8_t g, uint8_t b)
{
34190cb0:	b480      	push	{r7}
34190cb2:	b083      	sub	sp, #12
34190cb4:	af00      	add	r7, sp, #0
34190cb6:	4603      	mov	r3, r0
34190cb8:	71fb      	strb	r3, [r7, #7]
34190cba:	460b      	mov	r3, r1
34190cbc:	71bb      	strb	r3, [r7, #6]
34190cbe:	4613      	mov	r3, r2
34190cc0:	717b      	strb	r3, [r7, #5]
  /* Compute luminance from RGB components (BT.601) */
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
34190cc2:	79fb      	ldrb	r3, [r7, #7]
34190cc4:	ee07 3a90 	vmov	s15, r3
34190cc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34190ccc:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 34190d18 <LuminanceFromRGB+0x68>
34190cd0:	ee27 6b06 	vmul.f64	d6, d7, d6
34190cd4:	79bb      	ldrb	r3, [r7, #6]
34190cd6:	ee07 3a90 	vmov	s15, r3
34190cda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34190cde:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 34190d20 <LuminanceFromRGB+0x70>
34190ce2:	ee27 7b05 	vmul.f64	d7, d7, d5
34190ce6:	ee36 6b07 	vadd.f64	d6, d6, d7
34190cea:	797b      	ldrb	r3, [r7, #5]
34190cec:	ee07 3a90 	vmov	s15, r3
34190cf0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34190cf4:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 34190d28 <LuminanceFromRGB+0x78>
34190cf8:	ee27 7b05 	vmul.f64	d7, d7, d5
34190cfc:	ee36 7b07 	vadd.f64	d7, d6, d7
34190d00:	eefc 7bc7 	vcvt.u32.f64	s15, d7
34190d04:	edc7 7a00 	vstr	s15, [r7]
34190d08:	783b      	ldrb	r3, [r7, #0]
34190d0a:	b2db      	uxtb	r3, r3
}
34190d0c:	4618      	mov	r0, r3
34190d0e:	370c      	adds	r7, #12
34190d10:	46bd      	mov	sp, r7
34190d12:	f85d 7b04 	ldr.w	r7, [sp], #4
34190d16:	4770      	bx	lr
34190d18:	e5604189 	.word	0xe5604189
34190d1c:	3fd322d0 	.word	0x3fd322d0
34190d20:	39581062 	.word	0x39581062
34190d24:	3fe2c8b4 	.word	0x3fe2c8b4
34190d28:	9fbe76c9 	.word	0x9fbe76c9
34190d2c:	3fbd2f1a 	.word	0x3fbd2f1a

34190d30 <LuminanceFromRGBMono>:

uint8_t LuminanceFromRGBMono(uint8_t r, uint8_t g, uint8_t b)
{
34190d30:	b480      	push	{r7}
34190d32:	b083      	sub	sp, #12
34190d34:	af00      	add	r7, sp, #0
34190d36:	4603      	mov	r3, r0
34190d38:	71fb      	strb	r3, [r7, #7]
34190d3a:	460b      	mov	r3, r1
34190d3c:	71bb      	strb	r3, [r7, #6]
34190d3e:	4613      	mov	r3, r2
34190d40:	717b      	strb	r3, [r7, #5]
  /* Compute luminance from RGB components
   * by adding together R, G, B components for monochrome sensor */
  return r + g + b;
34190d42:	79fa      	ldrb	r2, [r7, #7]
34190d44:	79bb      	ldrb	r3, [r7, #6]
34190d46:	4413      	add	r3, r2
34190d48:	b2da      	uxtb	r2, r3
34190d4a:	797b      	ldrb	r3, [r7, #5]
34190d4c:	4413      	add	r3, r2
34190d4e:	b2db      	uxtb	r3, r3
}
34190d50:	4618      	mov	r0, r3
34190d52:	370c      	adds	r7, #12
34190d54:	46bd      	mov	sp, r7
34190d56:	f85d 7b04 	ldr.w	r7, [sp], #4
34190d5a:	4770      	bx	lr

34190d5c <ISP_SVC_ISP_SetDemosaicing>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the demosaicing configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDemosaicing(ISP_HandleTypeDef *hIsp, ISP_DemosaicingTypeDef *pConfig)
{
34190d5c:	b580      	push	{r7, lr}
34190d5e:	b088      	sub	sp, #32
34190d60:	af00      	add	r7, sp, #0
34190d62:	6078      	str	r0, [r7, #4]
34190d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_RawBayer2RGBConfTypeDef rawBayerCfg;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34190d66:	687b      	ldr	r3, [r7, #4]
34190d68:	2b00      	cmp	r3, #0
34190d6a:	d012      	beq.n	34190d92 <ISP_SVC_ISP_SetDemosaicing+0x36>
34190d6c:	683b      	ldr	r3, [r7, #0]
34190d6e:	2b00      	cmp	r3, #0
34190d70:	d00f      	beq.n	34190d92 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34190d72:	683b      	ldr	r3, [r7, #0]
34190d74:	789b      	ldrb	r3, [r3, #2]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34190d76:	2b07      	cmp	r3, #7
34190d78:	d80b      	bhi.n	34190d92 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34190d7a:	683b      	ldr	r3, [r7, #0]
34190d7c:	78db      	ldrb	r3, [r3, #3]
34190d7e:	2b07      	cmp	r3, #7
34190d80:	d807      	bhi.n	34190d92 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
34190d82:	683b      	ldr	r3, [r7, #0]
34190d84:	791b      	ldrb	r3, [r3, #4]
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34190d86:	2b07      	cmp	r3, #7
34190d88:	d803      	bhi.n	34190d92 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
34190d8a:	683b      	ldr	r3, [r7, #0]
34190d8c:	795b      	ldrb	r3, [r3, #5]
34190d8e:	2b07      	cmp	r3, #7
34190d90:	d901      	bls.n	34190d96 <ISP_SVC_ISP_SetDemosaicing+0x3a>
  {
    return ISP_ERR_DEMOSAICING_EINVAL;
34190d92:	230a      	movs	r3, #10
34190d94:	e056      	b.n	34190e44 <ISP_SVC_ISP_SetDemosaicing+0xe8>
  }

  /* Do not enable demosaicing if the camera sensor is a monochrome sensor */
  if ((pConfig->enable == 0) || (pConfig->type == ISP_DEMOS_TYPE_MONO))
34190d96:	683b      	ldr	r3, [r7, #0]
34190d98:	781b      	ldrb	r3, [r3, #0]
34190d9a:	2b00      	cmp	r3, #0
34190d9c:	d003      	beq.n	34190da6 <ISP_SVC_ISP_SetDemosaicing+0x4a>
34190d9e:	683b      	ldr	r3, [r7, #0]
34190da0:	785b      	ldrb	r3, [r3, #1]
34190da2:	2b04      	cmp	r3, #4
34190da4:	d108      	bne.n	34190db8 <ISP_SVC_ISP_SetDemosaicing+0x5c>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
34190da6:	687b      	ldr	r3, [r7, #4]
34190da8:	681b      	ldr	r3, [r3, #0]
34190daa:	2101      	movs	r1, #1
34190dac:	4618      	mov	r0, r3
34190dae:	f7f5 f883 	bl	34185eb8 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>
34190db2:	4603      	mov	r3, r0
34190db4:	77fb      	strb	r3, [r7, #31]
34190db6:	e03f      	b.n	34190e38 <ISP_SVC_ISP_SetDemosaicing+0xdc>
  }
  else
  {
    switch(pConfig->type)
34190db8:	683b      	ldr	r3, [r7, #0]
34190dba:	785b      	ldrb	r3, [r3, #1]
34190dbc:	2b03      	cmp	r3, #3
34190dbe:	d817      	bhi.n	34190df0 <ISP_SVC_ISP_SetDemosaicing+0x94>
34190dc0:	a201      	add	r2, pc, #4	@ (adr r2, 34190dc8 <ISP_SVC_ISP_SetDemosaicing+0x6c>)
34190dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34190dc6:	bf00      	nop
34190dc8:	34190dd9 	.word	0x34190dd9
34190dcc:	34190ddf 	.word	0x34190ddf
34190dd0:	34190de5 	.word	0x34190de5
34190dd4:	34190deb 	.word	0x34190deb
    {
      case ISP_DEMOS_TYPE_RGGB:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_RGGB;
34190dd8:	2300      	movs	r3, #0
34190dda:	613b      	str	r3, [r7, #16]
        break;
34190ddc:	e00b      	b.n	34190df6 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      case ISP_DEMOS_TYPE_GRBG:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_GRBG;
34190dde:	2302      	movs	r3, #2
34190de0:	613b      	str	r3, [r7, #16]
        break;
34190de2:	e008      	b.n	34190df6 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      case ISP_DEMOS_TYPE_GBRG:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_GBRG;
34190de4:	2304      	movs	r3, #4
34190de6:	613b      	str	r3, [r7, #16]
        break;
34190de8:	e005      	b.n	34190df6 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      case ISP_DEMOS_TYPE_BGGR:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_BGGR;
34190dea:	2306      	movs	r3, #6
34190dec:	613b      	str	r3, [r7, #16]
        break;
34190dee:	e002      	b.n	34190df6 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      default:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_RGGB;
34190df0:	2300      	movs	r3, #0
34190df2:	613b      	str	r3, [r7, #16]
        break;
34190df4:	bf00      	nop
    }

    rawBayerCfg.PeakStrength = (uint32_t) pConfig->peak;
34190df6:	683b      	ldr	r3, [r7, #0]
34190df8:	789b      	ldrb	r3, [r3, #2]
34190dfa:	617b      	str	r3, [r7, #20]
    rawBayerCfg.VLineStrength = (uint32_t) pConfig->lineV;
34190dfc:	683b      	ldr	r3, [r7, #0]
34190dfe:	78db      	ldrb	r3, [r3, #3]
34190e00:	60bb      	str	r3, [r7, #8]
    rawBayerCfg.HLineStrength = (uint32_t) pConfig->lineH;
34190e02:	683b      	ldr	r3, [r7, #0]
34190e04:	791b      	ldrb	r3, [r3, #4]
34190e06:	60fb      	str	r3, [r7, #12]
    rawBayerCfg.EdgeStrength = (uint32_t) pConfig->edge;
34190e08:	683b      	ldr	r3, [r7, #0]
34190e0a:	795b      	ldrb	r3, [r3, #5]
34190e0c:	61bb      	str	r3, [r7, #24]
    halStatus = HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &rawBayerCfg);
34190e0e:	687b      	ldr	r3, [r7, #4]
34190e10:	681b      	ldr	r3, [r3, #0]
34190e12:	f107 0208 	add.w	r2, r7, #8
34190e16:	2101      	movs	r1, #1
34190e18:	4618      	mov	r0, r3
34190e1a:	f7f4 fff1 	bl	34185e00 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>
34190e1e:	4603      	mov	r3, r0
34190e20:	77fb      	strb	r3, [r7, #31]

    if (halStatus == HAL_OK)
34190e22:	7ffb      	ldrb	r3, [r7, #31]
34190e24:	2b00      	cmp	r3, #0
34190e26:	d107      	bne.n	34190e38 <ISP_SVC_ISP_SetDemosaicing+0xdc>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
34190e28:	687b      	ldr	r3, [r7, #4]
34190e2a:	681b      	ldr	r3, [r3, #0]
34190e2c:	2101      	movs	r1, #1
34190e2e:	4618      	mov	r0, r3
34190e30:	f7f5 f822 	bl	34185e78 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>
34190e34:	4603      	mov	r3, r0
34190e36:	77fb      	strb	r3, [r7, #31]
    }
  }

  if (halStatus != HAL_OK)
34190e38:	7ffb      	ldrb	r3, [r7, #31]
34190e3a:	2b00      	cmp	r3, #0
34190e3c:	d001      	beq.n	34190e42 <ISP_SVC_ISP_SetDemosaicing+0xe6>
  {
    return ISP_ERR_DEMOSAICING_HAL;
34190e3e:	230b      	movs	r3, #11
34190e40:	e000      	b.n	34190e44 <ISP_SVC_ISP_SetDemosaicing+0xe8>
  }

  return ISP_OK;
34190e42:	2300      	movs	r3, #0
}
34190e44:	4618      	mov	r0, r3
34190e46:	3720      	adds	r7, #32
34190e48:	46bd      	mov	sp, r7
34190e4a:	bd80      	pop	{r7, pc}

34190e4c <ISP_SVC_ISP_SetStatRemoval>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Stat Removal configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatRemoval(ISP_HandleTypeDef *hIsp, ISP_StatRemovalTypeDef *pConfig)
{
34190e4c:	b580      	push	{r7, lr}
34190e4e:	b084      	sub	sp, #16
34190e50:	af00      	add	r7, sp, #0
34190e52:	6078      	str	r0, [r7, #4]
34190e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34190e56:	687b      	ldr	r3, [r7, #4]
34190e58:	2b00      	cmp	r3, #0
34190e5a:	d00c      	beq.n	34190e76 <ISP_SVC_ISP_SetStatRemoval+0x2a>
34190e5c:	683b      	ldr	r3, [r7, #0]
34190e5e:	2b00      	cmp	r3, #0
34190e60:	d009      	beq.n	34190e76 <ISP_SVC_ISP_SetStatRemoval+0x2a>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
34190e62:	683b      	ldr	r3, [r7, #0]
34190e64:	685b      	ldr	r3, [r3, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34190e66:	2b07      	cmp	r3, #7
34190e68:	d805      	bhi.n	34190e76 <ISP_SVC_ISP_SetStatRemoval+0x2a>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
34190e6a:	683b      	ldr	r3, [r7, #0]
34190e6c:	689b      	ldr	r3, [r3, #8]
34190e6e:	f640 72fe 	movw	r2, #4094	@ 0xffe
34190e72:	4293      	cmp	r3, r2
34190e74:	d901      	bls.n	34190e7a <ISP_SVC_ISP_SetStatRemoval+0x2e>
  {
    return ISP_ERR_STATREMOVAL_EINVAL;
34190e76:	2314      	movs	r3, #20
34190e78:	e028      	b.n	34190ecc <ISP_SVC_ISP_SetStatRemoval+0x80>
  }

  if (pConfig->enable == 0)
34190e7a:	683b      	ldr	r3, [r7, #0]
34190e7c:	781b      	ldrb	r3, [r3, #0]
34190e7e:	2b00      	cmp	r3, #0
34190e80:	d108      	bne.n	34190e94 <ISP_SVC_ISP_SetStatRemoval+0x48>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34190e82:	687b      	ldr	r3, [r7, #4]
34190e84:	681b      	ldr	r3, [r3, #0]
34190e86:	2101      	movs	r1, #1
34190e88:	4618      	mov	r0, r3
34190e8a:	f7f5 f880 	bl	34185f8e <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>
34190e8e:	4603      	mov	r3, r0
34190e90:	73fb      	strb	r3, [r7, #15]
34190e92:	e015      	b.n	34190ec0 <ISP_SVC_ISP_SetStatRemoval+0x74>
  }
  else
  {
    halStatus = HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->nbHeadLines, pConfig->nbValidLines);
34190e94:	687b      	ldr	r3, [r7, #4]
34190e96:	6818      	ldr	r0, [r3, #0]
34190e98:	683b      	ldr	r3, [r7, #0]
34190e9a:	685a      	ldr	r2, [r3, #4]
34190e9c:	683b      	ldr	r3, [r7, #0]
34190e9e:	689b      	ldr	r3, [r3, #8]
34190ea0:	2101      	movs	r1, #1
34190ea2:	f7f5 f829 	bl	34185ef8 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>
34190ea6:	4603      	mov	r3, r0
34190ea8:	73fb      	strb	r3, [r7, #15]

    if (halStatus == HAL_OK)
34190eaa:	7bfb      	ldrb	r3, [r7, #15]
34190eac:	2b00      	cmp	r3, #0
34190eae:	d107      	bne.n	34190ec0 <ISP_SVC_ISP_SetStatRemoval+0x74>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34190eb0:	687b      	ldr	r3, [r7, #4]
34190eb2:	681b      	ldr	r3, [r3, #0]
34190eb4:	2101      	movs	r1, #1
34190eb6:	4618      	mov	r0, r3
34190eb8:	f7f5 f849 	bl	34185f4e <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>
34190ebc:	4603      	mov	r3, r0
34190ebe:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (halStatus != HAL_OK)
34190ec0:	7bfb      	ldrb	r3, [r7, #15]
34190ec2:	2b00      	cmp	r3, #0
34190ec4:	d001      	beq.n	34190eca <ISP_SVC_ISP_SetStatRemoval+0x7e>
  {
    return ISP_ERR_STATREMOVAL_HAL;
34190ec6:	2315      	movs	r3, #21
34190ec8:	e000      	b.n	34190ecc <ISP_SVC_ISP_SetStatRemoval+0x80>
  }

  return ISP_OK;
34190eca:	2300      	movs	r3, #0
}
34190ecc:	4618      	mov	r0, r3
34190ece:	3710      	adds	r7, #16
34190ed0:	46bd      	mov	sp, r7
34190ed2:	bd80      	pop	{r7, pc}

34190ed4 <ISP_SVC_ISP_SetDecimation>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the decimation configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDecimation(ISP_HandleTypeDef *hIsp, ISP_DecimationTypeDef *pConfig)
{
34190ed4:	b580      	push	{r7, lr}
34190ed6:	b086      	sub	sp, #24
34190ed8:	af00      	add	r7, sp, #0
34190eda:	6078      	str	r0, [r7, #4]
34190edc:	6039      	str	r1, [r7, #0]
  DCMIPP_DecimationConfTypeDef decimationCfg;
  ISP_StatusTypeDef ret = ISP_OK;
34190ede:	2300      	movs	r3, #0
34190ee0:	75fb      	strb	r3, [r7, #23]

  /* Check handles validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34190ee2:	687b      	ldr	r3, [r7, #4]
34190ee4:	2b00      	cmp	r3, #0
34190ee6:	d002      	beq.n	34190eee <ISP_SVC_ISP_SetDecimation+0x1a>
34190ee8:	683b      	ldr	r3, [r7, #0]
34190eea:	2b00      	cmp	r3, #0
34190eec:	d101      	bne.n	34190ef2 <ISP_SVC_ISP_SetDecimation+0x1e>
  {
    return ISP_ERR_DECIMATION_EINVAL;
34190eee:	231e      	movs	r3, #30
34190ef0:	e04b      	b.n	34190f8a <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  switch (pConfig->factor)
34190ef2:	683b      	ldr	r3, [r7, #0]
34190ef4:	781b      	ldrb	r3, [r3, #0]
34190ef6:	3b01      	subs	r3, #1
34190ef8:	2b07      	cmp	r3, #7
34190efa:	d827      	bhi.n	34190f4c <ISP_SVC_ISP_SetDecimation+0x78>
34190efc:	a201      	add	r2, pc, #4	@ (adr r2, 34190f04 <ISP_SVC_ISP_SetDecimation+0x30>)
34190efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34190f02:	bf00      	nop
34190f04:	34190f25 	.word	0x34190f25
34190f08:	34190f2f 	.word	0x34190f2f
34190f0c:	34190f4d 	.word	0x34190f4d
34190f10:	34190f39 	.word	0x34190f39
34190f14:	34190f4d 	.word	0x34190f4d
34190f18:	34190f4d 	.word	0x34190f4d
34190f1c:	34190f4d 	.word	0x34190f4d
34190f20:	34190f43 	.word	0x34190f43
  {
  case ISP_DECIM_FACTOR_1:
    decimationCfg.VRatio = DCMIPP_VDEC_ALL;
34190f24:	2300      	movs	r3, #0
34190f26:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_ALL;
34190f28:	2300      	movs	r3, #0
34190f2a:	613b      	str	r3, [r7, #16]
    break;
34190f2c:	e010      	b.n	34190f50 <ISP_SVC_ISP_SetDecimation+0x7c>

  case ISP_DECIM_FACTOR_2:
    decimationCfg.VRatio = DCMIPP_VDEC_1_OUT_2;
34190f2e:	2308      	movs	r3, #8
34190f30:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_1_OUT_2;
34190f32:	2302      	movs	r3, #2
34190f34:	613b      	str	r3, [r7, #16]
    break;
34190f36:	e00b      	b.n	34190f50 <ISP_SVC_ISP_SetDecimation+0x7c>

  case ISP_DECIM_FACTOR_4:
    decimationCfg.VRatio = DCMIPP_VDEC_1_OUT_4;
34190f38:	2310      	movs	r3, #16
34190f3a:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_1_OUT_4;
34190f3c:	2304      	movs	r3, #4
34190f3e:	613b      	str	r3, [r7, #16]
    break;
34190f40:	e006      	b.n	34190f50 <ISP_SVC_ISP_SetDecimation+0x7c>

  case ISP_DECIM_FACTOR_8:
    decimationCfg.VRatio = DCMIPP_VDEC_1_OUT_8;
34190f42:	2318      	movs	r3, #24
34190f44:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_1_OUT_8;
34190f46:	2306      	movs	r3, #6
34190f48:	613b      	str	r3, [r7, #16]
    break;
34190f4a:	e001      	b.n	34190f50 <ISP_SVC_ISP_SetDecimation+0x7c>

  default:
    return ISP_ERR_DECIMATION_EINVAL;
34190f4c:	231e      	movs	r3, #30
34190f4e:	e01c      	b.n	34190f8a <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  if (HAL_DCMIPP_PIPE_SetISPDecimationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &decimationCfg) != HAL_OK)
34190f50:	687b      	ldr	r3, [r7, #4]
34190f52:	681b      	ldr	r3, [r3, #0]
34190f54:	f107 020c 	add.w	r2, r7, #12
34190f58:	2101      	movs	r1, #1
34190f5a:	4618      	mov	r0, r3
34190f5c:	f7f4 fdca 	bl	34185af4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig>
34190f60:	4603      	mov	r3, r0
34190f62:	2b00      	cmp	r3, #0
34190f64:	d001      	beq.n	34190f6a <ISP_SVC_ISP_SetDecimation+0x96>
  {
    return ISP_ERR_DECIMATION_HAL;
34190f66:	231f      	movs	r3, #31
34190f68:	e00f      	b.n	34190f8a <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  if (HAL_DCMIPP_PIPE_EnableISPDecimation(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34190f6a:	687b      	ldr	r3, [r7, #4]
34190f6c:	681b      	ldr	r3, [r3, #0]
34190f6e:	2101      	movs	r1, #1
34190f70:	4618      	mov	r0, r3
34190f72:	f7f4 fdf0 	bl	34185b56 <HAL_DCMIPP_PIPE_EnableISPDecimation>
34190f76:	4603      	mov	r3, r0
34190f78:	2b00      	cmp	r3, #0
34190f7a:	d001      	beq.n	34190f80 <ISP_SVC_ISP_SetDecimation+0xac>
  {
    return ISP_ERR_DECIMATION_HAL;
34190f7c:	231f      	movs	r3, #31
34190f7e:	e004      	b.n	34190f8a <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  /* Save decimation value */
  ISP_DecimationValue.factor = pConfig->factor;
34190f80:	683b      	ldr	r3, [r7, #0]
34190f82:	781a      	ldrb	r2, [r3, #0]
34190f84:	4b03      	ldr	r3, [pc, #12]	@ (34190f94 <ISP_SVC_ISP_SetDecimation+0xc0>)
34190f86:	701a      	strb	r2, [r3, #0]

  return ret;
34190f88:	7dfb      	ldrb	r3, [r7, #23]
}
34190f8a:	4618      	mov	r0, r3
34190f8c:	3718      	adds	r7, #24
34190f8e:	46bd      	mov	sp, r7
34190f90:	bd80      	pop	{r7, pc}
34190f92:	bf00      	nop
34190f94:	341c0134 	.word	0x341c0134

34190f98 <ISP_SVC_ISP_SetContrast>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the contrast configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetContrast(ISP_HandleTypeDef *hIsp, ISP_ContrastTypeDef *pConfig)
{
34190f98:	b580      	push	{r7, lr}
34190f9a:	b086      	sub	sp, #24
34190f9c:	af00      	add	r7, sp, #0
34190f9e:	6078      	str	r0, [r7, #4]
34190fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_ContrastConfTypeDef contrast;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34190fa2:	687b      	ldr	r3, [r7, #4]
34190fa4:	2b00      	cmp	r3, #0
34190fa6:	d02f      	beq.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
34190fa8:	683b      	ldr	r3, [r7, #0]
34190faa:	2b00      	cmp	r3, #0
34190fac:	d02c      	beq.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fae:	683b      	ldr	r3, [r7, #0]
34190fb0:	685b      	ldr	r3, [r3, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34190fb2:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34190fb6:	d827      	bhi.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fb8:	683b      	ldr	r3, [r7, #0]
34190fba:	689b      	ldr	r3, [r3, #8]
34190fbc:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34190fc0:	d822      	bhi.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fc2:	683b      	ldr	r3, [r7, #0]
34190fc4:	68db      	ldr	r3, [r3, #12]
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fc6:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34190fca:	d81d      	bhi.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fcc:	683b      	ldr	r3, [r7, #0]
34190fce:	691b      	ldr	r3, [r3, #16]
34190fd0:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34190fd4:	d818      	bhi.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fd6:	683b      	ldr	r3, [r7, #0]
34190fd8:	695b      	ldr	r3, [r3, #20]
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fda:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34190fde:	d813      	bhi.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fe0:	683b      	ldr	r3, [r7, #0]
34190fe2:	699b      	ldr	r3, [r3, #24]
34190fe4:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34190fe8:	d80e      	bhi.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fea:	683b      	ldr	r3, [r7, #0]
34190fec:	69db      	ldr	r3, [r3, #28]
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190fee:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34190ff2:	d809      	bhi.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34190ff4:	683b      	ldr	r3, [r7, #0]
34190ff6:	6a1b      	ldr	r3, [r3, #32]
34190ff8:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34190ffc:	d804      	bhi.n	34191008 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_256 > ISP_CONTAST_LUMCOEFF_MAX))
34190ffe:	683b      	ldr	r3, [r7, #0]
34191000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34191002:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34191006:	d901      	bls.n	3419100c <ISP_SVC_ISP_SetContrast+0x74>
  {
    return ISP_ERR_CONTRAST_EINVAL;
34191008:	2328      	movs	r3, #40	@ 0x28
3419100a:	e078      	b.n	341910fe <ISP_SVC_ISP_SetContrast+0x166>
  }

  if (pConfig->enable == 0)
3419100c:	683b      	ldr	r3, [r7, #0]
3419100e:	781b      	ldrb	r3, [r3, #0]
34191010:	2b00      	cmp	r3, #0
34191012:	d108      	bne.n	34191026 <ISP_SVC_ISP_SetContrast+0x8e>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
34191014:	687b      	ldr	r3, [r7, #4]
34191016:	681b      	ldr	r3, [r3, #0]
34191018:	2101      	movs	r1, #1
3419101a:	4618      	mov	r0, r3
3419101c:	f7f5 fcba 	bl	34186994 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>
34191020:	4603      	mov	r3, r0
34191022:	75fb      	strb	r3, [r7, #23]
34191024:	e065      	b.n	341910f2 <ISP_SVC_ISP_SetContrast+0x15a>
  }
  else
  {
    /* Concert coefficient unit from "percentage" to "6 bit" */
    contrast.LUM_0 = (pConfig->coeff.LUM_0 * 16) / 100;
34191026:	683b      	ldr	r3, [r7, #0]
34191028:	685b      	ldr	r3, [r3, #4]
3419102a:	011b      	lsls	r3, r3, #4
3419102c:	4a36      	ldr	r2, [pc, #216]	@ (34191108 <ISP_SVC_ISP_SetContrast+0x170>)
3419102e:	fba2 2303 	umull	r2, r3, r2, r3
34191032:	095b      	lsrs	r3, r3, #5
34191034:	b2db      	uxtb	r3, r3
34191036:	733b      	strb	r3, [r7, #12]
    contrast.LUM_32 = (pConfig->coeff.LUM_32 * 16) / 100;
34191038:	683b      	ldr	r3, [r7, #0]
3419103a:	689b      	ldr	r3, [r3, #8]
3419103c:	011b      	lsls	r3, r3, #4
3419103e:	4a32      	ldr	r2, [pc, #200]	@ (34191108 <ISP_SVC_ISP_SetContrast+0x170>)
34191040:	fba2 2303 	umull	r2, r3, r2, r3
34191044:	095b      	lsrs	r3, r3, #5
34191046:	b2db      	uxtb	r3, r3
34191048:	737b      	strb	r3, [r7, #13]
    contrast.LUM_64 = (pConfig->coeff.LUM_64 * 16) / 100;
3419104a:	683b      	ldr	r3, [r7, #0]
3419104c:	68db      	ldr	r3, [r3, #12]
3419104e:	011b      	lsls	r3, r3, #4
34191050:	4a2d      	ldr	r2, [pc, #180]	@ (34191108 <ISP_SVC_ISP_SetContrast+0x170>)
34191052:	fba2 2303 	umull	r2, r3, r2, r3
34191056:	095b      	lsrs	r3, r3, #5
34191058:	b2db      	uxtb	r3, r3
3419105a:	73bb      	strb	r3, [r7, #14]
    contrast.LUM_96 = (pConfig->coeff.LUM_96 * 16) / 100;
3419105c:	683b      	ldr	r3, [r7, #0]
3419105e:	691b      	ldr	r3, [r3, #16]
34191060:	011b      	lsls	r3, r3, #4
34191062:	4a29      	ldr	r2, [pc, #164]	@ (34191108 <ISP_SVC_ISP_SetContrast+0x170>)
34191064:	fba2 2303 	umull	r2, r3, r2, r3
34191068:	095b      	lsrs	r3, r3, #5
3419106a:	b2db      	uxtb	r3, r3
3419106c:	73fb      	strb	r3, [r7, #15]
    contrast.LUM_128 = (pConfig->coeff.LUM_128 * 16) / 100;
3419106e:	683b      	ldr	r3, [r7, #0]
34191070:	695b      	ldr	r3, [r3, #20]
34191072:	011b      	lsls	r3, r3, #4
34191074:	4a24      	ldr	r2, [pc, #144]	@ (34191108 <ISP_SVC_ISP_SetContrast+0x170>)
34191076:	fba2 2303 	umull	r2, r3, r2, r3
3419107a:	095b      	lsrs	r3, r3, #5
3419107c:	b2db      	uxtb	r3, r3
3419107e:	743b      	strb	r3, [r7, #16]
    contrast.LUM_160 = (pConfig->coeff.LUM_160 * 16) / 100;
34191080:	683b      	ldr	r3, [r7, #0]
34191082:	699b      	ldr	r3, [r3, #24]
34191084:	011b      	lsls	r3, r3, #4
34191086:	4a20      	ldr	r2, [pc, #128]	@ (34191108 <ISP_SVC_ISP_SetContrast+0x170>)
34191088:	fba2 2303 	umull	r2, r3, r2, r3
3419108c:	095b      	lsrs	r3, r3, #5
3419108e:	b2db      	uxtb	r3, r3
34191090:	747b      	strb	r3, [r7, #17]
    contrast.LUM_192 = (pConfig->coeff.LUM_192 * 16) / 100;
34191092:	683b      	ldr	r3, [r7, #0]
34191094:	69db      	ldr	r3, [r3, #28]
34191096:	011b      	lsls	r3, r3, #4
34191098:	4a1b      	ldr	r2, [pc, #108]	@ (34191108 <ISP_SVC_ISP_SetContrast+0x170>)
3419109a:	fba2 2303 	umull	r2, r3, r2, r3
3419109e:	095b      	lsrs	r3, r3, #5
341910a0:	b2db      	uxtb	r3, r3
341910a2:	74bb      	strb	r3, [r7, #18]
    contrast.LUM_224 = (pConfig->coeff.LUM_224 * 16) / 100;
341910a4:	683b      	ldr	r3, [r7, #0]
341910a6:	6a1b      	ldr	r3, [r3, #32]
341910a8:	011b      	lsls	r3, r3, #4
341910aa:	4a17      	ldr	r2, [pc, #92]	@ (34191108 <ISP_SVC_ISP_SetContrast+0x170>)
341910ac:	fba2 2303 	umull	r2, r3, r2, r3
341910b0:	095b      	lsrs	r3, r3, #5
341910b2:	b2db      	uxtb	r3, r3
341910b4:	74fb      	strb	r3, [r7, #19]
    contrast.LUM_256 = (pConfig->coeff.LUM_256 * 16) / 100;
341910b6:	683b      	ldr	r3, [r7, #0]
341910b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341910ba:	011b      	lsls	r3, r3, #4
341910bc:	4a12      	ldr	r2, [pc, #72]	@ (34191108 <ISP_SVC_ISP_SetContrast+0x170>)
341910be:	fba2 2303 	umull	r2, r3, r2, r3
341910c2:	095b      	lsrs	r3, r3, #5
341910c4:	b2db      	uxtb	r3, r3
341910c6:	753b      	strb	r3, [r7, #20]
    halStatus = HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &contrast);
341910c8:	687b      	ldr	r3, [r7, #4]
341910ca:	681b      	ldr	r3, [r3, #0]
341910cc:	f107 020c 	add.w	r2, r7, #12
341910d0:	2101      	movs	r1, #1
341910d2:	4618      	mov	r0, r3
341910d4:	f7f5 fbee 	bl	341868b4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>
341910d8:	4603      	mov	r3, r0
341910da:	75fb      	strb	r3, [r7, #23]

    if (halStatus == HAL_OK)
341910dc:	7dfb      	ldrb	r3, [r7, #23]
341910de:	2b00      	cmp	r3, #0
341910e0:	d107      	bne.n	341910f2 <ISP_SVC_ISP_SetContrast+0x15a>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
341910e2:	687b      	ldr	r3, [r7, #4]
341910e4:	681b      	ldr	r3, [r3, #0]
341910e6:	2101      	movs	r1, #1
341910e8:	4618      	mov	r0, r3
341910ea:	f7f5 fc33 	bl	34186954 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>
341910ee:	4603      	mov	r3, r0
341910f0:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (halStatus != HAL_OK)
341910f2:	7dfb      	ldrb	r3, [r7, #23]
341910f4:	2b00      	cmp	r3, #0
341910f6:	d001      	beq.n	341910fc <ISP_SVC_ISP_SetContrast+0x164>
  {
    return ISP_ERR_CONTRAST_HAL;
341910f8:	2329      	movs	r3, #41	@ 0x29
341910fa:	e000      	b.n	341910fe <ISP_SVC_ISP_SetContrast+0x166>
  }

  return ISP_OK;
341910fc:	2300      	movs	r3, #0
}
341910fe:	4618      	mov	r0, r3
34191100:	3718      	adds	r7, #24
34191102:	46bd      	mov	sp, r7
34191104:	bd80      	pop	{r7, pc}
34191106:	bf00      	nop
34191108:	51eb851f 	.word	0x51eb851f

3419110c <ISP_SVC_ISP_SetStatArea>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to statistic area used by the IQ algorithms
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatArea(ISP_HandleTypeDef *hIsp, ISP_StatAreaTypeDef *pConfig)
{
3419110c:	b590      	push	{r4, r7, lr}
3419110e:	b089      	sub	sp, #36	@ 0x24
34191110:	af00      	add	r7, sp, #0
34191112:	6078      	str	r0, [r7, #4]
34191114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_StatisticExtractionAreaConfTypeDef currentStatAreaCfg;
  ISP_StatusTypeDef ret = ISP_OK;
34191116:	2300      	movs	r3, #0
34191118:	77fb      	strb	r3, [r7, #31]

  if ((hIsp == NULL) || (pConfig == NULL) ||
3419111a:	687b      	ldr	r3, [r7, #4]
3419111c:	2b00      	cmp	r3, #0
3419111e:	d034      	beq.n	3419118a <ISP_SVC_ISP_SetStatArea+0x7e>
34191120:	683b      	ldr	r3, [r7, #0]
34191122:	2b00      	cmp	r3, #0
34191124:	d031      	beq.n	3419118a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
34191126:	683b      	ldr	r3, [r7, #0]
34191128:	681b      	ldr	r3, [r3, #0]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3419112a:	f640 72fe 	movw	r2, #4094	@ 0xffe
3419112e:	4293      	cmp	r3, r2
34191130:	d82b      	bhi.n	3419118a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
34191132:	683b      	ldr	r3, [r7, #0]
34191134:	685b      	ldr	r3, [r3, #4]
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
34191136:	f640 72fe 	movw	r2, #4094	@ 0xffe
3419113a:	4293      	cmp	r3, r2
3419113c:	d825      	bhi.n	3419118a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
3419113e:	683b      	ldr	r3, [r7, #0]
34191140:	689b      	ldr	r3, [r3, #8]
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
34191142:	f640 72fe 	movw	r2, #4094	@ 0xffe
34191146:	4293      	cmp	r3, r2
34191148:	d81f      	bhi.n	3419118a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
3419114a:	683b      	ldr	r3, [r7, #0]
3419114c:	68db      	ldr	r3, [r3, #12]
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
3419114e:	f640 72fe 	movw	r2, #4094	@ 0xffe
34191152:	4293      	cmp	r3, r2
34191154:	d819      	bhi.n	3419118a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->XSize < ISP_STATWINDOW_MIN) ||
34191156:	683b      	ldr	r3, [r7, #0]
34191158:	689b      	ldr	r3, [r3, #8]
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
3419115a:	2b03      	cmp	r3, #3
3419115c:	d915      	bls.n	3419118a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
3419115e:	683b      	ldr	r3, [r7, #0]
34191160:	68db      	ldr	r3, [r3, #12]
      (pConfig->XSize < ISP_STATWINDOW_MIN) ||
34191162:	2b03      	cmp	r3, #3
34191164:	d911      	bls.n	3419118a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
34191166:	683b      	ldr	r3, [r7, #0]
34191168:	681a      	ldr	r2, [r3, #0]
3419116a:	683b      	ldr	r3, [r7, #0]
3419116c:	689b      	ldr	r3, [r3, #8]
3419116e:	441a      	add	r2, r3
34191170:	687b      	ldr	r3, [r7, #4]
34191172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
34191174:	429a      	cmp	r2, r3
34191176:	d808      	bhi.n	3419118a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->Y0 + pConfig->YSize > hIsp->sensorInfo.height))
34191178:	683b      	ldr	r3, [r7, #0]
3419117a:	685a      	ldr	r2, [r3, #4]
3419117c:	683b      	ldr	r3, [r7, #0]
3419117e:	68db      	ldr	r3, [r3, #12]
34191180:	441a      	add	r2, r3
34191182:	687b      	ldr	r3, [r7, #4]
34191184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
34191186:	429a      	cmp	r2, r3
34191188:	d901      	bls.n	3419118e <ISP_SVC_ISP_SetStatArea+0x82>
  {
    return ISP_ERR_STATAREA_EINVAL;
3419118a:	2332      	movs	r3, #50	@ 0x32
3419118c:	e03e      	b.n	3419120c <ISP_SVC_ISP_SetStatArea+0x100>
  }

  /* Set coordinates in the 'decimated' referential */
  currentStatAreaCfg.HStart = pConfig->X0 / ISP_DecimationValue.factor;
3419118e:	683b      	ldr	r3, [r7, #0]
34191190:	681b      	ldr	r3, [r3, #0]
34191192:	4a20      	ldr	r2, [pc, #128]	@ (34191214 <ISP_SVC_ISP_SetStatArea+0x108>)
34191194:	7812      	ldrb	r2, [r2, #0]
34191196:	fbb3 f3f2 	udiv	r3, r3, r2
3419119a:	613b      	str	r3, [r7, #16]
  currentStatAreaCfg.VStart = pConfig->Y0 / ISP_DecimationValue.factor;
3419119c:	683b      	ldr	r3, [r7, #0]
3419119e:	685b      	ldr	r3, [r3, #4]
341911a0:	4a1c      	ldr	r2, [pc, #112]	@ (34191214 <ISP_SVC_ISP_SetStatArea+0x108>)
341911a2:	7812      	ldrb	r2, [r2, #0]
341911a4:	fbb3 f3f2 	udiv	r3, r3, r2
341911a8:	60fb      	str	r3, [r7, #12]
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
341911aa:	683b      	ldr	r3, [r7, #0]
341911ac:	689b      	ldr	r3, [r3, #8]
341911ae:	4a19      	ldr	r2, [pc, #100]	@ (34191214 <ISP_SVC_ISP_SetStatArea+0x108>)
341911b0:	7812      	ldrb	r2, [r2, #0]
341911b2:	fbb3 f3f2 	udiv	r3, r3, r2
341911b6:	61bb      	str	r3, [r7, #24]
  currentStatAreaCfg.VSize = pConfig->YSize / ISP_DecimationValue.factor;
341911b8:	683b      	ldr	r3, [r7, #0]
341911ba:	68db      	ldr	r3, [r3, #12]
341911bc:	4a15      	ldr	r2, [pc, #84]	@ (34191214 <ISP_SVC_ISP_SetStatArea+0x108>)
341911be:	7812      	ldrb	r2, [r2, #0]
341911c0:	fbb3 f3f2 	udiv	r3, r3, r2
341911c4:	617b      	str	r3, [r7, #20]

  if (HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1,
341911c6:	687b      	ldr	r3, [r7, #4]
341911c8:	681b      	ldr	r3, [r3, #0]
341911ca:	f107 020c 	add.w	r2, r7, #12
341911ce:	2101      	movs	r1, #1
341911d0:	4618      	mov	r0, r3
341911d2:	f7f5 fa52 	bl	3418667a <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>
341911d6:	4603      	mov	r3, r0
341911d8:	2b00      	cmp	r3, #0
341911da:	d001      	beq.n	341911e0 <ISP_SVC_ISP_SetStatArea+0xd4>
                                                          &currentStatAreaCfg) != HAL_OK)
  {
    return ISP_ERR_STATAREA_HAL;
341911dc:	2333      	movs	r3, #51	@ 0x33
341911de:	e015      	b.n	3419120c <ISP_SVC_ISP_SetStatArea+0x100>
  }
  else
  {
    halStatus = HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1);
341911e0:	687b      	ldr	r3, [r7, #4]
341911e2:	681b      	ldr	r3, [r3, #0]
341911e4:	2101      	movs	r1, #1
341911e6:	4618      	mov	r0, r3
341911e8:	f7f5 fac2 	bl	34186770 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>
341911ec:	4603      	mov	r3, r0
341911ee:	77bb      	strb	r3, [r7, #30]
  }

  if (halStatus != HAL_OK)
341911f0:	7fbb      	ldrb	r3, [r7, #30]
341911f2:	2b00      	cmp	r3, #0
341911f4:	d001      	beq.n	341911fa <ISP_SVC_ISP_SetStatArea+0xee>
  {
    return ISP_ERR_STATAREA_HAL;
341911f6:	2333      	movs	r3, #51	@ 0x33
341911f8:	e008      	b.n	3419120c <ISP_SVC_ISP_SetStatArea+0x100>
  }

  /* Update internal state */
  hIsp->statArea = *pConfig;
341911fa:	687b      	ldr	r3, [r7, #4]
341911fc:	683a      	ldr	r2, [r7, #0]
341911fe:	f103 0408 	add.w	r4, r3, #8
34191202:	4613      	mov	r3, r2
34191204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
34191206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return ret;
3419120a:	7ffb      	ldrb	r3, [r7, #31]
}
3419120c:	4618      	mov	r0, r3
3419120e:	3724      	adds	r7, #36	@ 0x24
34191210:	46bd      	mov	sp, r7
34191212:	bd90      	pop	{r4, r7, pc}
34191214:	341c0134 	.word	0x341c0134

34191218 <ISP_SVC_ISP_SetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
34191218:	b580      	push	{r7, lr}
3419121a:	b084      	sub	sp, #16
3419121c:	af00      	add	r7, sp, #0
3419121e:	6078      	str	r0, [r7, #4]
34191220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) || (pConfig->strength > ISP_BADPIXEL_STRENGTH_MAX))
34191222:	687b      	ldr	r3, [r7, #4]
34191224:	2b00      	cmp	r3, #0
34191226:	d006      	beq.n	34191236 <ISP_SVC_ISP_SetBadPixel+0x1e>
34191228:	683b      	ldr	r3, [r7, #0]
3419122a:	2b00      	cmp	r3, #0
3419122c:	d003      	beq.n	34191236 <ISP_SVC_ISP_SetBadPixel+0x1e>
3419122e:	683b      	ldr	r3, [r7, #0]
34191230:	785b      	ldrb	r3, [r3, #1]
34191232:	2b07      	cmp	r3, #7
34191234:	d901      	bls.n	3419123a <ISP_SVC_ISP_SetBadPixel+0x22>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
34191236:	233c      	movs	r3, #60	@ 0x3c
34191238:	e029      	b.n	3419128e <ISP_SVC_ISP_SetBadPixel+0x76>
  }

  if (pConfig->enable == 0)
3419123a:	683b      	ldr	r3, [r7, #0]
3419123c:	781b      	ldrb	r3, [r3, #0]
3419123e:	2b00      	cmp	r3, #0
34191240:	d108      	bne.n	34191254 <ISP_SVC_ISP_SetBadPixel+0x3c>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
34191242:	687b      	ldr	r3, [r7, #4]
34191244:	681b      	ldr	r3, [r3, #0]
34191246:	2101      	movs	r1, #1
34191248:	4618      	mov	r0, r3
3419124a:	f7f4 ff04 	bl	34186056 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>
3419124e:	4603      	mov	r3, r0
34191250:	73fb      	strb	r3, [r7, #15]
34191252:	e016      	b.n	34191282 <ISP_SVC_ISP_SetBadPixel+0x6a>
  }
  else
  {
    halStatus = HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->strength);
34191254:	687b      	ldr	r3, [r7, #4]
34191256:	6818      	ldr	r0, [r3, #0]
34191258:	683b      	ldr	r3, [r7, #0]
3419125a:	785b      	ldrb	r3, [r3, #1]
3419125c:	461a      	mov	r2, r3
3419125e:	2101      	movs	r1, #1
34191260:	f7f4 feb5 	bl	34185fce <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>
34191264:	4603      	mov	r3, r0
34191266:	73fb      	strb	r3, [r7, #15]

    if (halStatus != HAL_OK)
34191268:	7bfb      	ldrb	r3, [r7, #15]
3419126a:	2b00      	cmp	r3, #0
3419126c:	d001      	beq.n	34191272 <ISP_SVC_ISP_SetBadPixel+0x5a>
    {
      return ISP_ERR_BADPIXEL_HAL;
3419126e:	233d      	movs	r3, #61	@ 0x3d
34191270:	e00d      	b.n	3419128e <ISP_SVC_ISP_SetBadPixel+0x76>
    }

    halStatus = HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
34191272:	687b      	ldr	r3, [r7, #4]
34191274:	681b      	ldr	r3, [r3, #0]
34191276:	2101      	movs	r1, #1
34191278:	4618      	mov	r0, r3
3419127a:	f7f4 fecc 	bl	34186016 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>
3419127e:	4603      	mov	r3, r0
34191280:	73fb      	strb	r3, [r7, #15]
  }

  if (halStatus != HAL_OK)
34191282:	7bfb      	ldrb	r3, [r7, #15]
34191284:	2b00      	cmp	r3, #0
34191286:	d001      	beq.n	3419128c <ISP_SVC_ISP_SetBadPixel+0x74>
  {
    return ISP_ERR_BADPIXEL_HAL;
34191288:	233d      	movs	r3, #61	@ 0x3d
3419128a:	e000      	b.n	3419128e <ISP_SVC_ISP_SetBadPixel+0x76>
  }

  return ISP_OK;
3419128c:	2300      	movs	r3, #0
}
3419128e:	4618      	mov	r0, r3
34191290:	3710      	adds	r7, #16
34191292:	46bd      	mov	sp, r7
34191294:	bd80      	pop	{r7, pc}

34191296 <ISP_SVC_ISP_GetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
34191296:	b580      	push	{r7, lr}
34191298:	b084      	sub	sp, #16
3419129a:	af00      	add	r7, sp, #0
3419129c:	6078      	str	r0, [r7, #4]
3419129e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
341912a0:	687b      	ldr	r3, [r7, #4]
341912a2:	2b00      	cmp	r3, #0
341912a4:	d002      	beq.n	341912ac <ISP_SVC_ISP_GetBadPixel+0x16>
341912a6:	683b      	ldr	r3, [r7, #0]
341912a8:	2b00      	cmp	r3, #0
341912aa:	d101      	bne.n	341912b0 <ISP_SVC_ISP_GetBadPixel+0x1a>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
341912ac:	233c      	movs	r3, #60	@ 0x3c
341912ae:	e023      	b.n	341912f8 <ISP_SVC_ISP_GetBadPixel+0x62>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
341912b0:	687b      	ldr	r3, [r7, #4]
341912b2:	681b      	ldr	r3, [r3, #0]
341912b4:	2101      	movs	r1, #1
341912b6:	4618      	mov	r0, r3
341912b8:	f7f4 feff 	bl	341860ba <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>
341912bc:	4603      	mov	r3, r0
341912be:	b2da      	uxtb	r2, r3
341912c0:	683b      	ldr	r3, [r7, #0]
341912c2:	701a      	strb	r2, [r3, #0]
  pConfig->strength = (uint8_t) HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1);
341912c4:	687b      	ldr	r3, [r7, #4]
341912c6:	681b      	ldr	r3, [r3, #0]
341912c8:	2101      	movs	r1, #1
341912ca:	4618      	mov	r0, r3
341912cc:	f7f4 fee3 	bl	34186096 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>
341912d0:	4603      	mov	r3, r0
341912d2:	b2da      	uxtb	r2, r3
341912d4:	683b      	ldr	r3, [r7, #0]
341912d6:	705a      	strb	r2, [r3, #1]

  halStatus = HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter(hIsp->hDcmipp, DCMIPP_PIPE1, &pConfig->count);
341912d8:	687b      	ldr	r3, [r7, #4]
341912da:	6818      	ldr	r0, [r3, #0]
341912dc:	683b      	ldr	r3, [r7, #0]
341912de:	3304      	adds	r3, #4
341912e0:	461a      	mov	r2, r3
341912e2:	2101      	movs	r1, #1
341912e4:	f7f4 ff04 	bl	341860f0 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>
341912e8:	4603      	mov	r3, r0
341912ea:	73fb      	strb	r3, [r7, #15]

  if (halStatus != HAL_OK)
341912ec:	7bfb      	ldrb	r3, [r7, #15]
341912ee:	2b00      	cmp	r3, #0
341912f0:	d001      	beq.n	341912f6 <ISP_SVC_ISP_GetBadPixel+0x60>
  {
    return ISP_ERR_BADPIXEL_HAL;
341912f2:	233d      	movs	r3, #61	@ 0x3d
341912f4:	e000      	b.n	341912f8 <ISP_SVC_ISP_GetBadPixel+0x62>
  }

  return ISP_OK;
341912f6:	2300      	movs	r3, #0
}
341912f8:	4618      	mov	r0, r3
341912fa:	3710      	adds	r7, #16
341912fc:	46bd      	mov	sp, r7
341912fe:	bd80      	pop	{r7, pc}

34191300 <ISP_SVC_ISP_SetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
34191300:	b580      	push	{r7, lr}
34191302:	b084      	sub	sp, #16
34191304:	af00      	add	r7, sp, #0
34191306:	6078      	str	r0, [r7, #4]
34191308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419130a:	687b      	ldr	r3, [r7, #4]
3419130c:	2b00      	cmp	r3, #0
3419130e:	d002      	beq.n	34191316 <ISP_SVC_ISP_SetBlackLevel+0x16>
34191310:	683b      	ldr	r3, [r7, #0]
34191312:	2b00      	cmp	r3, #0
34191314:	d101      	bne.n	3419131a <ISP_SVC_ISP_SetBlackLevel+0x1a>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
34191316:	2346      	movs	r3, #70	@ 0x46
34191318:	e030      	b.n	3419137c <ISP_SVC_ISP_SetBlackLevel+0x7c>
  }

  if (pConfig->enable == 0)
3419131a:	683b      	ldr	r3, [r7, #0]
3419131c:	781b      	ldrb	r3, [r3, #0]
3419131e:	2b00      	cmp	r3, #0
34191320:	d108      	bne.n	34191334 <ISP_SVC_ISP_SetBlackLevel+0x34>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34191322:	687b      	ldr	r3, [r7, #4]
34191324:	681b      	ldr	r3, [r3, #0]
34191326:	2101      	movs	r1, #1
34191328:	4618      	mov	r0, r3
3419132a:	f7f5 f8f6 	bl	3418651a <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>
3419132e:	4603      	mov	r3, r0
34191330:	73fb      	strb	r3, [r7, #15]
34191332:	e01d      	b.n	34191370 <ISP_SVC_ISP_SetBlackLevel+0x70>
  }
  else
  {
    blackLevelConfig.RedCompBlackLevel = pConfig->BLCR;
34191334:	683b      	ldr	r3, [r7, #0]
34191336:	785b      	ldrb	r3, [r3, #1]
34191338:	733b      	strb	r3, [r7, #12]
    blackLevelConfig.GreenCompBlackLevel = pConfig->BLCG;
3419133a:	683b      	ldr	r3, [r7, #0]
3419133c:	789b      	ldrb	r3, [r3, #2]
3419133e:	737b      	strb	r3, [r7, #13]
    blackLevelConfig.BlueCompBlackLevel = pConfig->BLCB;
34191340:	683b      	ldr	r3, [r7, #0]
34191342:	78db      	ldrb	r3, [r3, #3]
34191344:	73bb      	strb	r3, [r7, #14]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
34191346:	687b      	ldr	r3, [r7, #4]
34191348:	681b      	ldr	r3, [r3, #0]
3419134a:	f107 020c 	add.w	r2, r7, #12
3419134e:	2101      	movs	r1, #1
34191350:	4618      	mov	r0, r3
34191352:	f7f5 f893 	bl	3418647c <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>
34191356:	4603      	mov	r3, r0
34191358:	73fb      	strb	r3, [r7, #15]

    if (halStatus == HAL_OK)
3419135a:	7bfb      	ldrb	r3, [r7, #15]
3419135c:	2b00      	cmp	r3, #0
3419135e:	d107      	bne.n	34191370 <ISP_SVC_ISP_SetBlackLevel+0x70>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34191360:	687b      	ldr	r3, [r7, #4]
34191362:	681b      	ldr	r3, [r3, #0]
34191364:	2101      	movs	r1, #1
34191366:	4618      	mov	r0, r3
34191368:	f7f5 f8b7 	bl	341864da <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>
3419136c:	4603      	mov	r3, r0
3419136e:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (halStatus != HAL_OK)
34191370:	7bfb      	ldrb	r3, [r7, #15]
34191372:	2b00      	cmp	r3, #0
34191374:	d001      	beq.n	3419137a <ISP_SVC_ISP_SetBlackLevel+0x7a>
  {
    return ISP_ERR_BLACKLEVEL_HAL;
34191376:	2347      	movs	r3, #71	@ 0x47
34191378:	e000      	b.n	3419137c <ISP_SVC_ISP_SetBlackLevel+0x7c>
  }

  return ISP_OK;
3419137a:	2300      	movs	r3, #0
}
3419137c:	4618      	mov	r0, r3
3419137e:	3710      	adds	r7, #16
34191380:	46bd      	mov	sp, r7
34191382:	bd80      	pop	{r7, pc}

34191384 <ISP_SVC_ISP_GetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
34191384:	b580      	push	{r7, lr}
34191386:	b084      	sub	sp, #16
34191388:	af00      	add	r7, sp, #0
3419138a:	6078      	str	r0, [r7, #4]
3419138c:	6039      	str	r1, [r7, #0]
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419138e:	687b      	ldr	r3, [r7, #4]
34191390:	2b00      	cmp	r3, #0
34191392:	d002      	beq.n	3419139a <ISP_SVC_ISP_GetBlackLevel+0x16>
34191394:	683b      	ldr	r3, [r7, #0]
34191396:	2b00      	cmp	r3, #0
34191398:	d101      	bne.n	3419139e <ISP_SVC_ISP_GetBlackLevel+0x1a>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
3419139a:	2346      	movs	r3, #70	@ 0x46
3419139c:	e01b      	b.n	341913d6 <ISP_SVC_ISP_GetBlackLevel+0x52>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
3419139e:	687b      	ldr	r3, [r7, #4]
341913a0:	681b      	ldr	r3, [r3, #0]
341913a2:	2101      	movs	r1, #1
341913a4:	4618      	mov	r0, r3
341913a6:	f7f5 f8fb 	bl	341865a0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>
341913aa:	4603      	mov	r3, r0
341913ac:	b2da      	uxtb	r2, r3
341913ae:	683b      	ldr	r3, [r7, #0]
341913b0:	701a      	strb	r2, [r3, #0]

  HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
341913b2:	687b      	ldr	r3, [r7, #4]
341913b4:	681b      	ldr	r3, [r3, #0]
341913b6:	f107 020c 	add.w	r2, r7, #12
341913ba:	2101      	movs	r1, #1
341913bc:	4618      	mov	r0, r3
341913be:	f7f5 f8cc 	bl	3418655a <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>

  pConfig->BLCR = blackLevelConfig.RedCompBlackLevel;
341913c2:	7b3a      	ldrb	r2, [r7, #12]
341913c4:	683b      	ldr	r3, [r7, #0]
341913c6:	705a      	strb	r2, [r3, #1]
  pConfig->BLCG = blackLevelConfig.GreenCompBlackLevel;
341913c8:	7b7a      	ldrb	r2, [r7, #13]
341913ca:	683b      	ldr	r3, [r7, #0]
341913cc:	709a      	strb	r2, [r3, #2]
  pConfig->BLCB = blackLevelConfig.BlueCompBlackLevel;
341913ce:	7bba      	ldrb	r2, [r7, #14]
341913d0:	683b      	ldr	r3, [r7, #0]
341913d2:	70da      	strb	r2, [r3, #3]

  return ISP_OK;
341913d4:	2300      	movs	r3, #0
}
341913d6:	4618      	mov	r0, r3
341913d8:	3710      	adds	r7, #16
341913da:	46bd      	mov	sp, r7
341913dc:	bd80      	pop	{r7, pc}
	...

341913e0 <ISP_SVC_ISP_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
341913e0:	b580      	push	{r7, lr}
341913e2:	b084      	sub	sp, #16
341913e4:	af00      	add	r7, sp, #0
341913e6:	6078      	str	r0, [r7, #4]
341913e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_ExposureConfTypeDef exposureConfig;

  if ((hIsp == NULL) || (pConfig == NULL) ||
341913ea:	687b      	ldr	r3, [r7, #4]
341913ec:	2b00      	cmp	r3, #0
341913ee:	d011      	beq.n	34191414 <ISP_SVC_ISP_SetGain+0x34>
341913f0:	683b      	ldr	r3, [r7, #0]
341913f2:	2b00      	cmp	r3, #0
341913f4:	d00e      	beq.n	34191414 <ISP_SVC_ISP_SetGain+0x34>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
341913f6:	683b      	ldr	r3, [r7, #0]
341913f8:	685b      	ldr	r3, [r3, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
341913fa:	4a2d      	ldr	r2, [pc, #180]	@ (341914b0 <ISP_SVC_ISP_SetGain+0xd0>)
341913fc:	4293      	cmp	r3, r2
341913fe:	d809      	bhi.n	34191414 <ISP_SVC_ISP_SetGain+0x34>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
34191400:	683b      	ldr	r3, [r7, #0]
34191402:	689b      	ldr	r3, [r3, #8]
34191404:	4a2a      	ldr	r2, [pc, #168]	@ (341914b0 <ISP_SVC_ISP_SetGain+0xd0>)
34191406:	4293      	cmp	r3, r2
34191408:	d804      	bhi.n	34191414 <ISP_SVC_ISP_SetGain+0x34>
3419140a:	683b      	ldr	r3, [r7, #0]
3419140c:	68db      	ldr	r3, [r3, #12]
3419140e:	4a28      	ldr	r2, [pc, #160]	@ (341914b0 <ISP_SVC_ISP_SetGain+0xd0>)
34191410:	4293      	cmp	r3, r2
34191412:	d901      	bls.n	34191418 <ISP_SVC_ISP_SetGain+0x38>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
34191414:	2350      	movs	r3, #80	@ 0x50
34191416:	e047      	b.n	341914a8 <ISP_SVC_ISP_SetGain+0xc8>
  }

  if (pConfig->enable == 0)
34191418:	683b      	ldr	r3, [r7, #0]
3419141a:	781b      	ldrb	r3, [r3, #0]
3419141c:	2b00      	cmp	r3, #0
3419141e:	d108      	bne.n	34191432 <ISP_SVC_ISP_SetGain+0x52>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
34191420:	687b      	ldr	r3, [r7, #4]
34191422:	681b      	ldr	r3, [r3, #0]
34191424:	2101      	movs	r1, #1
34191426:	4618      	mov	r0, r3
34191428:	f7f5 fa24 	bl	34186874 <HAL_DCMIPP_PIPE_DisableISPExposure>
3419142c:	4603      	mov	r3, r0
3419142e:	73fb      	strb	r3, [r7, #15]
34191430:	e034      	b.n	3419149c <ISP_SVC_ISP_SetGain+0xbc>
  }
  else
  {
    To_Shift_Multiplier(pConfig->ispGainR, &exposureConfig.ShiftRed, &exposureConfig.MultiplierRed);
34191432:	683b      	ldr	r3, [r7, #0]
34191434:	6858      	ldr	r0, [r3, #4]
34191436:	f107 0308 	add.w	r3, r7, #8
3419143a:	1c5a      	adds	r2, r3, #1
3419143c:	f107 0308 	add.w	r3, r7, #8
34191440:	4619      	mov	r1, r3
34191442:	f7ff f989 	bl	34190758 <To_Shift_Multiplier>
    To_Shift_Multiplier(pConfig->ispGainG, &exposureConfig.ShiftGreen, &exposureConfig.MultiplierGreen);
34191446:	683b      	ldr	r3, [r7, #0]
34191448:	6898      	ldr	r0, [r3, #8]
3419144a:	f107 0308 	add.w	r3, r7, #8
3419144e:	1cda      	adds	r2, r3, #3
34191450:	f107 0308 	add.w	r3, r7, #8
34191454:	3302      	adds	r3, #2
34191456:	4619      	mov	r1, r3
34191458:	f7ff f97e 	bl	34190758 <To_Shift_Multiplier>
    To_Shift_Multiplier(pConfig->ispGainB, &exposureConfig.ShiftBlue, &exposureConfig.MultiplierBlue);
3419145c:	683b      	ldr	r3, [r7, #0]
3419145e:	68d8      	ldr	r0, [r3, #12]
34191460:	f107 0308 	add.w	r3, r7, #8
34191464:	1d5a      	adds	r2, r3, #5
34191466:	f107 0308 	add.w	r3, r7, #8
3419146a:	3304      	adds	r3, #4
3419146c:	4619      	mov	r1, r3
3419146e:	f7ff f973 	bl	34190758 <To_Shift_Multiplier>
    halStatus = HAL_DCMIPP_PIPE_SetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
34191472:	687b      	ldr	r3, [r7, #4]
34191474:	681b      	ldr	r3, [r3, #0]
34191476:	f107 0208 	add.w	r2, r7, #8
3419147a:	2101      	movs	r1, #1
3419147c:	4618      	mov	r0, r3
3419147e:	f7f5 f997 	bl	341867b0 <HAL_DCMIPP_PIPE_SetISPExposureConfig>
34191482:	4603      	mov	r3, r0
34191484:	73fb      	strb	r3, [r7, #15]

    if (halStatus == HAL_OK)
34191486:	7bfb      	ldrb	r3, [r7, #15]
34191488:	2b00      	cmp	r3, #0
3419148a:	d107      	bne.n	3419149c <ISP_SVC_ISP_SetGain+0xbc>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
3419148c:	687b      	ldr	r3, [r7, #4]
3419148e:	681b      	ldr	r3, [r3, #0]
34191490:	2101      	movs	r1, #1
34191492:	4618      	mov	r0, r3
34191494:	f7f5 f9ce 	bl	34186834 <HAL_DCMIPP_PIPE_EnableISPExposure>
34191498:	4603      	mov	r3, r0
3419149a:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (halStatus != HAL_OK)
3419149c:	7bfb      	ldrb	r3, [r7, #15]
3419149e:	2b00      	cmp	r3, #0
341914a0:	d001      	beq.n	341914a6 <ISP_SVC_ISP_SetGain+0xc6>
  {
    return ISP_ERR_ISPGAIN_HAL;
341914a2:	2351      	movs	r3, #81	@ 0x51
341914a4:	e000      	b.n	341914a8 <ISP_SVC_ISP_SetGain+0xc8>
  }

  return ISP_OK;
341914a6:	2300      	movs	r3, #0
}
341914a8:	4618      	mov	r0, r3
341914aa:	3710      	adds	r7, #16
341914ac:	46bd      	mov	sp, r7
341914ae:	bd80      	pop	{r7, pc}
341914b0:	5f5e1000 	.word	0x5f5e1000

341914b4 <ISP_SVC_ISP_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
341914b4:	b580      	push	{r7, lr}
341914b6:	b084      	sub	sp, #16
341914b8:	af00      	add	r7, sp, #0
341914ba:	6078      	str	r0, [r7, #4]
341914bc:	6039      	str	r1, [r7, #0]
  DCMIPP_ExposureConfTypeDef exposureConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
341914be:	687b      	ldr	r3, [r7, #4]
341914c0:	2b00      	cmp	r3, #0
341914c2:	d002      	beq.n	341914ca <ISP_SVC_ISP_GetGain+0x16>
341914c4:	683b      	ldr	r3, [r7, #0]
341914c6:	2b00      	cmp	r3, #0
341914c8:	d101      	bne.n	341914ce <ISP_SVC_ISP_GetGain+0x1a>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
341914ca:	2350      	movs	r3, #80	@ 0x50
341914cc:	e02d      	b.n	3419152a <ISP_SVC_ISP_GetGain+0x76>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
341914ce:	687b      	ldr	r3, [r7, #4]
341914d0:	681b      	ldr	r3, [r3, #0]
341914d2:	2101      	movs	r1, #1
341914d4:	4618      	mov	r0, r3
341914d6:	f7f5 fc55 	bl	34186d84 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>
341914da:	4603      	mov	r3, r0
341914dc:	b2da      	uxtb	r2, r3
341914de:	683b      	ldr	r3, [r7, #0]
341914e0:	701a      	strb	r2, [r3, #0]
  HAL_DCMIPP_PIPE_GetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
341914e2:	687b      	ldr	r3, [r7, #4]
341914e4:	681b      	ldr	r3, [r3, #0]
341914e6:	f107 0208 	add.w	r2, r7, #8
341914ea:	2101      	movs	r1, #1
341914ec:	4618      	mov	r0, r3
341914ee:	f7f5 fab3 	bl	34186a58 <HAL_DCMIPP_PIPE_GetISPExposureConfig>

  pConfig->ispGainR = From_Shift_Multiplier(exposureConfig.ShiftRed, exposureConfig.MultiplierRed);
341914f2:	7a3b      	ldrb	r3, [r7, #8]
341914f4:	7a7a      	ldrb	r2, [r7, #9]
341914f6:	4611      	mov	r1, r2
341914f8:	4618      	mov	r0, r3
341914fa:	f7ff f96d 	bl	341907d8 <From_Shift_Multiplier>
341914fe:	4602      	mov	r2, r0
34191500:	683b      	ldr	r3, [r7, #0]
34191502:	605a      	str	r2, [r3, #4]
  pConfig->ispGainG = From_Shift_Multiplier(exposureConfig.ShiftGreen, exposureConfig.MultiplierGreen);
34191504:	7abb      	ldrb	r3, [r7, #10]
34191506:	7afa      	ldrb	r2, [r7, #11]
34191508:	4611      	mov	r1, r2
3419150a:	4618      	mov	r0, r3
3419150c:	f7ff f964 	bl	341907d8 <From_Shift_Multiplier>
34191510:	4602      	mov	r2, r0
34191512:	683b      	ldr	r3, [r7, #0]
34191514:	609a      	str	r2, [r3, #8]
  pConfig->ispGainB = From_Shift_Multiplier(exposureConfig.ShiftBlue, exposureConfig.MultiplierBlue);
34191516:	7b3b      	ldrb	r3, [r7, #12]
34191518:	7b7a      	ldrb	r2, [r7, #13]
3419151a:	4611      	mov	r1, r2
3419151c:	4618      	mov	r0, r3
3419151e:	f7ff f95b 	bl	341907d8 <From_Shift_Multiplier>
34191522:	4602      	mov	r2, r0
34191524:	683b      	ldr	r3, [r7, #0]
34191526:	60da      	str	r2, [r3, #12]

  return ISP_OK;
34191528:	2300      	movs	r3, #0
}
3419152a:	4618      	mov	r0, r3
3419152c:	3710      	adds	r7, #16
3419152e:	46bd      	mov	sp, r7
34191530:	bd80      	pop	{r7, pc}
	...

34191534 <ISP_SVC_ISP_SetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
34191534:	b580      	push	{r7, lr}
34191536:	b08c      	sub	sp, #48	@ 0x30
34191538:	af00      	add	r7, sp, #0
3419153a:	6078      	str	r0, [r7, #4]
3419153c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;
  uint32_t i, j;

  memset(&colorConvConfig, 0, sizeof(colorConvConfig));
3419153e:	f107 0308 	add.w	r3, r7, #8
34191542:	221a      	movs	r2, #26
34191544:	2100      	movs	r1, #0
34191546:	4618      	mov	r0, r3
34191548:	f001 fe2c 	bl	341931a4 <memset>

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419154c:	687b      	ldr	r3, [r7, #4]
3419154e:	2b00      	cmp	r3, #0
34191550:	d002      	beq.n	34191558 <ISP_SVC_ISP_SetColorConv+0x24>
34191552:	683b      	ldr	r3, [r7, #0]
34191554:	2b00      	cmp	r3, #0
34191556:	d101      	bne.n	3419155c <ISP_SVC_ISP_SetColorConv+0x28>
  {
    return ISP_ERR_COLORCONV_EINVAL;
34191558:	235a      	movs	r3, #90	@ 0x5a
3419155a:	e099      	b.n	34191690 <ISP_SVC_ISP_SetColorConv+0x15c>
  }

  for (i = 0; i < 3; i++)
3419155c:	2300      	movs	r3, #0
3419155e:	62bb      	str	r3, [r7, #40]	@ 0x28
34191560:	e027      	b.n	341915b2 <ISP_SVC_ISP_SetColorConv+0x7e>
  {
    for (j = 0; j < 3; j++)
34191562:	2300      	movs	r3, #0
34191564:	627b      	str	r3, [r7, #36]	@ 0x24
34191566:	e01e      	b.n	341915a6 <ISP_SVC_ISP_SetColorConv+0x72>
    {
      if ((pConfig->coeff[i][j] > ISP_COLORCONV_MAX) || (pConfig->coeff[i][j] < -ISP_COLORCONV_MAX))
34191568:	6839      	ldr	r1, [r7, #0]
3419156a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3419156c:	4613      	mov	r3, r2
3419156e:	005b      	lsls	r3, r3, #1
34191570:	4413      	add	r3, r2
34191572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34191574:	4413      	add	r3, r2
34191576:	009b      	lsls	r3, r3, #2
34191578:	440b      	add	r3, r1
3419157a:	685b      	ldr	r3, [r3, #4]
3419157c:	4a46      	ldr	r2, [pc, #280]	@ (34191698 <ISP_SVC_ISP_SetColorConv+0x164>)
3419157e:	4293      	cmp	r3, r2
34191580:	dc0c      	bgt.n	3419159c <ISP_SVC_ISP_SetColorConv+0x68>
34191582:	6839      	ldr	r1, [r7, #0]
34191584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34191586:	4613      	mov	r3, r2
34191588:	005b      	lsls	r3, r3, #1
3419158a:	4413      	add	r3, r2
3419158c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3419158e:	4413      	add	r3, r2
34191590:	009b      	lsls	r3, r3, #2
34191592:	440b      	add	r3, r1
34191594:	685b      	ldr	r3, [r3, #4]
34191596:	4a41      	ldr	r2, [pc, #260]	@ (3419169c <ISP_SVC_ISP_SetColorConv+0x168>)
34191598:	4293      	cmp	r3, r2
3419159a:	da01      	bge.n	341915a0 <ISP_SVC_ISP_SetColorConv+0x6c>
      {
        return ISP_ERR_COLORCONV_EINVAL;
3419159c:	235a      	movs	r3, #90	@ 0x5a
3419159e:	e077      	b.n	34191690 <ISP_SVC_ISP_SetColorConv+0x15c>
    for (j = 0; j < 3; j++)
341915a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341915a2:	3301      	adds	r3, #1
341915a4:	627b      	str	r3, [r7, #36]	@ 0x24
341915a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341915a8:	2b02      	cmp	r3, #2
341915aa:	d9dd      	bls.n	34191568 <ISP_SVC_ISP_SetColorConv+0x34>
  for (i = 0; i < 3; i++)
341915ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341915ae:	3301      	adds	r3, #1
341915b0:	62bb      	str	r3, [r7, #40]	@ 0x28
341915b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341915b4:	2b02      	cmp	r3, #2
341915b6:	d9d4      	bls.n	34191562 <ISP_SVC_ISP_SetColorConv+0x2e>
      }
    }
  }

  if (pConfig->enable == 0)
341915b8:	683b      	ldr	r3, [r7, #0]
341915ba:	781b      	ldrb	r3, [r3, #0]
341915bc:	2b00      	cmp	r3, #0
341915be:	d109      	bne.n	341915d4 <ISP_SVC_ISP_SetColorConv+0xa0>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
341915c0:	687b      	ldr	r3, [r7, #4]
341915c2:	681b      	ldr	r3, [r3, #0]
341915c4:	2101      	movs	r1, #1
341915c6:	4618      	mov	r0, r3
341915c8:	f7f4 ff38 	bl	3418643c <HAL_DCMIPP_PIPE_DisableISPColorConversion>
341915cc:	4603      	mov	r3, r0
341915ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
341915d2:	e056      	b.n	34191682 <ISP_SVC_ISP_SetColorConv+0x14e>
  }
  else
  {
    colorConvConfig.RR = To_CConv_Reg(pConfig->coeff[0][0]);
341915d4:	683b      	ldr	r3, [r7, #0]
341915d6:	685b      	ldr	r3, [r3, #4]
341915d8:	4618      	mov	r0, r3
341915da:	f7ff f93b 	bl	34190854 <To_CConv_Reg>
341915de:	4603      	mov	r3, r0
341915e0:	817b      	strh	r3, [r7, #10]
    colorConvConfig.RG = To_CConv_Reg(pConfig->coeff[0][1]);
341915e2:	683b      	ldr	r3, [r7, #0]
341915e4:	689b      	ldr	r3, [r3, #8]
341915e6:	4618      	mov	r0, r3
341915e8:	f7ff f934 	bl	34190854 <To_CConv_Reg>
341915ec:	4603      	mov	r3, r0
341915ee:	81bb      	strh	r3, [r7, #12]
    colorConvConfig.RB = To_CConv_Reg(pConfig->coeff[0][2]);
341915f0:	683b      	ldr	r3, [r7, #0]
341915f2:	68db      	ldr	r3, [r3, #12]
341915f4:	4618      	mov	r0, r3
341915f6:	f7ff f92d 	bl	34190854 <To_CConv_Reg>
341915fa:	4603      	mov	r3, r0
341915fc:	81fb      	strh	r3, [r7, #14]
    colorConvConfig.GR = To_CConv_Reg(pConfig->coeff[1][0]);
341915fe:	683b      	ldr	r3, [r7, #0]
34191600:	691b      	ldr	r3, [r3, #16]
34191602:	4618      	mov	r0, r3
34191604:	f7ff f926 	bl	34190854 <To_CConv_Reg>
34191608:	4603      	mov	r3, r0
3419160a:	827b      	strh	r3, [r7, #18]
    colorConvConfig.GG = To_CConv_Reg(pConfig->coeff[1][1]);
3419160c:	683b      	ldr	r3, [r7, #0]
3419160e:	695b      	ldr	r3, [r3, #20]
34191610:	4618      	mov	r0, r3
34191612:	f7ff f91f 	bl	34190854 <To_CConv_Reg>
34191616:	4603      	mov	r3, r0
34191618:	82bb      	strh	r3, [r7, #20]
    colorConvConfig.GB = To_CConv_Reg(pConfig->coeff[1][2]);
3419161a:	683b      	ldr	r3, [r7, #0]
3419161c:	699b      	ldr	r3, [r3, #24]
3419161e:	4618      	mov	r0, r3
34191620:	f7ff f918 	bl	34190854 <To_CConv_Reg>
34191624:	4603      	mov	r3, r0
34191626:	82fb      	strh	r3, [r7, #22]
    colorConvConfig.BR = To_CConv_Reg(pConfig->coeff[2][0]);
34191628:	683b      	ldr	r3, [r7, #0]
3419162a:	69db      	ldr	r3, [r3, #28]
3419162c:	4618      	mov	r0, r3
3419162e:	f7ff f911 	bl	34190854 <To_CConv_Reg>
34191632:	4603      	mov	r3, r0
34191634:	837b      	strh	r3, [r7, #26]
    colorConvConfig.BG = To_CConv_Reg(pConfig->coeff[2][1]);
34191636:	683b      	ldr	r3, [r7, #0]
34191638:	6a1b      	ldr	r3, [r3, #32]
3419163a:	4618      	mov	r0, r3
3419163c:	f7ff f90a 	bl	34190854 <To_CConv_Reg>
34191640:	4603      	mov	r3, r0
34191642:	83bb      	strh	r3, [r7, #28]
    colorConvConfig.BB = To_CConv_Reg(pConfig->coeff[2][2]);
34191644:	683b      	ldr	r3, [r7, #0]
34191646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34191648:	4618      	mov	r0, r3
3419164a:	f7ff f903 	bl	34190854 <To_CConv_Reg>
3419164e:	4603      	mov	r3, r0
34191650:	83fb      	strh	r3, [r7, #30]
    halStatus = HAL_DCMIPP_PIPE_SetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
34191652:	687b      	ldr	r3, [r7, #4]
34191654:	681b      	ldr	r3, [r3, #0]
34191656:	f107 0208 	add.w	r2, r7, #8
3419165a:	2101      	movs	r1, #1
3419165c:	4618      	mov	r0, r3
3419165e:	f7f4 fd6b 	bl	34186138 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>
34191662:	4603      	mov	r3, r0
34191664:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (halStatus == HAL_OK)
34191668:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
3419166c:	2b00      	cmp	r3, #0
3419166e:	d108      	bne.n	34191682 <ISP_SVC_ISP_SetColorConv+0x14e>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
34191670:	687b      	ldr	r3, [r7, #4]
34191672:	681b      	ldr	r3, [r3, #0]
34191674:	2101      	movs	r1, #1
34191676:	4618      	mov	r0, r3
34191678:	f7f4 fec0 	bl	341863fc <HAL_DCMIPP_PIPE_EnableISPColorConversion>
3419167c:	4603      	mov	r3, r0
3419167e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  if (halStatus != HAL_OK)
34191682:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
34191686:	2b00      	cmp	r3, #0
34191688:	d001      	beq.n	3419168e <ISP_SVC_ISP_SetColorConv+0x15a>
  {
    return ISP_ERR_COLORCONV_HAL;
3419168a:	235b      	movs	r3, #91	@ 0x5b
3419168c:	e000      	b.n	34191690 <ISP_SVC_ISP_SetColorConv+0x15c>
  }

  return ISP_OK;
3419168e:	2300      	movs	r3, #0
}
34191690:	4618      	mov	r0, r3
34191692:	3730      	adds	r7, #48	@ 0x30
34191694:	46bd      	mov	sp, r7
34191696:	bd80      	pop	{r7, pc}
34191698:	17c841c0 	.word	0x17c841c0
3419169c:	e837be40 	.word	0xe837be40

341916a0 <ISP_SVC_ISP_GetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
341916a0:	b580      	push	{r7, lr}
341916a2:	b08a      	sub	sp, #40	@ 0x28
341916a4:	af00      	add	r7, sp, #0
341916a6:	6078      	str	r0, [r7, #4]
341916a8:	6039      	str	r1, [r7, #0]
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
341916aa:	687b      	ldr	r3, [r7, #4]
341916ac:	2b00      	cmp	r3, #0
341916ae:	d002      	beq.n	341916b6 <ISP_SVC_ISP_GetColorConv+0x16>
341916b0:	683b      	ldr	r3, [r7, #0]
341916b2:	2b00      	cmp	r3, #0
341916b4:	d101      	bne.n	341916ba <ISP_SVC_ISP_GetColorConv+0x1a>
  {
    return ISP_ERR_COLORCONV_EINVAL;
341916b6:	235a      	movs	r3, #90	@ 0x5a
341916b8:	e05a      	b.n	34191770 <ISP_SVC_ISP_GetColorConv+0xd0>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
341916ba:	687b      	ldr	r3, [r7, #4]
341916bc:	681b      	ldr	r3, [r3, #0]
341916be:	2101      	movs	r1, #1
341916c0:	4618      	mov	r0, r3
341916c2:	f7f5 fb7a 	bl	34186dba <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>
341916c6:	4603      	mov	r3, r0
341916c8:	b2da      	uxtb	r2, r3
341916ca:	683b      	ldr	r3, [r7, #0]
341916cc:	701a      	strb	r2, [r3, #0]

  HAL_DCMIPP_PIPE_GetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
341916ce:	687b      	ldr	r3, [r7, #4]
341916d0:	681b      	ldr	r3, [r3, #0]
341916d2:	f107 020c 	add.w	r2, r7, #12
341916d6:	2101      	movs	r1, #1
341916d8:	4618      	mov	r0, r3
341916da:	f7f5 f9fd 	bl	34186ad8 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>

  pConfig->coeff[0][0] = From_CConv_Reg(colorConvConfig.RR);
341916de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
341916e2:	4618      	mov	r0, r3
341916e4:	f7ff f8d4 	bl	34190890 <From_CConv_Reg>
341916e8:	4602      	mov	r2, r0
341916ea:	683b      	ldr	r3, [r7, #0]
341916ec:	605a      	str	r2, [r3, #4]
  pConfig->coeff[0][1] = From_CConv_Reg(colorConvConfig.RG);
341916ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
341916f2:	4618      	mov	r0, r3
341916f4:	f7ff f8cc 	bl	34190890 <From_CConv_Reg>
341916f8:	4602      	mov	r2, r0
341916fa:	683b      	ldr	r3, [r7, #0]
341916fc:	609a      	str	r2, [r3, #8]
  pConfig->coeff[0][2] = From_CConv_Reg(colorConvConfig.RB);
341916fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
34191702:	4618      	mov	r0, r3
34191704:	f7ff f8c4 	bl	34190890 <From_CConv_Reg>
34191708:	4602      	mov	r2, r0
3419170a:	683b      	ldr	r3, [r7, #0]
3419170c:	60da      	str	r2, [r3, #12]
  pConfig->coeff[1][0] = From_CConv_Reg(colorConvConfig.GR);
3419170e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34191712:	4618      	mov	r0, r3
34191714:	f7ff f8bc 	bl	34190890 <From_CConv_Reg>
34191718:	4602      	mov	r2, r0
3419171a:	683b      	ldr	r3, [r7, #0]
3419171c:	611a      	str	r2, [r3, #16]
  pConfig->coeff[1][1] = From_CConv_Reg(colorConvConfig.GG);
3419171e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
34191722:	4618      	mov	r0, r3
34191724:	f7ff f8b4 	bl	34190890 <From_CConv_Reg>
34191728:	4602      	mov	r2, r0
3419172a:	683b      	ldr	r3, [r7, #0]
3419172c:	615a      	str	r2, [r3, #20]
  pConfig->coeff[1][2] = From_CConv_Reg(colorConvConfig.GB);
3419172e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
34191732:	4618      	mov	r0, r3
34191734:	f7ff f8ac 	bl	34190890 <From_CConv_Reg>
34191738:	4602      	mov	r2, r0
3419173a:	683b      	ldr	r3, [r7, #0]
3419173c:	619a      	str	r2, [r3, #24]
  pConfig->coeff[2][0] = From_CConv_Reg(colorConvConfig.BR);
3419173e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
34191742:	4618      	mov	r0, r3
34191744:	f7ff f8a4 	bl	34190890 <From_CConv_Reg>
34191748:	4602      	mov	r2, r0
3419174a:	683b      	ldr	r3, [r7, #0]
3419174c:	61da      	str	r2, [r3, #28]
  pConfig->coeff[2][1] = From_CConv_Reg(colorConvConfig.BG);
3419174e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
34191752:	4618      	mov	r0, r3
34191754:	f7ff f89c 	bl	34190890 <From_CConv_Reg>
34191758:	4602      	mov	r2, r0
3419175a:	683b      	ldr	r3, [r7, #0]
3419175c:	621a      	str	r2, [r3, #32]
  pConfig->coeff[2][2] = From_CConv_Reg(colorConvConfig.BB);
3419175e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
34191762:	4618      	mov	r0, r3
34191764:	f7ff f894 	bl	34190890 <From_CConv_Reg>
34191768:	4602      	mov	r2, r0
3419176a:	683b      	ldr	r3, [r7, #0]
3419176c:	625a      	str	r2, [r3, #36]	@ 0x24

  return ISP_OK;
3419176e:	2300      	movs	r3, #0
}
34191770:	4618      	mov	r0, r3
34191772:	3728      	adds	r7, #40	@ 0x28
34191774:	46bd      	mov	sp, r7
34191776:	bd80      	pop	{r7, pc}

34191778 <ISP_SVC_Sensor_GetInfo>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor info
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetInfo(ISP_HandleTypeDef *hIsp, ISP_SensorInfoTypeDef *pConfig)
{
34191778:	b580      	push	{r7, lr}
3419177a:	b082      	sub	sp, #8
3419177c:	af00      	add	r7, sp, #0
3419177e:	6078      	str	r0, [r7, #4]
34191780:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34191782:	687b      	ldr	r3, [r7, #4]
34191784:	2b00      	cmp	r3, #0
34191786:	d002      	beq.n	3419178e <ISP_SVC_Sensor_GetInfo+0x16>
34191788:	683b      	ldr	r3, [r7, #0]
3419178a:	2b00      	cmp	r3, #0
3419178c:	d101      	bne.n	34191792 <ISP_SVC_Sensor_GetInfo+0x1a>
  {
    return ISP_ERR_SENSORINFO_EINVAL;
3419178e:	236e      	movs	r3, #110	@ 0x6e
34191790:	e010      	b.n	341917b4 <ISP_SVC_Sensor_GetInfo+0x3c>
  }

  if (hIsp->appliHelpers.GetSensorInfo != NULL)
34191792:	687b      	ldr	r3, [r7, #4]
34191794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34191796:	2b00      	cmp	r3, #0
34191798:	d00b      	beq.n	341917b2 <ISP_SVC_Sensor_GetInfo+0x3a>
  {
    if (hIsp->appliHelpers.GetSensorInfo(hIsp->cameraInstance, pConfig) != 0)
3419179a:	687b      	ldr	r3, [r7, #4]
3419179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419179e:	687a      	ldr	r2, [r7, #4]
341917a0:	6852      	ldr	r2, [r2, #4]
341917a2:	6839      	ldr	r1, [r7, #0]
341917a4:	4610      	mov	r0, r2
341917a6:	4798      	blx	r3
341917a8:	4603      	mov	r3, r0
341917aa:	2b00      	cmp	r3, #0
341917ac:	d001      	beq.n	341917b2 <ISP_SVC_Sensor_GetInfo+0x3a>
    {
      return ISP_ERR_SENSORINFO;
341917ae:	236f      	movs	r3, #111	@ 0x6f
341917b0:	e000      	b.n	341917b4 <ISP_SVC_Sensor_GetInfo+0x3c>
    }
  }

  return ISP_OK;
341917b2:	2300      	movs	r3, #0
}
341917b4:	4618      	mov	r0, r3
341917b6:	3708      	adds	r7, #8
341917b8:	46bd      	mov	sp, r7
341917ba:	bd80      	pop	{r7, pc}

341917bc <ISP_SVC_Sensor_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
341917bc:	b580      	push	{r7, lr}
341917be:	b082      	sub	sp, #8
341917c0:	af00      	add	r7, sp, #0
341917c2:	6078      	str	r0, [r7, #4]
341917c4:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
341917c6:	687b      	ldr	r3, [r7, #4]
341917c8:	2b00      	cmp	r3, #0
341917ca:	d002      	beq.n	341917d2 <ISP_SVC_Sensor_SetGain+0x16>
341917cc:	683b      	ldr	r3, [r7, #0]
341917ce:	2b00      	cmp	r3, #0
341917d0:	d101      	bne.n	341917d6 <ISP_SVC_Sensor_SetGain+0x1a>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
341917d2:	2378      	movs	r3, #120	@ 0x78
341917d4:	e015      	b.n	34191802 <ISP_SVC_Sensor_SetGain+0x46>
  }

  if (hIsp->appliHelpers.SetSensorGain != NULL)
341917d6:	687b      	ldr	r3, [r7, #4]
341917d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341917da:	2b00      	cmp	r3, #0
341917dc:	d00c      	beq.n	341917f8 <ISP_SVC_Sensor_SetGain+0x3c>
  {
    if (hIsp->appliHelpers.SetSensorGain(hIsp->cameraInstance, pConfig->gain) != 0)
341917de:	687b      	ldr	r3, [r7, #4]
341917e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341917e2:	687a      	ldr	r2, [r7, #4]
341917e4:	6850      	ldr	r0, [r2, #4]
341917e6:	683a      	ldr	r2, [r7, #0]
341917e8:	6812      	ldr	r2, [r2, #0]
341917ea:	4611      	mov	r1, r2
341917ec:	4798      	blx	r3
341917ee:	4603      	mov	r3, r0
341917f0:	2b00      	cmp	r3, #0
341917f2:	d001      	beq.n	341917f8 <ISP_SVC_Sensor_SetGain+0x3c>
    {
      return ISP_ERR_SENSORGAIN;
341917f4:	2379      	movs	r3, #121	@ 0x79
341917f6:	e004      	b.n	34191802 <ISP_SVC_Sensor_SetGain+0x46>
    }
  }

  Meta.gain = pConfig->gain;
341917f8:	683b      	ldr	r3, [r7, #0]
341917fa:	681b      	ldr	r3, [r3, #0]
341917fc:	4a03      	ldr	r2, [pc, #12]	@ (3419180c <ISP_SVC_Sensor_SetGain+0x50>)
341917fe:	6093      	str	r3, [r2, #8]

  return ISP_OK;
34191800:	2300      	movs	r3, #0
}
34191802:	4618      	mov	r0, r3
34191804:	3708      	adds	r7, #8
34191806:	46bd      	mov	sp, r7
34191808:	bd80      	pop	{r7, pc}
3419180a:	bf00      	nop
3419180c:	341c11c0 	.word	0x341c11c0

34191810 <ISP_SVC_Sensor_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
34191810:	b580      	push	{r7, lr}
34191812:	b082      	sub	sp, #8
34191814:	af00      	add	r7, sp, #0
34191816:	6078      	str	r0, [r7, #4]
34191818:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419181a:	687b      	ldr	r3, [r7, #4]
3419181c:	2b00      	cmp	r3, #0
3419181e:	d002      	beq.n	34191826 <ISP_SVC_Sensor_GetGain+0x16>
34191820:	683b      	ldr	r3, [r7, #0]
34191822:	2b00      	cmp	r3, #0
34191824:	d101      	bne.n	3419182a <ISP_SVC_Sensor_GetGain+0x1a>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
34191826:	2378      	movs	r3, #120	@ 0x78
34191828:	e010      	b.n	3419184c <ISP_SVC_Sensor_GetGain+0x3c>
  }

  if (hIsp->appliHelpers.GetSensorGain != NULL)
3419182a:	687b      	ldr	r3, [r7, #4]
3419182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3419182e:	2b00      	cmp	r3, #0
34191830:	d00b      	beq.n	3419184a <ISP_SVC_Sensor_GetGain+0x3a>
  {
    if (hIsp->appliHelpers.GetSensorGain(hIsp->cameraInstance, (int32_t *)&pConfig->gain) != 0)
34191832:	687b      	ldr	r3, [r7, #4]
34191834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34191836:	687a      	ldr	r2, [r7, #4]
34191838:	6852      	ldr	r2, [r2, #4]
3419183a:	6839      	ldr	r1, [r7, #0]
3419183c:	4610      	mov	r0, r2
3419183e:	4798      	blx	r3
34191840:	4603      	mov	r3, r0
34191842:	2b00      	cmp	r3, #0
34191844:	d001      	beq.n	3419184a <ISP_SVC_Sensor_GetGain+0x3a>
    {
      return ISP_ERR_SENSORGAIN;
34191846:	2379      	movs	r3, #121	@ 0x79
34191848:	e000      	b.n	3419184c <ISP_SVC_Sensor_GetGain+0x3c>
    }
  }

  return ISP_OK;
3419184a:	2300      	movs	r3, #0
}
3419184c:	4618      	mov	r0, r3
3419184e:	3708      	adds	r7, #8
34191850:	46bd      	mov	sp, r7
34191852:	bd80      	pop	{r7, pc}

34191854 <ISP_SVC_Sensor_SetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
34191854:	b580      	push	{r7, lr}
34191856:	b082      	sub	sp, #8
34191858:	af00      	add	r7, sp, #0
3419185a:	6078      	str	r0, [r7, #4]
3419185c:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419185e:	687b      	ldr	r3, [r7, #4]
34191860:	2b00      	cmp	r3, #0
34191862:	d002      	beq.n	3419186a <ISP_SVC_Sensor_SetExposure+0x16>
34191864:	683b      	ldr	r3, [r7, #0]
34191866:	2b00      	cmp	r3, #0
34191868:	d101      	bne.n	3419186e <ISP_SVC_Sensor_SetExposure+0x1a>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
3419186a:	2382      	movs	r3, #130	@ 0x82
3419186c:	e015      	b.n	3419189a <ISP_SVC_Sensor_SetExposure+0x46>
  }

  if (hIsp->appliHelpers.SetSensorExposure != NULL)
3419186e:	687b      	ldr	r3, [r7, #4]
34191870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191872:	2b00      	cmp	r3, #0
34191874:	d00c      	beq.n	34191890 <ISP_SVC_Sensor_SetExposure+0x3c>
  {
    if (hIsp->appliHelpers.SetSensorExposure(hIsp->cameraInstance, pConfig->exposure) != 0)
34191876:	687b      	ldr	r3, [r7, #4]
34191878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3419187a:	687a      	ldr	r2, [r7, #4]
3419187c:	6850      	ldr	r0, [r2, #4]
3419187e:	683a      	ldr	r2, [r7, #0]
34191880:	6812      	ldr	r2, [r2, #0]
34191882:	4611      	mov	r1, r2
34191884:	4798      	blx	r3
34191886:	4603      	mov	r3, r0
34191888:	2b00      	cmp	r3, #0
3419188a:	d001      	beq.n	34191890 <ISP_SVC_Sensor_SetExposure+0x3c>
    {
      return ISP_ERR_SENSOREXPOSURE;
3419188c:	2383      	movs	r3, #131	@ 0x83
3419188e:	e004      	b.n	3419189a <ISP_SVC_Sensor_SetExposure+0x46>
    }
  }

  Meta.exposure = pConfig->exposure;
34191890:	683b      	ldr	r3, [r7, #0]
34191892:	681b      	ldr	r3, [r3, #0]
34191894:	4a03      	ldr	r2, [pc, #12]	@ (341918a4 <ISP_SVC_Sensor_SetExposure+0x50>)
34191896:	60d3      	str	r3, [r2, #12]

  return ISP_OK;
34191898:	2300      	movs	r3, #0
}
3419189a:	4618      	mov	r0, r3
3419189c:	3708      	adds	r7, #8
3419189e:	46bd      	mov	sp, r7
341918a0:	bd80      	pop	{r7, pc}
341918a2:	bf00      	nop
341918a4:	341c11c0 	.word	0x341c11c0

341918a8 <ISP_SVC_Sensor_GetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
341918a8:	b580      	push	{r7, lr}
341918aa:	b082      	sub	sp, #8
341918ac:	af00      	add	r7, sp, #0
341918ae:	6078      	str	r0, [r7, #4]
341918b0:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
341918b2:	687b      	ldr	r3, [r7, #4]
341918b4:	2b00      	cmp	r3, #0
341918b6:	d002      	beq.n	341918be <ISP_SVC_Sensor_GetExposure+0x16>
341918b8:	683b      	ldr	r3, [r7, #0]
341918ba:	2b00      	cmp	r3, #0
341918bc:	d101      	bne.n	341918c2 <ISP_SVC_Sensor_GetExposure+0x1a>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
341918be:	2382      	movs	r3, #130	@ 0x82
341918c0:	e010      	b.n	341918e4 <ISP_SVC_Sensor_GetExposure+0x3c>
  }

  if (hIsp->appliHelpers.GetSensorExposure != NULL)
341918c2:	687b      	ldr	r3, [r7, #4]
341918c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341918c6:	2b00      	cmp	r3, #0
341918c8:	d00b      	beq.n	341918e2 <ISP_SVC_Sensor_GetExposure+0x3a>
  {
    if (hIsp->appliHelpers.GetSensorExposure(hIsp->cameraInstance, (int32_t *)&pConfig->exposure) != 0)
341918ca:	687b      	ldr	r3, [r7, #4]
341918cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341918ce:	687a      	ldr	r2, [r7, #4]
341918d0:	6852      	ldr	r2, [r2, #4]
341918d2:	6839      	ldr	r1, [r7, #0]
341918d4:	4610      	mov	r0, r2
341918d6:	4798      	blx	r3
341918d8:	4603      	mov	r3, r0
341918da:	2b00      	cmp	r3, #0
341918dc:	d001      	beq.n	341918e2 <ISP_SVC_Sensor_GetExposure+0x3a>
    {
      return ISP_ERR_SENSOREXPOSURE;
341918de:	2383      	movs	r3, #131	@ 0x83
341918e0:	e000      	b.n	341918e4 <ISP_SVC_Sensor_GetExposure+0x3c>
    }
  }

  return ISP_OK;
341918e2:	2300      	movs	r3, #0
}
341918e4:	4618      	mov	r0, r3
341918e6:	3708      	adds	r7, #8
341918e8:	46bd      	mov	sp, r7
341918ea:	bd80      	pop	{r7, pc}

341918ec <ISP_SVC_Misc_IsDCMIPPReady>:
  *         Check that the DCMIPP device is ready
  * @param  hIsp: ISP device handle
  * @retval ISP_OK if DCMIPP is running, ISP_FAIL otherwise
  */
ISP_StatusTypeDef ISP_SVC_Misc_IsDCMIPPReady(ISP_HandleTypeDef *hIsp)
{
341918ec:	b580      	push	{r7, lr}
341918ee:	b082      	sub	sp, #8
341918f0:	af00      	add	r7, sp, #0
341918f2:	6078      	str	r0, [r7, #4]
  /* Check handle validity */
  if (hIsp == NULL)
341918f4:	687b      	ldr	r3, [r7, #4]
341918f6:	2b00      	cmp	r3, #0
341918f8:	d101      	bne.n	341918fe <ISP_SVC_Misc_IsDCMIPPReady+0x12>
  {
    return ISP_ERR_EINVAL;
341918fa:	2301      	movs	r3, #1
341918fc:	e00a      	b.n	34191914 <ISP_SVC_Misc_IsDCMIPPReady+0x28>
  }

  if (HAL_DCMIPP_GetState(hIsp->hDcmipp) != HAL_DCMIPP_STATE_READY)
341918fe:	687b      	ldr	r3, [r7, #4]
34191900:	681b      	ldr	r3, [r3, #0]
34191902:	4618      	mov	r0, r3
34191904:	f7f5 fa74 	bl	34186df0 <HAL_DCMIPP_GetState>
34191908:	4603      	mov	r3, r0
3419190a:	2b02      	cmp	r3, #2
3419190c:	d001      	beq.n	34191912 <ISP_SVC_Misc_IsDCMIPPReady+0x26>
  {
    return ISP_ERR_DCMIPP_STATE;
3419190e:	238c      	movs	r3, #140	@ 0x8c
34191910:	e000      	b.n	34191914 <ISP_SVC_Misc_IsDCMIPPReady+0x28>
  }

  return ISP_OK;
34191912:	2300      	movs	r3, #0
}
34191914:	4618      	mov	r0, r3
34191916:	3708      	adds	r7, #8
34191918:	46bd      	mov	sp, r7
3419191a:	bd80      	pop	{r7, pc}

3419191c <ISP_SVC_Misc_IncMainFrameId>:
  *         Increment the id of the frame output on the main pipe
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
3419191c:	b480      	push	{r7}
3419191e:	b083      	sub	sp, #12
34191920:	af00      	add	r7, sp, #0
34191922:	6078      	str	r0, [r7, #4]
  hIsp->MainPipe_FrameCount++;
34191924:	687b      	ldr	r3, [r7, #4]
34191926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34191928:	1c5a      	adds	r2, r3, #1
3419192a:	687b      	ldr	r3, [r7, #4]
3419192c:	641a      	str	r2, [r3, #64]	@ 0x40
}
3419192e:	bf00      	nop
34191930:	370c      	adds	r7, #12
34191932:	46bd      	mov	sp, r7
34191934:	f85d 7b04 	ldr.w	r7, [sp], #4
34191938:	4770      	bx	lr

3419193a <ISP_SVC_Misc_GetMainFrameId>:
  *         Return the id of the last frame output on the main pipe
  * @param  hIsp: ISP device handle
  * @retval Id of the last frame output on the main pipe
  */
uint32_t ISP_SVC_Misc_GetMainFrameId(ISP_HandleTypeDef *hIsp)
{
3419193a:	b480      	push	{r7}
3419193c:	b083      	sub	sp, #12
3419193e:	af00      	add	r7, sp, #0
34191940:	6078      	str	r0, [r7, #4]
  return hIsp->MainPipe_FrameCount;
34191942:	687b      	ldr	r3, [r7, #4]
34191944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
34191946:	4618      	mov	r0, r3
34191948:	370c      	adds	r7, #12
3419194a:	46bd      	mov	sp, r7
3419194c:	f85d 7b04 	ldr.w	r7, [sp], #4
34191950:	4770      	bx	lr

34191952 <ISP_SVC_Misc_IncAncillaryFrameId>:
  *         Increment the id of the frame output on the ancillary pipe
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
34191952:	b480      	push	{r7}
34191954:	b083      	sub	sp, #12
34191956:	af00      	add	r7, sp, #0
34191958:	6078      	str	r0, [r7, #4]
  hIsp->AncillaryPipe_FrameCount++;
3419195a:	687b      	ldr	r3, [r7, #4]
3419195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419195e:	1c5a      	adds	r2, r3, #1
34191960:	687b      	ldr	r3, [r7, #4]
34191962:	645a      	str	r2, [r3, #68]	@ 0x44
}
34191964:	bf00      	nop
34191966:	370c      	adds	r7, #12
34191968:	46bd      	mov	sp, r7
3419196a:	f85d 7b04 	ldr.w	r7, [sp], #4
3419196e:	4770      	bx	lr

34191970 <ISP_SVC_Misc_IncDumpFrameId>:
  *         Increment the id of the frame output on the dump pipe
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
34191970:	b480      	push	{r7}
34191972:	b083      	sub	sp, #12
34191974:	af00      	add	r7, sp, #0
34191976:	6078      	str	r0, [r7, #4]
  hIsp->DumpPipe_FrameCount++;
34191978:	687b      	ldr	r3, [r7, #4]
3419197a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419197c:	1c5a      	adds	r2, r3, #1
3419197e:	687b      	ldr	r3, [r7, #4]
34191980:	649a      	str	r2, [r3, #72]	@ 0x48
}
34191982:	bf00      	nop
34191984:	370c      	adds	r7, #12
34191986:	46bd      	mov	sp, r7
34191988:	f85d 7b04 	ldr.w	r7, [sp], #4
3419198c:	4770      	bx	lr

3419198e <ISP_SVC_Misc_IsGammaEnabled>:
  * @param  hIsp: ISP device handle
  * @param  Pipe: DCMIPP pipe line
  * @retval 1 if enabled 0 otherwise
  */
bool ISP_SVC_Misc_IsGammaEnabled(ISP_HandleTypeDef *hIsp, uint32_t Pipe)
{
3419198e:	b580      	push	{r7, lr}
34191990:	b084      	sub	sp, #16
34191992:	af00      	add	r7, sp, #0
34191994:	6078      	str	r0, [r7, #4]
34191996:	6039      	str	r1, [r7, #0]
  uint8_t ret;

  /* Check handle validity */
  if (hIsp == NULL)
34191998:	687b      	ldr	r3, [r7, #4]
3419199a:	2b00      	cmp	r3, #0
3419199c:	d101      	bne.n	341919a2 <ISP_SVC_Misc_IsGammaEnabled+0x14>
  {
    return ISP_ERR_EINVAL;
3419199e:	2301      	movs	r3, #1
341919a0:	e020      	b.n	341919e4 <ISP_SVC_Misc_IsGammaEnabled+0x56>
  }

  switch(Pipe)
341919a2:	683b      	ldr	r3, [r7, #0]
341919a4:	2b01      	cmp	r3, #1
341919a6:	d003      	beq.n	341919b0 <ISP_SVC_Misc_IsGammaEnabled+0x22>
341919a8:	683b      	ldr	r3, [r7, #0]
341919aa:	2b02      	cmp	r3, #2
341919ac:	d009      	beq.n	341919c2 <ISP_SVC_Misc_IsGammaEnabled+0x34>
341919ae:	e011      	b.n	341919d4 <ISP_SVC_Misc_IsGammaEnabled+0x46>
  {
  case 1:
    ret = HAL_DCMIPP_PIPE_IsEnabledGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
341919b0:	687b      	ldr	r3, [r7, #4]
341919b2:	681b      	ldr	r3, [r3, #0]
341919b4:	2101      	movs	r1, #1
341919b6:	4618      	mov	r0, r3
341919b8:	f7f4 f9f8 	bl	34185dac <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>
341919bc:	4603      	mov	r3, r0
341919be:	73fb      	strb	r3, [r7, #15]
    break;
341919c0:	e00a      	b.n	341919d8 <ISP_SVC_Misc_IsGammaEnabled+0x4a>
  case 2:
    ret = HAL_DCMIPP_PIPE_IsEnabledGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2);
341919c2:	687b      	ldr	r3, [r7, #4]
341919c4:	681b      	ldr	r3, [r3, #0]
341919c6:	2102      	movs	r1, #2
341919c8:	4618      	mov	r0, r3
341919ca:	f7f4 f9ef 	bl	34185dac <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>
341919ce:	4603      	mov	r3, r0
341919d0:	73fb      	strb	r3, [r7, #15]
    break;
341919d2:	e001      	b.n	341919d8 <ISP_SVC_Misc_IsGammaEnabled+0x4a>
  default:
    ret = 0; /*  No gamma on pipe 0 */
341919d4:	2300      	movs	r3, #0
341919d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
341919d8:	7bfb      	ldrb	r3, [r7, #15]
341919da:	2b00      	cmp	r3, #0
341919dc:	bf14      	ite	ne
341919de:	2301      	movne	r3, #1
341919e0:	2300      	moveq	r3, #0
341919e2:	b2db      	uxtb	r3, r3
}
341919e4:	4618      	mov	r0, r3
341919e6:	3710      	adds	r7, #16
341919e8:	46bd      	mov	sp, r7
341919ea:	bd80      	pop	{r7, pc}

341919ec <ISP_SVC_ISP_SetGamma>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gamma configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGamma(ISP_HandleTypeDef *hIsp, ISP_GammaTypeDef *pConfig)
{
341919ec:	b580      	push	{r7, lr}
341919ee:	b082      	sub	sp, #8
341919f0:	af00      	add	r7, sp, #0
341919f2:	6078      	str	r0, [r7, #4]
341919f4:	6039      	str	r1, [r7, #0]
  if ((hIsp == NULL) || (pConfig == NULL))
341919f6:	687b      	ldr	r3, [r7, #4]
341919f8:	2b00      	cmp	r3, #0
341919fa:	d002      	beq.n	34191a02 <ISP_SVC_ISP_SetGamma+0x16>
341919fc:	683b      	ldr	r3, [r7, #0]
341919fe:	2b00      	cmp	r3, #0
34191a00:	d101      	bne.n	34191a06 <ISP_SVC_ISP_SetGamma+0x1a>
  {
    return ISP_ERR_DCMIPP_GAMMA;
34191a02:	2395      	movs	r3, #149	@ 0x95
34191a04:	e034      	b.n	34191a70 <ISP_SVC_ISP_SetGamma+0x84>
  }

  if (pConfig->enablePipe1 == 0)
34191a06:	683b      	ldr	r3, [r7, #0]
34191a08:	781b      	ldrb	r3, [r3, #0]
34191a0a:	2b00      	cmp	r3, #0
34191a0c:	d10a      	bne.n	34191a24 <ISP_SVC_ISP_SetGamma+0x38>
  {
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34191a0e:	687b      	ldr	r3, [r7, #4]
34191a10:	681b      	ldr	r3, [r3, #0]
34191a12:	2101      	movs	r1, #1
34191a14:	4618      	mov	r0, r3
34191a16:	f7f4 f99a 	bl	34185d4e <HAL_DCMIPP_PIPE_DisableGammaConversion>
34191a1a:	4603      	mov	r3, r0
34191a1c:	2b00      	cmp	r3, #0
34191a1e:	d00c      	beq.n	34191a3a <ISP_SVC_ISP_SetGamma+0x4e>
    {
      return ISP_ERR_DCMIPP_GAMMA;
34191a20:	2395      	movs	r3, #149	@ 0x95
34191a22:	e025      	b.n	34191a70 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }
  else
  {
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34191a24:	687b      	ldr	r3, [r7, #4]
34191a26:	681b      	ldr	r3, [r3, #0]
34191a28:	2101      	movs	r1, #1
34191a2a:	4618      	mov	r0, r3
34191a2c:	f7f4 f960 	bl	34185cf0 <HAL_DCMIPP_PIPE_EnableGammaConversion>
34191a30:	4603      	mov	r3, r0
34191a32:	2b00      	cmp	r3, #0
34191a34:	d001      	beq.n	34191a3a <ISP_SVC_ISP_SetGamma+0x4e>
    {
      return ISP_ERR_DCMIPP_GAMMA;
34191a36:	2395      	movs	r3, #149	@ 0x95
34191a38:	e01a      	b.n	34191a70 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }

  if (pConfig->enablePipe2 == 0)
34191a3a:	683b      	ldr	r3, [r7, #0]
34191a3c:	785b      	ldrb	r3, [r3, #1]
34191a3e:	2b00      	cmp	r3, #0
34191a40:	d10a      	bne.n	34191a58 <ISP_SVC_ISP_SetGamma+0x6c>
  {
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
34191a42:	687b      	ldr	r3, [r7, #4]
34191a44:	681b      	ldr	r3, [r3, #0]
34191a46:	2102      	movs	r1, #2
34191a48:	4618      	mov	r0, r3
34191a4a:	f7f4 f980 	bl	34185d4e <HAL_DCMIPP_PIPE_DisableGammaConversion>
34191a4e:	4603      	mov	r3, r0
34191a50:	2b00      	cmp	r3, #0
34191a52:	d00c      	beq.n	34191a6e <ISP_SVC_ISP_SetGamma+0x82>
    {
      return ISP_ERR_DCMIPP_GAMMA;
34191a54:	2395      	movs	r3, #149	@ 0x95
34191a56:	e00b      	b.n	34191a70 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }
  else
  {
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
34191a58:	687b      	ldr	r3, [r7, #4]
34191a5a:	681b      	ldr	r3, [r3, #0]
34191a5c:	2102      	movs	r1, #2
34191a5e:	4618      	mov	r0, r3
34191a60:	f7f4 f946 	bl	34185cf0 <HAL_DCMIPP_PIPE_EnableGammaConversion>
34191a64:	4603      	mov	r3, r0
34191a66:	2b00      	cmp	r3, #0
34191a68:	d001      	beq.n	34191a6e <ISP_SVC_ISP_SetGamma+0x82>
    {
      return ISP_ERR_DCMIPP_GAMMA;
34191a6a:	2395      	movs	r3, #149	@ 0x95
34191a6c:	e000      	b.n	34191a70 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }

  return ISP_OK;
34191a6e:	2300      	movs	r3, #0
}
34191a70:	4618      	mov	r0, r3
34191a72:	3708      	adds	r7, #8
34191a74:	46bd      	mov	sp, r7
34191a76:	bd80      	pop	{r7, pc}

34191a78 <ISP_SVC_IQParam_Init>:
  *         Initialize the IQ parameters cache with values from non volatile memory
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_IQParam_Init(ISP_HandleTypeDef *hIsp, const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
34191a78:	b580      	push	{r7, lr}
34191a7a:	b082      	sub	sp, #8
34191a7c:	af00      	add	r7, sp, #0
34191a7e:	6078      	str	r0, [r7, #4]
34191a80:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */

  ISP_IQParamCache = *ISP_IQParamCacheInit;
34191a82:	4a07      	ldr	r2, [pc, #28]	@ (34191aa0 <ISP_SVC_IQParam_Init+0x28>)
34191a84:	683b      	ldr	r3, [r7, #0]
34191a86:	4610      	mov	r0, r2
34191a88:	4619      	mov	r1, r3
34191a8a:	f44f 7315 	mov.w	r3, #596	@ 0x254
34191a8e:	461a      	mov	r2, r3
34191a90:	f001 fc03 	bl	3419329a <memcpy>
  return ISP_OK;
34191a94:	2300      	movs	r3, #0
}
34191a96:	4618      	mov	r0, r3
34191a98:	3708      	adds	r7, #8
34191a9a:	46bd      	mov	sp, r7
34191a9c:	bd80      	pop	{r7, pc}
34191a9e:	bf00      	nop
34191aa0:	341c1468 	.word	0x341c1468

34191aa4 <ISP_SVC_IQParam_Get>:
  *         Get the pointer to the IQ parameters cache
  * @param  hIsp: ISP device handle
  * @retval Pointer to the IQ Param config
  */
ISP_IQParamTypeDef *ISP_SVC_IQParam_Get(ISP_HandleTypeDef *hIsp)
{
34191aa4:	b480      	push	{r7}
34191aa6:	b083      	sub	sp, #12
34191aa8:	af00      	add	r7, sp, #0
34191aaa:	6078      	str	r0, [r7, #4]
  (void)hIsp; /* unused */

  return &ISP_IQParamCache;
34191aac:	4b03      	ldr	r3, [pc, #12]	@ (34191abc <ISP_SVC_IQParam_Get+0x18>)
}
34191aae:	4618      	mov	r0, r3
34191ab0:	370c      	adds	r7, #12
34191ab2:	46bd      	mov	sp, r7
34191ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
34191ab8:	4770      	bx	lr
34191aba:	bf00      	nop
34191abc:	341c1468 	.word	0x341c1468

34191ac0 <ISP_SVC_Stats_Init>:
  *         Initialize the statistic engine
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Init(ISP_HandleTypeDef *hIsp)
{
34191ac0:	b580      	push	{r7, lr}
34191ac2:	b082      	sub	sp, #8
34191ac4:	af00      	add	r7, sp, #0
34191ac6:	6078      	str	r0, [r7, #4]
  memset(&ISP_SVC_StatEngine, 0, sizeof(ISP_SVC_StatEngineTypeDef));
34191ac8:	f44f 72b0 	mov.w	r2, #352	@ 0x160
34191acc:	2100      	movs	r1, #0
34191ace:	4803      	ldr	r0, [pc, #12]	@ (34191adc <ISP_SVC_Stats_Init+0x1c>)
34191ad0:	f001 fb68 	bl	341931a4 <memset>
}
34191ad4:	bf00      	nop
34191ad6:	3708      	adds	r7, #8
34191ad8:	46bd      	mov	sp, r7
34191ada:	bd80      	pop	{r7, pc}
34191adc:	341c16bc 	.word	0x341c16bc

34191ae0 <ISP_SVC_Stats_Gather>:
  *         Gather statistics
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Gather(ISP_HandleTypeDef *hIsp)
{
34191ae0:	b5b0      	push	{r4, r5, r7, lr}
34191ae2:	b092      	sub	sp, #72	@ 0x48
34191ae4:	af00      	add	r7, sp, #0
34191ae6:	6078      	str	r0, [r7, #4]
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_SVC_StatStateTypeDef *ongoing;
  uint32_t i, avgR, avgG, avgB, frameId;

  /* Check handle validity */
  if (hIsp == NULL)
34191ae8:	687b      	ldr	r3, [r7, #4]
34191aea:	2b00      	cmp	r3, #0
34191aec:	d103      	bne.n	34191af6 <ISP_SVC_Stats_Gather+0x16>
  {
    printf("ERROR: ISP handle is NULL\r\n");
34191aee:	48ba      	ldr	r0, [pc, #744]	@ (34191dd8 <ISP_SVC_Stats_Gather+0x2f8>)
34191af0:	f001 fa28 	bl	34192f44 <puts>
    return;
34191af4:	e2a7      	b.n	34192046 <ISP_SVC_Stats_Gather+0x566>
  }

  if (hIsp->hDcmipp == NULL)
34191af6:	687b      	ldr	r3, [r7, #4]
34191af8:	681b      	ldr	r3, [r3, #0]
34191afa:	2b00      	cmp	r3, #0
34191afc:	f000 82a2 	beq.w	34192044 <ISP_SVC_Stats_Gather+0x564>
  }

  /* Read the stats according to the configuration applied 2 VSYNC (shadow register + stat computation)
   * stages earlier.
   */
  ongoing = &ISP_SVC_StatEngine.ongoing;
34191b00:	4bb6      	ldr	r3, [pc, #728]	@ (34191ddc <ISP_SVC_Stats_Gather+0x2fc>)
34191b02:	643b      	str	r3, [r7, #64]	@ 0x40
  switch(stagePrevious2)
34191b04:	4bb6      	ldr	r3, [pc, #728]	@ (34191de0 <ISP_SVC_Stats_Gather+0x300>)
34191b06:	781b      	ldrb	r3, [r3, #0]
34191b08:	2b09      	cmp	r3, #9
34191b0a:	f200 80fd 	bhi.w	34191d08 <ISP_SVC_Stats_Gather+0x228>
34191b0e:	a201      	add	r2, pc, #4	@ (adr r2, 34191b14 <ISP_SVC_Stats_Gather+0x34>)
34191b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34191b14:	34191b3d 	.word	0x34191b3d
34191b18:	34191bc5 	.word	0x34191bc5
34191b1c:	34191bd3 	.word	0x34191bd3
34191b20:	34191be1 	.word	0x34191be1
34191b24:	34191bef 	.word	0x34191bef
34191b28:	34191bfd 	.word	0x34191bfd
34191b2c:	34191cd1 	.word	0x34191cd1
34191b30:	34191cdf 	.word	0x34191cdf
34191b34:	34191ced 	.word	0x34191ced
34191b38:	34191cfb 	.word	0x34191cfb
  {
  case ISP_STAT_CFG_UP_AVG:
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
34191b3c:	687b      	ldr	r3, [r7, #4]
34191b3e:	6818      	ldr	r0, [r3, #0]
34191b40:	f107 0310 	add.w	r3, r7, #16
34191b44:	2201      	movs	r2, #1
34191b46:	2101      	movs	r1, #1
34191b48:	f7f4 ff44 	bl	341869d4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
34191b4c:	687b      	ldr	r3, [r7, #4]
34191b4e:	6818      	ldr	r0, [r3, #0]
34191b50:	f107 030c 	add.w	r3, r7, #12
34191b54:	2202      	movs	r2, #2
34191b56:	2101      	movs	r1, #1
34191b58:	f7f4 ff3c 	bl	341869d4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
34191b5c:	687b      	ldr	r3, [r7, #4]
34191b5e:	6818      	ldr	r0, [r3, #0]
34191b60:	f107 0308 	add.w	r3, r7, #8
34191b64:	2203      	movs	r2, #3
34191b66:	2101      	movs	r1, #1
34191b68:	f7f4 ff34 	bl	341869d4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>

    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
34191b6c:	693b      	ldr	r3, [r7, #16]
34191b6e:	2200      	movs	r2, #0
34191b70:	2101      	movs	r1, #1
34191b72:	6878      	ldr	r0, [r7, #4]
34191b74:	f7fe feb4 	bl	341908e0 <GetAvgStats>
34191b78:	4603      	mov	r3, r0
34191b7a:	461a      	mov	r2, r3
34191b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191b7e:	701a      	strb	r2, [r3, #0]
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
34191b80:	68fb      	ldr	r3, [r7, #12]
34191b82:	2201      	movs	r2, #1
34191b84:	2101      	movs	r1, #1
34191b86:	6878      	ldr	r0, [r7, #4]
34191b88:	f7fe feaa 	bl	341908e0 <GetAvgStats>
34191b8c:	4603      	mov	r3, r0
34191b8e:	461a      	mov	r2, r3
34191b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191b92:	705a      	strb	r2, [r3, #1]
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
34191b94:	68bb      	ldr	r3, [r7, #8]
34191b96:	2202      	movs	r2, #2
34191b98:	2101      	movs	r1, #1
34191b9a:	6878      	ldr	r0, [r7, #4]
34191b9c:	f7fe fea0 	bl	341908e0 <GetAvgStats>
34191ba0:	4603      	mov	r3, r0
34191ba2:	461a      	mov	r2, r3
34191ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191ba6:	709a      	strb	r2, [r3, #2]
    ongoing->up.averageL = LuminanceFromRGB(ongoing->up.averageR, ongoing->up.averageG, ongoing->up.averageB);
34191ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191baa:	7818      	ldrb	r0, [r3, #0]
34191bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191bae:	7859      	ldrb	r1, [r3, #1]
34191bb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191bb2:	789b      	ldrb	r3, [r3, #2]
34191bb4:	461a      	mov	r2, r3
34191bb6:	f7ff f87b 	bl	34190cb0 <LuminanceFromRGB>
34191bba:	4603      	mov	r3, r0
34191bbc:	461a      	mov	r2, r3
34191bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191bc0:	70da      	strb	r2, [r3, #3]
    break;
34191bc2:	e0a2      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_0_2:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[0]);
34191bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191bc6:	3304      	adds	r3, #4
34191bc8:	4619      	mov	r1, r3
34191bca:	6878      	ldr	r0, [r7, #4]
34191bcc:	f7fe fecc 	bl	34190968 <ReadStatHistogram>
    break;
34191bd0:	e09b      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_3_5:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[3]);
34191bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191bd4:	3310      	adds	r3, #16
34191bd6:	4619      	mov	r1, r3
34191bd8:	6878      	ldr	r0, [r7, #4]
34191bda:	f7fe fec5 	bl	34190968 <ReadStatHistogram>
    break;
34191bde:	e094      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_6_8:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[6]);
34191be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191be2:	331c      	adds	r3, #28
34191be4:	4619      	mov	r1, r3
34191be6:	6878      	ldr	r0, [r7, #4]
34191be8:	f7fe febe 	bl	34190968 <ReadStatHistogram>
    break;
34191bec:	e08d      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_9_11:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[9]);
34191bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191bf0:	3328      	adds	r3, #40	@ 0x28
34191bf2:	4619      	mov	r1, r3
34191bf4:	6878      	ldr	r0, [r7, #4]
34191bf6:	f7fe feb7 	bl	34190968 <ReadStatHistogram>
    break;
34191bfa:	e086      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_AVG:
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
34191bfc:	687b      	ldr	r3, [r7, #4]
34191bfe:	6818      	ldr	r0, [r3, #0]
34191c00:	f107 0310 	add.w	r3, r7, #16
34191c04:	2201      	movs	r2, #1
34191c06:	2101      	movs	r1, #1
34191c08:	f7f4 fee4 	bl	341869d4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
34191c0c:	687b      	ldr	r3, [r7, #4]
34191c0e:	6818      	ldr	r0, [r3, #0]
34191c10:	f107 030c 	add.w	r3, r7, #12
34191c14:	2202      	movs	r2, #2
34191c16:	2101      	movs	r1, #1
34191c18:	f7f4 fedc 	bl	341869d4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
34191c1c:	687b      	ldr	r3, [r7, #4]
34191c1e:	6818      	ldr	r0, [r3, #0]
34191c20:	f107 0308 	add.w	r3, r7, #8
34191c24:	2203      	movs	r2, #3
34191c26:	2101      	movs	r1, #1
34191c28:	f7f4 fed4 	bl	341869d4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>

    ongoing->down.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_RED, avgR);
34191c2c:	693b      	ldr	r3, [r7, #16]
34191c2e:	2200      	movs	r2, #0
34191c30:	2102      	movs	r1, #2
34191c32:	6878      	ldr	r0, [r7, #4]
34191c34:	f7fe fe54 	bl	341908e0 <GetAvgStats>
34191c38:	4603      	mov	r3, r0
34191c3a:	461a      	mov	r2, r3
34191c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
34191c42:	68fb      	ldr	r3, [r7, #12]
34191c44:	2201      	movs	r2, #1
34191c46:	2102      	movs	r1, #2
34191c48:	6878      	ldr	r0, [r7, #4]
34191c4a:	f7fe fe49 	bl	341908e0 <GetAvgStats>
34191c4e:	4603      	mov	r3, r0
34191c50:	461a      	mov	r2, r3
34191c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
34191c58:	68bb      	ldr	r3, [r7, #8]
34191c5a:	2202      	movs	r2, #2
34191c5c:	2102      	movs	r1, #2
34191c5e:	6878      	ldr	r0, [r7, #4]
34191c60:	f7fe fe3e 	bl	341908e0 <GetAvgStats>
34191c64:	4603      	mov	r3, r0
34191c66:	461a      	mov	r2, r3
34191c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191c6a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34191c6e:	6878      	ldr	r0, [r7, #4]
34191c70:	f7ff ff18 	bl	34191aa4 <ISP_SVC_IQParam_Get>
34191c74:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if ((hIsp->sensorInfo.bayer_pattern == ISP_DEMOS_TYPE_MONO) || (!IQParamConfig->demosaicing.enable))
34191c76:	687b      	ldr	r3, [r7, #4]
34191c78:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
34191c7c:	2b04      	cmp	r3, #4
34191c7e:	d003      	beq.n	34191c88 <ISP_SVC_Stats_Gather+0x1a8>
34191c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34191c82:	7b1b      	ldrb	r3, [r3, #12]
34191c84:	2b00      	cmp	r3, #0
34191c86:	d111      	bne.n	34191cac <ISP_SVC_Stats_Gather+0x1cc>
    {
      ongoing->down.averageL = LuminanceFromRGBMono(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
34191c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191c8a:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
34191c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191c90:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
34191c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191c96:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
34191c9a:	461a      	mov	r2, r3
34191c9c:	f7ff f848 	bl	34190d30 <LuminanceFromRGBMono>
34191ca0:	4603      	mov	r3, r0
34191ca2:	461a      	mov	r2, r3
34191ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191ca6:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    }
    else
    {
      ongoing->down.averageL = LuminanceFromRGB(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
    }
    break;
34191caa:	e02e      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>
      ongoing->down.averageL = LuminanceFromRGB(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
34191cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191cae:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
34191cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191cb4:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
34191cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191cba:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
34191cbe:	461a      	mov	r2, r3
34191cc0:	f7fe fff6 	bl	34190cb0 <LuminanceFromRGB>
34191cc4:	4603      	mov	r3, r0
34191cc6:	461a      	mov	r2, r3
34191cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191cca:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    break;
34191cce:	e01c      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_0_2:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[0]);
34191cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191cd2:	3338      	adds	r3, #56	@ 0x38
34191cd4:	4619      	mov	r1, r3
34191cd6:	6878      	ldr	r0, [r7, #4]
34191cd8:	f7fe fe46 	bl	34190968 <ReadStatHistogram>
    break;
34191cdc:	e015      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_3_5:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[3]);
34191cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191ce0:	3344      	adds	r3, #68	@ 0x44
34191ce2:	4619      	mov	r1, r3
34191ce4:	6878      	ldr	r0, [r7, #4]
34191ce6:	f7fe fe3f 	bl	34190968 <ReadStatHistogram>
    break;
34191cea:	e00e      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_6_8:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[6]);
34191cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191cee:	3350      	adds	r3, #80	@ 0x50
34191cf0:	4619      	mov	r1, r3
34191cf2:	6878      	ldr	r0, [r7, #4]
34191cf4:	f7fe fe38 	bl	34190968 <ReadStatHistogram>
    break;
34191cf8:	e007      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_9_11:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[9]);
34191cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191cfc:	335c      	adds	r3, #92	@ 0x5c
34191cfe:	4619      	mov	r1, r3
34191d00:	6878      	ldr	r0, [r7, #4]
34191d02:	f7fe fe31 	bl	34190968 <ReadStatHistogram>
    break;
34191d06:	e000      	b.n	34191d0a <ISP_SVC_Stats_Gather+0x22a>

  default:
    /* No Read */
    break;
34191d08:	bf00      	nop
  }

  /* Configure stat for a new stage */
  switch(ISP_SVC_StatEngine.stage)
34191d0a:	4b36      	ldr	r3, [pc, #216]	@ (34191de4 <ISP_SVC_Stats_Gather+0x304>)
34191d0c:	781b      	ldrb	r3, [r3, #0]
34191d0e:	2b09      	cmp	r3, #9
34191d10:	f200 80b8 	bhi.w	34191e84 <ISP_SVC_Stats_Gather+0x3a4>
34191d14:	a201      	add	r2, pc, #4	@ (adr r2, 34191d1c <ISP_SVC_Stats_Gather+0x23c>)
34191d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34191d1a:	bf00      	nop
34191d1c:	34191d45 	.word	0x34191d45
34191d20:	34191d9b 	.word	0x34191d9b
34191d24:	34191da9 	.word	0x34191da9
34191d28:	34191db7 	.word	0x34191db7
34191d2c:	34191dc5 	.word	0x34191dc5
34191d30:	34191dd3 	.word	0x34191dd3
34191d34:	34191e4d 	.word	0x34191e4d
34191d38:	34191e5b 	.word	0x34191e5b
34191d3c:	34191e69 	.word	0x34191e69
34191d40:	34191e77 	.word	0x34191e77
  {
  case ISP_STAT_CFG_UP_AVG:
    for (i = 0; i < 3; i++)
34191d44:	2300      	movs	r3, #0
34191d46:	647b      	str	r3, [r7, #68]	@ 0x44
34191d48:	e023      	b.n	34191d92 <ISP_SVC_Stats_Gather+0x2b2>
    {
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
34191d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34191d4c:	4613      	mov	r3, r2
34191d4e:	005b      	lsls	r3, r3, #1
34191d50:	4413      	add	r3, r2
34191d52:	009b      	lsls	r3, r3, #2
34191d54:	3348      	adds	r3, #72	@ 0x48
34191d56:	443b      	add	r3, r7
34191d58:	3b34      	subs	r3, #52	@ 0x34
34191d5a:	2200      	movs	r2, #0
34191d5c:	601a      	str	r2, [r3, #0]
      statConf[i].Source = avgRGBUp[i];
34191d5e:	4a22      	ldr	r2, [pc, #136]	@ (34191de8 <ISP_SVC_Stats_Gather+0x308>)
34191d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191d62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
34191d66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34191d68:	4613      	mov	r3, r2
34191d6a:	005b      	lsls	r3, r3, #1
34191d6c:	4413      	add	r3, r2
34191d6e:	009b      	lsls	r3, r3, #2
34191d70:	3348      	adds	r3, #72	@ 0x48
34191d72:	443b      	add	r3, r7
34191d74:	3b30      	subs	r3, #48	@ 0x30
34191d76:	6019      	str	r1, [r3, #0]
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
34191d78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34191d7a:	4613      	mov	r3, r2
34191d7c:	005b      	lsls	r3, r3, #1
34191d7e:	4413      	add	r3, r2
34191d80:	009b      	lsls	r3, r3, #2
34191d82:	3348      	adds	r3, #72	@ 0x48
34191d84:	443b      	add	r3, r7
34191d86:	3b2c      	subs	r3, #44	@ 0x2c
34191d88:	2200      	movs	r2, #0
34191d8a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
34191d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191d8e:	3301      	adds	r3, #1
34191d90:	647b      	str	r3, [r7, #68]	@ 0x44
34191d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191d94:	2b02      	cmp	r3, #2
34191d96:	d9d8      	bls.n	34191d4a <ISP_SVC_Stats_Gather+0x26a>
    }
    break;
34191d98:	e075      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_0_2:
    SetStatConfig(statConf, &statConfUpBins_0_2);
34191d9a:	f107 0314 	add.w	r3, r7, #20
34191d9e:	4913      	ldr	r1, [pc, #76]	@ (34191dec <ISP_SVC_Stats_Gather+0x30c>)
34191da0:	4618      	mov	r0, r3
34191da2:	f7fe fe03 	bl	341909ac <SetStatConfig>
    break;
34191da6:	e06e      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_3_5:
    SetStatConfig(statConf, &statConfUpBins_3_5);
34191da8:	f107 0314 	add.w	r3, r7, #20
34191dac:	4910      	ldr	r1, [pc, #64]	@ (34191df0 <ISP_SVC_Stats_Gather+0x310>)
34191dae:	4618      	mov	r0, r3
34191db0:	f7fe fdfc 	bl	341909ac <SetStatConfig>
    break;
34191db4:	e067      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_6_8:
    SetStatConfig(statConf, &statConfUpBins_6_8);
34191db6:	f107 0314 	add.w	r3, r7, #20
34191dba:	490e      	ldr	r1, [pc, #56]	@ (34191df4 <ISP_SVC_Stats_Gather+0x314>)
34191dbc:	4618      	mov	r0, r3
34191dbe:	f7fe fdf5 	bl	341909ac <SetStatConfig>
    break;
34191dc2:	e060      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_9_11:
    SetStatConfig(statConf, &statConfUpBins_9_11);
34191dc4:	f107 0314 	add.w	r3, r7, #20
34191dc8:	490b      	ldr	r1, [pc, #44]	@ (34191df8 <ISP_SVC_Stats_Gather+0x318>)
34191dca:	4618      	mov	r0, r3
34191dcc:	f7fe fdee 	bl	341909ac <SetStatConfig>
    break;
34191dd0:	e059      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_AVG:
    for (i = 0; i < 3; i++)
34191dd2:	2300      	movs	r3, #0
34191dd4:	647b      	str	r3, [r7, #68]	@ 0x44
34191dd6:	e035      	b.n	34191e44 <ISP_SVC_Stats_Gather+0x364>
34191dd8:	341950d8 	.word	0x341950d8
34191ddc:	341c1738 	.word	0x341c1738
34191de0:	341c0135 	.word	0x341c0135
34191de4:	341c16bc 	.word	0x341c16bc
34191de8:	3419572c 	.word	0x3419572c
34191dec:	34195744 	.word	0x34195744
34191df0:	34195750 	.word	0x34195750
34191df4:	3419575c 	.word	0x3419575c
34191df8:	34195768 	.word	0x34195768
    {
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
34191dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34191dfe:	4613      	mov	r3, r2
34191e00:	005b      	lsls	r3, r3, #1
34191e02:	4413      	add	r3, r2
34191e04:	009b      	lsls	r3, r3, #2
34191e06:	3348      	adds	r3, #72	@ 0x48
34191e08:	443b      	add	r3, r7
34191e0a:	3b34      	subs	r3, #52	@ 0x34
34191e0c:	2200      	movs	r2, #0
34191e0e:	601a      	str	r2, [r3, #0]
      statConf[i].Source = avgRGBDown[i];
34191e10:	4a8e      	ldr	r2, [pc, #568]	@ (3419204c <ISP_SVC_Stats_Gather+0x56c>)
34191e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191e14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
34191e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34191e1a:	4613      	mov	r3, r2
34191e1c:	005b      	lsls	r3, r3, #1
34191e1e:	4413      	add	r3, r2
34191e20:	009b      	lsls	r3, r3, #2
34191e22:	3348      	adds	r3, #72	@ 0x48
34191e24:	443b      	add	r3, r7
34191e26:	3b30      	subs	r3, #48	@ 0x30
34191e28:	6019      	str	r1, [r3, #0]
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
34191e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34191e2c:	4613      	mov	r3, r2
34191e2e:	005b      	lsls	r3, r3, #1
34191e30:	4413      	add	r3, r2
34191e32:	009b      	lsls	r3, r3, #2
34191e34:	3348      	adds	r3, #72	@ 0x48
34191e36:	443b      	add	r3, r7
34191e38:	3b2c      	subs	r3, #44	@ 0x2c
34191e3a:	2200      	movs	r2, #0
34191e3c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
34191e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191e40:	3301      	adds	r3, #1
34191e42:	647b      	str	r3, [r7, #68]	@ 0x44
34191e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191e46:	2b02      	cmp	r3, #2
34191e48:	d9d8      	bls.n	34191dfc <ISP_SVC_Stats_Gather+0x31c>
    }
    break;
34191e4a:	e01c      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_0_2:
    SetStatConfig(statConf, &statConfDownBins_0_2);
34191e4c:	f107 0314 	add.w	r3, r7, #20
34191e50:	497f      	ldr	r1, [pc, #508]	@ (34192050 <ISP_SVC_Stats_Gather+0x570>)
34191e52:	4618      	mov	r0, r3
34191e54:	f7fe fdaa 	bl	341909ac <SetStatConfig>
    break;
34191e58:	e015      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_3_5:
    SetStatConfig(statConf, &statConfDownBins_3_5);
34191e5a:	f107 0314 	add.w	r3, r7, #20
34191e5e:	497d      	ldr	r1, [pc, #500]	@ (34192054 <ISP_SVC_Stats_Gather+0x574>)
34191e60:	4618      	mov	r0, r3
34191e62:	f7fe fda3 	bl	341909ac <SetStatConfig>
    break;
34191e66:	e00e      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_6_8:
    SetStatConfig(statConf, &statConfDownBins_6_8);
34191e68:	f107 0314 	add.w	r3, r7, #20
34191e6c:	497a      	ldr	r1, [pc, #488]	@ (34192058 <ISP_SVC_Stats_Gather+0x578>)
34191e6e:	4618      	mov	r0, r3
34191e70:	f7fe fd9c 	bl	341909ac <SetStatConfig>
    break;
34191e74:	e007      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_9_11:
    SetStatConfig(statConf, &statConfDownBins_9_11);
34191e76:	f107 0314 	add.w	r3, r7, #20
34191e7a:	4978      	ldr	r1, [pc, #480]	@ (3419205c <ISP_SVC_Stats_Gather+0x57c>)
34191e7c:	4618      	mov	r0, r3
34191e7e:	f7fe fd95 	bl	341909ac <SetStatConfig>
    break;
34191e82:	e000      	b.n	34191e86 <ISP_SVC_Stats_Gather+0x3a6>

  default:
    /* Configure Unchanged */
    break;
34191e84:	bf00      	nop
  }

  /* Apply configuration (for an output result available 2 VSYNC later) */
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34191e86:	2301      	movs	r3, #1
34191e88:	647b      	str	r3, [r7, #68]	@ 0x44
34191e8a:	e029      	b.n	34191ee0 <ISP_SVC_Stats_Gather+0x400>
  {
    if (HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, i, &statConf[i - DCMIPP_STATEXT_MODULE1]) != HAL_OK)
34191e8c:	687b      	ldr	r3, [r7, #4]
34191e8e:	6818      	ldr	r0, [r3, #0]
34191e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191e92:	b2dc      	uxtb	r4, r3
34191e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191e96:	1e5a      	subs	r2, r3, #1
34191e98:	f107 0114 	add.w	r1, r7, #20
34191e9c:	4613      	mov	r3, r2
34191e9e:	005b      	lsls	r3, r3, #1
34191ea0:	4413      	add	r3, r2
34191ea2:	009b      	lsls	r3, r3, #2
34191ea4:	440b      	add	r3, r1
34191ea6:	4622      	mov	r2, r4
34191ea8:	2101      	movs	r1, #1
34191eaa:	f7f4 fb94 	bl	341865d6 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>
34191eae:	4603      	mov	r3, r0
34191eb0:	2b00      	cmp	r3, #0
34191eb2:	d003      	beq.n	34191ebc <ISP_SVC_Stats_Gather+0x3dc>
    {
      printf("ERROR: can't set Statistic Extraction config\r\n");
34191eb4:	486a      	ldr	r0, [pc, #424]	@ (34192060 <ISP_SVC_Stats_Gather+0x580>)
34191eb6:	f001 f845 	bl	34192f44 <puts>
      return;
34191eba:	e0c4      	b.n	34192046 <ISP_SVC_Stats_Gather+0x566>
    }

    if (HAL_DCMIPP_PIPE_EnableISPStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1, i) != HAL_OK)
34191ebc:	687b      	ldr	r3, [r7, #4]
34191ebe:	681b      	ldr	r3, [r3, #0]
34191ec0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34191ec2:	b2d2      	uxtb	r2, r2
34191ec4:	2101      	movs	r1, #1
34191ec6:	4618      	mov	r0, r3
34191ec8:	f7f4 fc13 	bl	341866f2 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>
34191ecc:	4603      	mov	r3, r0
34191ece:	2b00      	cmp	r3, #0
34191ed0:	d003      	beq.n	34191eda <ISP_SVC_Stats_Gather+0x3fa>
    {
      printf("ERROR: can't enable Statistic Extraction config\r\n");
34191ed2:	4864      	ldr	r0, [pc, #400]	@ (34192064 <ISP_SVC_Stats_Gather+0x584>)
34191ed4:	f001 f836 	bl	34192f44 <puts>
      return;
34191ed8:	e0b5      	b.n	34192046 <ISP_SVC_Stats_Gather+0x566>
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34191eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191edc:	3301      	adds	r3, #1
34191ede:	647b      	str	r3, [r7, #68]	@ 0x44
34191ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34191ee2:	2b03      	cmp	r3, #3
34191ee4:	d9d2      	bls.n	34191e8c <ISP_SVC_Stats_Gather+0x3ac>
    }
  }

  /* Cycle start / end */
  frameId = ISP_SVC_Misc_GetMainFrameId(hIsp);
34191ee6:	6878      	ldr	r0, [r7, #4]
34191ee8:	f7ff fd27 	bl	3419193a <ISP_SVC_Misc_GetMainFrameId>
34191eec:	63b8      	str	r0, [r7, #56]	@ 0x38

  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
34191eee:	2001      	movs	r0, #1
34191ef0:	f7fe fe6e 	bl	34190bd0 <GetStatCycleStart>
34191ef4:	4603      	mov	r3, r0
34191ef6:	461a      	mov	r2, r3
34191ef8:	4b5b      	ldr	r3, [pc, #364]	@ (34192068 <ISP_SVC_Stats_Gather+0x588>)
34191efa:	781b      	ldrb	r3, [r3, #0]
34191efc:	429a      	cmp	r2, r3
34191efe:	d102      	bne.n	34191f06 <ISP_SVC_Stats_Gather+0x426>
  {
    ongoing->upFrameIdStart = frameId;
34191f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191f02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
34191f04:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_DOWN))
34191f06:	2002      	movs	r0, #2
34191f08:	f7fe fe62 	bl	34190bd0 <GetStatCycleStart>
34191f0c:	4603      	mov	r3, r0
34191f0e:	461a      	mov	r2, r3
34191f10:	4b55      	ldr	r3, [pc, #340]	@ (34192068 <ISP_SVC_Stats_Gather+0x588>)
34191f12:	781b      	ldrb	r3, [r3, #0]
34191f14:	429a      	cmp	r2, r3
34191f16:	d102      	bne.n	34191f1e <ISP_SVC_Stats_Gather+0x43e>
  {
    ongoing->downFrameIdStart = frameId;
34191f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191f1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
34191f1c:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_UP)) && (ongoing->upFrameIdStart != 0))
34191f1e:	2001      	movs	r0, #1
34191f20:	f7fe fe8e 	bl	34190c40 <GetStatCycleEnd>
34191f24:	4603      	mov	r3, r0
34191f26:	461a      	mov	r2, r3
34191f28:	4b4f      	ldr	r3, [pc, #316]	@ (34192068 <ISP_SVC_Stats_Gather+0x588>)
34191f2a:	781b      	ldrb	r3, [r3, #0]
34191f2c:	429a      	cmp	r2, r3
34191f2e:	d122      	bne.n	34191f76 <ISP_SVC_Stats_Gather+0x496>
34191f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191f32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34191f34:	2b00      	cmp	r3, #0
34191f36:	d01e      	beq.n	34191f76 <ISP_SVC_Stats_Gather+0x496>
  {
    /* Last measure of the up cycle : update the 'last' struct */
    ISP_SVC_StatEngine.last.up = ongoing->up;
34191f38:	4b4c      	ldr	r3, [pc, #304]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191f3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
34191f3c:	1d1c      	adds	r4, r3, #4
34191f3e:	4615      	mov	r5, r2
34191f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34191f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34191f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34191f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34191f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34191f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34191f4c:	682b      	ldr	r3, [r5, #0]
34191f4e:	6023      	str	r3, [r4, #0]
    ISP_SVC_StatEngine.last.upFrameIdEnd = frameId;
34191f50:	4a46      	ldr	r2, [pc, #280]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34191f54:	6713      	str	r3, [r2, #112]	@ 0x70
    ISP_SVC_StatEngine.last.upFrameIdStart = ongoing->upFrameIdStart;
34191f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34191f5a:	4a44      	ldr	r2, [pc, #272]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191f5c:	66d3      	str	r3, [r2, #108]	@ 0x6c

    memset(&ongoing->up, 0, sizeof(ongoing->up));
34191f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191f60:	2234      	movs	r2, #52	@ 0x34
34191f62:	2100      	movs	r1, #0
34191f64:	4618      	mov	r0, r3
34191f66:	f001 f91d 	bl	341931a4 <memset>
    ongoing->upFrameIdStart = 0;
34191f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191f6c:	2200      	movs	r2, #0
34191f6e:	669a      	str	r2, [r3, #104]	@ 0x68
    ongoing->upFrameIdEnd = 0;
34191f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191f72:	2200      	movs	r2, #0
34191f74:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_DOWN)) && (ongoing->downFrameIdStart != 0))
34191f76:	2002      	movs	r0, #2
34191f78:	f7fe fe62 	bl	34190c40 <GetStatCycleEnd>
34191f7c:	4603      	mov	r3, r0
34191f7e:	461a      	mov	r2, r3
34191f80:	4b39      	ldr	r3, [pc, #228]	@ (34192068 <ISP_SVC_Stats_Gather+0x588>)
34191f82:	781b      	ldrb	r3, [r3, #0]
34191f84:	429a      	cmp	r2, r3
34191f86:	d125      	bne.n	34191fd4 <ISP_SVC_Stats_Gather+0x4f4>
34191f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34191f8c:	2b00      	cmp	r3, #0
34191f8e:	d021      	beq.n	34191fd4 <ISP_SVC_Stats_Gather+0x4f4>
  {
    /* Last measure of the down cycle : update the 'last' struct */
    ISP_SVC_StatEngine.last.down = ongoing->down;
34191f90:	4a36      	ldr	r2, [pc, #216]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191f94:	f102 0438 	add.w	r4, r2, #56	@ 0x38
34191f98:	f103 0534 	add.w	r5, r3, #52	@ 0x34
34191f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34191f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34191fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34191fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34191fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34191fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34191fa8:	682b      	ldr	r3, [r5, #0]
34191faa:	6023      	str	r3, [r4, #0]
    ISP_SVC_StatEngine.last.downFrameIdEnd = frameId;
34191fac:	4a2f      	ldr	r2, [pc, #188]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34191fb0:	6793      	str	r3, [r2, #120]	@ 0x78
    ISP_SVC_StatEngine.last.downFrameIdStart = ongoing->downFrameIdStart;
34191fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34191fb6:	4a2d      	ldr	r2, [pc, #180]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191fb8:	6753      	str	r3, [r2, #116]	@ 0x74

    memset(&ongoing->down, 0, sizeof(ongoing->down));
34191fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191fbc:	3334      	adds	r3, #52	@ 0x34
34191fbe:	2234      	movs	r2, #52	@ 0x34
34191fc0:	2100      	movs	r1, #0
34191fc2:	4618      	mov	r0, r3
34191fc4:	f001 f8ee 	bl	341931a4 <memset>
    ongoing->downFrameIdStart = 0;
34191fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191fca:	2200      	movs	r2, #0
34191fcc:	671a      	str	r2, [r3, #112]	@ 0x70
    ongoing->downFrameIdEnd = 0;
34191fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34191fd0:	2200      	movs	r2, #0
34191fd2:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  if (((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34191fd4:	4b25      	ldr	r3, [pc, #148]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191fd6:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34191fda:	f003 0304 	and.w	r3, r3, #4
34191fde:	2b00      	cmp	r3, #0
34191fe0:	d106      	bne.n	34191ff0 <ISP_SVC_Stats_Gather+0x510>
       (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP)) &&
34191fe2:	4b22      	ldr	r3, [pc, #136]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191fe4:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34191fe8:	f003 0304 	and.w	r3, r3, #4
  if (((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34191fec:	2b00      	cmp	r3, #0
34191fee:	d017      	beq.n	34192020 <ISP_SVC_Stats_Gather+0x540>
      (frameId > ISP_SVC_StatEngine.requestAllCounter))
34191ff0:	4b1e      	ldr	r3, [pc, #120]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191ff2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
       (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP)) &&
34191ff6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
34191ff8:	429a      	cmp	r2, r3
34191ffa:	d911      	bls.n	34192020 <ISP_SVC_Stats_Gather+0x540>
  {
    /* Stop the special temporary mode "request all stats" when its delay expires */
    ISP_SVC_StatEngine.upRequest &= ~ISP_STAT_TYPE_ALL_TMP;
34191ffc:	4b1b      	ldr	r3, [pc, #108]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34191ffe:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
34192002:	f023 0304 	bic.w	r3, r3, #4
34192006:	b2da      	uxtb	r2, r3
34192008:	4b18      	ldr	r3, [pc, #96]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
3419200a:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
    ISP_SVC_StatEngine.downRequest &= ~ISP_STAT_TYPE_ALL_TMP;
3419200e:	4b17      	ldr	r3, [pc, #92]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34192010:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34192014:	f023 0304 	bic.w	r3, r3, #4
34192018:	b2da      	uxtb	r2, r3
3419201a:	4b14      	ldr	r3, [pc, #80]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
3419201c:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
  }

  /* Save the two last processed stages and go to next stage */
  stagePrevious2 = stagePrevious1;
34192020:	4b13      	ldr	r3, [pc, #76]	@ (34192070 <ISP_SVC_Stats_Gather+0x590>)
34192022:	781a      	ldrb	r2, [r3, #0]
34192024:	4b10      	ldr	r3, [pc, #64]	@ (34192068 <ISP_SVC_Stats_Gather+0x588>)
34192026:	701a      	strb	r2, [r3, #0]
  stagePrevious1 = ISP_SVC_StatEngine.stage;
34192028:	4b10      	ldr	r3, [pc, #64]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
3419202a:	781a      	ldrb	r2, [r3, #0]
3419202c:	4b10      	ldr	r3, [pc, #64]	@ (34192070 <ISP_SVC_Stats_Gather+0x590>)
3419202e:	701a      	strb	r2, [r3, #0]
  ISP_SVC_StatEngine.stage = GetNextStatStage(ISP_SVC_StatEngine.stage);
34192030:	4b0e      	ldr	r3, [pc, #56]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34192032:	781b      	ldrb	r3, [r3, #0]
34192034:	4618      	mov	r0, r3
34192036:	f7fe fcdb 	bl	341909f0 <GetNextStatStage>
3419203a:	4603      	mov	r3, r0
3419203c:	461a      	mov	r2, r3
3419203e:	4b0b      	ldr	r3, [pc, #44]	@ (3419206c <ISP_SVC_Stats_Gather+0x58c>)
34192040:	701a      	strb	r2, [r3, #0]
34192042:	e000      	b.n	34192046 <ISP_SVC_Stats_Gather+0x566>
    return;
34192044:	bf00      	nop
}
34192046:	3748      	adds	r7, #72	@ 0x48
34192048:	46bd      	mov	sp, r7
3419204a:	bdb0      	pop	{r4, r5, r7, pc}
3419204c:	34195738 	.word	0x34195738
34192050:	34195774 	.word	0x34195774
34192054:	34195780 	.word	0x34195780
34192058:	3419578c 	.word	0x3419578c
3419205c:	34195798 	.word	0x34195798
34192060:	341950f4 	.word	0x341950f4
34192064:	34195124 	.word	0x34195124
34192068:	341c0135 	.word	0x341c0135
3419206c:	341c16bc 	.word	0x341c16bc
34192070:	341c0136 	.word	0x341c0136

34192074 <ISP_SVC_Stats_ProcessCallbacks>:
  *         If the conditions are met, call the client registered callbacks
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_ProcessCallbacks(ISP_HandleTypeDef *hIsp)
{
34192074:	b580      	push	{r7, lr}
34192076:	b088      	sub	sp, #32
34192078:	af00      	add	r7, sp, #0
3419207a:	6078      	str	r0, [r7, #4]
  (void)hIsp; /* unused */
  ISP_SVC_StatStateTypeDef *pLastStat;
  ISP_SVC_StatRegisteredClient *client;
  ISP_StatusTypeDef retcb, ret = ISP_OK;
3419207c:	2300      	movs	r3, #0
3419207e:	77fb      	strb	r3, [r7, #31]

  pLastStat = &ISP_SVC_StatEngine.last;
34192080:	4b2e      	ldr	r3, [pc, #184]	@ (3419213c <ISP_SVC_Stats_ProcessCallbacks+0xc8>)
34192082:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34192084:	2300      	movs	r3, #0
34192086:	61bb      	str	r3, [r7, #24]
34192088:	e04f      	b.n	3419212a <ISP_SVC_Stats_ProcessCallbacks+0xb6>
  {
    client = &ISP_SVC_StatEngine.client[i];
3419208a:	69ba      	ldr	r2, [r7, #24]
3419208c:	4613      	mov	r3, r2
3419208e:	009b      	lsls	r3, r3, #2
34192090:	4413      	add	r3, r2
34192092:	009b      	lsls	r3, r3, #2
34192094:	33f0      	adds	r3, #240	@ 0xf0
34192096:	4a2a      	ldr	r2, [pc, #168]	@ (34192140 <ISP_SVC_Stats_ProcessCallbacks+0xcc>)
34192098:	4413      	add	r3, r2
3419209a:	3304      	adds	r3, #4
3419209c:	613b      	str	r3, [r7, #16]

    if (client->callback == NULL)
3419209e:	693b      	ldr	r3, [r7, #16]
341920a0:	681b      	ldr	r3, [r3, #0]
341920a2:	2b00      	cmp	r3, #0
341920a4:	d03d      	beq.n	34192122 <ISP_SVC_Stats_ProcessCallbacks+0xae>
      continue;

    /* Check if stats are available for a client, comparing the location and the specified frameId */
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
341920a6:	693b      	ldr	r3, [r7, #16]
341920a8:	7c1b      	ldrb	r3, [r3, #16]
341920aa:	2b02      	cmp	r3, #2
341920ac:	d105      	bne.n	341920ba <ISP_SVC_Stats_ProcessCallbacks+0x46>
341920ae:	693b      	ldr	r3, [r7, #16]
341920b0:	68da      	ldr	r2, [r3, #12]
341920b2:	697b      	ldr	r3, [r7, #20]
341920b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341920b6:	429a      	cmp	r2, r3
341920b8:	d919      	bls.n	341920ee <ISP_SVC_Stats_ProcessCallbacks+0x7a>
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
341920ba:	693b      	ldr	r3, [r7, #16]
341920bc:	7c1b      	ldrb	r3, [r3, #16]
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
341920be:	2b01      	cmp	r3, #1
341920c0:	d105      	bne.n	341920ce <ISP_SVC_Stats_ProcessCallbacks+0x5a>
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
341920c2:	693b      	ldr	r3, [r7, #16]
341920c4:	68da      	ldr	r2, [r3, #12]
341920c6:	697b      	ldr	r3, [r7, #20]
341920c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
341920ca:	429a      	cmp	r2, r3
341920cc:	d90f      	bls.n	341920ee <ISP_SVC_Stats_ProcessCallbacks+0x7a>
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
341920ce:	693b      	ldr	r3, [r7, #16]
341920d0:	7c1b      	ldrb	r3, [r3, #16]
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
341920d2:	2b03      	cmp	r3, #3
341920d4:	d126      	bne.n	34192124 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
341920d6:	693b      	ldr	r3, [r7, #16]
341920d8:	68da      	ldr	r2, [r3, #12]
341920da:	697b      	ldr	r3, [r7, #20]
341920dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
341920de:	429a      	cmp	r2, r3
341920e0:	d820      	bhi.n	34192124 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
341920e2:	693b      	ldr	r3, [r7, #16]
341920e4:	68da      	ldr	r2, [r3, #12]
341920e6:	697b      	ldr	r3, [r7, #20]
341920e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341920ea:	429a      	cmp	r2, r3
341920ec:	d81a      	bhi.n	34192124 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
    {
      /* Copy the stats into the client buffer */
      *(client->pStats) = *pLastStat;
341920ee:	693b      	ldr	r3, [r7, #16]
341920f0:	689a      	ldr	r2, [r3, #8]
341920f2:	697b      	ldr	r3, [r7, #20]
341920f4:	4610      	mov	r0, r2
341920f6:	4619      	mov	r1, r3
341920f8:	2378      	movs	r3, #120	@ 0x78
341920fa:	461a      	mov	r2, r3
341920fc:	f001 f8cd 	bl	3419329a <memcpy>

      /* Call its callback */
      retcb = client->callback(client->pAlgo);
34192100:	693b      	ldr	r3, [r7, #16]
34192102:	681b      	ldr	r3, [r3, #0]
34192104:	693a      	ldr	r2, [r7, #16]
34192106:	6852      	ldr	r2, [r2, #4]
34192108:	4610      	mov	r0, r2
3419210a:	4798      	blx	r3
3419210c:	4603      	mov	r3, r0
3419210e:	73fb      	strb	r3, [r7, #15]
      if (retcb != ISP_OK)
34192110:	7bfb      	ldrb	r3, [r7, #15]
34192112:	2b00      	cmp	r3, #0
34192114:	d001      	beq.n	3419211a <ISP_SVC_Stats_ProcessCallbacks+0xa6>
      {
        ret = retcb;
34192116:	7bfb      	ldrb	r3, [r7, #15]
34192118:	77fb      	strb	r3, [r7, #31]
      }

      /* Remove the client from the registered list */
      client->callback = NULL;
3419211a:	693b      	ldr	r3, [r7, #16]
3419211c:	2200      	movs	r2, #0
3419211e:	601a      	str	r2, [r3, #0]
34192120:	e000      	b.n	34192124 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
      continue;
34192122:	bf00      	nop
  for (uint32_t i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34192124:	69bb      	ldr	r3, [r7, #24]
34192126:	3301      	adds	r3, #1
34192128:	61bb      	str	r3, [r7, #24]
3419212a:	69bb      	ldr	r3, [r7, #24]
3419212c:	2b04      	cmp	r3, #4
3419212e:	d9ac      	bls.n	3419208a <ISP_SVC_Stats_ProcessCallbacks+0x16>
    }
  }

  return ret;
34192130:	7ffb      	ldrb	r3, [r7, #31]
}
34192132:	4618      	mov	r0, r3
34192134:	3720      	adds	r7, #32
34192136:	46bd      	mov	sp, r7
34192138:	bd80      	pop	{r7, pc}
3419213a:	bf00      	nop
3419213c:	341c16c0 	.word	0x341c16c0
34192140:	341c16bc 	.word	0x341c16bc

34192144 <ISP_SVC_Stats_GetNext>:
  * @param  frameDelay: number of frames to wait before considering the stats as valid
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_GetNext(ISP_HandleTypeDef *hIsp, ISP_stat_ready_cb callback, ISP_AlgoTypeDef *pAlgo, ISP_SVC_StatStateTypeDef *pStats,
                                        ISP_SVC_StatLocation location, ISP_SVC_StatType type, uint32_t frameDelay)
{
34192144:	b580      	push	{r7, lr}
34192146:	b086      	sub	sp, #24
34192148:	af00      	add	r7, sp, #0
3419214a:	60f8      	str	r0, [r7, #12]
3419214c:	60b9      	str	r1, [r7, #8]
3419214e:	607a      	str	r2, [r7, #4]
34192150:	603b      	str	r3, [r7, #0]
  uint32_t i, refFrameId;

  /* Check handle validity */
  if ((hIsp == NULL) || (pStats == NULL))
34192152:	68fb      	ldr	r3, [r7, #12]
34192154:	2b00      	cmp	r3, #0
34192156:	d002      	beq.n	3419215e <ISP_SVC_Stats_GetNext+0x1a>
34192158:	683b      	ldr	r3, [r7, #0]
3419215a:	2b00      	cmp	r3, #0
3419215c:	d101      	bne.n	34192162 <ISP_SVC_Stats_GetNext+0x1e>
  {
    return ISP_ERR_EINVAL;
3419215e:	2301      	movs	r3, #1
34192160:	e08f      	b.n	34192282 <ISP_SVC_Stats_GetNext+0x13e>
  }

  refFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp) + frameDelay;
34192162:	68f8      	ldr	r0, [r7, #12]
34192164:	f7ff fbe9 	bl	3419193a <ISP_SVC_Misc_GetMainFrameId>
34192168:	4602      	mov	r2, r0
3419216a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419216c:	4413      	add	r3, r2
3419216e:	613b      	str	r3, [r7, #16]

  /* Register the callback */
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34192170:	2300      	movs	r3, #0
34192172:	617b      	str	r3, [r7, #20]
34192174:	e00d      	b.n	34192192 <ISP_SVC_Stats_GetNext+0x4e>
  {
    if (ISP_SVC_StatEngine.client[i].callback == NULL)
34192176:	4945      	ldr	r1, [pc, #276]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
34192178:	697a      	ldr	r2, [r7, #20]
3419217a:	4613      	mov	r3, r2
3419217c:	009b      	lsls	r3, r3, #2
3419217e:	4413      	add	r3, r2
34192180:	009b      	lsls	r3, r3, #2
34192182:	440b      	add	r3, r1
34192184:	33f4      	adds	r3, #244	@ 0xf4
34192186:	681b      	ldr	r3, [r3, #0]
34192188:	2b00      	cmp	r3, #0
3419218a:	d006      	beq.n	3419219a <ISP_SVC_Stats_GetNext+0x56>
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
3419218c:	697b      	ldr	r3, [r7, #20]
3419218e:	3301      	adds	r3, #1
34192190:	617b      	str	r3, [r7, #20]
34192192:	697b      	ldr	r3, [r7, #20]
34192194:	2b04      	cmp	r3, #4
34192196:	d9ee      	bls.n	34192176 <ISP_SVC_Stats_GetNext+0x32>
34192198:	e000      	b.n	3419219c <ISP_SVC_Stats_GetNext+0x58>
      break;
3419219a:	bf00      	nop
  }

  if (i == ISP_SVC_STAT_MAX_CB)
3419219c:	697b      	ldr	r3, [r7, #20]
3419219e:	2b05      	cmp	r3, #5
341921a0:	d101      	bne.n	341921a6 <ISP_SVC_Stats_GetNext+0x62>
  {
    /* Too much callback registered */
    return ISP_ERR_STAT_MAXCLIENTS;
341921a2:	23ac      	movs	r3, #172	@ 0xac
341921a4:	e06d      	b.n	34192282 <ISP_SVC_Stats_GetNext+0x13e>
  }

  /* Add this requested stat to the list of requested stats */
  if (location & ISP_STAT_LOC_UP)
341921a6:	f897 3020 	ldrb.w	r3, [r7, #32]
341921aa:	f003 0301 	and.w	r3, r3, #1
341921ae:	2b00      	cmp	r3, #0
341921b0:	d009      	beq.n	341921c6 <ISP_SVC_Stats_GetNext+0x82>
  {
    ISP_SVC_StatEngine.upRequest |= type;
341921b2:	4b36      	ldr	r3, [pc, #216]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
341921b4:	f893 2158 	ldrb.w	r2, [r3, #344]	@ 0x158
341921b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
341921bc:	4313      	orrs	r3, r2
341921be:	b2da      	uxtb	r2, r3
341921c0:	4b32      	ldr	r3, [pc, #200]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
341921c2:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
  }
  if (location & ISP_STAT_LOC_DOWN)
341921c6:	f897 3020 	ldrb.w	r3, [r7, #32]
341921ca:	f003 0302 	and.w	r3, r3, #2
341921ce:	2b00      	cmp	r3, #0
341921d0:	d009      	beq.n	341921e6 <ISP_SVC_Stats_GetNext+0xa2>
  {
    ISP_SVC_StatEngine.downRequest |= type;
341921d2:	4b2e      	ldr	r3, [pc, #184]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
341921d4:	f893 2159 	ldrb.w	r2, [r3, #345]	@ 0x159
341921d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
341921dc:	4313      	orrs	r3, r2
341921de:	b2da      	uxtb	r2, r3
341921e0:	4b2a      	ldr	r3, [pc, #168]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
341921e2:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
  }

  if (type == ISP_STAT_TYPE_ALL_TMP)
341921e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
341921ea:	2b04      	cmp	r3, #4
341921ec:	d107      	bne.n	341921fe <ISP_SVC_Stats_GetNext+0xba>
  {
    /* Special case: request all stats for a short time (3 cycle) */
    ISP_SVC_StatEngine.requestAllCounter = ISP_SVC_Misc_GetMainFrameId(hIsp) + 3 * ISP_STAT_CFG_CYCLE_SIZE;
341921ee:	68f8      	ldr	r0, [r7, #12]
341921f0:	f7ff fba3 	bl	3419193a <ISP_SVC_Misc_GetMainFrameId>
341921f4:	4603      	mov	r3, r0
341921f6:	331e      	adds	r3, #30
341921f8:	4a24      	ldr	r2, [pc, #144]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
341921fa:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  }

  /* Register client */
  ISP_SVC_StatEngine.client[i].callback = callback;
341921fe:	4923      	ldr	r1, [pc, #140]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
34192200:	697a      	ldr	r2, [r7, #20]
34192202:	4613      	mov	r3, r2
34192204:	009b      	lsls	r3, r3, #2
34192206:	4413      	add	r3, r2
34192208:	009b      	lsls	r3, r3, #2
3419220a:	440b      	add	r3, r1
3419220c:	33f4      	adds	r3, #244	@ 0xf4
3419220e:	68ba      	ldr	r2, [r7, #8]
34192210:	601a      	str	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].pAlgo = pAlgo;
34192212:	491e      	ldr	r1, [pc, #120]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
34192214:	697a      	ldr	r2, [r7, #20]
34192216:	4613      	mov	r3, r2
34192218:	009b      	lsls	r3, r3, #2
3419221a:	4413      	add	r3, r2
3419221c:	009b      	lsls	r3, r3, #2
3419221e:	440b      	add	r3, r1
34192220:	33f8      	adds	r3, #248	@ 0xf8
34192222:	687a      	ldr	r2, [r7, #4]
34192224:	601a      	str	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].pStats = pStats;
34192226:	4919      	ldr	r1, [pc, #100]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
34192228:	697a      	ldr	r2, [r7, #20]
3419222a:	4613      	mov	r3, r2
3419222c:	009b      	lsls	r3, r3, #2
3419222e:	4413      	add	r3, r2
34192230:	009b      	lsls	r3, r3, #2
34192232:	440b      	add	r3, r1
34192234:	33fc      	adds	r3, #252	@ 0xfc
34192236:	683a      	ldr	r2, [r7, #0]
34192238:	601a      	str	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].location = location;
3419223a:	4914      	ldr	r1, [pc, #80]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
3419223c:	697a      	ldr	r2, [r7, #20]
3419223e:	4613      	mov	r3, r2
34192240:	009b      	lsls	r3, r3, #2
34192242:	4413      	add	r3, r2
34192244:	009b      	lsls	r3, r3, #2
34192246:	440b      	add	r3, r1
34192248:	f503 7382 	add.w	r3, r3, #260	@ 0x104
3419224c:	f897 2020 	ldrb.w	r2, [r7, #32]
34192250:	701a      	strb	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].type = type;
34192252:	490e      	ldr	r1, [pc, #56]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
34192254:	697a      	ldr	r2, [r7, #20]
34192256:	4613      	mov	r3, r2
34192258:	009b      	lsls	r3, r3, #2
3419225a:	4413      	add	r3, r2
3419225c:	009b      	lsls	r3, r3, #2
3419225e:	440b      	add	r3, r1
34192260:	f203 1305 	addw	r3, r3, #261	@ 0x105
34192264:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
34192268:	701a      	strb	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].refFrameId = refFrameId;
3419226a:	4908      	ldr	r1, [pc, #32]	@ (3419228c <ISP_SVC_Stats_GetNext+0x148>)
3419226c:	697a      	ldr	r2, [r7, #20]
3419226e:	4613      	mov	r3, r2
34192270:	009b      	lsls	r3, r3, #2
34192272:	4413      	add	r3, r2
34192274:	009b      	lsls	r3, r3, #2
34192276:	440b      	add	r3, r1
34192278:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3419227c:	693a      	ldr	r2, [r7, #16]
3419227e:	601a      	str	r2, [r3, #0]

  return ISP_OK;
34192280:	2300      	movs	r3, #0
}
34192282:	4618      	mov	r0, r3
34192284:	3718      	adds	r7, #24
34192286:	46bd      	mov	sp, r7
34192288:	bd80      	pop	{r7, pc}
3419228a:	bf00      	nop
3419228c:	341c16bc 	.word	0x341c16bc

34192290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
34192290:	b580      	push	{r7, lr}
34192292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
34192294:	f7f2 f8ac 	bl	341843f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
34192298:	f000 f81e 	bl	341922d8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
3419229c:	2000      	movs	r0, #0
3419229e:	f7ef fb71 	bl	34181984 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
341922a2:	2001      	movs	r0, #1
341922a4:	f7ef fb6e 	bl	34181984 <BSP_LED_Init>

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
341922a8:	2101      	movs	r1, #1
341922aa:	2000      	movs	r0, #0
341922ac:	f7f0 fd4e 	bl	34182d4c <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
341922b0:	4808      	ldr	r0, [pc, #32]	@ (341922d4 <main+0x44>)
341922b2:	f000 fcbb 	bl	34192c2c <UTIL_LCD_SetFuncDriver>
//  UTIL_LCD_Clear(UTIL_LCD_COLOR_RED);
//  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
//  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_SetFont(&Font24);
  BSP_CAMERA_Init(0,CAMERA_R2592x1944,CAMERA_PF_RAW_RGGB10);
341922b6:	220a      	movs	r2, #10
341922b8:	2106      	movs	r1, #6
341922ba:	2000      	movs	r0, #0
341922bc:	f7f0 f8ec 	bl	34182498 <BSP_CAMERA_Init>
  BSP_CAMERA_Start(0,(uint8_t *)LCD_LAYER_0_ADDRESS,CAMERA_MODE_CONTINUOUS);
341922c0:	2200      	movs	r2, #0
341922c2:	f04f 5150 	mov.w	r1, #872415232	@ 0x34000000
341922c6:	2000      	movs	r0, #0
341922c8:	f7f0 fabc 	bl	34182844 <BSP_CAMERA_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_CAMERA_BackgroundProcess();
341922cc:	f7f0 fb4e 	bl	3418296c <BSP_CAMERA_BackgroundProcess>
341922d0:	e7fc      	b.n	341922cc <main+0x3c>
341922d2:	bf00      	nop
341922d4:	34195438 	.word	0x34195438

341922d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
341922d8:	b580      	push	{r7, lr}
341922da:	b0b6      	sub	sp, #216	@ 0xd8
341922dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
341922de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
341922e2:	2298      	movs	r2, #152	@ 0x98
341922e4:	2100      	movs	r1, #0
341922e6:	4618      	mov	r0, r3
341922e8:	f000 ff5c 	bl	341931a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
341922ec:	463b      	mov	r3, r7
341922ee:	2240      	movs	r2, #64	@ 0x40
341922f0:	2100      	movs	r1, #0
341922f2:	4618      	mov	r0, r3
341922f4:	f000 ff56 	bl	341931a4 <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
341922f8:	2000      	movs	r0, #0
341922fa:	f7f7 fdd7 	bl	34189eac <HAL_PWREx_ConfigSupply>
341922fe:	4603      	mov	r3, r0
34192300:	2b00      	cmp	r3, #0
34192302:	d001      	beq.n	34192308 <SystemClock_Config+0x30>
  {
    Error_Handler();
34192304:	f000 f8c6 	bl	34192494 <Error_Handler>
  }

  /* Enable HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
34192308:	2302      	movs	r3, #2
3419230a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
3419230c:	2308      	movs	r3, #8
3419230e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
34192310:	2300      	movs	r3, #0
34192312:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
34192314:	2300      	movs	r3, #0
34192316:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
34192318:	2300      	movs	r3, #0
3419231a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
3419231c:	2300      	movs	r3, #0
3419231e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34192322:	2300      	movs	r3, #0
34192324:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34192328:	2300      	movs	r3, #0
3419232a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3419232e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34192332:	4618      	mov	r0, r3
34192334:	f7f8 f8aa 	bl	3418a48c <HAL_RCC_OscConfig>
34192338:	4603      	mov	r3, r0
3419233a:	2b00      	cmp	r3, #0
3419233c:	d001      	beq.n	34192342 <SystemClock_Config+0x6a>
  {
    Error_Handler();
3419233e:	f000 f8a9 	bl	34192494 <Error_Handler>
  }

  /** Get current CPU/System buses clocks configuration and if necessary switch
 to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34192342:	463b      	mov	r3, r7
34192344:	4618      	mov	r0, r3
34192346:	f7f8 ff97 	bl	3418b278 <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
3419234a:	687b      	ldr	r3, [r7, #4]
3419234c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34192350:	d003      	beq.n	3419235a <SystemClock_Config+0x82>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
34192352:	68bb      	ldr	r3, [r7, #8]
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34192354:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34192358:	d10e      	bne.n	34192378 <SystemClock_Config+0xa0>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK);
3419235a:	2303      	movs	r3, #3
3419235c:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
3419235e:	2300      	movs	r3, #0
34192360:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34192362:	2300      	movs	r3, #0
34192364:	60bb      	str	r3, [r7, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34192366:	463b      	mov	r3, r7
34192368:	4618      	mov	r0, r3
3419236a:	f7f8 fc6f 	bl	3418ac4c <HAL_RCC_ClockConfig>
3419236e:	4603      	mov	r3, r0
34192370:	2b00      	cmp	r3, #0
34192372:	d001      	beq.n	34192378 <SystemClock_Config+0xa0>
    {
      /* Initialization Error */
      Error_Handler();
34192374:	f000 f88e 	bl	34192494 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34192378:	2300      	movs	r3, #0
3419237a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
3419237c:	2302      	movs	r3, #2
3419237e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34192380:	2300      	movs	r3, #0
34192382:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL1.PLLM = 4;
34192384:	2304      	movs	r3, #4
34192386:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL1.PLLN = 75;
34192388:	234b      	movs	r3, #75	@ 0x4b
3419238a:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
3419238c:	2300      	movs	r3, #0
3419238e:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34192390:	2301      	movs	r3, #1
34192392:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34192394:	2301      	movs	r3, #1
34192396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
3419239a:	2300      	movs	r3, #0
3419239c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
341923a0:	2300      	movs	r3, #0
341923a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
341923a6:	2300      	movs	r3, #0
341923a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
341923ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
341923b0:	4618      	mov	r0, r3
341923b2:	f7f8 f86b 	bl	3418a48c <HAL_RCC_OscConfig>
341923b6:	4603      	mov	r3, r0
341923b8:	2b00      	cmp	r3, #0
341923ba:	d001      	beq.n	341923c0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
341923bc:	f000 f86a 	bl	34192494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
341923c0:	237f      	movs	r3, #127	@ 0x7f
341923c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
341923c4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
341923c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
341923ca:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
341923ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
341923d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
341923d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
341923d6:	2300      	movs	r3, #0
341923d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
341923da:	2300      	movs	r3, #0
341923dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
341923de:	2300      	movs	r3, #0
341923e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
341923e2:	2300      	movs	r3, #0
341923e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
341923e6:	2300      	movs	r3, #0
341923e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 2;
341923ea:	2302      	movs	r3, #2
341923ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
341923ee:	2300      	movs	r3, #0
341923f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 3;
341923f2:	2303      	movs	r3, #3
341923f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
341923f6:	2300      	movs	r3, #0
341923f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 4;
341923fa:	2304      	movs	r3, #4
341923fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
341923fe:	2300      	movs	r3, #0
34192400:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 3;
34192402:	2303      	movs	r3, #3
34192404:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34192406:	463b      	mov	r3, r7
34192408:	4618      	mov	r0, r3
3419240a:	f7f8 fc1f 	bl	3418ac4c <HAL_RCC_ClockConfig>
3419240e:	4603      	mov	r3, r0
34192410:	2b00      	cmp	r3, #0
34192412:	d001      	beq.n	34192418 <SystemClock_Config+0x140>
  {
    Error_Handler();
34192414:	f000 f83e 	bl	34192494 <Error_Handler>
  }
}
34192418:	bf00      	nop
3419241a:	37d8      	adds	r7, #216	@ 0xd8
3419241c:	46bd      	mov	sp, r7
3419241e:	bd80      	pop	{r7, pc}

34192420 <HAL_DCMIPP_PIPE_FrameEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34192420:	b480      	push	{r7}
34192422:	b083      	sub	sp, #12
34192424:	af00      	add	r7, sp, #0
34192426:	6078      	str	r0, [r7, #4]
34192428:	6039      	str	r1, [r7, #0]
  NbMainFrames++;
3419242a:	4b05      	ldr	r3, [pc, #20]	@ (34192440 <HAL_DCMIPP_PIPE_FrameEventCallback+0x20>)
3419242c:	681b      	ldr	r3, [r3, #0]
3419242e:	3301      	adds	r3, #1
34192430:	4a03      	ldr	r2, [pc, #12]	@ (34192440 <HAL_DCMIPP_PIPE_FrameEventCallback+0x20>)
34192432:	6013      	str	r3, [r2, #0]
}
34192434:	bf00      	nop
34192436:	370c      	adds	r7, #12
34192438:	46bd      	mov	sp, r7
3419243a:	f85d 7b04 	ldr.w	r7, [sp], #4
3419243e:	4770      	bx	lr
34192440:	341c181c 	.word	0x341c181c

34192444 <HAL_DCMIPP_PIPE_VsyncEventCallback>:

void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34192444:	b580      	push	{r7, lr}
34192446:	b082      	sub	sp, #8
34192448:	af00      	add	r7, sp, #0
3419244a:	6078      	str	r0, [r7, #4]
3419244c:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  /* Update the frame counter and call the ISP statistics handler */
  switch (Pipe)
3419244e:	683b      	ldr	r3, [r7, #0]
34192450:	2b02      	cmp	r3, #2
34192452:	d014      	beq.n	3419247e <HAL_DCMIPP_PIPE_VsyncEventCallback+0x3a>
34192454:	683b      	ldr	r3, [r7, #0]
34192456:	2b02      	cmp	r3, #2
34192458:	d815      	bhi.n	34192486 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
3419245a:	683b      	ldr	r3, [r7, #0]
3419245c:	2b00      	cmp	r3, #0
3419245e:	d003      	beq.n	34192468 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x24>
34192460:	683b      	ldr	r3, [r7, #0]
34192462:	2b01      	cmp	r3, #1
34192464:	d004      	beq.n	34192470 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>
      break;
    case DCMIPP_PIPE2 :
      ISP_IncAncillaryFrameId(&hcamera_isp);
      break;
  }
}
34192466:	e00e      	b.n	34192486 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
      ISP_IncDumpFrameId(&hcamera_isp);
34192468:	4809      	ldr	r0, [pc, #36]	@ (34192490 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
3419246a:	f7fe f968 	bl	3419073e <ISP_IncDumpFrameId>
      break;
3419246e:	e00a      	b.n	34192486 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
      ISP_IncMainFrameId(&hcamera_isp);
34192470:	4807      	ldr	r0, [pc, #28]	@ (34192490 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
34192472:	f7fe f94e 	bl	34190712 <ISP_IncMainFrameId>
      ISP_GatherStatistics(&hcamera_isp);
34192476:	4806      	ldr	r0, [pc, #24]	@ (34192490 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
34192478:	f7fe f940 	bl	341906fc <ISP_GatherStatistics>
      break;
3419247c:	e003      	b.n	34192486 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
      ISP_IncAncillaryFrameId(&hcamera_isp);
3419247e:	4804      	ldr	r0, [pc, #16]	@ (34192490 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
34192480:	f7fe f952 	bl	34190728 <ISP_IncAncillaryFrameId>
      break;
34192484:	bf00      	nop
}
34192486:	bf00      	nop
34192488:	3708      	adds	r7, #8
3419248a:	46bd      	mov	sp, r7
3419248c:	bd80      	pop	{r7, pc}
3419248e:	bf00      	nop
34192490:	341c0f84 	.word	0x341c0f84

34192494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34192494:	b480      	push	{r7}
34192496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
34192498:	b672      	cpsid	i
}
3419249a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
3419249c:	bf00      	nop
3419249e:	e7fd      	b.n	3419249c <Error_Handler+0x8>

341924a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
341924a0:	b480      	push	{r7}
341924a2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
341924a4:	bf00      	nop
341924a6:	46bd      	mov	sp, r7
341924a8:	f85d 7b04 	ldr.w	r7, [sp], #4
341924ac:	4770      	bx	lr

341924ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
341924ae:	b480      	push	{r7}
341924b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
341924b2:	bf00      	nop
341924b4:	e7fd      	b.n	341924b2 <NMI_Handler+0x4>

341924b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
341924b6:	b480      	push	{r7}
341924b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
341924ba:	bf00      	nop
341924bc:	e7fd      	b.n	341924ba <HardFault_Handler+0x4>

341924be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
341924be:	b480      	push	{r7}
341924c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
341924c2:	bf00      	nop
341924c4:	e7fd      	b.n	341924c2 <MemManage_Handler+0x4>

341924c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
341924c6:	b480      	push	{r7}
341924c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
341924ca:	bf00      	nop
341924cc:	e7fd      	b.n	341924ca <BusFault_Handler+0x4>

341924ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
341924ce:	b480      	push	{r7}
341924d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
341924d2:	bf00      	nop
341924d4:	e7fd      	b.n	341924d2 <UsageFault_Handler+0x4>

341924d6 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
341924d6:	b480      	push	{r7}
341924d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
341924da:	bf00      	nop
341924dc:	e7fd      	b.n	341924da <SecureFault_Handler+0x4>

341924de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
341924de:	b480      	push	{r7}
341924e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
341924e2:	bf00      	nop
341924e4:	46bd      	mov	sp, r7
341924e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341924ea:	4770      	bx	lr

341924ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
341924ec:	b480      	push	{r7}
341924ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
341924f0:	bf00      	nop
341924f2:	46bd      	mov	sp, r7
341924f4:	f85d 7b04 	ldr.w	r7, [sp], #4
341924f8:	4770      	bx	lr

341924fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
341924fa:	b480      	push	{r7}
341924fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
341924fe:	bf00      	nop
34192500:	46bd      	mov	sp, r7
34192502:	f85d 7b04 	ldr.w	r7, [sp], #4
34192506:	4770      	bx	lr

34192508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
34192508:	b580      	push	{r7, lr}
3419250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
3419250c:	f7f1 ffba 	bl	34184484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
34192510:	bf00      	nop
34192512:	bd80      	pop	{r7, pc}

34192514 <DCMIPP_IRQHandler>:
/* please refer to the startup file (startup_stm32n6xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void DCMIPP_IRQHandler(void)
{
34192514:	b580      	push	{r7, lr}
34192516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMIPP_IRQn 0 */

  /* USER CODE END DCMIPP_IRQn 0 */
  HAL_DCMIPP_IRQHandler(&hcamera_dcmipp);
34192518:	4802      	ldr	r0, [pc, #8]	@ (34192524 <DCMIPP_IRQHandler+0x10>)
3419251a:	f7f2 fc07 	bl	34184d2c <HAL_DCMIPP_IRQHandler>
  /* USER CODE BEGIN DCMIPP_IRQn 1 */

  /* USER CODE END DCMIPP_IRQn 1 */
}
3419251e:	bf00      	nop
34192520:	bd80      	pop	{r7, pc}
34192522:	bf00      	nop
34192524:	341c0f48 	.word	0x341c0f48

34192528 <CSI_IRQHandler>:

/**
  * @brief This function handles CSI global interrupt.
  */
void CSI_IRQHandler(void)
{
34192528:	b580      	push	{r7, lr}
3419252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CSI_IRQn 0 */

  /* USER CODE END CSI_IRQn 0 */
  HAL_DCMIPP_CSI_IRQHandler(&hcamera_dcmipp);
3419252c:	4802      	ldr	r0, [pc, #8]	@ (34192538 <CSI_IRQHandler+0x10>)
3419252e:	f7f2 fde1 	bl	341850f4 <HAL_DCMIPP_CSI_IRQHandler>
  /* USER CODE BEGIN CSI_IRQn 1 */

  /* USER CODE END CSI_IRQn 1 */
}
34192532:	bf00      	nop
34192534:	bd80      	pop	{r7, pc}
34192536:	bf00      	nop
34192538:	341c0f48 	.word	0x341c0f48

3419253c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
3419253c:	b580      	push	{r7, lr}
3419253e:	b086      	sub	sp, #24
34192540:	af00      	add	r7, sp, #0
34192542:	60f8      	str	r0, [r7, #12]
34192544:	60b9      	str	r1, [r7, #8]
34192546:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34192548:	2300      	movs	r3, #0
3419254a:	617b      	str	r3, [r7, #20]
3419254c:	e00a      	b.n	34192564 <_read+0x28>
  {
    *ptr++ = __io_getchar();
3419254e:	f3af 8000 	nop.w
34192552:	4601      	mov	r1, r0
34192554:	68bb      	ldr	r3, [r7, #8]
34192556:	1c5a      	adds	r2, r3, #1
34192558:	60ba      	str	r2, [r7, #8]
3419255a:	b2ca      	uxtb	r2, r1
3419255c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
3419255e:	697b      	ldr	r3, [r7, #20]
34192560:	3301      	adds	r3, #1
34192562:	617b      	str	r3, [r7, #20]
34192564:	697a      	ldr	r2, [r7, #20]
34192566:	687b      	ldr	r3, [r7, #4]
34192568:	429a      	cmp	r2, r3
3419256a:	dbf0      	blt.n	3419254e <_read+0x12>
  }

  return len;
3419256c:	687b      	ldr	r3, [r7, #4]
}
3419256e:	4618      	mov	r0, r3
34192570:	3718      	adds	r7, #24
34192572:	46bd      	mov	sp, r7
34192574:	bd80      	pop	{r7, pc}

34192576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
34192576:	b580      	push	{r7, lr}
34192578:	b086      	sub	sp, #24
3419257a:	af00      	add	r7, sp, #0
3419257c:	60f8      	str	r0, [r7, #12]
3419257e:	60b9      	str	r1, [r7, #8]
34192580:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34192582:	2300      	movs	r3, #0
34192584:	617b      	str	r3, [r7, #20]
34192586:	e009      	b.n	3419259c <_write+0x26>
  {
    __io_putchar(*ptr++);
34192588:	68bb      	ldr	r3, [r7, #8]
3419258a:	1c5a      	adds	r2, r3, #1
3419258c:	60ba      	str	r2, [r7, #8]
3419258e:	781b      	ldrb	r3, [r3, #0]
34192590:	4618      	mov	r0, r3
34192592:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34192596:	697b      	ldr	r3, [r7, #20]
34192598:	3301      	adds	r3, #1
3419259a:	617b      	str	r3, [r7, #20]
3419259c:	697a      	ldr	r2, [r7, #20]
3419259e:	687b      	ldr	r3, [r7, #4]
341925a0:	429a      	cmp	r2, r3
341925a2:	dbf1      	blt.n	34192588 <_write+0x12>
  }
  return len;
341925a4:	687b      	ldr	r3, [r7, #4]
}
341925a6:	4618      	mov	r0, r3
341925a8:	3718      	adds	r7, #24
341925aa:	46bd      	mov	sp, r7
341925ac:	bd80      	pop	{r7, pc}

341925ae <_close>:

int _close(int file)
{
341925ae:	b480      	push	{r7}
341925b0:	b083      	sub	sp, #12
341925b2:	af00      	add	r7, sp, #0
341925b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
341925b6:	f04f 33ff 	mov.w	r3, #4294967295
}
341925ba:	4618      	mov	r0, r3
341925bc:	370c      	adds	r7, #12
341925be:	46bd      	mov	sp, r7
341925c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341925c4:	4770      	bx	lr

341925c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
341925c6:	b480      	push	{r7}
341925c8:	b083      	sub	sp, #12
341925ca:	af00      	add	r7, sp, #0
341925cc:	6078      	str	r0, [r7, #4]
341925ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
341925d0:	683b      	ldr	r3, [r7, #0]
341925d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
341925d6:	605a      	str	r2, [r3, #4]
  return 0;
341925d8:	2300      	movs	r3, #0
}
341925da:	4618      	mov	r0, r3
341925dc:	370c      	adds	r7, #12
341925de:	46bd      	mov	sp, r7
341925e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341925e4:	4770      	bx	lr

341925e6 <_isatty>:

int _isatty(int file)
{
341925e6:	b480      	push	{r7}
341925e8:	b083      	sub	sp, #12
341925ea:	af00      	add	r7, sp, #0
341925ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
341925ee:	2301      	movs	r3, #1
}
341925f0:	4618      	mov	r0, r3
341925f2:	370c      	adds	r7, #12
341925f4:	46bd      	mov	sp, r7
341925f6:	f85d 7b04 	ldr.w	r7, [sp], #4
341925fa:	4770      	bx	lr

341925fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
341925fc:	b480      	push	{r7}
341925fe:	b085      	sub	sp, #20
34192600:	af00      	add	r7, sp, #0
34192602:	60f8      	str	r0, [r7, #12]
34192604:	60b9      	str	r1, [r7, #8]
34192606:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
34192608:	2300      	movs	r3, #0
}
3419260a:	4618      	mov	r0, r3
3419260c:	3714      	adds	r7, #20
3419260e:	46bd      	mov	sp, r7
34192610:	f85d 7b04 	ldr.w	r7, [sp], #4
34192614:	4770      	bx	lr
	...

34192618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
34192618:	b580      	push	{r7, lr}
3419261a:	b086      	sub	sp, #24
3419261c:	af00      	add	r7, sp, #0
3419261e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
34192620:	4a14      	ldr	r2, [pc, #80]	@ (34192674 <_sbrk+0x5c>)
34192622:	4b15      	ldr	r3, [pc, #84]	@ (34192678 <_sbrk+0x60>)
34192624:	1ad3      	subs	r3, r2, r3
34192626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
34192628:	697b      	ldr	r3, [r7, #20]
3419262a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
3419262c:	4b13      	ldr	r3, [pc, #76]	@ (3419267c <_sbrk+0x64>)
3419262e:	681b      	ldr	r3, [r3, #0]
34192630:	2b00      	cmp	r3, #0
34192632:	d102      	bne.n	3419263a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
34192634:	4b11      	ldr	r3, [pc, #68]	@ (3419267c <_sbrk+0x64>)
34192636:	4a12      	ldr	r2, [pc, #72]	@ (34192680 <_sbrk+0x68>)
34192638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
3419263a:	4b10      	ldr	r3, [pc, #64]	@ (3419267c <_sbrk+0x64>)
3419263c:	681a      	ldr	r2, [r3, #0]
3419263e:	687b      	ldr	r3, [r7, #4]
34192640:	4413      	add	r3, r2
34192642:	693a      	ldr	r2, [r7, #16]
34192644:	429a      	cmp	r2, r3
34192646:	d207      	bcs.n	34192658 <_sbrk+0x40>
  {
    errno = ENOMEM;
34192648:	f000 fdfa 	bl	34193240 <__errno>
3419264c:	4603      	mov	r3, r0
3419264e:	220c      	movs	r2, #12
34192650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
34192652:	f04f 33ff 	mov.w	r3, #4294967295
34192656:	e009      	b.n	3419266c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
34192658:	4b08      	ldr	r3, [pc, #32]	@ (3419267c <_sbrk+0x64>)
3419265a:	681b      	ldr	r3, [r3, #0]
3419265c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
3419265e:	4b07      	ldr	r3, [pc, #28]	@ (3419267c <_sbrk+0x64>)
34192660:	681a      	ldr	r2, [r3, #0]
34192662:	687b      	ldr	r3, [r7, #4]
34192664:	4413      	add	r3, r2
34192666:	4a05      	ldr	r2, [pc, #20]	@ (3419267c <_sbrk+0x64>)
34192668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
3419266a:	68fb      	ldr	r3, [r7, #12]
}
3419266c:	4618      	mov	r0, r3
3419266e:	3718      	adds	r7, #24
34192670:	46bd      	mov	sp, r7
34192672:	bd80      	pop	{r7, pc}
34192674:	34200000 	.word	0x34200000
34192678:	00000800 	.word	0x00000800
3419267c:	341c1820 	.word	0x341c1820
34192680:	341c19e0 	.word	0x341c19e0

34192684 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
34192684:	b480      	push	{r7}
34192686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34192688:	4b6a      	ldr	r3, [pc, #424]	@ (34192834 <SystemInit+0x1b0>)
3419268a:	4a6b      	ldr	r2, [pc, #428]	@ (34192838 <SystemInit+0x1b4>)
3419268c:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3419268e:	4b6b      	ldr	r3, [pc, #428]	@ (3419283c <SystemInit+0x1b8>)
34192690:	2201      	movs	r2, #1
34192692:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34192696:	4b69      	ldr	r3, [pc, #420]	@ (3419283c <SystemInit+0x1b8>)
34192698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3419269c:	461a      	mov	r2, r3
3419269e:	2301      	movs	r3, #1
341926a0:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
341926a4:	4b65      	ldr	r3, [pc, #404]	@ (3419283c <SystemInit+0x1b8>)
341926a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341926aa:	461a      	mov	r2, r3
341926ac:	2301      	movs	r3, #1
341926ae:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
341926b2:	4b63      	ldr	r3, [pc, #396]	@ (34192840 <SystemInit+0x1bc>)
341926b4:	2200      	movs	r2, #0
341926b6:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341926b8:	4b61      	ldr	r3, [pc, #388]	@ (34192840 <SystemInit+0x1bc>)
341926ba:	2200      	movs	r2, #0
341926bc:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341926be:	4b60      	ldr	r3, [pc, #384]	@ (34192840 <SystemInit+0x1bc>)
341926c0:	2200      	movs	r2, #0
341926c2:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
341926c4:	4b5e      	ldr	r3, [pc, #376]	@ (34192840 <SystemInit+0x1bc>)
341926c6:	2201      	movs	r2, #1
341926c8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341926ca:	4b5d      	ldr	r3, [pc, #372]	@ (34192840 <SystemInit+0x1bc>)
341926cc:	2200      	movs	r2, #0
341926ce:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341926d0:	4b5b      	ldr	r3, [pc, #364]	@ (34192840 <SystemInit+0x1bc>)
341926d2:	2200      	movs	r2, #0
341926d4:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
341926d6:	4b5a      	ldr	r3, [pc, #360]	@ (34192840 <SystemInit+0x1bc>)
341926d8:	2202      	movs	r2, #2
341926da:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341926dc:	4b58      	ldr	r3, [pc, #352]	@ (34192840 <SystemInit+0x1bc>)
341926de:	2200      	movs	r2, #0
341926e0:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341926e2:	4b57      	ldr	r3, [pc, #348]	@ (34192840 <SystemInit+0x1bc>)
341926e4:	2200      	movs	r2, #0
341926e6:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
341926e8:	4b55      	ldr	r3, [pc, #340]	@ (34192840 <SystemInit+0x1bc>)
341926ea:	2203      	movs	r2, #3
341926ec:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341926ee:	4b54      	ldr	r3, [pc, #336]	@ (34192840 <SystemInit+0x1bc>)
341926f0:	2200      	movs	r2, #0
341926f2:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341926f4:	4b52      	ldr	r3, [pc, #328]	@ (34192840 <SystemInit+0x1bc>)
341926f6:	2200      	movs	r2, #0
341926f8:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
341926fa:	4b51      	ldr	r3, [pc, #324]	@ (34192840 <SystemInit+0x1bc>)
341926fc:	2204      	movs	r2, #4
341926fe:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34192700:	4b4f      	ldr	r3, [pc, #316]	@ (34192840 <SystemInit+0x1bc>)
34192702:	2200      	movs	r2, #0
34192704:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34192706:	4b4e      	ldr	r3, [pc, #312]	@ (34192840 <SystemInit+0x1bc>)
34192708:	2200      	movs	r2, #0
3419270a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
3419270c:	4b4c      	ldr	r3, [pc, #304]	@ (34192840 <SystemInit+0x1bc>)
3419270e:	2205      	movs	r2, #5
34192710:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34192712:	4b4b      	ldr	r3, [pc, #300]	@ (34192840 <SystemInit+0x1bc>)
34192714:	2200      	movs	r2, #0
34192716:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34192718:	4b49      	ldr	r3, [pc, #292]	@ (34192840 <SystemInit+0x1bc>)
3419271a:	2200      	movs	r2, #0
3419271c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
3419271e:	4b48      	ldr	r3, [pc, #288]	@ (34192840 <SystemInit+0x1bc>)
34192720:	2206      	movs	r2, #6
34192722:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34192724:	4b46      	ldr	r3, [pc, #280]	@ (34192840 <SystemInit+0x1bc>)
34192726:	2200      	movs	r2, #0
34192728:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3419272a:	4b45      	ldr	r3, [pc, #276]	@ (34192840 <SystemInit+0x1bc>)
3419272c:	2200      	movs	r2, #0
3419272e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34192730:	4b43      	ldr	r3, [pc, #268]	@ (34192840 <SystemInit+0x1bc>)
34192732:	2207      	movs	r2, #7
34192734:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34192736:	4b42      	ldr	r3, [pc, #264]	@ (34192840 <SystemInit+0x1bc>)
34192738:	2200      	movs	r2, #0
3419273a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3419273c:	4b40      	ldr	r3, [pc, #256]	@ (34192840 <SystemInit+0x1bc>)
3419273e:	2200      	movs	r2, #0
34192740:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34192742:	4b3e      	ldr	r3, [pc, #248]	@ (3419283c <SystemInit+0x1b8>)
34192744:	2201      	movs	r2, #1
34192746:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
3419274a:	4b3c      	ldr	r3, [pc, #240]	@ (3419283c <SystemInit+0x1b8>)
3419274c:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34192750:	4b38      	ldr	r3, [pc, #224]	@ (34192834 <SystemInit+0x1b0>)
34192752:	4a3c      	ldr	r2, [pc, #240]	@ (34192844 <SystemInit+0x1c0>)
34192754:	689b      	ldr	r3, [r3, #8]
34192756:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34192758:	4b3b      	ldr	r3, [pc, #236]	@ (34192848 <SystemInit+0x1c4>)
3419275a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419275c:	4a3a      	ldr	r2, [pc, #232]	@ (34192848 <SystemInit+0x1c4>)
3419275e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34192762:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34192764:	4b38      	ldr	r3, [pc, #224]	@ (34192848 <SystemInit+0x1c4>)
34192766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34192768:	4a37      	ldr	r2, [pc, #220]	@ (34192848 <SystemInit+0x1c4>)
3419276a:	f043 0310 	orr.w	r3, r3, #16
3419276e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34192770:	4b35      	ldr	r3, [pc, #212]	@ (34192848 <SystemInit+0x1c4>)
34192772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34192774:	4b31      	ldr	r3, [pc, #196]	@ (3419283c <SystemInit+0x1b8>)
34192776:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
3419277a:	4a30      	ldr	r2, [pc, #192]	@ (3419283c <SystemInit+0x1b8>)
3419277c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34192780:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34192784:	4b2d      	ldr	r3, [pc, #180]	@ (3419283c <SystemInit+0x1b8>)
34192786:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
3419278a:	4a2c      	ldr	r2, [pc, #176]	@ (3419283c <SystemInit+0x1b8>)
3419278c:	f043 0310 	orr.w	r3, r3, #16
34192790:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34192794:	4b29      	ldr	r3, [pc, #164]	@ (3419283c <SystemInit+0x1b8>)
34192796:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
3419279a:	4b28      	ldr	r3, [pc, #160]	@ (3419283c <SystemInit+0x1b8>)
3419279c:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
341927a0:	4a26      	ldr	r2, [pc, #152]	@ (3419283c <SystemInit+0x1b8>)
341927a2:	f023 0310 	bic.w	r3, r3, #16
341927a6:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
341927aa:	4b24      	ldr	r3, [pc, #144]	@ (3419283c <SystemInit+0x1b8>)
341927ac:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
341927b0:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
341927b4:	4b21      	ldr	r3, [pc, #132]	@ (3419283c <SystemInit+0x1b8>)
341927b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341927ba:	461a      	mov	r2, r3
341927bc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
341927c0:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
341927c4:	4b1d      	ldr	r3, [pc, #116]	@ (3419283c <SystemInit+0x1b8>)
341927c6:	2201      	movs	r2, #1
341927c8:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
341927cc:	4b1b      	ldr	r3, [pc, #108]	@ (3419283c <SystemInit+0x1b8>)
341927ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341927d2:	461a      	mov	r2, r3
341927d4:	2301      	movs	r3, #1
341927d6:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
341927da:	4b18      	ldr	r3, [pc, #96]	@ (3419283c <SystemInit+0x1b8>)
341927dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341927e0:	461a      	mov	r2, r3
341927e2:	2301      	movs	r3, #1
341927e4:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
341927e8:	4b14      	ldr	r3, [pc, #80]	@ (3419283c <SystemInit+0x1b8>)
341927ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341927ee:	461a      	mov	r2, r3
341927f0:	2340      	movs	r3, #64	@ 0x40
341927f2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
341927f6:	4b13      	ldr	r3, [pc, #76]	@ (34192844 <SystemInit+0x1c0>)
341927f8:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
341927fa:	4b10      	ldr	r3, [pc, #64]	@ (3419283c <SystemInit+0x1b8>)
341927fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34192800:	461a      	mov	r2, r3
34192802:	2301      	movs	r3, #1
34192804:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34192808:	4b0a      	ldr	r3, [pc, #40]	@ (34192834 <SystemInit+0x1b0>)
3419280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3419280e:	4a09      	ldr	r2, [pc, #36]	@ (34192834 <SystemInit+0x1b0>)
34192810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34192814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34192818:	4b0c      	ldr	r3, [pc, #48]	@ (3419284c <SystemInit+0x1c8>)
3419281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3419281e:	4a0b      	ldr	r2, [pc, #44]	@ (3419284c <SystemInit+0x1c8>)
34192820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34192824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34192828:	bf00      	nop
3419282a:	46bd      	mov	sp, r7
3419282c:	f85d 7b04 	ldr.w	r7, [sp], #4
34192830:	4770      	bx	lr
34192832:	bf00      	nop
34192834:	e000ed00 	.word	0xe000ed00
34192838:	34180400 	.word	0x34180400
3419283c:	56028000 	.word	0x56028000
34192840:	e000edd0 	.word	0xe000edd0
34192844:	56008000 	.word	0x56008000
34192848:	56024800 	.word	0x56024800
3419284c:	e002ed00 	.word	0xe002ed00

34192850 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
34192850:	b480      	push	{r7}
34192852:	b08d      	sub	sp, #52	@ 0x34
34192854:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
34192856:	2300      	movs	r3, #0
34192858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
3419285a:	2300      	movs	r3, #0
3419285c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
3419285e:	2300      	movs	r3, #0
34192860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
34192862:	2300      	movs	r3, #0
34192864:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
34192866:	2300      	movs	r3, #0
34192868:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
3419286a:	2300      	movs	r3, #0
3419286c:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3419286e:	4b9b      	ldr	r3, [pc, #620]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192870:	6a1b      	ldr	r3, [r3, #32]
34192872:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34192876:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3419287a:	d029      	beq.n	341928d0 <SystemCoreClockUpdate+0x80>
3419287c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34192880:	f200 8180 	bhi.w	34192b84 <SystemCoreClockUpdate+0x334>
34192884:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34192888:	d01f      	beq.n	341928ca <SystemCoreClockUpdate+0x7a>
3419288a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3419288e:	f200 8179 	bhi.w	34192b84 <SystemCoreClockUpdate+0x334>
34192892:	2b00      	cmp	r3, #0
34192894:	d003      	beq.n	3419289e <SystemCoreClockUpdate+0x4e>
34192896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3419289a:	d00a      	beq.n	341928b2 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
3419289c:	e172      	b.n	34192b84 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3419289e:	4b8f      	ldr	r3, [pc, #572]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
341928a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341928a2:	09db      	lsrs	r3, r3, #7
341928a4:	f003 0303 	and.w	r3, r3, #3
341928a8:	4a8d      	ldr	r2, [pc, #564]	@ (34192ae0 <SystemCoreClockUpdate+0x290>)
341928aa:	fa22 f303 	lsr.w	r3, r2, r3
341928ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341928b0:	e169      	b.n	34192b86 <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
341928b2:	4b8a      	ldr	r3, [pc, #552]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
341928b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341928b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341928ba:	2b00      	cmp	r3, #0
341928bc:	d102      	bne.n	341928c4 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
341928be:	4b89      	ldr	r3, [pc, #548]	@ (34192ae4 <SystemCoreClockUpdate+0x294>)
341928c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341928c2:	e160      	b.n	34192b86 <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
341928c4:	4b88      	ldr	r3, [pc, #544]	@ (34192ae8 <SystemCoreClockUpdate+0x298>)
341928c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341928c8:	e15d      	b.n	34192b86 <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
341928ca:	4b88      	ldr	r3, [pc, #544]	@ (34192aec <SystemCoreClockUpdate+0x29c>)
341928cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341928ce:	e15a      	b.n	34192b86 <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
341928d0:	4b82      	ldr	r3, [pc, #520]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
341928d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341928d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
341928da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341928de:	d066      	beq.n	341929ae <SystemCoreClockUpdate+0x15e>
341928e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341928e4:	f200 8091 	bhi.w	34192a0a <SystemCoreClockUpdate+0x1ba>
341928e8:	2b00      	cmp	r3, #0
341928ea:	d003      	beq.n	341928f4 <SystemCoreClockUpdate+0xa4>
341928ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341928f0:	d02f      	beq.n	34192952 <SystemCoreClockUpdate+0x102>
341928f2:	e08a      	b.n	34192a0a <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
341928f4:	4b79      	ldr	r3, [pc, #484]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
341928f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341928fa:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
341928fc:	68fb      	ldr	r3, [r7, #12]
341928fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34192902:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
34192904:	68fb      	ldr	r3, [r7, #12]
34192906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3419290a:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3419290c:	693b      	ldr	r3, [r7, #16]
3419290e:	2b00      	cmp	r3, #0
34192910:	f040 80a9 	bne.w	34192a66 <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34192914:	68fb      	ldr	r3, [r7, #12]
34192916:	0d1b      	lsrs	r3, r3, #20
34192918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3419291c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3419291e:	68fb      	ldr	r3, [r7, #12]
34192920:	0a1b      	lsrs	r3, r3, #8
34192922:	f3c3 030b 	ubfx	r3, r3, #0, #12
34192926:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34192928:	4b6c      	ldr	r3, [pc, #432]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
3419292a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3419292e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34192932:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34192934:	4b69      	ldr	r3, [pc, #420]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3419293a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
3419293c:	68fb      	ldr	r3, [r7, #12]
3419293e:	0edb      	lsrs	r3, r3, #27
34192940:	f003 0307 	and.w	r3, r3, #7
34192944:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
34192946:	68fb      	ldr	r3, [r7, #12]
34192948:	0e1b      	lsrs	r3, r3, #24
3419294a:	f003 0307 	and.w	r3, r3, #7
3419294e:	61bb      	str	r3, [r7, #24]
      break;
34192950:	e089      	b.n	34192a66 <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
34192952:	4b62      	ldr	r3, [pc, #392]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34192958:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
3419295a:	68fb      	ldr	r3, [r7, #12]
3419295c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34192960:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
34192962:	68fb      	ldr	r3, [r7, #12]
34192964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34192968:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3419296a:	693b      	ldr	r3, [r7, #16]
3419296c:	2b00      	cmp	r3, #0
3419296e:	d17c      	bne.n	34192a6a <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
34192970:	68fb      	ldr	r3, [r7, #12]
34192972:	0d1b      	lsrs	r3, r3, #20
34192974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34192978:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
3419297a:	68fb      	ldr	r3, [r7, #12]
3419297c:	0a1b      	lsrs	r3, r3, #8
3419297e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34192982:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34192984:	4b55      	ldr	r3, [pc, #340]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3419298a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3419298e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34192990:	4b52      	ldr	r3, [pc, #328]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192992:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34192996:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34192998:	68fb      	ldr	r3, [r7, #12]
3419299a:	0edb      	lsrs	r3, r3, #27
3419299c:	f003 0307 	and.w	r3, r3, #7
341929a0:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
341929a2:	68fb      	ldr	r3, [r7, #12]
341929a4:	0e1b      	lsrs	r3, r3, #24
341929a6:	f003 0307 	and.w	r3, r3, #7
341929aa:	61bb      	str	r3, [r7, #24]
      break;
341929ac:	e05d      	b.n	34192a6a <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
341929ae:	4b4b      	ldr	r3, [pc, #300]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
341929b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341929b4:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
341929b6:	68fb      	ldr	r3, [r7, #12]
341929b8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341929bc:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
341929be:	68fb      	ldr	r3, [r7, #12]
341929c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341929c4:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341929c6:	693b      	ldr	r3, [r7, #16]
341929c8:	2b00      	cmp	r3, #0
341929ca:	d150      	bne.n	34192a6e <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
341929cc:	68fb      	ldr	r3, [r7, #12]
341929ce:	0d1b      	lsrs	r3, r3, #20
341929d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341929d4:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
341929d6:	68fb      	ldr	r3, [r7, #12]
341929d8:	0a1b      	lsrs	r3, r3, #8
341929da:	f3c3 030b 	ubfx	r3, r3, #0, #12
341929de:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
341929e0:	4b3e      	ldr	r3, [pc, #248]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
341929e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
341929e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341929ea:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
341929ec:	4b3b      	ldr	r3, [pc, #236]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
341929ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341929f2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
341929f4:	68fb      	ldr	r3, [r7, #12]
341929f6:	0edb      	lsrs	r3, r3, #27
341929f8:	f003 0307 	and.w	r3, r3, #7
341929fc:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
341929fe:	68fb      	ldr	r3, [r7, #12]
34192a00:	0e1b      	lsrs	r3, r3, #24
34192a02:	f003 0307 	and.w	r3, r3, #7
34192a06:	61bb      	str	r3, [r7, #24]
      break;
34192a08:	e031      	b.n	34192a6e <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34192a0a:	4b34      	ldr	r3, [pc, #208]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192a0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34192a10:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34192a12:	68fb      	ldr	r3, [r7, #12]
34192a14:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34192a18:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34192a1a:	68fb      	ldr	r3, [r7, #12]
34192a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34192a20:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34192a22:	693b      	ldr	r3, [r7, #16]
34192a24:	2b00      	cmp	r3, #0
34192a26:	d124      	bne.n	34192a72 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34192a28:	68fb      	ldr	r3, [r7, #12]
34192a2a:	0d1b      	lsrs	r3, r3, #20
34192a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34192a30:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34192a32:	68fb      	ldr	r3, [r7, #12]
34192a34:	0a1b      	lsrs	r3, r3, #8
34192a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
34192a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34192a3c:	4b27      	ldr	r3, [pc, #156]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192a3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34192a42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34192a46:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34192a48:	4b24      	ldr	r3, [pc, #144]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192a4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34192a4e:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34192a50:	68fb      	ldr	r3, [r7, #12]
34192a52:	0edb      	lsrs	r3, r3, #27
34192a54:	f003 0307 	and.w	r3, r3, #7
34192a58:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34192a5a:	68fb      	ldr	r3, [r7, #12]
34192a5c:	0e1b      	lsrs	r3, r3, #24
34192a5e:	f003 0307 	and.w	r3, r3, #7
34192a62:	61bb      	str	r3, [r7, #24]
      break;
34192a64:	e005      	b.n	34192a72 <SystemCoreClockUpdate+0x222>
      break;
34192a66:	bf00      	nop
34192a68:	e004      	b.n	34192a74 <SystemCoreClockUpdate+0x224>
      break;
34192a6a:	bf00      	nop
34192a6c:	e002      	b.n	34192a74 <SystemCoreClockUpdate+0x224>
      break;
34192a6e:	bf00      	nop
34192a70:	e000      	b.n	34192a74 <SystemCoreClockUpdate+0x224>
      break;
34192a72:	bf00      	nop
    switch (pllsource)
34192a74:	697b      	ldr	r3, [r7, #20]
34192a76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192a7a:	d02c      	beq.n	34192ad6 <SystemCoreClockUpdate+0x286>
34192a7c:	697b      	ldr	r3, [r7, #20]
34192a7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192a82:	d839      	bhi.n	34192af8 <SystemCoreClockUpdate+0x2a8>
34192a84:	697b      	ldr	r3, [r7, #20]
34192a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192a8a:	d021      	beq.n	34192ad0 <SystemCoreClockUpdate+0x280>
34192a8c:	697b      	ldr	r3, [r7, #20]
34192a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192a92:	d831      	bhi.n	34192af8 <SystemCoreClockUpdate+0x2a8>
34192a94:	697b      	ldr	r3, [r7, #20]
34192a96:	2b00      	cmp	r3, #0
34192a98:	d004      	beq.n	34192aa4 <SystemCoreClockUpdate+0x254>
34192a9a:	697b      	ldr	r3, [r7, #20]
34192a9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192aa0:	d00a      	beq.n	34192ab8 <SystemCoreClockUpdate+0x268>
      break;
34192aa2:	e029      	b.n	34192af8 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34192aa4:	4b0d      	ldr	r3, [pc, #52]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34192aa8:	09db      	lsrs	r3, r3, #7
34192aaa:	f003 0303 	and.w	r3, r3, #3
34192aae:	4a0c      	ldr	r2, [pc, #48]	@ (34192ae0 <SystemCoreClockUpdate+0x290>)
34192ab0:	fa22 f303 	lsr.w	r3, r2, r3
34192ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34192ab6:	e020      	b.n	34192afa <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34192ab8:	4b08      	ldr	r3, [pc, #32]	@ (34192adc <SystemCoreClockUpdate+0x28c>)
34192aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34192abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34192ac0:	2b00      	cmp	r3, #0
34192ac2:	d102      	bne.n	34192aca <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34192ac4:	4b07      	ldr	r3, [pc, #28]	@ (34192ae4 <SystemCoreClockUpdate+0x294>)
34192ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34192ac8:	e017      	b.n	34192afa <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
34192aca:	4b07      	ldr	r3, [pc, #28]	@ (34192ae8 <SystemCoreClockUpdate+0x298>)
34192acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34192ace:	e014      	b.n	34192afa <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34192ad0:	4b06      	ldr	r3, [pc, #24]	@ (34192aec <SystemCoreClockUpdate+0x29c>)
34192ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34192ad4:	e011      	b.n	34192afa <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34192ad6:	4b06      	ldr	r3, [pc, #24]	@ (34192af0 <SystemCoreClockUpdate+0x2a0>)
34192ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34192ada:	e00e      	b.n	34192afa <SystemCoreClockUpdate+0x2aa>
34192adc:	56028000 	.word	0x56028000
34192ae0:	03d09000 	.word	0x03d09000
34192ae4:	003d0900 	.word	0x003d0900
34192ae8:	00f42400 	.word	0x00f42400
34192aec:	02dc6c00 	.word	0x02dc6c00
34192af0:	00bb8000 	.word	0x00bb8000
34192af4:	4b800000 	.word	0x4b800000
      break;
34192af8:	bf00      	nop
    if (pllbypass == 0U)
34192afa:	693b      	ldr	r3, [r7, #16]
34192afc:	2b00      	cmp	r3, #0
34192afe:	d134      	bne.n	34192b6a <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34192b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34192b02:	ee07 3a90 	vmov	s15, r3
34192b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34192b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34192b0c:	ee07 3a90 	vmov	s15, r3
34192b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
34192b14:	6a3b      	ldr	r3, [r7, #32]
34192b16:	ee07 3a90 	vmov	s15, r3
34192b1a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34192b1e:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34192af4 <SystemCoreClockUpdate+0x2a4>
34192b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
34192b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
34192b2a:	ee67 6a27 	vmul.f32	s13, s14, s15
34192b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34192b30:	ee07 3a90 	vmov	s15, r3
34192b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34192b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
34192b3c:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34192b40:	69fb      	ldr	r3, [r7, #28]
34192b42:	ee07 3a90 	vmov	s15, r3
34192b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34192b4a:	69bb      	ldr	r3, [r7, #24]
34192b4c:	ee07 3a90 	vmov	s15, r3
34192b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
34192b54:	ee27 7a27 	vmul.f32	s14, s14, s15
34192b58:	edd7 6a02 	vldr	s13, [r7, #8]
34192b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
34192b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34192b64:	ee17 3a90 	vmov	r3, s15
34192b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34192b6a:	4b0b      	ldr	r3, [pc, #44]	@ (34192b98 <SystemCoreClockUpdate+0x348>)
34192b6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34192b70:	0c1b      	lsrs	r3, r3, #16
34192b72:	b2db      	uxtb	r3, r3
34192b74:	3301      	adds	r3, #1
34192b76:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
34192b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34192b7a:	687b      	ldr	r3, [r7, #4]
34192b7c:	fbb2 f3f3 	udiv	r3, r2, r3
34192b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34192b82:	e000      	b.n	34192b86 <SystemCoreClockUpdate+0x336>
    break;
34192b84:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34192b86:	4a05      	ldr	r2, [pc, #20]	@ (34192b9c <SystemCoreClockUpdate+0x34c>)
34192b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34192b8a:	6013      	str	r3, [r2, #0]
}
34192b8c:	bf00      	nop
34192b8e:	3734      	adds	r7, #52	@ 0x34
34192b90:	46bd      	mov	sp, r7
34192b92:	f85d 7b04 	ldr.w	r7, [sp], #4
34192b96:	4770      	bx	lr
34192b98:	56028000 	.word	0x56028000
34192b9c:	341c0138 	.word	0x341c0138

34192ba0 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34192ba0:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34192ba4:	b588      	push	{r3, r7, lr}
34192ba6:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
34192ba8:	f7ff fe52 	bl	34192850 <SystemCoreClockUpdate>

  return SystemCoreClock;
34192bac:	4b06      	ldr	r3, [pc, #24]	@ (34192bc8 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34192bae:	681b      	ldr	r3, [r3, #0]
}
34192bb0:	4618      	mov	r0, r3
34192bb2:	46bd      	mov	sp, r7
34192bb4:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
34192bb8:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34192bbc:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34192bc0:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34192bc4:	4774      	bxns	lr
34192bc6:	bf00      	nop
34192bc8:	341c0138 	.word	0x341c0138

34192bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
34192bcc:	480f      	ldr	r0, [pc, #60]	@ (34192c0c <LoopForever+0x4>)
  msr   MSPLIM, r0
34192bce:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
34192bd2:	480f      	ldr	r0, [pc, #60]	@ (34192c10 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34192bd4:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
34192bd6:	f7ff fd55 	bl	34192684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
34192bda:	480e      	ldr	r0, [pc, #56]	@ (34192c14 <LoopForever+0xc>)
  ldr r1, =_edata
34192bdc:	490e      	ldr	r1, [pc, #56]	@ (34192c18 <LoopForever+0x10>)
  ldr r2, =_sidata
34192bde:	4a0f      	ldr	r2, [pc, #60]	@ (34192c1c <LoopForever+0x14>)
  movs r3, #0
34192be0:	2300      	movs	r3, #0
  b LoopCopyDataInit
34192be2:	e002      	b.n	34192bea <LoopCopyDataInit>

34192be4 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
34192be4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
34192be6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
34192be8:	3304      	adds	r3, #4

34192bea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
34192bea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34192bec:	428c      	cmp	r4, r1
  bcc CopyDataInit
34192bee:	d3f9      	bcc.n	34192be4 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34192bf0:	4a0b      	ldr	r2, [pc, #44]	@ (34192c20 <LoopForever+0x18>)
  ldr r4, =_ebss
34192bf2:	4c0c      	ldr	r4, [pc, #48]	@ (34192c24 <LoopForever+0x1c>)
  movs r3, #0
34192bf4:	2300      	movs	r3, #0
  b LoopFillZerobss
34192bf6:	e001      	b.n	34192bfc <LoopFillZerobss>

34192bf8 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
34192bf8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
34192bfa:	3204      	adds	r2, #4

34192bfc <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34192bfc:	42a2      	cmp	r2, r4
  bcc FillZerobss
34192bfe:	d3fb      	bcc.n	34192bf8 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34192c00:	f000 fb24 	bl	3419324c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34192c04:	f7ff fb44 	bl	34192290 <main>

34192c08 <LoopForever>:

LoopForever:
  b LoopForever
34192c08:	e7fe      	b.n	34192c08 <LoopForever>
34192c0a:	0000      	.short	0x0000
  ldr   r0, =_sstack
34192c0c:	341ff800 	.word	0x341ff800
  ldr   r0, =_estack
34192c10:	34200000 	.word	0x34200000
  ldr r0, =_sdata
34192c14:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
34192c18:	341c0198 	.word	0x341c0198
  ldr r2, =_sidata
34192c1c:	34198254 	.word	0x34198254
  ldr r2, =_sbss
34192c20:	341c0198 	.word	0x341c0198
  ldr r4, =_ebss
34192c24:	341c19dc 	.word	0x341c19dc

34192c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34192c28:	e7fe      	b.n	34192c28 <ADC1_2_IRQHandler>
	...

34192c2c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
34192c2c:	b580      	push	{r7, lr}
34192c2e:	b082      	sub	sp, #8
34192c30:	af00      	add	r7, sp, #0
34192c32:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
34192c34:	687b      	ldr	r3, [r7, #4]
34192c36:	681b      	ldr	r3, [r3, #0]
34192c38:	4a2b      	ldr	r2, [pc, #172]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c3a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
34192c3c:	687b      	ldr	r3, [r7, #4]
34192c3e:	685b      	ldr	r3, [r3, #4]
34192c40:	4a29      	ldr	r2, [pc, #164]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c42:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
34192c44:	687b      	ldr	r3, [r7, #4]
34192c46:	689b      	ldr	r3, [r3, #8]
34192c48:	4a27      	ldr	r2, [pc, #156]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c4a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
34192c4c:	687b      	ldr	r3, [r7, #4]
34192c4e:	68db      	ldr	r3, [r3, #12]
34192c50:	4a25      	ldr	r2, [pc, #148]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c52:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
34192c54:	687b      	ldr	r3, [r7, #4]
34192c56:	691b      	ldr	r3, [r3, #16]
34192c58:	4a23      	ldr	r2, [pc, #140]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c5a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
34192c5c:	687b      	ldr	r3, [r7, #4]
34192c5e:	695b      	ldr	r3, [r3, #20]
34192c60:	4a21      	ldr	r2, [pc, #132]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c62:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
34192c64:	687b      	ldr	r3, [r7, #4]
34192c66:	699b      	ldr	r3, [r3, #24]
34192c68:	4a1f      	ldr	r2, [pc, #124]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c6a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
34192c6c:	687b      	ldr	r3, [r7, #4]
34192c6e:	69db      	ldr	r3, [r3, #28]
34192c70:	4a1d      	ldr	r2, [pc, #116]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c72:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
34192c74:	687b      	ldr	r3, [r7, #4]
34192c76:	6a1b      	ldr	r3, [r3, #32]
34192c78:	4a1b      	ldr	r2, [pc, #108]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c7a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
34192c7c:	687b      	ldr	r3, [r7, #4]
34192c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34192c80:	4a19      	ldr	r2, [pc, #100]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c82:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
34192c84:	687b      	ldr	r3, [r7, #4]
34192c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34192c88:	4a17      	ldr	r2, [pc, #92]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c8a:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
34192c8c:	4b17      	ldr	r3, [pc, #92]	@ (34192cec <UTIL_LCD_SetFuncDriver+0xc0>)
34192c8e:	2200      	movs	r2, #0
34192c90:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
34192c92:	4b16      	ldr	r3, [pc, #88]	@ (34192cec <UTIL_LCD_SetFuncDriver+0xc0>)
34192c94:	2200      	movs	r2, #0
34192c96:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
34192c98:	4b13      	ldr	r3, [pc, #76]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192c9a:	69db      	ldr	r3, [r3, #28]
34192c9c:	4a13      	ldr	r2, [pc, #76]	@ (34192cec <UTIL_LCD_SetFuncDriver+0xc0>)
34192c9e:	68d2      	ldr	r2, [r2, #12]
34192ca0:	0152      	lsls	r2, r2, #5
34192ca2:	3210      	adds	r2, #16
34192ca4:	4911      	ldr	r1, [pc, #68]	@ (34192cec <UTIL_LCD_SetFuncDriver+0xc0>)
34192ca6:	440a      	add	r2, r1
34192ca8:	3204      	adds	r2, #4
34192caa:	4611      	mov	r1, r2
34192cac:	2000      	movs	r0, #0
34192cae:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp[DrawProp->LcdLayer].LcdYsize);
34192cb0:	4b0d      	ldr	r3, [pc, #52]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192cb2:	6a1b      	ldr	r3, [r3, #32]
34192cb4:	4a0d      	ldr	r2, [pc, #52]	@ (34192cec <UTIL_LCD_SetFuncDriver+0xc0>)
34192cb6:	68d2      	ldr	r2, [r2, #12]
34192cb8:	0152      	lsls	r2, r2, #5
34192cba:	3218      	adds	r2, #24
34192cbc:	490b      	ldr	r1, [pc, #44]	@ (34192cec <UTIL_LCD_SetFuncDriver+0xc0>)
34192cbe:	440a      	add	r2, r1
34192cc0:	4611      	mov	r1, r2
34192cc2:	2000      	movs	r0, #0
34192cc4:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
34192cc6:	4b08      	ldr	r3, [pc, #32]	@ (34192ce8 <UTIL_LCD_SetFuncDriver+0xbc>)
34192cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34192cca:	4a08      	ldr	r2, [pc, #32]	@ (34192cec <UTIL_LCD_SetFuncDriver+0xc0>)
34192ccc:	68d2      	ldr	r2, [r2, #12]
34192cce:	0152      	lsls	r2, r2, #5
34192cd0:	3218      	adds	r2, #24
34192cd2:	4906      	ldr	r1, [pc, #24]	@ (34192cec <UTIL_LCD_SetFuncDriver+0xc0>)
34192cd4:	440a      	add	r2, r1
34192cd6:	3204      	adds	r2, #4
34192cd8:	4611      	mov	r1, r2
34192cda:	2000      	movs	r0, #0
34192cdc:	4798      	blx	r3
}
34192cde:	bf00      	nop
34192ce0:	3708      	adds	r7, #8
34192ce2:	46bd      	mov	sp, r7
34192ce4:	bd80      	pop	{r7, pc}
34192ce6:	bf00      	nop
34192ce8:	341c1864 	.word	0x341c1864
34192cec:	341c1824 	.word	0x341c1824

34192cf0 <std>:
34192cf0:	2300      	movs	r3, #0
34192cf2:	b510      	push	{r4, lr}
34192cf4:	4604      	mov	r4, r0
34192cf6:	6083      	str	r3, [r0, #8]
34192cf8:	8181      	strh	r1, [r0, #12]
34192cfa:	4619      	mov	r1, r3
34192cfc:	6643      	str	r3, [r0, #100]	@ 0x64
34192cfe:	81c2      	strh	r2, [r0, #14]
34192d00:	2208      	movs	r2, #8
34192d02:	6183      	str	r3, [r0, #24]
34192d04:	e9c0 3300 	strd	r3, r3, [r0]
34192d08:	e9c0 3304 	strd	r3, r3, [r0, #16]
34192d0c:	305c      	adds	r0, #92	@ 0x5c
34192d0e:	f000 fa49 	bl	341931a4 <memset>
34192d12:	4b0d      	ldr	r3, [pc, #52]	@ (34192d48 <std+0x58>)
34192d14:	6224      	str	r4, [r4, #32]
34192d16:	6263      	str	r3, [r4, #36]	@ 0x24
34192d18:	4b0c      	ldr	r3, [pc, #48]	@ (34192d4c <std+0x5c>)
34192d1a:	62a3      	str	r3, [r4, #40]	@ 0x28
34192d1c:	4b0c      	ldr	r3, [pc, #48]	@ (34192d50 <std+0x60>)
34192d1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
34192d20:	4b0c      	ldr	r3, [pc, #48]	@ (34192d54 <std+0x64>)
34192d22:	6323      	str	r3, [r4, #48]	@ 0x30
34192d24:	4b0c      	ldr	r3, [pc, #48]	@ (34192d58 <std+0x68>)
34192d26:	429c      	cmp	r4, r3
34192d28:	d006      	beq.n	34192d38 <std+0x48>
34192d2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
34192d2e:	4294      	cmp	r4, r2
34192d30:	d002      	beq.n	34192d38 <std+0x48>
34192d32:	33d0      	adds	r3, #208	@ 0xd0
34192d34:	429c      	cmp	r4, r3
34192d36:	d105      	bne.n	34192d44 <std+0x54>
34192d38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
34192d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34192d40:	f000 baa8 	b.w	34193294 <__retarget_lock_init_recursive>
34192d44:	bd10      	pop	{r4, pc}
34192d46:	bf00      	nop
34192d48:	34192fc1 	.word	0x34192fc1
34192d4c:	34192fe3 	.word	0x34192fe3
34192d50:	3419301b 	.word	0x3419301b
34192d54:	3419303f 	.word	0x3419303f
34192d58:	341c1890 	.word	0x341c1890

34192d5c <stdio_exit_handler>:
34192d5c:	4a02      	ldr	r2, [pc, #8]	@ (34192d68 <stdio_exit_handler+0xc>)
34192d5e:	4903      	ldr	r1, [pc, #12]	@ (34192d6c <stdio_exit_handler+0x10>)
34192d60:	4803      	ldr	r0, [pc, #12]	@ (34192d70 <stdio_exit_handler+0x14>)
34192d62:	f000 b869 	b.w	34192e38 <_fwalk_sglue>
34192d66:	bf00      	nop
34192d68:	341c013c 	.word	0x341c013c
34192d6c:	34193e01 	.word	0x34193e01
34192d70:	341c014c 	.word	0x341c014c

34192d74 <cleanup_stdio>:
34192d74:	6841      	ldr	r1, [r0, #4]
34192d76:	4b0c      	ldr	r3, [pc, #48]	@ (34192da8 <cleanup_stdio+0x34>)
34192d78:	4299      	cmp	r1, r3
34192d7a:	b510      	push	{r4, lr}
34192d7c:	4604      	mov	r4, r0
34192d7e:	d001      	beq.n	34192d84 <cleanup_stdio+0x10>
34192d80:	f001 f83e 	bl	34193e00 <_fflush_r>
34192d84:	68a1      	ldr	r1, [r4, #8]
34192d86:	4b09      	ldr	r3, [pc, #36]	@ (34192dac <cleanup_stdio+0x38>)
34192d88:	4299      	cmp	r1, r3
34192d8a:	d002      	beq.n	34192d92 <cleanup_stdio+0x1e>
34192d8c:	4620      	mov	r0, r4
34192d8e:	f001 f837 	bl	34193e00 <_fflush_r>
34192d92:	68e1      	ldr	r1, [r4, #12]
34192d94:	4b06      	ldr	r3, [pc, #24]	@ (34192db0 <cleanup_stdio+0x3c>)
34192d96:	4299      	cmp	r1, r3
34192d98:	d004      	beq.n	34192da4 <cleanup_stdio+0x30>
34192d9a:	4620      	mov	r0, r4
34192d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34192da0:	f001 b82e 	b.w	34193e00 <_fflush_r>
34192da4:	bd10      	pop	{r4, pc}
34192da6:	bf00      	nop
34192da8:	341c1890 	.word	0x341c1890
34192dac:	341c18f8 	.word	0x341c18f8
34192db0:	341c1960 	.word	0x341c1960

34192db4 <global_stdio_init.part.0>:
34192db4:	b510      	push	{r4, lr}
34192db6:	4b0b      	ldr	r3, [pc, #44]	@ (34192de4 <global_stdio_init.part.0+0x30>)
34192db8:	2104      	movs	r1, #4
34192dba:	4c0b      	ldr	r4, [pc, #44]	@ (34192de8 <global_stdio_init.part.0+0x34>)
34192dbc:	4a0b      	ldr	r2, [pc, #44]	@ (34192dec <global_stdio_init.part.0+0x38>)
34192dbe:	4620      	mov	r0, r4
34192dc0:	601a      	str	r2, [r3, #0]
34192dc2:	2200      	movs	r2, #0
34192dc4:	f7ff ff94 	bl	34192cf0 <std>
34192dc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
34192dcc:	2201      	movs	r2, #1
34192dce:	2109      	movs	r1, #9
34192dd0:	f7ff ff8e 	bl	34192cf0 <std>
34192dd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
34192dd8:	2202      	movs	r2, #2
34192dda:	2112      	movs	r1, #18
34192ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34192de0:	f7ff bf86 	b.w	34192cf0 <std>
34192de4:	341c19c8 	.word	0x341c19c8
34192de8:	341c1890 	.word	0x341c1890
34192dec:	34192d5d 	.word	0x34192d5d

34192df0 <__sfp_lock_acquire>:
34192df0:	4801      	ldr	r0, [pc, #4]	@ (34192df8 <__sfp_lock_acquire+0x8>)
34192df2:	f000 ba50 	b.w	34193296 <__retarget_lock_acquire_recursive>
34192df6:	bf00      	nop
34192df8:	341c19d1 	.word	0x341c19d1

34192dfc <__sfp_lock_release>:
34192dfc:	4801      	ldr	r0, [pc, #4]	@ (34192e04 <__sfp_lock_release+0x8>)
34192dfe:	f000 ba4b 	b.w	34193298 <__retarget_lock_release_recursive>
34192e02:	bf00      	nop
34192e04:	341c19d1 	.word	0x341c19d1

34192e08 <__sinit>:
34192e08:	b510      	push	{r4, lr}
34192e0a:	4604      	mov	r4, r0
34192e0c:	f7ff fff0 	bl	34192df0 <__sfp_lock_acquire>
34192e10:	6a23      	ldr	r3, [r4, #32]
34192e12:	b11b      	cbz	r3, 34192e1c <__sinit+0x14>
34192e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34192e18:	f7ff bff0 	b.w	34192dfc <__sfp_lock_release>
34192e1c:	4b04      	ldr	r3, [pc, #16]	@ (34192e30 <__sinit+0x28>)
34192e1e:	6223      	str	r3, [r4, #32]
34192e20:	4b04      	ldr	r3, [pc, #16]	@ (34192e34 <__sinit+0x2c>)
34192e22:	681b      	ldr	r3, [r3, #0]
34192e24:	2b00      	cmp	r3, #0
34192e26:	d1f5      	bne.n	34192e14 <__sinit+0xc>
34192e28:	f7ff ffc4 	bl	34192db4 <global_stdio_init.part.0>
34192e2c:	e7f2      	b.n	34192e14 <__sinit+0xc>
34192e2e:	bf00      	nop
34192e30:	34192d75 	.word	0x34192d75
34192e34:	341c19c8 	.word	0x341c19c8

34192e38 <_fwalk_sglue>:
34192e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34192e3c:	4607      	mov	r7, r0
34192e3e:	4688      	mov	r8, r1
34192e40:	4614      	mov	r4, r2
34192e42:	2600      	movs	r6, #0
34192e44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
34192e48:	f1b9 0901 	subs.w	r9, r9, #1
34192e4c:	d505      	bpl.n	34192e5a <_fwalk_sglue+0x22>
34192e4e:	6824      	ldr	r4, [r4, #0]
34192e50:	2c00      	cmp	r4, #0
34192e52:	d1f7      	bne.n	34192e44 <_fwalk_sglue+0xc>
34192e54:	4630      	mov	r0, r6
34192e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34192e5a:	89ab      	ldrh	r3, [r5, #12]
34192e5c:	2b01      	cmp	r3, #1
34192e5e:	d907      	bls.n	34192e70 <_fwalk_sglue+0x38>
34192e60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
34192e64:	3301      	adds	r3, #1
34192e66:	d003      	beq.n	34192e70 <_fwalk_sglue+0x38>
34192e68:	4629      	mov	r1, r5
34192e6a:	4638      	mov	r0, r7
34192e6c:	47c0      	blx	r8
34192e6e:	4306      	orrs	r6, r0
34192e70:	3568      	adds	r5, #104	@ 0x68
34192e72:	e7e9      	b.n	34192e48 <_fwalk_sglue+0x10>

34192e74 <iprintf>:
34192e74:	b40f      	push	{r0, r1, r2, r3}
34192e76:	b507      	push	{r0, r1, r2, lr}
34192e78:	4906      	ldr	r1, [pc, #24]	@ (34192e94 <iprintf+0x20>)
34192e7a:	ab04      	add	r3, sp, #16
34192e7c:	6808      	ldr	r0, [r1, #0]
34192e7e:	f853 2b04 	ldr.w	r2, [r3], #4
34192e82:	6881      	ldr	r1, [r0, #8]
34192e84:	9301      	str	r3, [sp, #4]
34192e86:	f000 fc8f 	bl	341937a8 <_vfiprintf_r>
34192e8a:	b003      	add	sp, #12
34192e8c:	f85d eb04 	ldr.w	lr, [sp], #4
34192e90:	b004      	add	sp, #16
34192e92:	4770      	bx	lr
34192e94:	341c0148 	.word	0x341c0148

34192e98 <_puts_r>:
34192e98:	6a03      	ldr	r3, [r0, #32]
34192e9a:	b570      	push	{r4, r5, r6, lr}
34192e9c:	4605      	mov	r5, r0
34192e9e:	460e      	mov	r6, r1
34192ea0:	6884      	ldr	r4, [r0, #8]
34192ea2:	b90b      	cbnz	r3, 34192ea8 <_puts_r+0x10>
34192ea4:	f7ff ffb0 	bl	34192e08 <__sinit>
34192ea8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34192eaa:	07db      	lsls	r3, r3, #31
34192eac:	d405      	bmi.n	34192eba <_puts_r+0x22>
34192eae:	89a3      	ldrh	r3, [r4, #12]
34192eb0:	0598      	lsls	r0, r3, #22
34192eb2:	d402      	bmi.n	34192eba <_puts_r+0x22>
34192eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34192eb6:	f000 f9ee 	bl	34193296 <__retarget_lock_acquire_recursive>
34192eba:	89a3      	ldrh	r3, [r4, #12]
34192ebc:	0719      	lsls	r1, r3, #28
34192ebe:	d502      	bpl.n	34192ec6 <_puts_r+0x2e>
34192ec0:	6923      	ldr	r3, [r4, #16]
34192ec2:	2b00      	cmp	r3, #0
34192ec4:	d135      	bne.n	34192f32 <_puts_r+0x9a>
34192ec6:	4621      	mov	r1, r4
34192ec8:	4628      	mov	r0, r5
34192eca:	f000 f8fb 	bl	341930c4 <__swsetup_r>
34192ece:	b380      	cbz	r0, 34192f32 <_puts_r+0x9a>
34192ed0:	f04f 35ff 	mov.w	r5, #4294967295
34192ed4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34192ed6:	07da      	lsls	r2, r3, #31
34192ed8:	d405      	bmi.n	34192ee6 <_puts_r+0x4e>
34192eda:	89a3      	ldrh	r3, [r4, #12]
34192edc:	059b      	lsls	r3, r3, #22
34192ede:	d402      	bmi.n	34192ee6 <_puts_r+0x4e>
34192ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34192ee2:	f000 f9d9 	bl	34193298 <__retarget_lock_release_recursive>
34192ee6:	4628      	mov	r0, r5
34192ee8:	bd70      	pop	{r4, r5, r6, pc}
34192eea:	2b00      	cmp	r3, #0
34192eec:	da04      	bge.n	34192ef8 <_puts_r+0x60>
34192eee:	69a2      	ldr	r2, [r4, #24]
34192ef0:	429a      	cmp	r2, r3
34192ef2:	dc17      	bgt.n	34192f24 <_puts_r+0x8c>
34192ef4:	290a      	cmp	r1, #10
34192ef6:	d015      	beq.n	34192f24 <_puts_r+0x8c>
34192ef8:	6823      	ldr	r3, [r4, #0]
34192efa:	1c5a      	adds	r2, r3, #1
34192efc:	6022      	str	r2, [r4, #0]
34192efe:	7019      	strb	r1, [r3, #0]
34192f00:	68a3      	ldr	r3, [r4, #8]
34192f02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
34192f06:	3b01      	subs	r3, #1
34192f08:	60a3      	str	r3, [r4, #8]
34192f0a:	2900      	cmp	r1, #0
34192f0c:	d1ed      	bne.n	34192eea <_puts_r+0x52>
34192f0e:	2b00      	cmp	r3, #0
34192f10:	da11      	bge.n	34192f36 <_puts_r+0x9e>
34192f12:	4622      	mov	r2, r4
34192f14:	210a      	movs	r1, #10
34192f16:	4628      	mov	r0, r5
34192f18:	f000 f895 	bl	34193046 <__swbuf_r>
34192f1c:	3001      	adds	r0, #1
34192f1e:	d0d7      	beq.n	34192ed0 <_puts_r+0x38>
34192f20:	250a      	movs	r5, #10
34192f22:	e7d7      	b.n	34192ed4 <_puts_r+0x3c>
34192f24:	4622      	mov	r2, r4
34192f26:	4628      	mov	r0, r5
34192f28:	f000 f88d 	bl	34193046 <__swbuf_r>
34192f2c:	3001      	adds	r0, #1
34192f2e:	d1e7      	bne.n	34192f00 <_puts_r+0x68>
34192f30:	e7ce      	b.n	34192ed0 <_puts_r+0x38>
34192f32:	3e01      	subs	r6, #1
34192f34:	e7e4      	b.n	34192f00 <_puts_r+0x68>
34192f36:	6823      	ldr	r3, [r4, #0]
34192f38:	1c5a      	adds	r2, r3, #1
34192f3a:	6022      	str	r2, [r4, #0]
34192f3c:	220a      	movs	r2, #10
34192f3e:	701a      	strb	r2, [r3, #0]
34192f40:	e7ee      	b.n	34192f20 <_puts_r+0x88>
	...

34192f44 <puts>:
34192f44:	4b02      	ldr	r3, [pc, #8]	@ (34192f50 <puts+0xc>)
34192f46:	4601      	mov	r1, r0
34192f48:	6818      	ldr	r0, [r3, #0]
34192f4a:	f7ff bfa5 	b.w	34192e98 <_puts_r>
34192f4e:	bf00      	nop
34192f50:	341c0148 	.word	0x341c0148

34192f54 <sniprintf>:
34192f54:	b40c      	push	{r2, r3}
34192f56:	4b19      	ldr	r3, [pc, #100]	@ (34192fbc <sniprintf+0x68>)
34192f58:	b530      	push	{r4, r5, lr}
34192f5a:	1e0c      	subs	r4, r1, #0
34192f5c:	b09d      	sub	sp, #116	@ 0x74
34192f5e:	681d      	ldr	r5, [r3, #0]
34192f60:	da08      	bge.n	34192f74 <sniprintf+0x20>
34192f62:	238b      	movs	r3, #139	@ 0x8b
34192f64:	f04f 30ff 	mov.w	r0, #4294967295
34192f68:	602b      	str	r3, [r5, #0]
34192f6a:	b01d      	add	sp, #116	@ 0x74
34192f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34192f70:	b002      	add	sp, #8
34192f72:	4770      	bx	lr
34192f74:	f44f 7302 	mov.w	r3, #520	@ 0x208
34192f78:	9002      	str	r0, [sp, #8]
34192f7a:	9006      	str	r0, [sp, #24]
34192f7c:	a902      	add	r1, sp, #8
34192f7e:	f8ad 3014 	strh.w	r3, [sp, #20]
34192f82:	f04f 0300 	mov.w	r3, #0
34192f86:	9a20      	ldr	r2, [sp, #128]	@ 0x80
34192f88:	4628      	mov	r0, r5
34192f8a:	931b      	str	r3, [sp, #108]	@ 0x6c
34192f8c:	bf14      	ite	ne
34192f8e:	f104 33ff 	addne.w	r3, r4, #4294967295
34192f92:	4623      	moveq	r3, r4
34192f94:	9304      	str	r3, [sp, #16]
34192f96:	9307      	str	r3, [sp, #28]
34192f98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
34192f9c:	f8ad 3016 	strh.w	r3, [sp, #22]
34192fa0:	ab21      	add	r3, sp, #132	@ 0x84
34192fa2:	9301      	str	r3, [sp, #4]
34192fa4:	f000 fada 	bl	3419355c <_svfiprintf_r>
34192fa8:	1c43      	adds	r3, r0, #1
34192faa:	bfbc      	itt	lt
34192fac:	238b      	movlt	r3, #139	@ 0x8b
34192fae:	602b      	strlt	r3, [r5, #0]
34192fb0:	2c00      	cmp	r4, #0
34192fb2:	d0da      	beq.n	34192f6a <sniprintf+0x16>
34192fb4:	9b02      	ldr	r3, [sp, #8]
34192fb6:	2200      	movs	r2, #0
34192fb8:	701a      	strb	r2, [r3, #0]
34192fba:	e7d6      	b.n	34192f6a <sniprintf+0x16>
34192fbc:	341c0148 	.word	0x341c0148

34192fc0 <__sread>:
34192fc0:	b510      	push	{r4, lr}
34192fc2:	460c      	mov	r4, r1
34192fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34192fc8:	f000 f916 	bl	341931f8 <_read_r>
34192fcc:	2800      	cmp	r0, #0
34192fce:	bfab      	itete	ge
34192fd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
34192fd2:	89a3      	ldrhlt	r3, [r4, #12]
34192fd4:	181b      	addge	r3, r3, r0
34192fd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
34192fda:	bfac      	ite	ge
34192fdc:	6563      	strge	r3, [r4, #84]	@ 0x54
34192fde:	81a3      	strhlt	r3, [r4, #12]
34192fe0:	bd10      	pop	{r4, pc}

34192fe2 <__swrite>:
34192fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34192fe6:	461f      	mov	r7, r3
34192fe8:	898b      	ldrh	r3, [r1, #12]
34192fea:	4605      	mov	r5, r0
34192fec:	460c      	mov	r4, r1
34192fee:	05db      	lsls	r3, r3, #23
34192ff0:	4616      	mov	r6, r2
34192ff2:	d505      	bpl.n	34193000 <__swrite+0x1e>
34192ff4:	2302      	movs	r3, #2
34192ff6:	2200      	movs	r2, #0
34192ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34192ffc:	f000 f8ea 	bl	341931d4 <_lseek_r>
34193000:	89a3      	ldrh	r3, [r4, #12]
34193002:	4632      	mov	r2, r6
34193004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34193008:	4628      	mov	r0, r5
3419300a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3419300e:	81a3      	strh	r3, [r4, #12]
34193010:	463b      	mov	r3, r7
34193012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34193016:	f000 b901 	b.w	3419321c <_write_r>

3419301a <__sseek>:
3419301a:	b510      	push	{r4, lr}
3419301c:	460c      	mov	r4, r1
3419301e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34193022:	f000 f8d7 	bl	341931d4 <_lseek_r>
34193026:	1c43      	adds	r3, r0, #1
34193028:	89a3      	ldrh	r3, [r4, #12]
3419302a:	bf15      	itete	ne
3419302c:	6560      	strne	r0, [r4, #84]	@ 0x54
3419302e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
34193032:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
34193036:	81a3      	strheq	r3, [r4, #12]
34193038:	bf18      	it	ne
3419303a:	81a3      	strhne	r3, [r4, #12]
3419303c:	bd10      	pop	{r4, pc}

3419303e <__sclose>:
3419303e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34193042:	f000 b8b7 	b.w	341931b4 <_close_r>

34193046 <__swbuf_r>:
34193046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34193048:	460e      	mov	r6, r1
3419304a:	4614      	mov	r4, r2
3419304c:	4605      	mov	r5, r0
3419304e:	b118      	cbz	r0, 34193058 <__swbuf_r+0x12>
34193050:	6a03      	ldr	r3, [r0, #32]
34193052:	b90b      	cbnz	r3, 34193058 <__swbuf_r+0x12>
34193054:	f7ff fed8 	bl	34192e08 <__sinit>
34193058:	69a3      	ldr	r3, [r4, #24]
3419305a:	60a3      	str	r3, [r4, #8]
3419305c:	89a3      	ldrh	r3, [r4, #12]
3419305e:	071a      	lsls	r2, r3, #28
34193060:	d501      	bpl.n	34193066 <__swbuf_r+0x20>
34193062:	6923      	ldr	r3, [r4, #16]
34193064:	b943      	cbnz	r3, 34193078 <__swbuf_r+0x32>
34193066:	4621      	mov	r1, r4
34193068:	4628      	mov	r0, r5
3419306a:	f000 f82b 	bl	341930c4 <__swsetup_r>
3419306e:	b118      	cbz	r0, 34193078 <__swbuf_r+0x32>
34193070:	f04f 37ff 	mov.w	r7, #4294967295
34193074:	4638      	mov	r0, r7
34193076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34193078:	6823      	ldr	r3, [r4, #0]
3419307a:	b2f6      	uxtb	r6, r6
3419307c:	6922      	ldr	r2, [r4, #16]
3419307e:	4637      	mov	r7, r6
34193080:	1a98      	subs	r0, r3, r2
34193082:	6963      	ldr	r3, [r4, #20]
34193084:	4283      	cmp	r3, r0
34193086:	dc05      	bgt.n	34193094 <__swbuf_r+0x4e>
34193088:	4621      	mov	r1, r4
3419308a:	4628      	mov	r0, r5
3419308c:	f000 feb8 	bl	34193e00 <_fflush_r>
34193090:	2800      	cmp	r0, #0
34193092:	d1ed      	bne.n	34193070 <__swbuf_r+0x2a>
34193094:	68a3      	ldr	r3, [r4, #8]
34193096:	3b01      	subs	r3, #1
34193098:	60a3      	str	r3, [r4, #8]
3419309a:	6823      	ldr	r3, [r4, #0]
3419309c:	1c5a      	adds	r2, r3, #1
3419309e:	6022      	str	r2, [r4, #0]
341930a0:	701e      	strb	r6, [r3, #0]
341930a2:	1c43      	adds	r3, r0, #1
341930a4:	6962      	ldr	r2, [r4, #20]
341930a6:	429a      	cmp	r2, r3
341930a8:	d004      	beq.n	341930b4 <__swbuf_r+0x6e>
341930aa:	89a3      	ldrh	r3, [r4, #12]
341930ac:	07db      	lsls	r3, r3, #31
341930ae:	d5e1      	bpl.n	34193074 <__swbuf_r+0x2e>
341930b0:	2e0a      	cmp	r6, #10
341930b2:	d1df      	bne.n	34193074 <__swbuf_r+0x2e>
341930b4:	4621      	mov	r1, r4
341930b6:	4628      	mov	r0, r5
341930b8:	f000 fea2 	bl	34193e00 <_fflush_r>
341930bc:	2800      	cmp	r0, #0
341930be:	d0d9      	beq.n	34193074 <__swbuf_r+0x2e>
341930c0:	e7d6      	b.n	34193070 <__swbuf_r+0x2a>
	...

341930c4 <__swsetup_r>:
341930c4:	b538      	push	{r3, r4, r5, lr}
341930c6:	4b29      	ldr	r3, [pc, #164]	@ (3419316c <__swsetup_r+0xa8>)
341930c8:	4605      	mov	r5, r0
341930ca:	460c      	mov	r4, r1
341930cc:	6818      	ldr	r0, [r3, #0]
341930ce:	b118      	cbz	r0, 341930d8 <__swsetup_r+0x14>
341930d0:	6a03      	ldr	r3, [r0, #32]
341930d2:	b90b      	cbnz	r3, 341930d8 <__swsetup_r+0x14>
341930d4:	f7ff fe98 	bl	34192e08 <__sinit>
341930d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341930dc:	0719      	lsls	r1, r3, #28
341930de:	d422      	bmi.n	34193126 <__swsetup_r+0x62>
341930e0:	06da      	lsls	r2, r3, #27
341930e2:	d407      	bmi.n	341930f4 <__swsetup_r+0x30>
341930e4:	2209      	movs	r2, #9
341930e6:	602a      	str	r2, [r5, #0]
341930e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341930ec:	f04f 30ff 	mov.w	r0, #4294967295
341930f0:	81a3      	strh	r3, [r4, #12]
341930f2:	e033      	b.n	3419315c <__swsetup_r+0x98>
341930f4:	0758      	lsls	r0, r3, #29
341930f6:	d512      	bpl.n	3419311e <__swsetup_r+0x5a>
341930f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
341930fa:	b141      	cbz	r1, 3419310e <__swsetup_r+0x4a>
341930fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34193100:	4299      	cmp	r1, r3
34193102:	d002      	beq.n	3419310a <__swsetup_r+0x46>
34193104:	4628      	mov	r0, r5
34193106:	f000 f8d5 	bl	341932b4 <_free_r>
3419310a:	2300      	movs	r3, #0
3419310c:	6363      	str	r3, [r4, #52]	@ 0x34
3419310e:	89a3      	ldrh	r3, [r4, #12]
34193110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
34193114:	81a3      	strh	r3, [r4, #12]
34193116:	2300      	movs	r3, #0
34193118:	6063      	str	r3, [r4, #4]
3419311a:	6923      	ldr	r3, [r4, #16]
3419311c:	6023      	str	r3, [r4, #0]
3419311e:	89a3      	ldrh	r3, [r4, #12]
34193120:	f043 0308 	orr.w	r3, r3, #8
34193124:	81a3      	strh	r3, [r4, #12]
34193126:	6923      	ldr	r3, [r4, #16]
34193128:	b94b      	cbnz	r3, 3419313e <__swsetup_r+0x7a>
3419312a:	89a3      	ldrh	r3, [r4, #12]
3419312c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
34193130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34193134:	d003      	beq.n	3419313e <__swsetup_r+0x7a>
34193136:	4621      	mov	r1, r4
34193138:	4628      	mov	r0, r5
3419313a:	f000 feae 	bl	34193e9a <__smakebuf_r>
3419313e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34193142:	f013 0201 	ands.w	r2, r3, #1
34193146:	d00a      	beq.n	3419315e <__swsetup_r+0x9a>
34193148:	2200      	movs	r2, #0
3419314a:	60a2      	str	r2, [r4, #8]
3419314c:	6962      	ldr	r2, [r4, #20]
3419314e:	4252      	negs	r2, r2
34193150:	61a2      	str	r2, [r4, #24]
34193152:	6922      	ldr	r2, [r4, #16]
34193154:	b942      	cbnz	r2, 34193168 <__swsetup_r+0xa4>
34193156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3419315a:	d1c5      	bne.n	341930e8 <__swsetup_r+0x24>
3419315c:	bd38      	pop	{r3, r4, r5, pc}
3419315e:	0799      	lsls	r1, r3, #30
34193160:	bf58      	it	pl
34193162:	6962      	ldrpl	r2, [r4, #20]
34193164:	60a2      	str	r2, [r4, #8]
34193166:	e7f4      	b.n	34193152 <__swsetup_r+0x8e>
34193168:	2000      	movs	r0, #0
3419316a:	e7f7      	b.n	3419315c <__swsetup_r+0x98>
3419316c:	341c0148 	.word	0x341c0148

34193170 <memmove>:
34193170:	4288      	cmp	r0, r1
34193172:	b510      	push	{r4, lr}
34193174:	eb01 0402 	add.w	r4, r1, r2
34193178:	d902      	bls.n	34193180 <memmove+0x10>
3419317a:	4284      	cmp	r4, r0
3419317c:	4623      	mov	r3, r4
3419317e:	d807      	bhi.n	34193190 <memmove+0x20>
34193180:	1e43      	subs	r3, r0, #1
34193182:	42a1      	cmp	r1, r4
34193184:	d008      	beq.n	34193198 <memmove+0x28>
34193186:	f811 2b01 	ldrb.w	r2, [r1], #1
3419318a:	f803 2f01 	strb.w	r2, [r3, #1]!
3419318e:	e7f8      	b.n	34193182 <memmove+0x12>
34193190:	4402      	add	r2, r0
34193192:	4601      	mov	r1, r0
34193194:	428a      	cmp	r2, r1
34193196:	d100      	bne.n	3419319a <memmove+0x2a>
34193198:	bd10      	pop	{r4, pc}
3419319a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
3419319e:	f802 4d01 	strb.w	r4, [r2, #-1]!
341931a2:	e7f7      	b.n	34193194 <memmove+0x24>

341931a4 <memset>:
341931a4:	4402      	add	r2, r0
341931a6:	4603      	mov	r3, r0
341931a8:	4293      	cmp	r3, r2
341931aa:	d100      	bne.n	341931ae <memset+0xa>
341931ac:	4770      	bx	lr
341931ae:	f803 1b01 	strb.w	r1, [r3], #1
341931b2:	e7f9      	b.n	341931a8 <memset+0x4>

341931b4 <_close_r>:
341931b4:	b538      	push	{r3, r4, r5, lr}
341931b6:	2300      	movs	r3, #0
341931b8:	4d05      	ldr	r5, [pc, #20]	@ (341931d0 <_close_r+0x1c>)
341931ba:	4604      	mov	r4, r0
341931bc:	4608      	mov	r0, r1
341931be:	602b      	str	r3, [r5, #0]
341931c0:	f7ff f9f5 	bl	341925ae <_close>
341931c4:	1c43      	adds	r3, r0, #1
341931c6:	d102      	bne.n	341931ce <_close_r+0x1a>
341931c8:	682b      	ldr	r3, [r5, #0]
341931ca:	b103      	cbz	r3, 341931ce <_close_r+0x1a>
341931cc:	6023      	str	r3, [r4, #0]
341931ce:	bd38      	pop	{r3, r4, r5, pc}
341931d0:	341c19cc 	.word	0x341c19cc

341931d4 <_lseek_r>:
341931d4:	b538      	push	{r3, r4, r5, lr}
341931d6:	4604      	mov	r4, r0
341931d8:	4d06      	ldr	r5, [pc, #24]	@ (341931f4 <_lseek_r+0x20>)
341931da:	4608      	mov	r0, r1
341931dc:	4611      	mov	r1, r2
341931de:	2200      	movs	r2, #0
341931e0:	602a      	str	r2, [r5, #0]
341931e2:	461a      	mov	r2, r3
341931e4:	f7ff fa0a 	bl	341925fc <_lseek>
341931e8:	1c43      	adds	r3, r0, #1
341931ea:	d102      	bne.n	341931f2 <_lseek_r+0x1e>
341931ec:	682b      	ldr	r3, [r5, #0]
341931ee:	b103      	cbz	r3, 341931f2 <_lseek_r+0x1e>
341931f0:	6023      	str	r3, [r4, #0]
341931f2:	bd38      	pop	{r3, r4, r5, pc}
341931f4:	341c19cc 	.word	0x341c19cc

341931f8 <_read_r>:
341931f8:	b538      	push	{r3, r4, r5, lr}
341931fa:	4604      	mov	r4, r0
341931fc:	4d06      	ldr	r5, [pc, #24]	@ (34193218 <_read_r+0x20>)
341931fe:	4608      	mov	r0, r1
34193200:	4611      	mov	r1, r2
34193202:	2200      	movs	r2, #0
34193204:	602a      	str	r2, [r5, #0]
34193206:	461a      	mov	r2, r3
34193208:	f7ff f998 	bl	3419253c <_read>
3419320c:	1c43      	adds	r3, r0, #1
3419320e:	d102      	bne.n	34193216 <_read_r+0x1e>
34193210:	682b      	ldr	r3, [r5, #0]
34193212:	b103      	cbz	r3, 34193216 <_read_r+0x1e>
34193214:	6023      	str	r3, [r4, #0]
34193216:	bd38      	pop	{r3, r4, r5, pc}
34193218:	341c19cc 	.word	0x341c19cc

3419321c <_write_r>:
3419321c:	b538      	push	{r3, r4, r5, lr}
3419321e:	4604      	mov	r4, r0
34193220:	4d06      	ldr	r5, [pc, #24]	@ (3419323c <_write_r+0x20>)
34193222:	4608      	mov	r0, r1
34193224:	4611      	mov	r1, r2
34193226:	2200      	movs	r2, #0
34193228:	602a      	str	r2, [r5, #0]
3419322a:	461a      	mov	r2, r3
3419322c:	f7ff f9a3 	bl	34192576 <_write>
34193230:	1c43      	adds	r3, r0, #1
34193232:	d102      	bne.n	3419323a <_write_r+0x1e>
34193234:	682b      	ldr	r3, [r5, #0]
34193236:	b103      	cbz	r3, 3419323a <_write_r+0x1e>
34193238:	6023      	str	r3, [r4, #0]
3419323a:	bd38      	pop	{r3, r4, r5, pc}
3419323c:	341c19cc 	.word	0x341c19cc

34193240 <__errno>:
34193240:	4b01      	ldr	r3, [pc, #4]	@ (34193248 <__errno+0x8>)
34193242:	6818      	ldr	r0, [r3, #0]
34193244:	4770      	bx	lr
34193246:	bf00      	nop
34193248:	341c0148 	.word	0x341c0148

3419324c <__libc_init_array>:
3419324c:	b570      	push	{r4, r5, r6, lr}
3419324e:	4d0d      	ldr	r5, [pc, #52]	@ (34193284 <__libc_init_array+0x38>)
34193250:	2600      	movs	r6, #0
34193252:	4c0d      	ldr	r4, [pc, #52]	@ (34193288 <__libc_init_array+0x3c>)
34193254:	1b64      	subs	r4, r4, r5
34193256:	10a4      	asrs	r4, r4, #2
34193258:	42a6      	cmp	r6, r4
3419325a:	d109      	bne.n	34193270 <__libc_init_array+0x24>
3419325c:	4d0b      	ldr	r5, [pc, #44]	@ (3419328c <__libc_init_array+0x40>)
3419325e:	2600      	movs	r6, #0
34193260:	4c0b      	ldr	r4, [pc, #44]	@ (34193290 <__libc_init_array+0x44>)
34193262:	f001 fd55 	bl	34194d10 <_init>
34193266:	1b64      	subs	r4, r4, r5
34193268:	10a4      	asrs	r4, r4, #2
3419326a:	42a6      	cmp	r6, r4
3419326c:	d105      	bne.n	3419327a <__libc_init_array+0x2e>
3419326e:	bd70      	pop	{r4, r5, r6, pc}
34193270:	f855 3b04 	ldr.w	r3, [r5], #4
34193274:	3601      	adds	r6, #1
34193276:	4798      	blx	r3
34193278:	e7ee      	b.n	34193258 <__libc_init_array+0xc>
3419327a:	f855 3b04 	ldr.w	r3, [r5], #4
3419327e:	3601      	adds	r6, #1
34193280:	4798      	blx	r3
34193282:	e7f2      	b.n	3419326a <__libc_init_array+0x1e>
34193284:	3419824c 	.word	0x3419824c
34193288:	3419824c 	.word	0x3419824c
3419328c:	3419824c 	.word	0x3419824c
34193290:	34198250 	.word	0x34198250

34193294 <__retarget_lock_init_recursive>:
34193294:	4770      	bx	lr

34193296 <__retarget_lock_acquire_recursive>:
34193296:	4770      	bx	lr

34193298 <__retarget_lock_release_recursive>:
34193298:	4770      	bx	lr

3419329a <memcpy>:
3419329a:	440a      	add	r2, r1
3419329c:	1e43      	subs	r3, r0, #1
3419329e:	4291      	cmp	r1, r2
341932a0:	d100      	bne.n	341932a4 <memcpy+0xa>
341932a2:	4770      	bx	lr
341932a4:	b510      	push	{r4, lr}
341932a6:	f811 4b01 	ldrb.w	r4, [r1], #1
341932aa:	4291      	cmp	r1, r2
341932ac:	f803 4f01 	strb.w	r4, [r3, #1]!
341932b0:	d1f9      	bne.n	341932a6 <memcpy+0xc>
341932b2:	bd10      	pop	{r4, pc}

341932b4 <_free_r>:
341932b4:	b538      	push	{r3, r4, r5, lr}
341932b6:	4605      	mov	r5, r0
341932b8:	2900      	cmp	r1, #0
341932ba:	d041      	beq.n	34193340 <_free_r+0x8c>
341932bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
341932c0:	1f0c      	subs	r4, r1, #4
341932c2:	2b00      	cmp	r3, #0
341932c4:	bfb8      	it	lt
341932c6:	18e4      	addlt	r4, r4, r3
341932c8:	f000 f8e0 	bl	3419348c <__malloc_lock>
341932cc:	4a1d      	ldr	r2, [pc, #116]	@ (34193344 <_free_r+0x90>)
341932ce:	6813      	ldr	r3, [r2, #0]
341932d0:	b933      	cbnz	r3, 341932e0 <_free_r+0x2c>
341932d2:	6063      	str	r3, [r4, #4]
341932d4:	6014      	str	r4, [r2, #0]
341932d6:	4628      	mov	r0, r5
341932d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
341932dc:	f000 b8dc 	b.w	34193498 <__malloc_unlock>
341932e0:	42a3      	cmp	r3, r4
341932e2:	d908      	bls.n	341932f6 <_free_r+0x42>
341932e4:	6820      	ldr	r0, [r4, #0]
341932e6:	1821      	adds	r1, r4, r0
341932e8:	428b      	cmp	r3, r1
341932ea:	bf01      	itttt	eq
341932ec:	6819      	ldreq	r1, [r3, #0]
341932ee:	685b      	ldreq	r3, [r3, #4]
341932f0:	1809      	addeq	r1, r1, r0
341932f2:	6021      	streq	r1, [r4, #0]
341932f4:	e7ed      	b.n	341932d2 <_free_r+0x1e>
341932f6:	461a      	mov	r2, r3
341932f8:	685b      	ldr	r3, [r3, #4]
341932fa:	b10b      	cbz	r3, 34193300 <_free_r+0x4c>
341932fc:	42a3      	cmp	r3, r4
341932fe:	d9fa      	bls.n	341932f6 <_free_r+0x42>
34193300:	6811      	ldr	r1, [r2, #0]
34193302:	1850      	adds	r0, r2, r1
34193304:	42a0      	cmp	r0, r4
34193306:	d10b      	bne.n	34193320 <_free_r+0x6c>
34193308:	6820      	ldr	r0, [r4, #0]
3419330a:	4401      	add	r1, r0
3419330c:	1850      	adds	r0, r2, r1
3419330e:	6011      	str	r1, [r2, #0]
34193310:	4283      	cmp	r3, r0
34193312:	d1e0      	bne.n	341932d6 <_free_r+0x22>
34193314:	6818      	ldr	r0, [r3, #0]
34193316:	685b      	ldr	r3, [r3, #4]
34193318:	4408      	add	r0, r1
3419331a:	6053      	str	r3, [r2, #4]
3419331c:	6010      	str	r0, [r2, #0]
3419331e:	e7da      	b.n	341932d6 <_free_r+0x22>
34193320:	d902      	bls.n	34193328 <_free_r+0x74>
34193322:	230c      	movs	r3, #12
34193324:	602b      	str	r3, [r5, #0]
34193326:	e7d6      	b.n	341932d6 <_free_r+0x22>
34193328:	6820      	ldr	r0, [r4, #0]
3419332a:	1821      	adds	r1, r4, r0
3419332c:	428b      	cmp	r3, r1
3419332e:	bf02      	ittt	eq
34193330:	6819      	ldreq	r1, [r3, #0]
34193332:	685b      	ldreq	r3, [r3, #4]
34193334:	1809      	addeq	r1, r1, r0
34193336:	6063      	str	r3, [r4, #4]
34193338:	bf08      	it	eq
3419333a:	6021      	streq	r1, [r4, #0]
3419333c:	6054      	str	r4, [r2, #4]
3419333e:	e7ca      	b.n	341932d6 <_free_r+0x22>
34193340:	bd38      	pop	{r3, r4, r5, pc}
34193342:	bf00      	nop
34193344:	341c19d8 	.word	0x341c19d8

34193348 <sbrk_aligned>:
34193348:	b570      	push	{r4, r5, r6, lr}
3419334a:	4e0f      	ldr	r6, [pc, #60]	@ (34193388 <sbrk_aligned+0x40>)
3419334c:	460c      	mov	r4, r1
3419334e:	4605      	mov	r5, r0
34193350:	6831      	ldr	r1, [r6, #0]
34193352:	b911      	cbnz	r1, 3419335a <sbrk_aligned+0x12>
34193354:	f000 fe00 	bl	34193f58 <_sbrk_r>
34193358:	6030      	str	r0, [r6, #0]
3419335a:	4621      	mov	r1, r4
3419335c:	4628      	mov	r0, r5
3419335e:	f000 fdfb 	bl	34193f58 <_sbrk_r>
34193362:	1c43      	adds	r3, r0, #1
34193364:	d103      	bne.n	3419336e <sbrk_aligned+0x26>
34193366:	f04f 34ff 	mov.w	r4, #4294967295
3419336a:	4620      	mov	r0, r4
3419336c:	bd70      	pop	{r4, r5, r6, pc}
3419336e:	1cc4      	adds	r4, r0, #3
34193370:	f024 0403 	bic.w	r4, r4, #3
34193374:	42a0      	cmp	r0, r4
34193376:	d0f8      	beq.n	3419336a <sbrk_aligned+0x22>
34193378:	1a21      	subs	r1, r4, r0
3419337a:	4628      	mov	r0, r5
3419337c:	f000 fdec 	bl	34193f58 <_sbrk_r>
34193380:	3001      	adds	r0, #1
34193382:	d1f2      	bne.n	3419336a <sbrk_aligned+0x22>
34193384:	e7ef      	b.n	34193366 <sbrk_aligned+0x1e>
34193386:	bf00      	nop
34193388:	341c19d4 	.word	0x341c19d4

3419338c <_malloc_r>:
3419338c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34193390:	1ccd      	adds	r5, r1, #3
34193392:	4606      	mov	r6, r0
34193394:	f025 0503 	bic.w	r5, r5, #3
34193398:	3508      	adds	r5, #8
3419339a:	2d0c      	cmp	r5, #12
3419339c:	bf38      	it	cc
3419339e:	250c      	movcc	r5, #12
341933a0:	2d00      	cmp	r5, #0
341933a2:	db01      	blt.n	341933a8 <_malloc_r+0x1c>
341933a4:	42a9      	cmp	r1, r5
341933a6:	d904      	bls.n	341933b2 <_malloc_r+0x26>
341933a8:	230c      	movs	r3, #12
341933aa:	6033      	str	r3, [r6, #0]
341933ac:	2000      	movs	r0, #0
341933ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
341933b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 34193488 <_malloc_r+0xfc>
341933b6:	f000 f869 	bl	3419348c <__malloc_lock>
341933ba:	f8d8 3000 	ldr.w	r3, [r8]
341933be:	461c      	mov	r4, r3
341933c0:	bb44      	cbnz	r4, 34193414 <_malloc_r+0x88>
341933c2:	4629      	mov	r1, r5
341933c4:	4630      	mov	r0, r6
341933c6:	f7ff ffbf 	bl	34193348 <sbrk_aligned>
341933ca:	1c43      	adds	r3, r0, #1
341933cc:	4604      	mov	r4, r0
341933ce:	d158      	bne.n	34193482 <_malloc_r+0xf6>
341933d0:	f8d8 4000 	ldr.w	r4, [r8]
341933d4:	4627      	mov	r7, r4
341933d6:	2f00      	cmp	r7, #0
341933d8:	d143      	bne.n	34193462 <_malloc_r+0xd6>
341933da:	2c00      	cmp	r4, #0
341933dc:	d04b      	beq.n	34193476 <_malloc_r+0xea>
341933de:	6823      	ldr	r3, [r4, #0]
341933e0:	4639      	mov	r1, r7
341933e2:	4630      	mov	r0, r6
341933e4:	eb04 0903 	add.w	r9, r4, r3
341933e8:	f000 fdb6 	bl	34193f58 <_sbrk_r>
341933ec:	4581      	cmp	r9, r0
341933ee:	d142      	bne.n	34193476 <_malloc_r+0xea>
341933f0:	6821      	ldr	r1, [r4, #0]
341933f2:	4630      	mov	r0, r6
341933f4:	1a6d      	subs	r5, r5, r1
341933f6:	4629      	mov	r1, r5
341933f8:	f7ff ffa6 	bl	34193348 <sbrk_aligned>
341933fc:	3001      	adds	r0, #1
341933fe:	d03a      	beq.n	34193476 <_malloc_r+0xea>
34193400:	6823      	ldr	r3, [r4, #0]
34193402:	442b      	add	r3, r5
34193404:	6023      	str	r3, [r4, #0]
34193406:	f8d8 3000 	ldr.w	r3, [r8]
3419340a:	685a      	ldr	r2, [r3, #4]
3419340c:	bb62      	cbnz	r2, 34193468 <_malloc_r+0xdc>
3419340e:	f8c8 7000 	str.w	r7, [r8]
34193412:	e00f      	b.n	34193434 <_malloc_r+0xa8>
34193414:	6822      	ldr	r2, [r4, #0]
34193416:	1b52      	subs	r2, r2, r5
34193418:	d420      	bmi.n	3419345c <_malloc_r+0xd0>
3419341a:	2a0b      	cmp	r2, #11
3419341c:	d917      	bls.n	3419344e <_malloc_r+0xc2>
3419341e:	1961      	adds	r1, r4, r5
34193420:	42a3      	cmp	r3, r4
34193422:	6025      	str	r5, [r4, #0]
34193424:	bf18      	it	ne
34193426:	6059      	strne	r1, [r3, #4]
34193428:	6863      	ldr	r3, [r4, #4]
3419342a:	bf08      	it	eq
3419342c:	f8c8 1000 	streq.w	r1, [r8]
34193430:	5162      	str	r2, [r4, r5]
34193432:	604b      	str	r3, [r1, #4]
34193434:	4630      	mov	r0, r6
34193436:	f000 f82f 	bl	34193498 <__malloc_unlock>
3419343a:	f104 000b 	add.w	r0, r4, #11
3419343e:	1d23      	adds	r3, r4, #4
34193440:	f020 0007 	bic.w	r0, r0, #7
34193444:	1ac2      	subs	r2, r0, r3
34193446:	bf1c      	itt	ne
34193448:	1a1b      	subne	r3, r3, r0
3419344a:	50a3      	strne	r3, [r4, r2]
3419344c:	e7af      	b.n	341933ae <_malloc_r+0x22>
3419344e:	6862      	ldr	r2, [r4, #4]
34193450:	42a3      	cmp	r3, r4
34193452:	bf0c      	ite	eq
34193454:	f8c8 2000 	streq.w	r2, [r8]
34193458:	605a      	strne	r2, [r3, #4]
3419345a:	e7eb      	b.n	34193434 <_malloc_r+0xa8>
3419345c:	4623      	mov	r3, r4
3419345e:	6864      	ldr	r4, [r4, #4]
34193460:	e7ae      	b.n	341933c0 <_malloc_r+0x34>
34193462:	463c      	mov	r4, r7
34193464:	687f      	ldr	r7, [r7, #4]
34193466:	e7b6      	b.n	341933d6 <_malloc_r+0x4a>
34193468:	461a      	mov	r2, r3
3419346a:	685b      	ldr	r3, [r3, #4]
3419346c:	42a3      	cmp	r3, r4
3419346e:	d1fb      	bne.n	34193468 <_malloc_r+0xdc>
34193470:	2300      	movs	r3, #0
34193472:	6053      	str	r3, [r2, #4]
34193474:	e7de      	b.n	34193434 <_malloc_r+0xa8>
34193476:	230c      	movs	r3, #12
34193478:	4630      	mov	r0, r6
3419347a:	6033      	str	r3, [r6, #0]
3419347c:	f000 f80c 	bl	34193498 <__malloc_unlock>
34193480:	e794      	b.n	341933ac <_malloc_r+0x20>
34193482:	6005      	str	r5, [r0, #0]
34193484:	e7d6      	b.n	34193434 <_malloc_r+0xa8>
34193486:	bf00      	nop
34193488:	341c19d8 	.word	0x341c19d8

3419348c <__malloc_lock>:
3419348c:	4801      	ldr	r0, [pc, #4]	@ (34193494 <__malloc_lock+0x8>)
3419348e:	f7ff bf02 	b.w	34193296 <__retarget_lock_acquire_recursive>
34193492:	bf00      	nop
34193494:	341c19d0 	.word	0x341c19d0

34193498 <__malloc_unlock>:
34193498:	4801      	ldr	r0, [pc, #4]	@ (341934a0 <__malloc_unlock+0x8>)
3419349a:	f7ff befd 	b.w	34193298 <__retarget_lock_release_recursive>
3419349e:	bf00      	nop
341934a0:	341c19d0 	.word	0x341c19d0

341934a4 <__ssputs_r>:
341934a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
341934a8:	461f      	mov	r7, r3
341934aa:	688e      	ldr	r6, [r1, #8]
341934ac:	4682      	mov	sl, r0
341934ae:	460c      	mov	r4, r1
341934b0:	42be      	cmp	r6, r7
341934b2:	4690      	mov	r8, r2
341934b4:	680b      	ldr	r3, [r1, #0]
341934b6:	d82d      	bhi.n	34193514 <__ssputs_r+0x70>
341934b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
341934bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
341934c0:	d026      	beq.n	34193510 <__ssputs_r+0x6c>
341934c2:	6965      	ldr	r5, [r4, #20]
341934c4:	6909      	ldr	r1, [r1, #16]
341934c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
341934ca:	eba3 0901 	sub.w	r9, r3, r1
341934ce:	1c7b      	adds	r3, r7, #1
341934d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
341934d4:	444b      	add	r3, r9
341934d6:	106d      	asrs	r5, r5, #1
341934d8:	429d      	cmp	r5, r3
341934da:	bf38      	it	cc
341934dc:	461d      	movcc	r5, r3
341934de:	0553      	lsls	r3, r2, #21
341934e0:	d527      	bpl.n	34193532 <__ssputs_r+0x8e>
341934e2:	4629      	mov	r1, r5
341934e4:	f7ff ff52 	bl	3419338c <_malloc_r>
341934e8:	4606      	mov	r6, r0
341934ea:	b360      	cbz	r0, 34193546 <__ssputs_r+0xa2>
341934ec:	464a      	mov	r2, r9
341934ee:	6921      	ldr	r1, [r4, #16]
341934f0:	f7ff fed3 	bl	3419329a <memcpy>
341934f4:	89a3      	ldrh	r3, [r4, #12]
341934f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
341934fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
341934fe:	81a3      	strh	r3, [r4, #12]
34193500:	6126      	str	r6, [r4, #16]
34193502:	444e      	add	r6, r9
34193504:	6165      	str	r5, [r4, #20]
34193506:	eba5 0509 	sub.w	r5, r5, r9
3419350a:	6026      	str	r6, [r4, #0]
3419350c:	463e      	mov	r6, r7
3419350e:	60a5      	str	r5, [r4, #8]
34193510:	42be      	cmp	r6, r7
34193512:	d900      	bls.n	34193516 <__ssputs_r+0x72>
34193514:	463e      	mov	r6, r7
34193516:	4632      	mov	r2, r6
34193518:	4641      	mov	r1, r8
3419351a:	6820      	ldr	r0, [r4, #0]
3419351c:	f7ff fe28 	bl	34193170 <memmove>
34193520:	68a3      	ldr	r3, [r4, #8]
34193522:	2000      	movs	r0, #0
34193524:	1b9b      	subs	r3, r3, r6
34193526:	60a3      	str	r3, [r4, #8]
34193528:	6823      	ldr	r3, [r4, #0]
3419352a:	4433      	add	r3, r6
3419352c:	6023      	str	r3, [r4, #0]
3419352e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34193532:	462a      	mov	r2, r5
34193534:	f000 fd2e 	bl	34193f94 <_realloc_r>
34193538:	4606      	mov	r6, r0
3419353a:	2800      	cmp	r0, #0
3419353c:	d1e0      	bne.n	34193500 <__ssputs_r+0x5c>
3419353e:	6921      	ldr	r1, [r4, #16]
34193540:	4650      	mov	r0, sl
34193542:	f7ff feb7 	bl	341932b4 <_free_r>
34193546:	230c      	movs	r3, #12
34193548:	f04f 30ff 	mov.w	r0, #4294967295
3419354c:	f8ca 3000 	str.w	r3, [sl]
34193550:	89a3      	ldrh	r3, [r4, #12]
34193552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34193556:	81a3      	strh	r3, [r4, #12]
34193558:	e7e9      	b.n	3419352e <__ssputs_r+0x8a>
	...

3419355c <_svfiprintf_r>:
3419355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34193560:	4698      	mov	r8, r3
34193562:	898b      	ldrh	r3, [r1, #12]
34193564:	b09d      	sub	sp, #116	@ 0x74
34193566:	4607      	mov	r7, r0
34193568:	061b      	lsls	r3, r3, #24
3419356a:	460d      	mov	r5, r1
3419356c:	4614      	mov	r4, r2
3419356e:	d510      	bpl.n	34193592 <_svfiprintf_r+0x36>
34193570:	690b      	ldr	r3, [r1, #16]
34193572:	b973      	cbnz	r3, 34193592 <_svfiprintf_r+0x36>
34193574:	2140      	movs	r1, #64	@ 0x40
34193576:	f7ff ff09 	bl	3419338c <_malloc_r>
3419357a:	6028      	str	r0, [r5, #0]
3419357c:	6128      	str	r0, [r5, #16]
3419357e:	b930      	cbnz	r0, 3419358e <_svfiprintf_r+0x32>
34193580:	230c      	movs	r3, #12
34193582:	603b      	str	r3, [r7, #0]
34193584:	f04f 30ff 	mov.w	r0, #4294967295
34193588:	b01d      	add	sp, #116	@ 0x74
3419358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3419358e:	2340      	movs	r3, #64	@ 0x40
34193590:	616b      	str	r3, [r5, #20]
34193592:	2300      	movs	r3, #0
34193594:	f8cd 800c 	str.w	r8, [sp, #12]
34193598:	f04f 0901 	mov.w	r9, #1
3419359c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 34193740 <_svfiprintf_r+0x1e4>
341935a0:	9309      	str	r3, [sp, #36]	@ 0x24
341935a2:	2320      	movs	r3, #32
341935a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
341935a8:	2330      	movs	r3, #48	@ 0x30
341935aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
341935ae:	4623      	mov	r3, r4
341935b0:	469a      	mov	sl, r3
341935b2:	f813 2b01 	ldrb.w	r2, [r3], #1
341935b6:	b10a      	cbz	r2, 341935bc <_svfiprintf_r+0x60>
341935b8:	2a25      	cmp	r2, #37	@ 0x25
341935ba:	d1f9      	bne.n	341935b0 <_svfiprintf_r+0x54>
341935bc:	ebba 0b04 	subs.w	fp, sl, r4
341935c0:	d00b      	beq.n	341935da <_svfiprintf_r+0x7e>
341935c2:	465b      	mov	r3, fp
341935c4:	4622      	mov	r2, r4
341935c6:	4629      	mov	r1, r5
341935c8:	4638      	mov	r0, r7
341935ca:	f7ff ff6b 	bl	341934a4 <__ssputs_r>
341935ce:	3001      	adds	r0, #1
341935d0:	f000 80a7 	beq.w	34193722 <_svfiprintf_r+0x1c6>
341935d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
341935d6:	445a      	add	r2, fp
341935d8:	9209      	str	r2, [sp, #36]	@ 0x24
341935da:	f89a 3000 	ldrb.w	r3, [sl]
341935de:	2b00      	cmp	r3, #0
341935e0:	f000 809f 	beq.w	34193722 <_svfiprintf_r+0x1c6>
341935e4:	2300      	movs	r3, #0
341935e6:	f04f 32ff 	mov.w	r2, #4294967295
341935ea:	f10a 0a01 	add.w	sl, sl, #1
341935ee:	9304      	str	r3, [sp, #16]
341935f0:	9307      	str	r3, [sp, #28]
341935f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
341935f6:	931a      	str	r3, [sp, #104]	@ 0x68
341935f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
341935fc:	4654      	mov	r4, sl
341935fe:	2205      	movs	r2, #5
34193600:	484f      	ldr	r0, [pc, #316]	@ (34193740 <_svfiprintf_r+0x1e4>)
34193602:	f814 1b01 	ldrb.w	r1, [r4], #1
34193606:	f000 fcb7 	bl	34193f78 <memchr>
3419360a:	9a04      	ldr	r2, [sp, #16]
3419360c:	b9d8      	cbnz	r0, 34193646 <_svfiprintf_r+0xea>
3419360e:	06d0      	lsls	r0, r2, #27
34193610:	bf44      	itt	mi
34193612:	2320      	movmi	r3, #32
34193614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34193618:	0711      	lsls	r1, r2, #28
3419361a:	bf44      	itt	mi
3419361c:	232b      	movmi	r3, #43	@ 0x2b
3419361e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34193622:	f89a 3000 	ldrb.w	r3, [sl]
34193626:	2b2a      	cmp	r3, #42	@ 0x2a
34193628:	d015      	beq.n	34193656 <_svfiprintf_r+0xfa>
3419362a:	9a07      	ldr	r2, [sp, #28]
3419362c:	4654      	mov	r4, sl
3419362e:	2000      	movs	r0, #0
34193630:	f04f 0c0a 	mov.w	ip, #10
34193634:	4621      	mov	r1, r4
34193636:	f811 3b01 	ldrb.w	r3, [r1], #1
3419363a:	3b30      	subs	r3, #48	@ 0x30
3419363c:	2b09      	cmp	r3, #9
3419363e:	d94b      	bls.n	341936d8 <_svfiprintf_r+0x17c>
34193640:	b1b0      	cbz	r0, 34193670 <_svfiprintf_r+0x114>
34193642:	9207      	str	r2, [sp, #28]
34193644:	e014      	b.n	34193670 <_svfiprintf_r+0x114>
34193646:	eba0 0308 	sub.w	r3, r0, r8
3419364a:	46a2      	mov	sl, r4
3419364c:	fa09 f303 	lsl.w	r3, r9, r3
34193650:	4313      	orrs	r3, r2
34193652:	9304      	str	r3, [sp, #16]
34193654:	e7d2      	b.n	341935fc <_svfiprintf_r+0xa0>
34193656:	9b03      	ldr	r3, [sp, #12]
34193658:	1d19      	adds	r1, r3, #4
3419365a:	681b      	ldr	r3, [r3, #0]
3419365c:	2b00      	cmp	r3, #0
3419365e:	9103      	str	r1, [sp, #12]
34193660:	bfbb      	ittet	lt
34193662:	425b      	neglt	r3, r3
34193664:	f042 0202 	orrlt.w	r2, r2, #2
34193668:	9307      	strge	r3, [sp, #28]
3419366a:	9307      	strlt	r3, [sp, #28]
3419366c:	bfb8      	it	lt
3419366e:	9204      	strlt	r2, [sp, #16]
34193670:	7823      	ldrb	r3, [r4, #0]
34193672:	2b2e      	cmp	r3, #46	@ 0x2e
34193674:	d10a      	bne.n	3419368c <_svfiprintf_r+0x130>
34193676:	7863      	ldrb	r3, [r4, #1]
34193678:	2b2a      	cmp	r3, #42	@ 0x2a
3419367a:	d132      	bne.n	341936e2 <_svfiprintf_r+0x186>
3419367c:	9b03      	ldr	r3, [sp, #12]
3419367e:	3402      	adds	r4, #2
34193680:	1d1a      	adds	r2, r3, #4
34193682:	681b      	ldr	r3, [r3, #0]
34193684:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
34193688:	9203      	str	r2, [sp, #12]
3419368a:	9305      	str	r3, [sp, #20]
3419368c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 34193750 <_svfiprintf_r+0x1f4>
34193690:	2203      	movs	r2, #3
34193692:	7821      	ldrb	r1, [r4, #0]
34193694:	4650      	mov	r0, sl
34193696:	f000 fc6f 	bl	34193f78 <memchr>
3419369a:	b138      	cbz	r0, 341936ac <_svfiprintf_r+0x150>
3419369c:	eba0 000a 	sub.w	r0, r0, sl
341936a0:	2240      	movs	r2, #64	@ 0x40
341936a2:	9b04      	ldr	r3, [sp, #16]
341936a4:	3401      	adds	r4, #1
341936a6:	4082      	lsls	r2, r0
341936a8:	4313      	orrs	r3, r2
341936aa:	9304      	str	r3, [sp, #16]
341936ac:	f814 1b01 	ldrb.w	r1, [r4], #1
341936b0:	2206      	movs	r2, #6
341936b2:	4824      	ldr	r0, [pc, #144]	@ (34193744 <_svfiprintf_r+0x1e8>)
341936b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
341936b8:	f000 fc5e 	bl	34193f78 <memchr>
341936bc:	2800      	cmp	r0, #0
341936be:	d036      	beq.n	3419372e <_svfiprintf_r+0x1d2>
341936c0:	4b21      	ldr	r3, [pc, #132]	@ (34193748 <_svfiprintf_r+0x1ec>)
341936c2:	bb1b      	cbnz	r3, 3419370c <_svfiprintf_r+0x1b0>
341936c4:	9b03      	ldr	r3, [sp, #12]
341936c6:	3307      	adds	r3, #7
341936c8:	f023 0307 	bic.w	r3, r3, #7
341936cc:	3308      	adds	r3, #8
341936ce:	9303      	str	r3, [sp, #12]
341936d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
341936d2:	4433      	add	r3, r6
341936d4:	9309      	str	r3, [sp, #36]	@ 0x24
341936d6:	e76a      	b.n	341935ae <_svfiprintf_r+0x52>
341936d8:	fb0c 3202 	mla	r2, ip, r2, r3
341936dc:	460c      	mov	r4, r1
341936de:	2001      	movs	r0, #1
341936e0:	e7a8      	b.n	34193634 <_svfiprintf_r+0xd8>
341936e2:	2300      	movs	r3, #0
341936e4:	3401      	adds	r4, #1
341936e6:	f04f 0c0a 	mov.w	ip, #10
341936ea:	4619      	mov	r1, r3
341936ec:	9305      	str	r3, [sp, #20]
341936ee:	4620      	mov	r0, r4
341936f0:	f810 2b01 	ldrb.w	r2, [r0], #1
341936f4:	3a30      	subs	r2, #48	@ 0x30
341936f6:	2a09      	cmp	r2, #9
341936f8:	d903      	bls.n	34193702 <_svfiprintf_r+0x1a6>
341936fa:	2b00      	cmp	r3, #0
341936fc:	d0c6      	beq.n	3419368c <_svfiprintf_r+0x130>
341936fe:	9105      	str	r1, [sp, #20]
34193700:	e7c4      	b.n	3419368c <_svfiprintf_r+0x130>
34193702:	fb0c 2101 	mla	r1, ip, r1, r2
34193706:	4604      	mov	r4, r0
34193708:	2301      	movs	r3, #1
3419370a:	e7f0      	b.n	341936ee <_svfiprintf_r+0x192>
3419370c:	ab03      	add	r3, sp, #12
3419370e:	462a      	mov	r2, r5
34193710:	a904      	add	r1, sp, #16
34193712:	4638      	mov	r0, r7
34193714:	9300      	str	r3, [sp, #0]
34193716:	4b0d      	ldr	r3, [pc, #52]	@ (3419374c <_svfiprintf_r+0x1f0>)
34193718:	f3af 8000 	nop.w
3419371c:	1c42      	adds	r2, r0, #1
3419371e:	4606      	mov	r6, r0
34193720:	d1d6      	bne.n	341936d0 <_svfiprintf_r+0x174>
34193722:	89ab      	ldrh	r3, [r5, #12]
34193724:	065b      	lsls	r3, r3, #25
34193726:	f53f af2d 	bmi.w	34193584 <_svfiprintf_r+0x28>
3419372a:	9809      	ldr	r0, [sp, #36]	@ 0x24
3419372c:	e72c      	b.n	34193588 <_svfiprintf_r+0x2c>
3419372e:	ab03      	add	r3, sp, #12
34193730:	462a      	mov	r2, r5
34193732:	a904      	add	r1, sp, #16
34193734:	4638      	mov	r0, r7
34193736:	9300      	str	r3, [sp, #0]
34193738:	4b04      	ldr	r3, [pc, #16]	@ (3419374c <_svfiprintf_r+0x1f0>)
3419373a:	f000 f9bf 	bl	34193abc <_printf_i>
3419373e:	e7ed      	b.n	3419371c <_svfiprintf_r+0x1c0>
34193740:	34195e49 	.word	0x34195e49
34193744:	34195e53 	.word	0x34195e53
34193748:	00000000 	.word	0x00000000
3419374c:	341934a5 	.word	0x341934a5
34193750:	34195e4f 	.word	0x34195e4f

34193754 <__sfputc_r>:
34193754:	6893      	ldr	r3, [r2, #8]
34193756:	3b01      	subs	r3, #1
34193758:	2b00      	cmp	r3, #0
3419375a:	b410      	push	{r4}
3419375c:	6093      	str	r3, [r2, #8]
3419375e:	da08      	bge.n	34193772 <__sfputc_r+0x1e>
34193760:	6994      	ldr	r4, [r2, #24]
34193762:	42a3      	cmp	r3, r4
34193764:	db01      	blt.n	3419376a <__sfputc_r+0x16>
34193766:	290a      	cmp	r1, #10
34193768:	d103      	bne.n	34193772 <__sfputc_r+0x1e>
3419376a:	f85d 4b04 	ldr.w	r4, [sp], #4
3419376e:	f7ff bc6a 	b.w	34193046 <__swbuf_r>
34193772:	6813      	ldr	r3, [r2, #0]
34193774:	1c58      	adds	r0, r3, #1
34193776:	6010      	str	r0, [r2, #0]
34193778:	4608      	mov	r0, r1
3419377a:	7019      	strb	r1, [r3, #0]
3419377c:	f85d 4b04 	ldr.w	r4, [sp], #4
34193780:	4770      	bx	lr

34193782 <__sfputs_r>:
34193782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34193784:	4606      	mov	r6, r0
34193786:	460f      	mov	r7, r1
34193788:	4614      	mov	r4, r2
3419378a:	18d5      	adds	r5, r2, r3
3419378c:	42ac      	cmp	r4, r5
3419378e:	d101      	bne.n	34193794 <__sfputs_r+0x12>
34193790:	2000      	movs	r0, #0
34193792:	e007      	b.n	341937a4 <__sfputs_r+0x22>
34193794:	463a      	mov	r2, r7
34193796:	f814 1b01 	ldrb.w	r1, [r4], #1
3419379a:	4630      	mov	r0, r6
3419379c:	f7ff ffda 	bl	34193754 <__sfputc_r>
341937a0:	1c43      	adds	r3, r0, #1
341937a2:	d1f3      	bne.n	3419378c <__sfputs_r+0xa>
341937a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

341937a8 <_vfiprintf_r>:
341937a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341937ac:	460d      	mov	r5, r1
341937ae:	b09d      	sub	sp, #116	@ 0x74
341937b0:	4614      	mov	r4, r2
341937b2:	4698      	mov	r8, r3
341937b4:	4606      	mov	r6, r0
341937b6:	b118      	cbz	r0, 341937c0 <_vfiprintf_r+0x18>
341937b8:	6a03      	ldr	r3, [r0, #32]
341937ba:	b90b      	cbnz	r3, 341937c0 <_vfiprintf_r+0x18>
341937bc:	f7ff fb24 	bl	34192e08 <__sinit>
341937c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
341937c2:	07d9      	lsls	r1, r3, #31
341937c4:	d405      	bmi.n	341937d2 <_vfiprintf_r+0x2a>
341937c6:	89ab      	ldrh	r3, [r5, #12]
341937c8:	059a      	lsls	r2, r3, #22
341937ca:	d402      	bmi.n	341937d2 <_vfiprintf_r+0x2a>
341937cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
341937ce:	f7ff fd62 	bl	34193296 <__retarget_lock_acquire_recursive>
341937d2:	89ab      	ldrh	r3, [r5, #12]
341937d4:	071b      	lsls	r3, r3, #28
341937d6:	d501      	bpl.n	341937dc <_vfiprintf_r+0x34>
341937d8:	692b      	ldr	r3, [r5, #16]
341937da:	b99b      	cbnz	r3, 34193804 <_vfiprintf_r+0x5c>
341937dc:	4629      	mov	r1, r5
341937de:	4630      	mov	r0, r6
341937e0:	f7ff fc70 	bl	341930c4 <__swsetup_r>
341937e4:	b170      	cbz	r0, 34193804 <_vfiprintf_r+0x5c>
341937e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
341937e8:	07dc      	lsls	r4, r3, #31
341937ea:	d504      	bpl.n	341937f6 <_vfiprintf_r+0x4e>
341937ec:	f04f 30ff 	mov.w	r0, #4294967295
341937f0:	b01d      	add	sp, #116	@ 0x74
341937f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
341937f6:	89ab      	ldrh	r3, [r5, #12]
341937f8:	0598      	lsls	r0, r3, #22
341937fa:	d4f7      	bmi.n	341937ec <_vfiprintf_r+0x44>
341937fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
341937fe:	f7ff fd4b 	bl	34193298 <__retarget_lock_release_recursive>
34193802:	e7f3      	b.n	341937ec <_vfiprintf_r+0x44>
34193804:	2300      	movs	r3, #0
34193806:	f8cd 800c 	str.w	r8, [sp, #12]
3419380a:	f04f 0901 	mov.w	r9, #1
3419380e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 341939c4 <_vfiprintf_r+0x21c>
34193812:	9309      	str	r3, [sp, #36]	@ 0x24
34193814:	2320      	movs	r3, #32
34193816:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3419381a:	2330      	movs	r3, #48	@ 0x30
3419381c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
34193820:	4623      	mov	r3, r4
34193822:	469a      	mov	sl, r3
34193824:	f813 2b01 	ldrb.w	r2, [r3], #1
34193828:	b10a      	cbz	r2, 3419382e <_vfiprintf_r+0x86>
3419382a:	2a25      	cmp	r2, #37	@ 0x25
3419382c:	d1f9      	bne.n	34193822 <_vfiprintf_r+0x7a>
3419382e:	ebba 0b04 	subs.w	fp, sl, r4
34193832:	d00b      	beq.n	3419384c <_vfiprintf_r+0xa4>
34193834:	465b      	mov	r3, fp
34193836:	4622      	mov	r2, r4
34193838:	4629      	mov	r1, r5
3419383a:	4630      	mov	r0, r6
3419383c:	f7ff ffa1 	bl	34193782 <__sfputs_r>
34193840:	3001      	adds	r0, #1
34193842:	f000 80a7 	beq.w	34193994 <_vfiprintf_r+0x1ec>
34193846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34193848:	445a      	add	r2, fp
3419384a:	9209      	str	r2, [sp, #36]	@ 0x24
3419384c:	f89a 3000 	ldrb.w	r3, [sl]
34193850:	2b00      	cmp	r3, #0
34193852:	f000 809f 	beq.w	34193994 <_vfiprintf_r+0x1ec>
34193856:	2300      	movs	r3, #0
34193858:	f04f 32ff 	mov.w	r2, #4294967295
3419385c:	f10a 0a01 	add.w	sl, sl, #1
34193860:	9304      	str	r3, [sp, #16]
34193862:	9307      	str	r3, [sp, #28]
34193864:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
34193868:	931a      	str	r3, [sp, #104]	@ 0x68
3419386a:	e9cd 2305 	strd	r2, r3, [sp, #20]
3419386e:	4654      	mov	r4, sl
34193870:	2205      	movs	r2, #5
34193872:	4854      	ldr	r0, [pc, #336]	@ (341939c4 <_vfiprintf_r+0x21c>)
34193874:	f814 1b01 	ldrb.w	r1, [r4], #1
34193878:	f000 fb7e 	bl	34193f78 <memchr>
3419387c:	9a04      	ldr	r2, [sp, #16]
3419387e:	b9d8      	cbnz	r0, 341938b8 <_vfiprintf_r+0x110>
34193880:	06d1      	lsls	r1, r2, #27
34193882:	bf44      	itt	mi
34193884:	2320      	movmi	r3, #32
34193886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3419388a:	0713      	lsls	r3, r2, #28
3419388c:	bf44      	itt	mi
3419388e:	232b      	movmi	r3, #43	@ 0x2b
34193890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34193894:	f89a 3000 	ldrb.w	r3, [sl]
34193898:	2b2a      	cmp	r3, #42	@ 0x2a
3419389a:	d015      	beq.n	341938c8 <_vfiprintf_r+0x120>
3419389c:	9a07      	ldr	r2, [sp, #28]
3419389e:	4654      	mov	r4, sl
341938a0:	2000      	movs	r0, #0
341938a2:	f04f 0c0a 	mov.w	ip, #10
341938a6:	4621      	mov	r1, r4
341938a8:	f811 3b01 	ldrb.w	r3, [r1], #1
341938ac:	3b30      	subs	r3, #48	@ 0x30
341938ae:	2b09      	cmp	r3, #9
341938b0:	d94b      	bls.n	3419394a <_vfiprintf_r+0x1a2>
341938b2:	b1b0      	cbz	r0, 341938e2 <_vfiprintf_r+0x13a>
341938b4:	9207      	str	r2, [sp, #28]
341938b6:	e014      	b.n	341938e2 <_vfiprintf_r+0x13a>
341938b8:	eba0 0308 	sub.w	r3, r0, r8
341938bc:	46a2      	mov	sl, r4
341938be:	fa09 f303 	lsl.w	r3, r9, r3
341938c2:	4313      	orrs	r3, r2
341938c4:	9304      	str	r3, [sp, #16]
341938c6:	e7d2      	b.n	3419386e <_vfiprintf_r+0xc6>
341938c8:	9b03      	ldr	r3, [sp, #12]
341938ca:	1d19      	adds	r1, r3, #4
341938cc:	681b      	ldr	r3, [r3, #0]
341938ce:	2b00      	cmp	r3, #0
341938d0:	9103      	str	r1, [sp, #12]
341938d2:	bfbb      	ittet	lt
341938d4:	425b      	neglt	r3, r3
341938d6:	f042 0202 	orrlt.w	r2, r2, #2
341938da:	9307      	strge	r3, [sp, #28]
341938dc:	9307      	strlt	r3, [sp, #28]
341938de:	bfb8      	it	lt
341938e0:	9204      	strlt	r2, [sp, #16]
341938e2:	7823      	ldrb	r3, [r4, #0]
341938e4:	2b2e      	cmp	r3, #46	@ 0x2e
341938e6:	d10a      	bne.n	341938fe <_vfiprintf_r+0x156>
341938e8:	7863      	ldrb	r3, [r4, #1]
341938ea:	2b2a      	cmp	r3, #42	@ 0x2a
341938ec:	d132      	bne.n	34193954 <_vfiprintf_r+0x1ac>
341938ee:	9b03      	ldr	r3, [sp, #12]
341938f0:	3402      	adds	r4, #2
341938f2:	1d1a      	adds	r2, r3, #4
341938f4:	681b      	ldr	r3, [r3, #0]
341938f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
341938fa:	9203      	str	r2, [sp, #12]
341938fc:	9305      	str	r3, [sp, #20]
341938fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 341939d4 <_vfiprintf_r+0x22c>
34193902:	2203      	movs	r2, #3
34193904:	7821      	ldrb	r1, [r4, #0]
34193906:	4650      	mov	r0, sl
34193908:	f000 fb36 	bl	34193f78 <memchr>
3419390c:	b138      	cbz	r0, 3419391e <_vfiprintf_r+0x176>
3419390e:	eba0 000a 	sub.w	r0, r0, sl
34193912:	2240      	movs	r2, #64	@ 0x40
34193914:	9b04      	ldr	r3, [sp, #16]
34193916:	3401      	adds	r4, #1
34193918:	4082      	lsls	r2, r0
3419391a:	4313      	orrs	r3, r2
3419391c:	9304      	str	r3, [sp, #16]
3419391e:	f814 1b01 	ldrb.w	r1, [r4], #1
34193922:	2206      	movs	r2, #6
34193924:	4828      	ldr	r0, [pc, #160]	@ (341939c8 <_vfiprintf_r+0x220>)
34193926:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3419392a:	f000 fb25 	bl	34193f78 <memchr>
3419392e:	2800      	cmp	r0, #0
34193930:	d03f      	beq.n	341939b2 <_vfiprintf_r+0x20a>
34193932:	4b26      	ldr	r3, [pc, #152]	@ (341939cc <_vfiprintf_r+0x224>)
34193934:	bb1b      	cbnz	r3, 3419397e <_vfiprintf_r+0x1d6>
34193936:	9b03      	ldr	r3, [sp, #12]
34193938:	3307      	adds	r3, #7
3419393a:	f023 0307 	bic.w	r3, r3, #7
3419393e:	3308      	adds	r3, #8
34193940:	9303      	str	r3, [sp, #12]
34193942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34193944:	443b      	add	r3, r7
34193946:	9309      	str	r3, [sp, #36]	@ 0x24
34193948:	e76a      	b.n	34193820 <_vfiprintf_r+0x78>
3419394a:	fb0c 3202 	mla	r2, ip, r2, r3
3419394e:	460c      	mov	r4, r1
34193950:	2001      	movs	r0, #1
34193952:	e7a8      	b.n	341938a6 <_vfiprintf_r+0xfe>
34193954:	2300      	movs	r3, #0
34193956:	3401      	adds	r4, #1
34193958:	f04f 0c0a 	mov.w	ip, #10
3419395c:	4619      	mov	r1, r3
3419395e:	9305      	str	r3, [sp, #20]
34193960:	4620      	mov	r0, r4
34193962:	f810 2b01 	ldrb.w	r2, [r0], #1
34193966:	3a30      	subs	r2, #48	@ 0x30
34193968:	2a09      	cmp	r2, #9
3419396a:	d903      	bls.n	34193974 <_vfiprintf_r+0x1cc>
3419396c:	2b00      	cmp	r3, #0
3419396e:	d0c6      	beq.n	341938fe <_vfiprintf_r+0x156>
34193970:	9105      	str	r1, [sp, #20]
34193972:	e7c4      	b.n	341938fe <_vfiprintf_r+0x156>
34193974:	fb0c 2101 	mla	r1, ip, r1, r2
34193978:	4604      	mov	r4, r0
3419397a:	2301      	movs	r3, #1
3419397c:	e7f0      	b.n	34193960 <_vfiprintf_r+0x1b8>
3419397e:	ab03      	add	r3, sp, #12
34193980:	462a      	mov	r2, r5
34193982:	a904      	add	r1, sp, #16
34193984:	4630      	mov	r0, r6
34193986:	9300      	str	r3, [sp, #0]
34193988:	4b11      	ldr	r3, [pc, #68]	@ (341939d0 <_vfiprintf_r+0x228>)
3419398a:	f3af 8000 	nop.w
3419398e:	4607      	mov	r7, r0
34193990:	1c78      	adds	r0, r7, #1
34193992:	d1d6      	bne.n	34193942 <_vfiprintf_r+0x19a>
34193994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34193996:	07d9      	lsls	r1, r3, #31
34193998:	d405      	bmi.n	341939a6 <_vfiprintf_r+0x1fe>
3419399a:	89ab      	ldrh	r3, [r5, #12]
3419399c:	059a      	lsls	r2, r3, #22
3419399e:	d402      	bmi.n	341939a6 <_vfiprintf_r+0x1fe>
341939a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
341939a2:	f7ff fc79 	bl	34193298 <__retarget_lock_release_recursive>
341939a6:	89ab      	ldrh	r3, [r5, #12]
341939a8:	065b      	lsls	r3, r3, #25
341939aa:	f53f af1f 	bmi.w	341937ec <_vfiprintf_r+0x44>
341939ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
341939b0:	e71e      	b.n	341937f0 <_vfiprintf_r+0x48>
341939b2:	ab03      	add	r3, sp, #12
341939b4:	462a      	mov	r2, r5
341939b6:	a904      	add	r1, sp, #16
341939b8:	4630      	mov	r0, r6
341939ba:	9300      	str	r3, [sp, #0]
341939bc:	4b04      	ldr	r3, [pc, #16]	@ (341939d0 <_vfiprintf_r+0x228>)
341939be:	f000 f87d 	bl	34193abc <_printf_i>
341939c2:	e7e4      	b.n	3419398e <_vfiprintf_r+0x1e6>
341939c4:	34195e49 	.word	0x34195e49
341939c8:	34195e53 	.word	0x34195e53
341939cc:	00000000 	.word	0x00000000
341939d0:	34193783 	.word	0x34193783
341939d4:	34195e4f 	.word	0x34195e4f

341939d8 <_printf_common>:
341939d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
341939dc:	4616      	mov	r6, r2
341939de:	4698      	mov	r8, r3
341939e0:	688a      	ldr	r2, [r1, #8]
341939e2:	4607      	mov	r7, r0
341939e4:	690b      	ldr	r3, [r1, #16]
341939e6:	460c      	mov	r4, r1
341939e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
341939ec:	4293      	cmp	r3, r2
341939ee:	bfb8      	it	lt
341939f0:	4613      	movlt	r3, r2
341939f2:	6033      	str	r3, [r6, #0]
341939f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
341939f8:	b10a      	cbz	r2, 341939fe <_printf_common+0x26>
341939fa:	3301      	adds	r3, #1
341939fc:	6033      	str	r3, [r6, #0]
341939fe:	6823      	ldr	r3, [r4, #0]
34193a00:	0699      	lsls	r1, r3, #26
34193a02:	bf42      	ittt	mi
34193a04:	6833      	ldrmi	r3, [r6, #0]
34193a06:	3302      	addmi	r3, #2
34193a08:	6033      	strmi	r3, [r6, #0]
34193a0a:	6825      	ldr	r5, [r4, #0]
34193a0c:	f015 0506 	ands.w	r5, r5, #6
34193a10:	d106      	bne.n	34193a20 <_printf_common+0x48>
34193a12:	f104 0a19 	add.w	sl, r4, #25
34193a16:	68e3      	ldr	r3, [r4, #12]
34193a18:	6832      	ldr	r2, [r6, #0]
34193a1a:	1a9b      	subs	r3, r3, r2
34193a1c:	42ab      	cmp	r3, r5
34193a1e:	dc2b      	bgt.n	34193a78 <_printf_common+0xa0>
34193a20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
34193a24:	6822      	ldr	r2, [r4, #0]
34193a26:	3b00      	subs	r3, #0
34193a28:	bf18      	it	ne
34193a2a:	2301      	movne	r3, #1
34193a2c:	0692      	lsls	r2, r2, #26
34193a2e:	d430      	bmi.n	34193a92 <_printf_common+0xba>
34193a30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
34193a34:	4641      	mov	r1, r8
34193a36:	4638      	mov	r0, r7
34193a38:	47c8      	blx	r9
34193a3a:	3001      	adds	r0, #1
34193a3c:	d023      	beq.n	34193a86 <_printf_common+0xae>
34193a3e:	6823      	ldr	r3, [r4, #0]
34193a40:	341a      	adds	r4, #26
34193a42:	f854 2c0a 	ldr.w	r2, [r4, #-10]
34193a46:	f003 0306 	and.w	r3, r3, #6
34193a4a:	2b04      	cmp	r3, #4
34193a4c:	bf0a      	itet	eq
34193a4e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
34193a52:	2500      	movne	r5, #0
34193a54:	6833      	ldreq	r3, [r6, #0]
34193a56:	f04f 0600 	mov.w	r6, #0
34193a5a:	bf08      	it	eq
34193a5c:	1aed      	subeq	r5, r5, r3
34193a5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
34193a62:	bf08      	it	eq
34193a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
34193a68:	4293      	cmp	r3, r2
34193a6a:	bfc4      	itt	gt
34193a6c:	1a9b      	subgt	r3, r3, r2
34193a6e:	18ed      	addgt	r5, r5, r3
34193a70:	42b5      	cmp	r5, r6
34193a72:	d11a      	bne.n	34193aaa <_printf_common+0xd2>
34193a74:	2000      	movs	r0, #0
34193a76:	e008      	b.n	34193a8a <_printf_common+0xb2>
34193a78:	2301      	movs	r3, #1
34193a7a:	4652      	mov	r2, sl
34193a7c:	4641      	mov	r1, r8
34193a7e:	4638      	mov	r0, r7
34193a80:	47c8      	blx	r9
34193a82:	3001      	adds	r0, #1
34193a84:	d103      	bne.n	34193a8e <_printf_common+0xb6>
34193a86:	f04f 30ff 	mov.w	r0, #4294967295
34193a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34193a8e:	3501      	adds	r5, #1
34193a90:	e7c1      	b.n	34193a16 <_printf_common+0x3e>
34193a92:	18e1      	adds	r1, r4, r3
34193a94:	1c5a      	adds	r2, r3, #1
34193a96:	2030      	movs	r0, #48	@ 0x30
34193a98:	3302      	adds	r3, #2
34193a9a:	4422      	add	r2, r4
34193a9c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
34193aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
34193aa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
34193aa8:	e7c2      	b.n	34193a30 <_printf_common+0x58>
34193aaa:	2301      	movs	r3, #1
34193aac:	4622      	mov	r2, r4
34193aae:	4641      	mov	r1, r8
34193ab0:	4638      	mov	r0, r7
34193ab2:	47c8      	blx	r9
34193ab4:	3001      	adds	r0, #1
34193ab6:	d0e6      	beq.n	34193a86 <_printf_common+0xae>
34193ab8:	3601      	adds	r6, #1
34193aba:	e7d9      	b.n	34193a70 <_printf_common+0x98>

34193abc <_printf_i>:
34193abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
34193ac0:	7e0f      	ldrb	r7, [r1, #24]
34193ac2:	4691      	mov	r9, r2
34193ac4:	4680      	mov	r8, r0
34193ac6:	460c      	mov	r4, r1
34193ac8:	2f78      	cmp	r7, #120	@ 0x78
34193aca:	469a      	mov	sl, r3
34193acc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
34193ace:	f101 0243 	add.w	r2, r1, #67	@ 0x43
34193ad2:	d807      	bhi.n	34193ae4 <_printf_i+0x28>
34193ad4:	2f62      	cmp	r7, #98	@ 0x62
34193ad6:	d80a      	bhi.n	34193aee <_printf_i+0x32>
34193ad8:	2f00      	cmp	r7, #0
34193ada:	f000 80d1 	beq.w	34193c80 <_printf_i+0x1c4>
34193ade:	2f58      	cmp	r7, #88	@ 0x58
34193ae0:	f000 80b8 	beq.w	34193c54 <_printf_i+0x198>
34193ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
34193ae8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
34193aec:	e03a      	b.n	34193b64 <_printf_i+0xa8>
34193aee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
34193af2:	2b15      	cmp	r3, #21
34193af4:	d8f6      	bhi.n	34193ae4 <_printf_i+0x28>
34193af6:	a101      	add	r1, pc, #4	@ (adr r1, 34193afc <_printf_i+0x40>)
34193af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
34193afc:	34193b55 	.word	0x34193b55
34193b00:	34193b69 	.word	0x34193b69
34193b04:	34193ae5 	.word	0x34193ae5
34193b08:	34193ae5 	.word	0x34193ae5
34193b0c:	34193ae5 	.word	0x34193ae5
34193b10:	34193ae5 	.word	0x34193ae5
34193b14:	34193b69 	.word	0x34193b69
34193b18:	34193ae5 	.word	0x34193ae5
34193b1c:	34193ae5 	.word	0x34193ae5
34193b20:	34193ae5 	.word	0x34193ae5
34193b24:	34193ae5 	.word	0x34193ae5
34193b28:	34193c67 	.word	0x34193c67
34193b2c:	34193b93 	.word	0x34193b93
34193b30:	34193c21 	.word	0x34193c21
34193b34:	34193ae5 	.word	0x34193ae5
34193b38:	34193ae5 	.word	0x34193ae5
34193b3c:	34193c89 	.word	0x34193c89
34193b40:	34193ae5 	.word	0x34193ae5
34193b44:	34193b93 	.word	0x34193b93
34193b48:	34193ae5 	.word	0x34193ae5
34193b4c:	34193ae5 	.word	0x34193ae5
34193b50:	34193c29 	.word	0x34193c29
34193b54:	6833      	ldr	r3, [r6, #0]
34193b56:	1d1a      	adds	r2, r3, #4
34193b58:	681b      	ldr	r3, [r3, #0]
34193b5a:	6032      	str	r2, [r6, #0]
34193b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
34193b60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
34193b64:	2301      	movs	r3, #1
34193b66:	e09c      	b.n	34193ca2 <_printf_i+0x1e6>
34193b68:	6833      	ldr	r3, [r6, #0]
34193b6a:	6820      	ldr	r0, [r4, #0]
34193b6c:	1d19      	adds	r1, r3, #4
34193b6e:	6031      	str	r1, [r6, #0]
34193b70:	0606      	lsls	r6, r0, #24
34193b72:	d501      	bpl.n	34193b78 <_printf_i+0xbc>
34193b74:	681d      	ldr	r5, [r3, #0]
34193b76:	e003      	b.n	34193b80 <_printf_i+0xc4>
34193b78:	0645      	lsls	r5, r0, #25
34193b7a:	d5fb      	bpl.n	34193b74 <_printf_i+0xb8>
34193b7c:	f9b3 5000 	ldrsh.w	r5, [r3]
34193b80:	2d00      	cmp	r5, #0
34193b82:	da03      	bge.n	34193b8c <_printf_i+0xd0>
34193b84:	232d      	movs	r3, #45	@ 0x2d
34193b86:	426d      	negs	r5, r5
34193b88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34193b8c:	4858      	ldr	r0, [pc, #352]	@ (34193cf0 <_printf_i+0x234>)
34193b8e:	230a      	movs	r3, #10
34193b90:	e011      	b.n	34193bb6 <_printf_i+0xfa>
34193b92:	6821      	ldr	r1, [r4, #0]
34193b94:	6833      	ldr	r3, [r6, #0]
34193b96:	0608      	lsls	r0, r1, #24
34193b98:	f853 5b04 	ldr.w	r5, [r3], #4
34193b9c:	d402      	bmi.n	34193ba4 <_printf_i+0xe8>
34193b9e:	0649      	lsls	r1, r1, #25
34193ba0:	bf48      	it	mi
34193ba2:	b2ad      	uxthmi	r5, r5
34193ba4:	2f6f      	cmp	r7, #111	@ 0x6f
34193ba6:	6033      	str	r3, [r6, #0]
34193ba8:	4851      	ldr	r0, [pc, #324]	@ (34193cf0 <_printf_i+0x234>)
34193baa:	bf14      	ite	ne
34193bac:	230a      	movne	r3, #10
34193bae:	2308      	moveq	r3, #8
34193bb0:	2100      	movs	r1, #0
34193bb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
34193bb6:	6866      	ldr	r6, [r4, #4]
34193bb8:	2e00      	cmp	r6, #0
34193bba:	60a6      	str	r6, [r4, #8]
34193bbc:	db05      	blt.n	34193bca <_printf_i+0x10e>
34193bbe:	6821      	ldr	r1, [r4, #0]
34193bc0:	432e      	orrs	r6, r5
34193bc2:	f021 0104 	bic.w	r1, r1, #4
34193bc6:	6021      	str	r1, [r4, #0]
34193bc8:	d04b      	beq.n	34193c62 <_printf_i+0x1a6>
34193bca:	4616      	mov	r6, r2
34193bcc:	fbb5 f1f3 	udiv	r1, r5, r3
34193bd0:	fb03 5711 	mls	r7, r3, r1, r5
34193bd4:	5dc7      	ldrb	r7, [r0, r7]
34193bd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
34193bda:	462f      	mov	r7, r5
34193bdc:	460d      	mov	r5, r1
34193bde:	42bb      	cmp	r3, r7
34193be0:	d9f4      	bls.n	34193bcc <_printf_i+0x110>
34193be2:	2b08      	cmp	r3, #8
34193be4:	d10b      	bne.n	34193bfe <_printf_i+0x142>
34193be6:	6823      	ldr	r3, [r4, #0]
34193be8:	07df      	lsls	r7, r3, #31
34193bea:	d508      	bpl.n	34193bfe <_printf_i+0x142>
34193bec:	6923      	ldr	r3, [r4, #16]
34193bee:	6861      	ldr	r1, [r4, #4]
34193bf0:	4299      	cmp	r1, r3
34193bf2:	bfde      	ittt	le
34193bf4:	2330      	movle	r3, #48	@ 0x30
34193bf6:	f806 3c01 	strble.w	r3, [r6, #-1]
34193bfa:	f106 36ff 	addle.w	r6, r6, #4294967295
34193bfe:	1b92      	subs	r2, r2, r6
34193c00:	6122      	str	r2, [r4, #16]
34193c02:	464b      	mov	r3, r9
34193c04:	aa03      	add	r2, sp, #12
34193c06:	4621      	mov	r1, r4
34193c08:	4640      	mov	r0, r8
34193c0a:	f8cd a000 	str.w	sl, [sp]
34193c0e:	f7ff fee3 	bl	341939d8 <_printf_common>
34193c12:	3001      	adds	r0, #1
34193c14:	d14a      	bne.n	34193cac <_printf_i+0x1f0>
34193c16:	f04f 30ff 	mov.w	r0, #4294967295
34193c1a:	b004      	add	sp, #16
34193c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34193c20:	6823      	ldr	r3, [r4, #0]
34193c22:	f043 0320 	orr.w	r3, r3, #32
34193c26:	6023      	str	r3, [r4, #0]
34193c28:	2778      	movs	r7, #120	@ 0x78
34193c2a:	4832      	ldr	r0, [pc, #200]	@ (34193cf4 <_printf_i+0x238>)
34193c2c:	6823      	ldr	r3, [r4, #0]
34193c2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
34193c32:	061f      	lsls	r7, r3, #24
34193c34:	6831      	ldr	r1, [r6, #0]
34193c36:	f851 5b04 	ldr.w	r5, [r1], #4
34193c3a:	d402      	bmi.n	34193c42 <_printf_i+0x186>
34193c3c:	065f      	lsls	r7, r3, #25
34193c3e:	bf48      	it	mi
34193c40:	b2ad      	uxthmi	r5, r5
34193c42:	6031      	str	r1, [r6, #0]
34193c44:	07d9      	lsls	r1, r3, #31
34193c46:	bf44      	itt	mi
34193c48:	f043 0320 	orrmi.w	r3, r3, #32
34193c4c:	6023      	strmi	r3, [r4, #0]
34193c4e:	b11d      	cbz	r5, 34193c58 <_printf_i+0x19c>
34193c50:	2310      	movs	r3, #16
34193c52:	e7ad      	b.n	34193bb0 <_printf_i+0xf4>
34193c54:	4826      	ldr	r0, [pc, #152]	@ (34193cf0 <_printf_i+0x234>)
34193c56:	e7e9      	b.n	34193c2c <_printf_i+0x170>
34193c58:	6823      	ldr	r3, [r4, #0]
34193c5a:	f023 0320 	bic.w	r3, r3, #32
34193c5e:	6023      	str	r3, [r4, #0]
34193c60:	e7f6      	b.n	34193c50 <_printf_i+0x194>
34193c62:	4616      	mov	r6, r2
34193c64:	e7bd      	b.n	34193be2 <_printf_i+0x126>
34193c66:	6833      	ldr	r3, [r6, #0]
34193c68:	6825      	ldr	r5, [r4, #0]
34193c6a:	1d18      	adds	r0, r3, #4
34193c6c:	6961      	ldr	r1, [r4, #20]
34193c6e:	6030      	str	r0, [r6, #0]
34193c70:	062e      	lsls	r6, r5, #24
34193c72:	681b      	ldr	r3, [r3, #0]
34193c74:	d501      	bpl.n	34193c7a <_printf_i+0x1be>
34193c76:	6019      	str	r1, [r3, #0]
34193c78:	e002      	b.n	34193c80 <_printf_i+0x1c4>
34193c7a:	0668      	lsls	r0, r5, #25
34193c7c:	d5fb      	bpl.n	34193c76 <_printf_i+0x1ba>
34193c7e:	8019      	strh	r1, [r3, #0]
34193c80:	2300      	movs	r3, #0
34193c82:	4616      	mov	r6, r2
34193c84:	6123      	str	r3, [r4, #16]
34193c86:	e7bc      	b.n	34193c02 <_printf_i+0x146>
34193c88:	6833      	ldr	r3, [r6, #0]
34193c8a:	2100      	movs	r1, #0
34193c8c:	1d1a      	adds	r2, r3, #4
34193c8e:	6032      	str	r2, [r6, #0]
34193c90:	681e      	ldr	r6, [r3, #0]
34193c92:	6862      	ldr	r2, [r4, #4]
34193c94:	4630      	mov	r0, r6
34193c96:	f000 f96f 	bl	34193f78 <memchr>
34193c9a:	b108      	cbz	r0, 34193ca0 <_printf_i+0x1e4>
34193c9c:	1b80      	subs	r0, r0, r6
34193c9e:	6060      	str	r0, [r4, #4]
34193ca0:	6863      	ldr	r3, [r4, #4]
34193ca2:	6123      	str	r3, [r4, #16]
34193ca4:	2300      	movs	r3, #0
34193ca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34193caa:	e7aa      	b.n	34193c02 <_printf_i+0x146>
34193cac:	6923      	ldr	r3, [r4, #16]
34193cae:	4632      	mov	r2, r6
34193cb0:	4649      	mov	r1, r9
34193cb2:	4640      	mov	r0, r8
34193cb4:	47d0      	blx	sl
34193cb6:	3001      	adds	r0, #1
34193cb8:	d0ad      	beq.n	34193c16 <_printf_i+0x15a>
34193cba:	6823      	ldr	r3, [r4, #0]
34193cbc:	079b      	lsls	r3, r3, #30
34193cbe:	d413      	bmi.n	34193ce8 <_printf_i+0x22c>
34193cc0:	68e0      	ldr	r0, [r4, #12]
34193cc2:	9b03      	ldr	r3, [sp, #12]
34193cc4:	4298      	cmp	r0, r3
34193cc6:	bfb8      	it	lt
34193cc8:	4618      	movlt	r0, r3
34193cca:	e7a6      	b.n	34193c1a <_printf_i+0x15e>
34193ccc:	2301      	movs	r3, #1
34193cce:	4632      	mov	r2, r6
34193cd0:	4649      	mov	r1, r9
34193cd2:	4640      	mov	r0, r8
34193cd4:	47d0      	blx	sl
34193cd6:	3001      	adds	r0, #1
34193cd8:	d09d      	beq.n	34193c16 <_printf_i+0x15a>
34193cda:	3501      	adds	r5, #1
34193cdc:	68e3      	ldr	r3, [r4, #12]
34193cde:	9903      	ldr	r1, [sp, #12]
34193ce0:	1a5b      	subs	r3, r3, r1
34193ce2:	42ab      	cmp	r3, r5
34193ce4:	dcf2      	bgt.n	34193ccc <_printf_i+0x210>
34193ce6:	e7eb      	b.n	34193cc0 <_printf_i+0x204>
34193ce8:	2500      	movs	r5, #0
34193cea:	f104 0619 	add.w	r6, r4, #25
34193cee:	e7f5      	b.n	34193cdc <_printf_i+0x220>
34193cf0:	34195e5a 	.word	0x34195e5a
34193cf4:	34195e6b 	.word	0x34195e6b

34193cf8 <__sflush_r>:
34193cf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
34193cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34193d00:	0716      	lsls	r6, r2, #28
34193d02:	4605      	mov	r5, r0
34193d04:	460c      	mov	r4, r1
34193d06:	d454      	bmi.n	34193db2 <__sflush_r+0xba>
34193d08:	684b      	ldr	r3, [r1, #4]
34193d0a:	2b00      	cmp	r3, #0
34193d0c:	dc02      	bgt.n	34193d14 <__sflush_r+0x1c>
34193d0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
34193d10:	2b00      	cmp	r3, #0
34193d12:	dd48      	ble.n	34193da6 <__sflush_r+0xae>
34193d14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34193d16:	2e00      	cmp	r6, #0
34193d18:	d045      	beq.n	34193da6 <__sflush_r+0xae>
34193d1a:	2300      	movs	r3, #0
34193d1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
34193d20:	682f      	ldr	r7, [r5, #0]
34193d22:	6a21      	ldr	r1, [r4, #32]
34193d24:	602b      	str	r3, [r5, #0]
34193d26:	d030      	beq.n	34193d8a <__sflush_r+0x92>
34193d28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
34193d2a:	89a3      	ldrh	r3, [r4, #12]
34193d2c:	0759      	lsls	r1, r3, #29
34193d2e:	d505      	bpl.n	34193d3c <__sflush_r+0x44>
34193d30:	6863      	ldr	r3, [r4, #4]
34193d32:	1ad2      	subs	r2, r2, r3
34193d34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34193d36:	b10b      	cbz	r3, 34193d3c <__sflush_r+0x44>
34193d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34193d3a:	1ad2      	subs	r2, r2, r3
34193d3c:	2300      	movs	r3, #0
34193d3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34193d40:	6a21      	ldr	r1, [r4, #32]
34193d42:	4628      	mov	r0, r5
34193d44:	47b0      	blx	r6
34193d46:	1c43      	adds	r3, r0, #1
34193d48:	89a3      	ldrh	r3, [r4, #12]
34193d4a:	d106      	bne.n	34193d5a <__sflush_r+0x62>
34193d4c:	6829      	ldr	r1, [r5, #0]
34193d4e:	291d      	cmp	r1, #29
34193d50:	d82b      	bhi.n	34193daa <__sflush_r+0xb2>
34193d52:	4a2a      	ldr	r2, [pc, #168]	@ (34193dfc <__sflush_r+0x104>)
34193d54:	40ca      	lsrs	r2, r1
34193d56:	07d6      	lsls	r6, r2, #31
34193d58:	d527      	bpl.n	34193daa <__sflush_r+0xb2>
34193d5a:	2200      	movs	r2, #0
34193d5c:	04d9      	lsls	r1, r3, #19
34193d5e:	6062      	str	r2, [r4, #4]
34193d60:	6922      	ldr	r2, [r4, #16]
34193d62:	6022      	str	r2, [r4, #0]
34193d64:	d504      	bpl.n	34193d70 <__sflush_r+0x78>
34193d66:	1c42      	adds	r2, r0, #1
34193d68:	d101      	bne.n	34193d6e <__sflush_r+0x76>
34193d6a:	682b      	ldr	r3, [r5, #0]
34193d6c:	b903      	cbnz	r3, 34193d70 <__sflush_r+0x78>
34193d6e:	6560      	str	r0, [r4, #84]	@ 0x54
34193d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34193d72:	602f      	str	r7, [r5, #0]
34193d74:	b1b9      	cbz	r1, 34193da6 <__sflush_r+0xae>
34193d76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34193d7a:	4299      	cmp	r1, r3
34193d7c:	d002      	beq.n	34193d84 <__sflush_r+0x8c>
34193d7e:	4628      	mov	r0, r5
34193d80:	f7ff fa98 	bl	341932b4 <_free_r>
34193d84:	2300      	movs	r3, #0
34193d86:	6363      	str	r3, [r4, #52]	@ 0x34
34193d88:	e00d      	b.n	34193da6 <__sflush_r+0xae>
34193d8a:	2301      	movs	r3, #1
34193d8c:	4628      	mov	r0, r5
34193d8e:	47b0      	blx	r6
34193d90:	4602      	mov	r2, r0
34193d92:	1c50      	adds	r0, r2, #1
34193d94:	d1c9      	bne.n	34193d2a <__sflush_r+0x32>
34193d96:	682b      	ldr	r3, [r5, #0]
34193d98:	2b00      	cmp	r3, #0
34193d9a:	d0c6      	beq.n	34193d2a <__sflush_r+0x32>
34193d9c:	2b1d      	cmp	r3, #29
34193d9e:	d001      	beq.n	34193da4 <__sflush_r+0xac>
34193da0:	2b16      	cmp	r3, #22
34193da2:	d11d      	bne.n	34193de0 <__sflush_r+0xe8>
34193da4:	602f      	str	r7, [r5, #0]
34193da6:	2000      	movs	r0, #0
34193da8:	e021      	b.n	34193dee <__sflush_r+0xf6>
34193daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34193dae:	b21b      	sxth	r3, r3
34193db0:	e01a      	b.n	34193de8 <__sflush_r+0xf0>
34193db2:	690f      	ldr	r7, [r1, #16]
34193db4:	2f00      	cmp	r7, #0
34193db6:	d0f6      	beq.n	34193da6 <__sflush_r+0xae>
34193db8:	0793      	lsls	r3, r2, #30
34193dba:	680e      	ldr	r6, [r1, #0]
34193dbc:	600f      	str	r7, [r1, #0]
34193dbe:	bf0c      	ite	eq
34193dc0:	694b      	ldreq	r3, [r1, #20]
34193dc2:	2300      	movne	r3, #0
34193dc4:	eba6 0807 	sub.w	r8, r6, r7
34193dc8:	608b      	str	r3, [r1, #8]
34193dca:	f1b8 0f00 	cmp.w	r8, #0
34193dce:	ddea      	ble.n	34193da6 <__sflush_r+0xae>
34193dd0:	4643      	mov	r3, r8
34193dd2:	463a      	mov	r2, r7
34193dd4:	6a21      	ldr	r1, [r4, #32]
34193dd6:	4628      	mov	r0, r5
34193dd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
34193dda:	47b0      	blx	r6
34193ddc:	2800      	cmp	r0, #0
34193dde:	dc08      	bgt.n	34193df2 <__sflush_r+0xfa>
34193de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34193de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34193de8:	f04f 30ff 	mov.w	r0, #4294967295
34193dec:	81a3      	strh	r3, [r4, #12]
34193dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34193df2:	4407      	add	r7, r0
34193df4:	eba8 0800 	sub.w	r8, r8, r0
34193df8:	e7e7      	b.n	34193dca <__sflush_r+0xd2>
34193dfa:	bf00      	nop
34193dfc:	20400001 	.word	0x20400001

34193e00 <_fflush_r>:
34193e00:	b538      	push	{r3, r4, r5, lr}
34193e02:	690b      	ldr	r3, [r1, #16]
34193e04:	4605      	mov	r5, r0
34193e06:	460c      	mov	r4, r1
34193e08:	b913      	cbnz	r3, 34193e10 <_fflush_r+0x10>
34193e0a:	2500      	movs	r5, #0
34193e0c:	4628      	mov	r0, r5
34193e0e:	bd38      	pop	{r3, r4, r5, pc}
34193e10:	b118      	cbz	r0, 34193e1a <_fflush_r+0x1a>
34193e12:	6a03      	ldr	r3, [r0, #32]
34193e14:	b90b      	cbnz	r3, 34193e1a <_fflush_r+0x1a>
34193e16:	f7fe fff7 	bl	34192e08 <__sinit>
34193e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34193e1e:	2b00      	cmp	r3, #0
34193e20:	d0f3      	beq.n	34193e0a <_fflush_r+0xa>
34193e22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
34193e24:	07d0      	lsls	r0, r2, #31
34193e26:	d404      	bmi.n	34193e32 <_fflush_r+0x32>
34193e28:	0599      	lsls	r1, r3, #22
34193e2a:	d402      	bmi.n	34193e32 <_fflush_r+0x32>
34193e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34193e2e:	f7ff fa32 	bl	34193296 <__retarget_lock_acquire_recursive>
34193e32:	4628      	mov	r0, r5
34193e34:	4621      	mov	r1, r4
34193e36:	f7ff ff5f 	bl	34193cf8 <__sflush_r>
34193e3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34193e3c:	4605      	mov	r5, r0
34193e3e:	07da      	lsls	r2, r3, #31
34193e40:	d4e4      	bmi.n	34193e0c <_fflush_r+0xc>
34193e42:	89a3      	ldrh	r3, [r4, #12]
34193e44:	059b      	lsls	r3, r3, #22
34193e46:	d4e1      	bmi.n	34193e0c <_fflush_r+0xc>
34193e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34193e4a:	f7ff fa25 	bl	34193298 <__retarget_lock_release_recursive>
34193e4e:	e7dd      	b.n	34193e0c <_fflush_r+0xc>

34193e50 <__swhatbuf_r>:
34193e50:	b570      	push	{r4, r5, r6, lr}
34193e52:	460c      	mov	r4, r1
34193e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34193e58:	b096      	sub	sp, #88	@ 0x58
34193e5a:	4615      	mov	r5, r2
34193e5c:	2900      	cmp	r1, #0
34193e5e:	461e      	mov	r6, r3
34193e60:	da0c      	bge.n	34193e7c <__swhatbuf_r+0x2c>
34193e62:	89a3      	ldrh	r3, [r4, #12]
34193e64:	2100      	movs	r1, #0
34193e66:	f013 0f80 	tst.w	r3, #128	@ 0x80
34193e6a:	bf14      	ite	ne
34193e6c:	2340      	movne	r3, #64	@ 0x40
34193e6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
34193e72:	2000      	movs	r0, #0
34193e74:	6031      	str	r1, [r6, #0]
34193e76:	602b      	str	r3, [r5, #0]
34193e78:	b016      	add	sp, #88	@ 0x58
34193e7a:	bd70      	pop	{r4, r5, r6, pc}
34193e7c:	466a      	mov	r2, sp
34193e7e:	f000 f849 	bl	34193f14 <_fstat_r>
34193e82:	2800      	cmp	r0, #0
34193e84:	dbed      	blt.n	34193e62 <__swhatbuf_r+0x12>
34193e86:	9901      	ldr	r1, [sp, #4]
34193e88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
34193e8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
34193e90:	4259      	negs	r1, r3
34193e92:	4159      	adcs	r1, r3
34193e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34193e98:	e7eb      	b.n	34193e72 <__swhatbuf_r+0x22>

34193e9a <__smakebuf_r>:
34193e9a:	898b      	ldrh	r3, [r1, #12]
34193e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34193e9e:	079d      	lsls	r5, r3, #30
34193ea0:	4606      	mov	r6, r0
34193ea2:	460c      	mov	r4, r1
34193ea4:	d507      	bpl.n	34193eb6 <__smakebuf_r+0x1c>
34193ea6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
34193eaa:	6023      	str	r3, [r4, #0]
34193eac:	6123      	str	r3, [r4, #16]
34193eae:	2301      	movs	r3, #1
34193eb0:	6163      	str	r3, [r4, #20]
34193eb2:	b003      	add	sp, #12
34193eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
34193eb6:	ab01      	add	r3, sp, #4
34193eb8:	466a      	mov	r2, sp
34193eba:	f7ff ffc9 	bl	34193e50 <__swhatbuf_r>
34193ebe:	9f00      	ldr	r7, [sp, #0]
34193ec0:	4605      	mov	r5, r0
34193ec2:	4630      	mov	r0, r6
34193ec4:	4639      	mov	r1, r7
34193ec6:	f7ff fa61 	bl	3419338c <_malloc_r>
34193eca:	b948      	cbnz	r0, 34193ee0 <__smakebuf_r+0x46>
34193ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34193ed0:	059a      	lsls	r2, r3, #22
34193ed2:	d4ee      	bmi.n	34193eb2 <__smakebuf_r+0x18>
34193ed4:	f023 0303 	bic.w	r3, r3, #3
34193ed8:	f043 0302 	orr.w	r3, r3, #2
34193edc:	81a3      	strh	r3, [r4, #12]
34193ede:	e7e2      	b.n	34193ea6 <__smakebuf_r+0xc>
34193ee0:	89a3      	ldrh	r3, [r4, #12]
34193ee2:	6020      	str	r0, [r4, #0]
34193ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34193ee8:	81a3      	strh	r3, [r4, #12]
34193eea:	9b01      	ldr	r3, [sp, #4]
34193eec:	e9c4 0704 	strd	r0, r7, [r4, #16]
34193ef0:	b15b      	cbz	r3, 34193f0a <__smakebuf_r+0x70>
34193ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34193ef6:	4630      	mov	r0, r6
34193ef8:	f000 f81e 	bl	34193f38 <_isatty_r>
34193efc:	b128      	cbz	r0, 34193f0a <__smakebuf_r+0x70>
34193efe:	89a3      	ldrh	r3, [r4, #12]
34193f00:	f023 0303 	bic.w	r3, r3, #3
34193f04:	f043 0301 	orr.w	r3, r3, #1
34193f08:	81a3      	strh	r3, [r4, #12]
34193f0a:	89a3      	ldrh	r3, [r4, #12]
34193f0c:	431d      	orrs	r5, r3
34193f0e:	81a5      	strh	r5, [r4, #12]
34193f10:	e7cf      	b.n	34193eb2 <__smakebuf_r+0x18>
	...

34193f14 <_fstat_r>:
34193f14:	b538      	push	{r3, r4, r5, lr}
34193f16:	2300      	movs	r3, #0
34193f18:	4d06      	ldr	r5, [pc, #24]	@ (34193f34 <_fstat_r+0x20>)
34193f1a:	4604      	mov	r4, r0
34193f1c:	4608      	mov	r0, r1
34193f1e:	4611      	mov	r1, r2
34193f20:	602b      	str	r3, [r5, #0]
34193f22:	f7fe fb50 	bl	341925c6 <_fstat>
34193f26:	1c43      	adds	r3, r0, #1
34193f28:	d102      	bne.n	34193f30 <_fstat_r+0x1c>
34193f2a:	682b      	ldr	r3, [r5, #0]
34193f2c:	b103      	cbz	r3, 34193f30 <_fstat_r+0x1c>
34193f2e:	6023      	str	r3, [r4, #0]
34193f30:	bd38      	pop	{r3, r4, r5, pc}
34193f32:	bf00      	nop
34193f34:	341c19cc 	.word	0x341c19cc

34193f38 <_isatty_r>:
34193f38:	b538      	push	{r3, r4, r5, lr}
34193f3a:	2300      	movs	r3, #0
34193f3c:	4d05      	ldr	r5, [pc, #20]	@ (34193f54 <_isatty_r+0x1c>)
34193f3e:	4604      	mov	r4, r0
34193f40:	4608      	mov	r0, r1
34193f42:	602b      	str	r3, [r5, #0]
34193f44:	f7fe fb4f 	bl	341925e6 <_isatty>
34193f48:	1c43      	adds	r3, r0, #1
34193f4a:	d102      	bne.n	34193f52 <_isatty_r+0x1a>
34193f4c:	682b      	ldr	r3, [r5, #0]
34193f4e:	b103      	cbz	r3, 34193f52 <_isatty_r+0x1a>
34193f50:	6023      	str	r3, [r4, #0]
34193f52:	bd38      	pop	{r3, r4, r5, pc}
34193f54:	341c19cc 	.word	0x341c19cc

34193f58 <_sbrk_r>:
34193f58:	b538      	push	{r3, r4, r5, lr}
34193f5a:	2300      	movs	r3, #0
34193f5c:	4d05      	ldr	r5, [pc, #20]	@ (34193f74 <_sbrk_r+0x1c>)
34193f5e:	4604      	mov	r4, r0
34193f60:	4608      	mov	r0, r1
34193f62:	602b      	str	r3, [r5, #0]
34193f64:	f7fe fb58 	bl	34192618 <_sbrk>
34193f68:	1c43      	adds	r3, r0, #1
34193f6a:	d102      	bne.n	34193f72 <_sbrk_r+0x1a>
34193f6c:	682b      	ldr	r3, [r5, #0]
34193f6e:	b103      	cbz	r3, 34193f72 <_sbrk_r+0x1a>
34193f70:	6023      	str	r3, [r4, #0]
34193f72:	bd38      	pop	{r3, r4, r5, pc}
34193f74:	341c19cc 	.word	0x341c19cc

34193f78 <memchr>:
34193f78:	b2c9      	uxtb	r1, r1
34193f7a:	4603      	mov	r3, r0
34193f7c:	4402      	add	r2, r0
34193f7e:	b510      	push	{r4, lr}
34193f80:	4293      	cmp	r3, r2
34193f82:	4618      	mov	r0, r3
34193f84:	d101      	bne.n	34193f8a <memchr+0x12>
34193f86:	2000      	movs	r0, #0
34193f88:	e003      	b.n	34193f92 <memchr+0x1a>
34193f8a:	7804      	ldrb	r4, [r0, #0]
34193f8c:	3301      	adds	r3, #1
34193f8e:	428c      	cmp	r4, r1
34193f90:	d1f6      	bne.n	34193f80 <memchr+0x8>
34193f92:	bd10      	pop	{r4, pc}

34193f94 <_realloc_r>:
34193f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34193f98:	4607      	mov	r7, r0
34193f9a:	4614      	mov	r4, r2
34193f9c:	460d      	mov	r5, r1
34193f9e:	b921      	cbnz	r1, 34193faa <_realloc_r+0x16>
34193fa0:	4611      	mov	r1, r2
34193fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34193fa6:	f7ff b9f1 	b.w	3419338c <_malloc_r>
34193faa:	b92a      	cbnz	r2, 34193fb8 <_realloc_r+0x24>
34193fac:	4625      	mov	r5, r4
34193fae:	f7ff f981 	bl	341932b4 <_free_r>
34193fb2:	4628      	mov	r0, r5
34193fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34193fb8:	f000 f81a 	bl	34193ff0 <_malloc_usable_size_r>
34193fbc:	4284      	cmp	r4, r0
34193fbe:	4606      	mov	r6, r0
34193fc0:	d802      	bhi.n	34193fc8 <_realloc_r+0x34>
34193fc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
34193fc6:	d8f4      	bhi.n	34193fb2 <_realloc_r+0x1e>
34193fc8:	4621      	mov	r1, r4
34193fca:	4638      	mov	r0, r7
34193fcc:	f7ff f9de 	bl	3419338c <_malloc_r>
34193fd0:	4680      	mov	r8, r0
34193fd2:	b908      	cbnz	r0, 34193fd8 <_realloc_r+0x44>
34193fd4:	4645      	mov	r5, r8
34193fd6:	e7ec      	b.n	34193fb2 <_realloc_r+0x1e>
34193fd8:	42b4      	cmp	r4, r6
34193fda:	4622      	mov	r2, r4
34193fdc:	4629      	mov	r1, r5
34193fde:	bf28      	it	cs
34193fe0:	4632      	movcs	r2, r6
34193fe2:	f7ff f95a 	bl	3419329a <memcpy>
34193fe6:	4629      	mov	r1, r5
34193fe8:	4638      	mov	r0, r7
34193fea:	f7ff f963 	bl	341932b4 <_free_r>
34193fee:	e7f1      	b.n	34193fd4 <_realloc_r+0x40>

34193ff0 <_malloc_usable_size_r>:
34193ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
34193ff4:	1f18      	subs	r0, r3, #4
34193ff6:	2b00      	cmp	r3, #0
34193ff8:	bfbc      	itt	lt
34193ffa:	580b      	ldrlt	r3, [r1, r0]
34193ffc:	18c0      	addlt	r0, r0, r3
34193ffe:	4770      	bx	lr

34194000 <log10>:
34194000:	b508      	push	{r3, lr}
34194002:	ed2d 8b02 	vpush	{d8}
34194006:	eeb0 8b40 	vmov.f64	d8, d0
3419400a:	f000 fca1 	bl	34194950 <__ieee754_log10>
3419400e:	eeb4 8b48 	vcmp.f64	d8, d8
34194012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194016:	d60f      	bvs.n	34194038 <log10+0x38>
34194018:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
3419401c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194020:	d80a      	bhi.n	34194038 <log10+0x38>
34194022:	eeb5 8b40 	vcmp.f64	d8, #0.0
34194026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419402a:	d108      	bne.n	3419403e <log10+0x3e>
3419402c:	f7ff f908 	bl	34193240 <__errno>
34194030:	2322      	movs	r3, #34	@ 0x22
34194032:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 34194058 <log10+0x58>
34194036:	6003      	str	r3, [r0, #0]
34194038:	ecbd 8b02 	vpop	{d8}
3419403c:	bd08      	pop	{r3, pc}
3419403e:	f7ff f8ff 	bl	34193240 <__errno>
34194042:	2321      	movs	r3, #33	@ 0x21
34194044:	ecbd 8b02 	vpop	{d8}
34194048:	6003      	str	r3, [r0, #0]
3419404a:	4805      	ldr	r0, [pc, #20]	@ (34194060 <log10+0x60>)
3419404c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
34194050:	f000 b82a 	b.w	341940a8 <nan>
34194054:	f3af 8000 	nop.w
34194058:	00000000 	.word	0x00000000
3419405c:	fff00000 	.word	0xfff00000
34194060:	34195a13 	.word	0x34195a13
34194064:	00000000 	.word	0x00000000

34194068 <sqrt>:
34194068:	b508      	push	{r3, lr}
3419406a:	ed2d 8b04 	vpush	{d8-d9}
3419406e:	eeb0 8b40 	vmov.f64	d8, d0
34194072:	f000 fc6a 	bl	3419494a <__ieee754_sqrt>
34194076:	eeb4 8b48 	vcmp.f64	d8, d8
3419407a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419407e:	d60c      	bvs.n	3419409a <sqrt+0x32>
34194080:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 341940a0 <sqrt+0x38>
34194084:	eeb4 8bc9 	vcmpe.f64	d8, d9
34194088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419408c:	d505      	bpl.n	3419409a <sqrt+0x32>
3419408e:	f7ff f8d7 	bl	34193240 <__errno>
34194092:	ee89 0b09 	vdiv.f64	d0, d9, d9
34194096:	2321      	movs	r3, #33	@ 0x21
34194098:	6003      	str	r3, [r0, #0]
3419409a:	ecbd 8b04 	vpop	{d8-d9}
3419409e:	bd08      	pop	{r3, pc}
	...

341940a8 <nan>:
341940a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 341940b0 <nan+0x8>
341940ac:	4770      	bx	lr
341940ae:	bf00      	nop
341940b0:	00000000 	.word	0x00000000
341940b4:	7ff80000 	.word	0x7ff80000

341940b8 <checkint>:
341940b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
341940bc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
341940c0:	429a      	cmp	r2, r3
341940c2:	b570      	push	{r4, r5, r6, lr}
341940c4:	dd2a      	ble.n	3419411c <checkint+0x64>
341940c6:	f240 4333 	movw	r3, #1075	@ 0x433
341940ca:	429a      	cmp	r2, r3
341940cc:	dc24      	bgt.n	34194118 <checkint+0x60>
341940ce:	1a9b      	subs	r3, r3, r2
341940d0:	f04f 32ff 	mov.w	r2, #4294967295
341940d4:	f1a3 0620 	sub.w	r6, r3, #32
341940d8:	fa02 f403 	lsl.w	r4, r2, r3
341940dc:	f1c3 0520 	rsb	r5, r3, #32
341940e0:	fa02 f606 	lsl.w	r6, r2, r6
341940e4:	fa22 f505 	lsr.w	r5, r2, r5
341940e8:	409a      	lsls	r2, r3
341940ea:	4334      	orrs	r4, r6
341940ec:	ea20 0202 	bic.w	r2, r0, r2
341940f0:	432c      	orrs	r4, r5
341940f2:	ea21 0404 	bic.w	r4, r1, r4
341940f6:	4322      	orrs	r2, r4
341940f8:	f1a3 0420 	sub.w	r4, r3, #32
341940fc:	f1c3 0220 	rsb	r2, r3, #32
34194100:	d10c      	bne.n	3419411c <checkint+0x64>
34194102:	40d8      	lsrs	r0, r3
34194104:	fa01 f302 	lsl.w	r3, r1, r2
34194108:	40e1      	lsrs	r1, r4
3419410a:	4318      	orrs	r0, r3
3419410c:	4308      	orrs	r0, r1
3419410e:	f000 0001 	and.w	r0, r0, #1
34194112:	f1d0 0002 	rsbs	r0, r0, #2
34194116:	bd70      	pop	{r4, r5, r6, pc}
34194118:	2002      	movs	r0, #2
3419411a:	e7fc      	b.n	34194116 <checkint+0x5e>
3419411c:	2000      	movs	r0, #0
3419411e:	e7fa      	b.n	34194116 <checkint+0x5e>

34194120 <pow>:
34194120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34194124:	ee10 4a90 	vmov	r4, s1
34194128:	f240 73fd 	movw	r3, #2045	@ 0x7fd
3419412c:	ee11 aa90 	vmov	sl, s3
34194130:	ee10 5a10 	vmov	r5, s0
34194134:	ea4f 5814 	mov.w	r8, r4, lsr #20
34194138:	ee11 0a10 	vmov	r0, s2
3419413c:	ea4f 561a 	mov.w	r6, sl, lsr #20
34194140:	f108 32ff 	add.w	r2, r8, #4294967295
34194144:	46c4      	mov	ip, r8
34194146:	429a      	cmp	r2, r3
34194148:	ed2d 8b0a 	vpush	{d8-d12}
3419414c:	b087      	sub	sp, #28
3419414e:	d806      	bhi.n	3419415e <pow+0x3e>
34194150:	f3c6 030a 	ubfx	r3, r6, #0, #11
34194154:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
34194158:	2b7f      	cmp	r3, #127	@ 0x7f
3419415a:	f240 8157 	bls.w	3419440c <pow+0x2ec>
3419415e:	1802      	adds	r2, r0, r0
34194160:	f06f 0b01 	mvn.w	fp, #1
34194164:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
34194168:	eb4a 010a 	adc.w	r1, sl, sl
3419416c:	1e57      	subs	r7, r2, #1
3419416e:	f141 33ff 	adc.w	r3, r1, #4294967295
34194172:	45bb      	cmp	fp, r7
34194174:	eb7e 0303 	sbcs.w	r3, lr, r3
34194178:	d242      	bcs.n	34194200 <pow+0xe0>
3419417a:	ea52 0301 	orrs.w	r3, r2, r1
3419417e:	f04f 0300 	mov.w	r3, #0
34194182:	d10c      	bne.n	3419419e <pow+0x7e>
34194184:	196d      	adds	r5, r5, r5
34194186:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
3419418a:	4164      	adcs	r4, r4
3419418c:	42ab      	cmp	r3, r5
3419418e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
34194192:	41a3      	sbcs	r3, r4
34194194:	f0c0 808f 	bcc.w	341942b6 <pow+0x196>
34194198:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
3419419c:	e02b      	b.n	341941f6 <pow+0xd6>
3419419e:	4ed4      	ldr	r6, [pc, #848]	@ (341944f0 <pow+0x3d0>)
341941a0:	42b4      	cmp	r4, r6
341941a2:	bf08      	it	eq
341941a4:	429d      	cmpeq	r5, r3
341941a6:	d109      	bne.n	341941bc <pow+0x9c>
341941a8:	1800      	adds	r0, r0, r0
341941aa:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
341941ae:	eb4a 0a0a 	adc.w	sl, sl, sl
341941b2:	4283      	cmp	r3, r0
341941b4:	4bcf      	ldr	r3, [pc, #828]	@ (341944f4 <pow+0x3d4>)
341941b6:	eb73 030a 	sbcs.w	r3, r3, sl
341941ba:	e7eb      	b.n	34194194 <pow+0x74>
341941bc:	196d      	adds	r5, r5, r5
341941be:	48ce      	ldr	r0, [pc, #824]	@ (341944f8 <pow+0x3d8>)
341941c0:	4164      	adcs	r4, r4
341941c2:	42ab      	cmp	r3, r5
341941c4:	eb70 0604 	sbcs.w	r6, r0, r4
341941c8:	d375      	bcc.n	341942b6 <pow+0x196>
341941ca:	4281      	cmp	r1, r0
341941cc:	bf08      	it	eq
341941ce:	429a      	cmpeq	r2, r3
341941d0:	d171      	bne.n	341942b6 <pow+0x196>
341941d2:	4aca      	ldr	r2, [pc, #808]	@ (341944fc <pow+0x3dc>)
341941d4:	4294      	cmp	r4, r2
341941d6:	bf08      	it	eq
341941d8:	429d      	cmpeq	r5, r3
341941da:	d0dd      	beq.n	34194198 <pow+0x78>
341941dc:	4294      	cmp	r4, r2
341941de:	ea6f 0a0a 	mvn.w	sl, sl
341941e2:	bf34      	ite	cc
341941e4:	2400      	movcc	r4, #0
341941e6:	2401      	movcs	r4, #1
341941e8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
341941ec:	4554      	cmp	r4, sl
341941ee:	f040 81dc 	bne.w	341945aa <pow+0x48a>
341941f2:	ee21 0b01 	vmul.f64	d0, d1, d1
341941f6:	b007      	add	sp, #28
341941f8:	ecbd 8b0a 	vpop	{d8-d12}
341941fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34194200:	196f      	adds	r7, r5, r5
34194202:	eb44 0904 	adc.w	r9, r4, r4
34194206:	1e7a      	subs	r2, r7, #1
34194208:	f169 0300 	sbc.w	r3, r9, #0
3419420c:	4593      	cmp	fp, r2
3419420e:	eb7e 0303 	sbcs.w	r3, lr, r3
34194212:	d225      	bcs.n	34194260 <pow+0x140>
34194214:	2c00      	cmp	r4, #0
34194216:	ee20 0b00 	vmul.f64	d0, d0, d0
3419421a:	da13      	bge.n	34194244 <pow+0x124>
3419421c:	4651      	mov	r1, sl
3419421e:	f7ff ff4b 	bl	341940b8 <checkint>
34194222:	2801      	cmp	r0, #1
34194224:	d10e      	bne.n	34194244 <pow+0x124>
34194226:	eeb1 0b40 	vneg.f64	d0, d0
3419422a:	ea57 0909 	orrs.w	r9, r7, r9
3419422e:	d10b      	bne.n	34194248 <pow+0x128>
34194230:	f1ba 0f00 	cmp.w	sl, #0
34194234:	dadf      	bge.n	341941f6 <pow+0xd6>
34194236:	b007      	add	sp, #28
34194238:	ecbd 8b0a 	vpop	{d8-d12}
3419423c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34194240:	f000 bc26 	b.w	34194a90 <__math_divzero>
34194244:	2000      	movs	r0, #0
34194246:	e7f0      	b.n	3419422a <pow+0x10a>
34194248:	f1ba 0f00 	cmp.w	sl, #0
3419424c:	dad3      	bge.n	341941f6 <pow+0xd6>
3419424e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
34194252:	ee86 7b00 	vdiv.f64	d7, d6, d0
34194256:	ed8d 7b00 	vstr	d7, [sp]
3419425a:	ed9d 0b00 	vldr	d0, [sp]
3419425e:	e7ca      	b.n	341941f6 <pow+0xd6>
34194260:	2c00      	cmp	r4, #0
34194262:	da2b      	bge.n	341942bc <pow+0x19c>
34194264:	4651      	mov	r1, sl
34194266:	f7ff ff27 	bl	341940b8 <checkint>
3419426a:	b930      	cbnz	r0, 3419427a <pow+0x15a>
3419426c:	b007      	add	sp, #28
3419426e:	ecbd 8b0a 	vpop	{d8-d12}
34194272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34194276:	f000 bc27 	b.w	34194ac8 <__math_invalid>
3419427a:	1e41      	subs	r1, r0, #1
3419427c:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
34194280:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
34194284:	4248      	negs	r0, r1
34194286:	4148      	adcs	r0, r1
34194288:	0480      	lsls	r0, r0, #18
3419428a:	f3c6 020a 	ubfx	r2, r6, #0, #11
3419428e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
34194292:	2b7f      	cmp	r3, #127	@ 0x7f
34194294:	d92d      	bls.n	341942f2 <pow+0x1d2>
34194296:	2000      	movs	r0, #0
34194298:	4b95      	ldr	r3, [pc, #596]	@ (341944f0 <pow+0x3d0>)
3419429a:	429c      	cmp	r4, r3
3419429c:	bf08      	it	eq
3419429e:	4285      	cmpeq	r5, r0
341942a0:	f43f af7a 	beq.w	34194198 <pow+0x78>
341942a4:	f240 31bd 	movw	r1, #957	@ 0x3bd
341942a8:	428a      	cmp	r2, r1
341942aa:	d80c      	bhi.n	341942c6 <pow+0x1a6>
341942ac:	42a8      	cmp	r0, r5
341942ae:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
341942b2:	41a3      	sbcs	r3, r4
341942b4:	d204      	bcs.n	341942c0 <pow+0x1a0>
341942b6:	ee31 0b00 	vadd.f64	d0, d1, d0
341942ba:	e79c      	b.n	341941f6 <pow+0xd6>
341942bc:	2000      	movs	r0, #0
341942be:	e7e4      	b.n	3419428a <pow+0x16a>
341942c0:	ee30 0b41 	vsub.f64	d0, d0, d1
341942c4:	e797      	b.n	341941f6 <pow+0xd6>
341942c6:	2d01      	cmp	r5, #1
341942c8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
341942cc:	eb74 0303 	sbcs.w	r3, r4, r3
341942d0:	bf34      	ite	cc
341942d2:	2301      	movcc	r3, #1
341942d4:	2300      	movcs	r3, #0
341942d6:	4296      	cmp	r6, r2
341942d8:	bf8c      	ite	hi
341942da:	2600      	movhi	r6, #0
341942dc:	2601      	movls	r6, #1
341942de:	42b3      	cmp	r3, r6
341942e0:	f000 809c 	beq.w	3419441c <pow+0x2fc>
341942e4:	b007      	add	sp, #28
341942e6:	ecbd 8b0a 	vpop	{d8-d12}
341942ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341942ee:	f000 bbc7 	b.w	34194a80 <__math_oflow>
341942f2:	f1bc 0f00 	cmp.w	ip, #0
341942f6:	d10a      	bne.n	3419430e <pow+0x1ee>
341942f8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 341944e0 <pow+0x3c0>
341942fc:	ee20 7b07 	vmul.f64	d7, d0, d7
34194300:	ec53 2b17 	vmov	r2, r3, d7
34194304:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
34194308:	4615      	mov	r5, r2
3419430a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
3419430e:	4a7c      	ldr	r2, [pc, #496]	@ (34194500 <pow+0x3e0>)
34194310:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
34194314:	4422      	add	r2, r4
34194316:	1513      	asrs	r3, r2, #20
34194318:	f3c2 3146 	ubfx	r1, r2, #13, #7
3419431c:	f36f 0213 	bfc	r2, #0, #20
34194320:	ee03 3a10 	vmov	s6, r3
34194324:	4b77      	ldr	r3, [pc, #476]	@ (34194504 <pow+0x3e4>)
34194326:	1aa7      	subs	r7, r4, r2
34194328:	eb03 1641 	add.w	r6, r3, r1, lsl #5
3419432c:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
34194330:	eb03 1241 	add.w	r2, r3, r1, lsl #5
34194334:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
34194338:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
3419433c:	1e2e      	subs	r6, r5, #0
3419433e:	ec47 6b14 	vmov	d4, r6, r7
34194342:	eea4 6b05 	vfma.f64	d6, d4, d5
34194346:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
3419434a:	ed93 5b00 	vldr	d5, [r3]
3419434e:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
34194352:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
34194356:	eea3 2b05 	vfma.f64	d2, d3, d5
3419435a:	ed93 5b02 	vldr	d5, [r3, #8]
3419435e:	eea3 7b05 	vfma.f64	d7, d3, d5
34194362:	ee36 4b02 	vadd.f64	d4, d6, d2
34194366:	ed93 5b04 	vldr	d5, [r3, #16]
3419436a:	ee32 2b44 	vsub.f64	d2, d2, d4
3419436e:	ee26 5b05 	vmul.f64	d5, d6, d5
34194372:	ee32 2b06 	vadd.f64	d2, d2, d6
34194376:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
3419437a:	ee26 0b05 	vmul.f64	d0, d6, d5
3419437e:	ee37 7b02 	vadd.f64	d7, d7, d2
34194382:	ee34 8b00 	vadd.f64	d8, d4, d0
34194386:	eeb0 9b40 	vmov.f64	d9, d0
3419438a:	ee26 bb00 	vmul.f64	d11, d6, d0
3419438e:	ee34 4b48 	vsub.f64	d4, d4, d8
34194392:	ee96 9b05 	vfnms.f64	d9, d6, d5
34194396:	ee34 ab00 	vadd.f64	d10, d4, d0
3419439a:	ed93 5b06 	vldr	d5, [r3, #24]
3419439e:	ed93 4b08 	vldr	d4, [r3, #32]
341943a2:	eea6 5b04 	vfma.f64	d5, d6, d4
341943a6:	ee37 7b09 	vadd.f64	d7, d7, d9
341943aa:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
341943ae:	ee37 7b0a 	vadd.f64	d7, d7, d10
341943b2:	eea6 4b03 	vfma.f64	d4, d6, d3
341943b6:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
341943ba:	eea6 3b0c 	vfma.f64	d3, d6, d12
341943be:	eea0 4b03 	vfma.f64	d4, d0, d3
341943c2:	eea0 5b04 	vfma.f64	d5, d0, d4
341943c6:	eeab 7b05 	vfma.f64	d7, d11, d5
341943ca:	ee38 4b07 	vadd.f64	d4, d8, d7
341943ce:	ee21 6b04 	vmul.f64	d6, d1, d4
341943d2:	ee38 8b44 	vsub.f64	d8, d8, d4
341943d6:	eeb0 5b46 	vmov.f64	d5, d6
341943da:	ee16 3a90 	vmov	r3, s13
341943de:	ee38 8b07 	vadd.f64	d8, d8, d7
341943e2:	f3c3 560a 	ubfx	r6, r3, #20, #11
341943e6:	ee91 5b04 	vfnms.f64	d5, d1, d4
341943ea:	18b2      	adds	r2, r6, r2
341943ec:	2a3e      	cmp	r2, #62	@ 0x3e
341943ee:	eea1 5b08 	vfma.f64	d5, d1, d8
341943f2:	d91b      	bls.n	3419442c <pow+0x30c>
341943f4:	2a00      	cmp	r2, #0
341943f6:	da0b      	bge.n	34194410 <pow+0x2f0>
341943f8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
341943fc:	ee36 0b00 	vadd.f64	d0, d6, d0
34194400:	2800      	cmp	r0, #0
34194402:	f43f aef8 	beq.w	341941f6 <pow+0xd6>
34194406:	eeb1 0b40 	vneg.f64	d0, d0
3419440a:	e6f4      	b.n	341941f6 <pow+0xd6>
3419440c:	2000      	movs	r0, #0
3419440e:	e77e      	b.n	3419430e <pow+0x1ee>
34194410:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
34194414:	d909      	bls.n	3419442a <pow+0x30a>
34194416:	2b00      	cmp	r3, #0
34194418:	f6bf af64 	bge.w	341942e4 <pow+0x1c4>
3419441c:	b007      	add	sp, #28
3419441e:	ecbd 8b0a 	vpop	{d8-d12}
34194422:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34194426:	f000 bb23 	b.w	34194a70 <__math_uflow>
3419442a:	2600      	movs	r6, #0
3419442c:	4936      	ldr	r1, [pc, #216]	@ (34194508 <pow+0x3e8>)
3419442e:	2700      	movs	r7, #0
34194430:	ed91 4b02 	vldr	d4, [r1, #8]
34194434:	ed91 3b00 	vldr	d3, [r1]
34194438:	eeb0 7b44 	vmov.f64	d7, d4
3419443c:	eea6 7b03 	vfma.f64	d7, d6, d3
34194440:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
34194444:	ee17 5a10 	vmov	r5, s14
34194448:	ee37 7b44 	vsub.f64	d7, d7, d4
3419444c:	ed91 4b04 	vldr	d4, [r1, #16]
34194450:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
34194454:	eea7 6b04 	vfma.f64	d6, d7, d4
34194458:	18dc      	adds	r4, r3, r3
3419445a:	1940      	adds	r0, r0, r5
3419445c:	f104 030f 	add.w	r3, r4, #15
34194460:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
34194464:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
34194468:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
3419446c:	ed91 4b06 	vldr	d4, [r1, #24]
34194470:	f8d2 e004 	ldr.w	lr, [r2, #4]
34194474:	eb17 020c 	adds.w	r2, r7, ip
34194478:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
3419447c:	eea7 6b04 	vfma.f64	d6, d7, d4
34194480:	ed91 4b08 	vldr	d4, [r1, #32]
34194484:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
34194488:	ee35 5b06 	vadd.f64	d5, d5, d6
3419448c:	eea5 4b03 	vfma.f64	d4, d5, d3
34194490:	ee25 6b05 	vmul.f64	d6, d5, d5
34194494:	ee35 7b07 	vadd.f64	d7, d5, d7
34194498:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
3419449c:	eea6 7b04 	vfma.f64	d7, d6, d4
341944a0:	ee26 6b06 	vmul.f64	d6, d6, d6
341944a4:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
341944a8:	eea5 4b03 	vfma.f64	d4, d5, d3
341944ac:	eea6 7b04 	vfma.f64	d7, d6, d4
341944b0:	2e00      	cmp	r6, #0
341944b2:	d175      	bne.n	341945a0 <pow+0x480>
341944b4:	42bd      	cmp	r5, r7
341944b6:	db29      	blt.n	3419450c <pow+0x3ec>
341944b8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
341944bc:	4610      	mov	r0, r2
341944be:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
341944c2:	ec41 0b10 	vmov	d0, r0, r1
341944c6:	eea7 0b00 	vfma.f64	d0, d7, d0
341944ca:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 341944e8 <pow+0x3c8>
341944ce:	ee20 0b07 	vmul.f64	d0, d0, d7
341944d2:	b007      	add	sp, #28
341944d4:	ecbd 8b0a 	vpop	{d8-d12}
341944d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341944dc:	f000 bb0c 	b.w	34194af8 <__math_check_oflow>
341944e0:	00000000 	.word	0x00000000
341944e4:	43300000 	.word	0x43300000
341944e8:	00000000 	.word	0x00000000
341944ec:	7f000000 	.word	0x7f000000
341944f0:	3ff00000 	.word	0x3ff00000
341944f4:	fff00000 	.word	0xfff00000
341944f8:	ffe00000 	.word	0xffe00000
341944fc:	7fe00000 	.word	0x7fe00000
34194500:	c0196aab 	.word	0xc0196aab
34194504:	34195e80 	.word	0x34195e80
34194508:	34196ec8 	.word	0x34196ec8
3419450c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
34194510:	4610      	mov	r0, r2
34194512:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
34194516:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
3419451a:	ec41 0b15 	vmov	d5, r0, r1
3419451e:	ee27 6b05 	vmul.f64	d6, d7, d5
34194522:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 341945b0 <pow+0x490>
34194526:	ee35 7b06 	vadd.f64	d7, d5, d6
3419452a:	eeb0 4bc7 	vabs.f64	d4, d7
3419452e:	eeb4 4bc3 	vcmpe.f64	d4, d3
34194532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194536:	d52a      	bpl.n	3419458e <pow+0x46e>
34194538:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3419453c:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
34194540:	ee35 5b47 	vsub.f64	d5, d5, d7
34194544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194548:	ee35 5b06 	vadd.f64	d5, d5, d6
3419454c:	bf58      	it	pl
3419454e:	eeb0 4b43 	vmovpl.f64	d4, d3
34194552:	ee37 3b04 	vadd.f64	d3, d7, d4
34194556:	ee34 6b43 	vsub.f64	d6, d4, d3
3419455a:	ee36 6b07 	vadd.f64	d6, d6, d7
3419455e:	ee36 6b05 	vadd.f64	d6, d6, d5
34194562:	ee36 6b03 	vadd.f64	d6, d6, d3
34194566:	ee36 7b44 	vsub.f64	d7, d6, d4
3419456a:	eeb5 7b40 	vcmp.f64	d7, #0.0
3419456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194572:	d104      	bne.n	3419457e <pow+0x45e>
34194574:	4632      	mov	r2, r6
34194576:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
3419457a:	ec43 2b17 	vmov	d7, r2, r3
3419457e:	ed8d 0b02 	vstr	d0, [sp, #8]
34194582:	ed9d 6b02 	vldr	d6, [sp, #8]
34194586:	ee26 6b00 	vmul.f64	d6, d6, d0
3419458a:	ed8d 6b04 	vstr	d6, [sp, #16]
3419458e:	ee27 0b00 	vmul.f64	d0, d7, d0
34194592:	b007      	add	sp, #28
34194594:	ecbd 8b0a 	vpop	{d8-d12}
34194598:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3419459c:	f000 baa3 	b.w	34194ae6 <__math_check_uflow>
341945a0:	ec43 2b10 	vmov	d0, r2, r3
341945a4:	eea7 0b00 	vfma.f64	d0, d7, d0
341945a8:	e625      	b.n	341941f6 <pow+0xd6>
341945aa:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 341945b8 <pow+0x498>
341945ae:	e622      	b.n	341941f6 <pow+0xd6>
341945b0:	00000000 	.word	0x00000000
341945b4:	00100000 	.word	0x00100000
	...

341945c0 <checkint>:
341945c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
341945c4:	2b7e      	cmp	r3, #126	@ 0x7e
341945c6:	d910      	bls.n	341945ea <checkint+0x2a>
341945c8:	2b96      	cmp	r3, #150	@ 0x96
341945ca:	d80c      	bhi.n	341945e6 <checkint+0x26>
341945cc:	2201      	movs	r2, #1
341945ce:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
341945d2:	fa02 f303 	lsl.w	r3, r2, r3
341945d6:	1e5a      	subs	r2, r3, #1
341945d8:	4202      	tst	r2, r0
341945da:	d106      	bne.n	341945ea <checkint+0x2a>
341945dc:	4203      	tst	r3, r0
341945de:	bf14      	ite	ne
341945e0:	2001      	movne	r0, #1
341945e2:	2002      	moveq	r0, #2
341945e4:	4770      	bx	lr
341945e6:	2002      	movs	r0, #2
341945e8:	4770      	bx	lr
341945ea:	2000      	movs	r0, #0
341945ec:	4770      	bx	lr
	...

341945f0 <powf>:
341945f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
341945f2:	ee10 1a10 	vmov	r1, s0
341945f6:	ee10 4a90 	vmov	r4, s1
341945fa:	eef0 7a40 	vmov.f32	s15, s0
341945fe:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
34194602:	0063      	lsls	r3, r4, #1
34194604:	eeb0 7a60 	vmov.f32	s14, s1
34194608:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
3419460c:	f103 30ff 	add.w	r0, r3, #4294967295
34194610:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
34194614:	d252      	bcs.n	341946bc <powf+0xcc>
34194616:	4290      	cmp	r0, r2
34194618:	d258      	bcs.n	341946cc <powf+0xdc>
3419461a:	2000      	movs	r0, #0
3419461c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
34194620:	4a9f      	ldr	r2, [pc, #636]	@ (341948a0 <powf+0x2b0>)
34194622:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
34194626:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
3419462a:	f3c3 44c3 	ubfx	r4, r3, #19, #4
3419462e:	f36f 0316 	bfc	r3, #0, #23
34194632:	1ac9      	subs	r1, r1, r3
34194634:	eb02 1404 	add.w	r4, r2, r4, lsl #4
34194638:	15db      	asrs	r3, r3, #23
3419463a:	ee07 1a90 	vmov	s15, r1
3419463e:	ed94 4b00 	vldr	d4, [r4]
34194642:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
34194646:	ee07 3a90 	vmov	s15, r3
3419464a:	ed94 5b02 	vldr	d5, [r4, #8]
3419464e:	eea4 2b06 	vfma.f64	d2, d4, d6
34194652:	eeb8 6be7 	vcvt.f64.s32	d6, s15
34194656:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3419465a:	ee36 6b05 	vadd.f64	d6, d6, d5
3419465e:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
34194662:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
34194666:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
3419466a:	ee22 4b02 	vmul.f64	d4, d2, d2
3419466e:	eea2 1b05 	vfma.f64	d1, d2, d5
34194672:	ee24 0b04 	vmul.f64	d0, d4, d4
34194676:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
3419467a:	eea2 5b03 	vfma.f64	d5, d2, d3
3419467e:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
34194682:	eea2 6b03 	vfma.f64	d6, d2, d3
34194686:	eea4 6b05 	vfma.f64	d6, d4, d5
3419468a:	eea1 6b00 	vfma.f64	d6, d1, d0
3419468e:	ee27 7b06 	vmul.f64	d7, d7, d6
34194692:	ee17 3a90 	vmov	r3, s15
34194696:	f3c3 32cf 	ubfx	r2, r3, #15, #16
3419469a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
3419469e:	429a      	cmp	r2, r3
341946a0:	f0c0 8098 	bcc.w	341947d4 <powf+0x1e4>
341946a4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 34194880 <powf+0x290>
341946a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
341946ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341946b0:	dd79      	ble.n	341947a6 <powf+0x1b6>
341946b2:	b003      	add	sp, #12
341946b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
341946b8:	f000 b920 	b.w	341948fc <__math_oflowf>
341946bc:	4290      	cmp	r0, r2
341946be:	d330      	bcc.n	34194722 <powf+0x132>
341946c0:	b12b      	cbz	r3, 341946ce <powf+0xde>
341946c2:	0049      	lsls	r1, r1, #1
341946c4:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
341946c8:	d808      	bhi.n	341946dc <powf+0xec>
341946ca:	e015      	b.n	341946f8 <powf+0x108>
341946cc:	b953      	cbnz	r3, 341946e4 <powf+0xf4>
341946ce:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
341946d2:	0049      	lsls	r1, r1, #1
341946d4:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
341946d8:	f240 80ca 	bls.w	34194870 <powf+0x280>
341946dc:	ee37 0a87 	vadd.f32	s0, s15, s14
341946e0:	b003      	add	sp, #12
341946e2:	bd30      	pop	{r4, r5, pc}
341946e4:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
341946e8:	d105      	bne.n	341946f6 <powf+0x106>
341946ea:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
341946ee:	0064      	lsls	r4, r4, #1
341946f0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
341946f4:	e7f0      	b.n	341946d8 <powf+0xe8>
341946f6:	0049      	lsls	r1, r1, #1
341946f8:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
341946fc:	d1ee      	bne.n	341946dc <powf+0xec>
341946fe:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
34194702:	f000 80b5 	beq.w	34194870 <powf+0x280>
34194706:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
3419470a:	ea6f 0404 	mvn.w	r4, r4
3419470e:	bf34      	ite	cc
34194710:	2100      	movcc	r1, #0
34194712:	2101      	movcs	r1, #1
34194714:	0fe4      	lsrs	r4, r4, #31
34194716:	42a1      	cmp	r1, r4
34194718:	f040 80ad 	bne.w	34194876 <powf+0x286>
3419471c:	ee27 0a07 	vmul.f32	s0, s14, s14
34194720:	e7de      	b.n	341946e0 <powf+0xf0>
34194722:	004d      	lsls	r5, r1, #1
34194724:	1e6b      	subs	r3, r5, #1
34194726:	4293      	cmp	r3, r2
34194728:	d31b      	bcc.n	34194762 <powf+0x172>
3419472a:	2900      	cmp	r1, #0
3419472c:	ee20 0a00 	vmul.f32	s0, s0, s0
34194730:	da0e      	bge.n	34194750 <powf+0x160>
34194732:	4620      	mov	r0, r4
34194734:	f7ff ff44 	bl	341945c0 <checkint>
34194738:	2801      	cmp	r0, #1
3419473a:	d109      	bne.n	34194750 <powf+0x160>
3419473c:	eeb1 0a40 	vneg.f32	s0, s0
34194740:	b945      	cbnz	r5, 34194754 <powf+0x164>
34194742:	2c00      	cmp	r4, #0
34194744:	dacc      	bge.n	341946e0 <powf+0xf0>
34194746:	b003      	add	sp, #12
34194748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3419474c:	f000 b8dc 	b.w	34194908 <__math_divzerof>
34194750:	2000      	movs	r0, #0
34194752:	e7f5      	b.n	34194740 <powf+0x150>
34194754:	2c00      	cmp	r4, #0
34194756:	dac3      	bge.n	341946e0 <powf+0xf0>
34194758:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3419475c:	ee87 0a80 	vdiv.f32	s0, s15, s0
34194760:	e7be      	b.n	341946e0 <powf+0xf0>
34194762:	2900      	cmp	r1, #0
34194764:	da1d      	bge.n	341947a2 <powf+0x1b2>
34194766:	4620      	mov	r0, r4
34194768:	f7ff ff2a 	bl	341945c0 <checkint>
3419476c:	b920      	cbnz	r0, 34194778 <powf+0x188>
3419476e:	b003      	add	sp, #12
34194770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34194774:	f000 b8da 	b.w	3419492c <__math_invalidf>
34194778:	1e43      	subs	r3, r0, #1
3419477a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
3419477e:	4258      	negs	r0, r3
34194780:	4158      	adcs	r0, r3
34194782:	0400      	lsls	r0, r0, #16
34194784:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34194788:	f4bf af48 	bcs.w	3419461c <powf+0x2c>
3419478c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 341948a4 <powf+0x2b4>
34194790:	ee27 0aa6 	vmul.f32	s0, s15, s13
34194794:	ee10 3a10 	vmov	r3, s0
34194798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3419479c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
341947a0:	e73c      	b.n	3419461c <powf+0x2c>
341947a2:	2000      	movs	r0, #0
341947a4:	e7ee      	b.n	34194784 <powf+0x194>
341947a6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 34194888 <powf+0x298>
341947aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
341947ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341947b2:	dd45      	ble.n	34194840 <powf+0x250>
341947b4:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
341947b8:	b3d0      	cbz	r0, 34194830 <powf+0x240>
341947ba:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
341947be:	9301      	str	r3, [sp, #4]
341947c0:	eddd 6a01 	vldr	s13, [sp, #4]
341947c4:	ee76 6a66 	vsub.f32	s13, s12, s13
341947c8:	eef4 6a46 	vcmp.f32	s13, s12
341947cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341947d0:	f47f af6f 	bne.w	341946b2 <powf+0xc2>
341947d4:	4b34      	ldr	r3, [pc, #208]	@ (341948a8 <powf+0x2b8>)
341947d6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
341947da:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
341947de:	ee37 6b05 	vadd.f64	d6, d7, d5
341947e2:	ee16 2a10 	vmov	r2, s12
341947e6:	ee36 6b45 	vsub.f64	d6, d6, d5
341947ea:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
341947ee:	ee37 7b46 	vsub.f64	d7, d7, d6
341947f2:	f002 011f 	and.w	r1, r2, #31
341947f6:	1880      	adds	r0, r0, r2
341947f8:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
341947fc:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
34194800:	ee27 4b07 	vmul.f64	d4, d7, d7
34194804:	2100      	movs	r1, #0
34194806:	686d      	ldr	r5, [r5, #4]
34194808:	190a      	adds	r2, r1, r4
3419480a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
3419480e:	eea7 6b05 	vfma.f64	d6, d7, d5
34194812:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
34194816:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
3419481a:	eea7 0b05 	vfma.f64	d0, d7, d5
3419481e:	ec43 2b17 	vmov	d7, r2, r3
34194822:	eea6 0b04 	vfma.f64	d0, d6, d4
34194826:	ee20 0b07 	vmul.f64	d0, d0, d7
3419482a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
3419482e:	e757      	b.n	341946e0 <powf+0xf0>
34194830:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
34194834:	9300      	str	r3, [sp, #0]
34194836:	eddd 6a00 	vldr	s13, [sp]
3419483a:	ee76 6a86 	vadd.f32	s13, s13, s12
3419483e:	e7c3      	b.n	341947c8 <powf+0x1d8>
34194840:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 34194890 <powf+0x2a0>
34194844:	eeb4 7bc6 	vcmpe.f64	d7, d6
34194848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419484c:	d804      	bhi.n	34194858 <powf+0x268>
3419484e:	b003      	add	sp, #12
34194850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34194854:	f000 b846 	b.w	341948e4 <__math_uflowf>
34194858:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 34194898 <powf+0x2a8>
3419485c:	eeb4 7bc6 	vcmpe.f64	d7, d6
34194860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194864:	d5b6      	bpl.n	341947d4 <powf+0x1e4>
34194866:	b003      	add	sp, #12
34194868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3419486c:	f000 b840 	b.w	341948f0 <__math_may_uflowf>
34194870:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34194874:	e734      	b.n	341946e0 <powf+0xf0>
34194876:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 341948ac <powf+0x2bc>
3419487a:	e731      	b.n	341946e0 <powf+0xf0>
3419487c:	f3af 8000 	nop.w
34194880:	ffd1d571 	.word	0xffd1d571
34194884:	405fffff 	.word	0x405fffff
34194888:	ffa3aae2 	.word	0xffa3aae2
3419488c:	405fffff 	.word	0x405fffff
34194890:	00000000 	.word	0x00000000
34194894:	c062c000 	.word	0xc062c000
34194898:	00000000 	.word	0x00000000
3419489c:	c062a000 	.word	0xc062a000
341948a0:	34198110 	.word	0x34198110
341948a4:	4b000000 	.word	0x4b000000
341948a8:	34197fc8 	.word	0x34197fc8
341948ac:	00000000 	.word	0x00000000

341948b0 <with_errnof>:
341948b0:	b510      	push	{r4, lr}
341948b2:	ed2d 8b02 	vpush	{d8}
341948b6:	eeb0 8a40 	vmov.f32	s16, s0
341948ba:	4604      	mov	r4, r0
341948bc:	f7fe fcc0 	bl	34193240 <__errno>
341948c0:	6004      	str	r4, [r0, #0]
341948c2:	eeb0 0a48 	vmov.f32	s0, s16
341948c6:	ecbd 8b02 	vpop	{d8}
341948ca:	bd10      	pop	{r4, pc}

341948cc <xflowf>:
341948cc:	b130      	cbz	r0, 341948dc <xflowf+0x10>
341948ce:	eef1 7a40 	vneg.f32	s15, s0
341948d2:	ee27 0a80 	vmul.f32	s0, s15, s0
341948d6:	2022      	movs	r0, #34	@ 0x22
341948d8:	f7ff bfea 	b.w	341948b0 <with_errnof>
341948dc:	eef0 7a40 	vmov.f32	s15, s0
341948e0:	e7f7      	b.n	341948d2 <xflowf+0x6>
	...

341948e4 <__math_uflowf>:
341948e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 341948ec <__math_uflowf+0x8>
341948e8:	f7ff bff0 	b.w	341948cc <xflowf>
341948ec:	10000000 	.word	0x10000000

341948f0 <__math_may_uflowf>:
341948f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 341948f8 <__math_may_uflowf+0x8>
341948f4:	f7ff bfea 	b.w	341948cc <xflowf>
341948f8:	1a200000 	.word	0x1a200000

341948fc <__math_oflowf>:
341948fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34194904 <__math_oflowf+0x8>
34194900:	f7ff bfe4 	b.w	341948cc <xflowf>
34194904:	70000000 	.word	0x70000000

34194908 <__math_divzerof>:
34194908:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3419490c:	2800      	cmp	r0, #0
3419490e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
34194912:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 34194928 <__math_divzerof+0x20>
34194916:	f04f 0022 	mov.w	r0, #34	@ 0x22
3419491a:	fe47 7a87 	vseleq.f32	s15, s15, s14
3419491e:	ee87 0a80 	vdiv.f32	s0, s15, s0
34194922:	f7ff bfc5 	b.w	341948b0 <with_errnof>
34194926:	bf00      	nop
34194928:	00000000 	.word	0x00000000

3419492c <__math_invalidf>:
3419492c:	eef0 7a40 	vmov.f32	s15, s0
34194930:	ee30 7a40 	vsub.f32	s14, s0, s0
34194934:	eef4 7a67 	vcmp.f32	s15, s15
34194938:	ee87 0a07 	vdiv.f32	s0, s14, s14
3419493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194940:	d602      	bvs.n	34194948 <__math_invalidf+0x1c>
34194942:	2021      	movs	r0, #33	@ 0x21
34194944:	f7ff bfb4 	b.w	341948b0 <with_errnof>
34194948:	4770      	bx	lr

3419494a <__ieee754_sqrt>:
3419494a:	eeb1 0bc0 	vsqrt.f64	d0, d0
3419494e:	4770      	bx	lr

34194950 <__ieee754_log10>:
34194950:	ee10 3a90 	vmov	r3, s1
34194954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34194958:	b510      	push	{r4, lr}
3419495a:	ed2d 8b02 	vpush	{d8}
3419495e:	da21      	bge.n	341949a4 <__ieee754_log10+0x54>
34194960:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
34194964:	ee10 1a10 	vmov	r1, s0
34194968:	430a      	orrs	r2, r1
3419496a:	d108      	bne.n	3419497e <__ieee754_log10+0x2e>
3419496c:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 341949f8 <__ieee754_log10+0xa8>
34194970:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 34194a00 <__ieee754_log10+0xb0>
34194974:	ee86 0b07 	vdiv.f64	d0, d6, d7
34194978:	ecbd 8b02 	vpop	{d8}
3419497c:	bd10      	pop	{r4, pc}
3419497e:	2b00      	cmp	r3, #0
34194980:	da02      	bge.n	34194988 <__ieee754_log10+0x38>
34194982:	ee30 6b40 	vsub.f64	d6, d0, d0
34194986:	e7f3      	b.n	34194970 <__ieee754_log10+0x20>
34194988:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 34194a08 <__ieee754_log10+0xb8>
3419498c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
34194990:	ee20 0b07 	vmul.f64	d0, d0, d7
34194994:	ee10 3a90 	vmov	r3, s1
34194998:	4923      	ldr	r1, [pc, #140]	@ (34194a28 <__ieee754_log10+0xd8>)
3419499a:	428b      	cmp	r3, r1
3419499c:	dd04      	ble.n	341949a8 <__ieee754_log10+0x58>
3419499e:	ee30 0b00 	vadd.f64	d0, d0, d0
341949a2:	e7e9      	b.n	34194978 <__ieee754_log10+0x28>
341949a4:	2200      	movs	r2, #0
341949a6:	e7f7      	b.n	34194998 <__ieee754_log10+0x48>
341949a8:	1518      	asrs	r0, r3, #20
341949aa:	f240 34ff 	movw	r4, #1023	@ 0x3ff
341949ae:	f3c3 0113 	ubfx	r1, r3, #0, #20
341949b2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
341949b6:	4410      	add	r0, r2
341949b8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
341949bc:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
341949c0:	ee08 3a10 	vmov	s16, r3
341949c4:	ec53 2b10 	vmov	r2, r3, d0
341949c8:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
341949cc:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
341949d0:	ec43 2b10 	vmov	d0, r2, r3
341949d4:	f000 f8a4 	bl	34194b20 <log>
341949d8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34194a10 <__ieee754_log10+0xc0>
341949dc:	ee20 0b07 	vmul.f64	d0, d0, d7
341949e0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34194a18 <__ieee754_log10+0xc8>
341949e4:	eea8 0b07 	vfma.f64	d0, d8, d7
341949e8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34194a20 <__ieee754_log10+0xd0>
341949ec:	eea8 0b07 	vfma.f64	d0, d8, d7
341949f0:	e7c2      	b.n	34194978 <__ieee754_log10+0x28>
341949f2:	bf00      	nop
341949f4:	f3af 8000 	nop.w
341949f8:	00000000 	.word	0x00000000
341949fc:	c3500000 	.word	0xc3500000
	...
34194a0c:	43500000 	.word	0x43500000
34194a10:	1526e50e 	.word	0x1526e50e
34194a14:	3fdbcb7b 	.word	0x3fdbcb7b
34194a18:	11f12b36 	.word	0x11f12b36
34194a1c:	3d59fef3 	.word	0x3d59fef3
34194a20:	509f6000 	.word	0x509f6000
34194a24:	3fd34413 	.word	0x3fd34413
34194a28:	7fefffff 	.word	0x7fefffff

34194a2c <with_errno>:
34194a2c:	b510      	push	{r4, lr}
34194a2e:	ed2d 8b02 	vpush	{d8}
34194a32:	eeb0 8b40 	vmov.f64	d8, d0
34194a36:	4604      	mov	r4, r0
34194a38:	f7fe fc02 	bl	34193240 <__errno>
34194a3c:	6004      	str	r4, [r0, #0]
34194a3e:	eeb0 0b48 	vmov.f64	d0, d8
34194a42:	ecbd 8b02 	vpop	{d8}
34194a46:	bd10      	pop	{r4, pc}

34194a48 <xflow>:
34194a48:	b082      	sub	sp, #8
34194a4a:	b158      	cbz	r0, 34194a64 <xflow+0x1c>
34194a4c:	eeb1 7b40 	vneg.f64	d7, d0
34194a50:	2022      	movs	r0, #34	@ 0x22
34194a52:	ed8d 7b00 	vstr	d7, [sp]
34194a56:	ed9d 7b00 	vldr	d7, [sp]
34194a5a:	ee20 0b07 	vmul.f64	d0, d0, d7
34194a5e:	b002      	add	sp, #8
34194a60:	f7ff bfe4 	b.w	34194a2c <with_errno>
34194a64:	eeb0 7b40 	vmov.f64	d7, d0
34194a68:	e7f2      	b.n	34194a50 <xflow+0x8>
34194a6a:	0000      	movs	r0, r0
34194a6c:	0000      	movs	r0, r0
	...

34194a70 <__math_uflow>:
34194a70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34194a78 <__math_uflow+0x8>
34194a74:	f7ff bfe8 	b.w	34194a48 <xflow>
34194a78:	00000000 	.word	0x00000000
34194a7c:	10000000 	.word	0x10000000

34194a80 <__math_oflow>:
34194a80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34194a88 <__math_oflow+0x8>
34194a84:	f7ff bfe0 	b.w	34194a48 <xflow>
34194a88:	00000000 	.word	0x00000000
34194a8c:	70000000 	.word	0x70000000

34194a90 <__math_divzero>:
34194a90:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
34194a94:	b082      	sub	sp, #8
34194a96:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
34194a9a:	2800      	cmp	r0, #0
34194a9c:	f04f 0022 	mov.w	r0, #34	@ 0x22
34194aa0:	fe07 7b06 	vseleq.f64	d7, d7, d6
34194aa4:	ed8d 7b00 	vstr	d7, [sp]
34194aa8:	ed9d 0b00 	vldr	d0, [sp]
34194aac:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 34194ac0 <__math_divzero+0x30>
34194ab0:	ee80 0b07 	vdiv.f64	d0, d0, d7
34194ab4:	b002      	add	sp, #8
34194ab6:	f7ff bfb9 	b.w	34194a2c <with_errno>
34194aba:	bf00      	nop
34194abc:	f3af 8000 	nop.w
	...

34194ac8 <__math_invalid>:
34194ac8:	eeb0 7b40 	vmov.f64	d7, d0
34194acc:	ee30 6b40 	vsub.f64	d6, d0, d0
34194ad0:	eeb4 7b47 	vcmp.f64	d7, d7
34194ad4:	ee86 0b06 	vdiv.f64	d0, d6, d6
34194ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194adc:	d602      	bvs.n	34194ae4 <__math_invalid+0x1c>
34194ade:	2021      	movs	r0, #33	@ 0x21
34194ae0:	f7ff bfa4 	b.w	34194a2c <with_errno>
34194ae4:	4770      	bx	lr

34194ae6 <__math_check_uflow>:
34194ae6:	eeb5 0b40 	vcmp.f64	d0, #0.0
34194aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194aee:	d102      	bne.n	34194af6 <__math_check_uflow+0x10>
34194af0:	2022      	movs	r0, #34	@ 0x22
34194af2:	f7ff bf9b 	b.w	34194a2c <with_errno>
34194af6:	4770      	bx	lr

34194af8 <__math_check_oflow>:
34194af8:	eeb0 7bc0 	vabs.f64	d7, d0
34194afc:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 34194b18 <__math_check_oflow+0x20>
34194b00:	eeb4 7b46 	vcmp.f64	d7, d6
34194b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34194b08:	dd02      	ble.n	34194b10 <__math_check_oflow+0x18>
34194b0a:	2022      	movs	r0, #34	@ 0x22
34194b0c:	f7ff bf8e 	b.w	34194a2c <with_errno>
34194b10:	4770      	bx	lr
34194b12:	bf00      	nop
34194b14:	f3af 8000 	nop.w
34194b18:	ffffffff 	.word	0xffffffff
34194b1c:	7fefffff 	.word	0x7fefffff

34194b20 <log>:
34194b20:	ee10 0a90 	vmov	r0, s1
34194b24:	ee10 3a10 	vmov	r3, s0
34194b28:	b4f0      	push	{r4, r5, r6, r7}
34194b2a:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
34194b2e:	f04f 34ff 	mov.w	r4, #4294967295
34194b32:	0c02      	lsrs	r2, r0, #16
34194b34:	429c      	cmp	r4, r3
34194b36:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
34194b3a:	4c71      	ldr	r4, [pc, #452]	@ (34194d00 <log+0x1e0>)
34194b3c:	418c      	sbcs	r4, r1
34194b3e:	ed2d 8b02 	vpush	{d8}
34194b42:	d35a      	bcc.n	34194bfa <log+0xda>
34194b44:	4a6f      	ldr	r2, [pc, #444]	@ (34194d04 <log+0x1e4>)
34194b46:	4290      	cmp	r0, r2
34194b48:	bf08      	it	eq
34194b4a:	2b00      	cmpeq	r3, #0
34194b4c:	f000 80c7 	beq.w	34194cde <log+0x1be>
34194b50:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
34194b54:	4b6c      	ldr	r3, [pc, #432]	@ (34194d08 <log+0x1e8>)
34194b56:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
34194b5a:	ee30 0b47 	vsub.f64	d0, d0, d7
34194b5e:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
34194b62:	ee20 2b00 	vmul.f64	d2, d0, d0
34194b66:	eea6 7b00 	vfma.f64	d7, d6, d0
34194b6a:	ee20 4b02 	vmul.f64	d4, d0, d2
34194b6e:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
34194b72:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
34194b76:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
34194b7a:	eea6 7b02 	vfma.f64	d7, d6, d2
34194b7e:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
34194b82:	eea5 6b00 	vfma.f64	d6, d5, d0
34194b86:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
34194b8a:	eea5 6b02 	vfma.f64	d6, d5, d2
34194b8e:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
34194b92:	eea3 5b00 	vfma.f64	d5, d3, d0
34194b96:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
34194b9a:	eea3 5b02 	vfma.f64	d5, d3, d2
34194b9e:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
34194ba2:	eea3 5b04 	vfma.f64	d5, d3, d4
34194ba6:	eeb0 3b40 	vmov.f64	d3, d0
34194baa:	eea5 6b04 	vfma.f64	d6, d5, d4
34194bae:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
34194bb2:	eea6 7b04 	vfma.f64	d7, d6, d4
34194bb6:	eeb0 6b40 	vmov.f64	d6, d0
34194bba:	eeb0 2b47 	vmov.f64	d2, d7
34194bbe:	ed9f 7b4a 	vldr	d7, [pc, #296]	@ 34194ce8 <log+0x1c8>
34194bc2:	eea0 6b07 	vfma.f64	d6, d0, d7
34194bc6:	eea0 6b47 	vfms.f64	d6, d0, d7
34194bca:	ee26 1b06 	vmul.f64	d1, d6, d6
34194bce:	ee30 8b46 	vsub.f64	d8, d0, d6
34194bd2:	eea1 3b05 	vfma.f64	d3, d1, d5
34194bd6:	ee30 7b43 	vsub.f64	d7, d0, d3
34194bda:	ee30 0b06 	vadd.f64	d0, d0, d6
34194bde:	eea1 7b05 	vfma.f64	d7, d1, d5
34194be2:	ee25 5b08 	vmul.f64	d5, d5, d8
34194be6:	eea5 7b00 	vfma.f64	d7, d5, d0
34194bea:	eea2 7b04 	vfma.f64	d7, d2, d4
34194bee:	ee33 0b07 	vadd.f64	d0, d3, d7
34194bf2:	ecbd 8b02 	vpop	{d8}
34194bf6:	bcf0      	pop	{r4, r5, r6, r7}
34194bf8:	4770      	bx	lr
34194bfa:	f1a2 0410 	sub.w	r4, r2, #16
34194bfe:	f647 71df 	movw	r1, #32735	@ 0x7fdf
34194c02:	428c      	cmp	r4, r1
34194c04:	d923      	bls.n	34194c4e <log+0x12e>
34194c06:	18d9      	adds	r1, r3, r3
34194c08:	eb40 0400 	adc.w	r4, r0, r0
34194c0c:	4321      	orrs	r1, r4
34194c0e:	d105      	bne.n	34194c1c <log+0xfc>
34194c10:	2001      	movs	r0, #1
34194c12:	ecbd 8b02 	vpop	{d8}
34194c16:	bcf0      	pop	{r4, r5, r6, r7}
34194c18:	f7ff bf3a 	b.w	34194a90 <__math_divzero>
34194c1c:	493b      	ldr	r1, [pc, #236]	@ (34194d0c <log+0x1ec>)
34194c1e:	4288      	cmp	r0, r1
34194c20:	bf08      	it	eq
34194c22:	2b00      	cmpeq	r3, #0
34194c24:	d0e5      	beq.n	34194bf2 <log+0xd2>
34194c26:	0413      	lsls	r3, r2, #16
34194c28:	d403      	bmi.n	34194c32 <log+0x112>
34194c2a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
34194c2e:	4393      	bics	r3, r2
34194c30:	d104      	bne.n	34194c3c <log+0x11c>
34194c32:	ecbd 8b02 	vpop	{d8}
34194c36:	bcf0      	pop	{r4, r5, r6, r7}
34194c38:	f7ff bf46 	b.w	34194ac8 <__math_invalid>
34194c3c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 34194cf0 <log+0x1d0>
34194c40:	ee20 7b07 	vmul.f64	d7, d0, d7
34194c44:	ec53 2b17 	vmov	r2, r3, d7
34194c48:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
34194c4c:	4613      	mov	r3, r2
34194c4e:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
34194c52:	492d      	ldr	r1, [pc, #180]	@ (34194d08 <log+0x1e8>)
34194c54:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
34194c58:	1e1e      	subs	r6, r3, #0
34194c5a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
34194c5e:	f3c2 3446 	ubfx	r4, r2, #13, #7
34194c62:	ea4f 5c12 	mov.w	ip, r2, lsr #20
34194c66:	1512      	asrs	r2, r2, #20
34194c68:	eb01 1504 	add.w	r5, r1, r4, lsl #4
34194c6c:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
34194c70:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
34194c74:	eba0 070c 	sub.w	r7, r0, ip
34194c78:	ec47 6b16 	vmov	d6, r6, r7
34194c7c:	eea7 5b06 	vfma.f64	d5, d7, d6
34194c80:	ee07 2a90 	vmov	s15, r2
34194c84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
34194c88:	ed91 4b00 	vldr	d4, [r1]
34194c8c:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
34194c90:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
34194c94:	eea4 7b06 	vfma.f64	d7, d4, d6
34194c98:	ee25 2b05 	vmul.f64	d2, d5, d5
34194c9c:	ee35 4b07 	vadd.f64	d4, d5, d7
34194ca0:	ee25 1b02 	vmul.f64	d1, d5, d2
34194ca4:	ee37 0b44 	vsub.f64	d0, d7, d4
34194ca8:	ed91 7b02 	vldr	d7, [r1, #8]
34194cac:	ee30 0b05 	vadd.f64	d0, d0, d5
34194cb0:	eea7 0b06 	vfma.f64	d0, d7, d6
34194cb4:	ed91 7b04 	vldr	d7, [r1, #16]
34194cb8:	ed91 6b08 	vldr	d6, [r1, #32]
34194cbc:	eea7 0b02 	vfma.f64	d0, d7, d2
34194cc0:	ed91 7b06 	vldr	d7, [r1, #24]
34194cc4:	eea6 7b05 	vfma.f64	d7, d6, d5
34194cc8:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
34194ccc:	eea3 6b05 	vfma.f64	d6, d3, d5
34194cd0:	eea6 7b02 	vfma.f64	d7, d6, d2
34194cd4:	eea1 0b07 	vfma.f64	d0, d1, d7
34194cd8:	ee30 0b04 	vadd.f64	d0, d0, d4
34194cdc:	e789      	b.n	34194bf2 <log+0xd2>
34194cde:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 34194cf8 <log+0x1d8>
34194ce2:	e786      	b.n	34194bf2 <log+0xd2>
34194ce4:	f3af 8000 	nop.w
34194ce8:	00000000 	.word	0x00000000
34194cec:	41a00000 	.word	0x41a00000
34194cf0:	00000000 	.word	0x00000000
34194cf4:	43300000 	.word	0x43300000
	...
34194d00:	000308ff 	.word	0x000308ff
34194d04:	3ff00000 	.word	0x3ff00000
34194d08:	34197738 	.word	0x34197738
34194d0c:	7ff00000 	.word	0x7ff00000

34194d10 <_init>:
34194d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34194d12:	bf00      	nop
34194d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
34194d16:	bc08      	pop	{r3}
34194d18:	469e      	mov	lr, r3
34194d1a:	4770      	bx	lr

34194d1c <_fini>:
34194d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34194d1e:	bf00      	nop
34194d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
34194d22:	bc08      	pop	{r3}
34194d24:	469e      	mov	lr, r3
34194d26:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

34198400 <SECURE_SystemCoreClockUpdate>:
34198400:	e97f e97f 	sg
34198404:	f7fa bbcc 	b.w	34192ba0 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
